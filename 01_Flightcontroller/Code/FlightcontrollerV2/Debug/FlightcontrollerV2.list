
FlightcontrollerV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081fc  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080083dc  080083dc  000183dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008410  08008410  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008410  08008410  00018410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008418  08008418  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008418  08008418  00018418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800841c  0800841c  0001841c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  2000000c  0800842c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000de0  0800842c  00020de0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee4b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000401a  00000000  00000000  0003ee87  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001968  00000000  00000000  00042ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001730  00000000  00000000  00044810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026bd4  00000000  00000000  00045f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000187dd  00000000  00000000  0006cb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e584b  00000000  00000000  000852f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016ab3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000683c  00000000  00000000  0016abb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080083c4 	.word	0x080083c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	080083c4 	.word	0x080083c4

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000526:	463b      	mov	r3, r7
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <MX_ADC1_Init+0x9c>)
 8000536:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000538:	4b1f      	ldr	r3, [pc, #124]	; (80005b8 <MX_ADC1_Init+0x98>)
 800053a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800053e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000540:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000542:	2200      	movs	r2, #0
 8000544:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000546:	4b1c      	ldr	r3, [pc, #112]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054c:	4b1a      	ldr	r3, [pc, #104]	; (80005b8 <MX_ADC1_Init+0x98>)
 800054e:	2200      	movs	r2, #0
 8000550:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000554:	2200      	movs	r2, #0
 8000556:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <MX_ADC1_Init+0x98>)
 800055c:	2200      	movs	r2, #0
 800055e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000560:	4b15      	ldr	r3, [pc, #84]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000562:	4a17      	ldr	r2, [pc, #92]	; (80005c0 <MX_ADC1_Init+0xa0>)
 8000564:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000568:	2200      	movs	r2, #0
 800056a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <MX_ADC1_Init+0x98>)
 800056e:	2201      	movs	r2, #1
 8000570:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000572:	4b11      	ldr	r3, [pc, #68]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000574:	2200      	movs	r2, #0
 8000576:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <MX_ADC1_Init+0x98>)
 800057c:	2201      	movs	r2, #1
 800057e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000580:	480d      	ldr	r0, [pc, #52]	; (80005b8 <MX_ADC1_Init+0x98>)
 8000582:	f001 fef1 	bl	8002368 <HAL_ADC_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800058c:	f000 fd5a 	bl	8001044 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000590:	2306      	movs	r3, #6
 8000592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000594:	2301      	movs	r3, #1
 8000596:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800059c:	463b      	mov	r3, r7
 800059e:	4619      	mov	r1, r3
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <MX_ADC1_Init+0x98>)
 80005a2:	f001 ff25 	bl	80023f0 <HAL_ADC_ConfigChannel>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005ac:	f000 fd4a 	bl	8001044 <Error_Handler>
  }

}
 80005b0:	bf00      	nop
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000034 	.word	0x20000034
 80005bc:	40012000 	.word	0x40012000
 80005c0:	0f000001 	.word	0x0f000001

080005c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a2c      	ldr	r2, [pc, #176]	; (8000694 <HAL_ADC_MspInit+0xd0>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d152      	bne.n	800068c <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005e6:	4b2c      	ldr	r3, [pc, #176]	; (8000698 <HAL_ADC_MspInit+0xd4>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a2b      	ldr	r2, [pc, #172]	; (8000698 <HAL_ADC_MspInit+0xd4>)
 80005ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44
 80005f2:	4b29      	ldr	r3, [pc, #164]	; (8000698 <HAL_ADC_MspInit+0xd4>)
 80005f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b26      	ldr	r3, [pc, #152]	; (8000698 <HAL_ADC_MspInit+0xd4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a25      	ldr	r2, [pc, #148]	; (8000698 <HAL_ADC_MspInit+0xd4>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b23      	ldr	r3, [pc, #140]	; (8000698 <HAL_ADC_MspInit+0xd4>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061a:	2303      	movs	r3, #3
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4619      	mov	r1, r3
 8000628:	481c      	ldr	r0, [pc, #112]	; (800069c <HAL_ADC_MspInit+0xd8>)
 800062a:	f002 fd99 	bl	8003160 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800062e:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000630:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <HAL_ADC_MspInit+0xe0>)
 8000632:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000634:	4b1a      	ldr	r3, [pc, #104]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000636:	2200      	movs	r2, #0
 8000638:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000648:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800064c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000654:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000656:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800065c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000660:	2200      	movs	r2, #0
 8000662:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000666:	2200      	movs	r2, #0
 8000668:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 800066c:	2200      	movs	r2, #0
 800066e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000672:	f002 fa6b 	bl	8002b4c <HAL_DMA_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 800067c:	f000 fce2 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4a07      	ldr	r2, [pc, #28]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000684:	639a      	str	r2, [r3, #56]	; 0x38
 8000686:	4a06      	ldr	r2, [pc, #24]	; (80006a0 <HAL_ADC_MspInit+0xdc>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40012000 	.word	0x40012000
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	2000007c 	.word	0x2000007c
 80006a4:	40026410 	.word	0x40026410

080006a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80006ae:	2300      	movs	r3, #0
 80006b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80006b2:	f000 f89e 	bl	80007f2 <BSP_SD_IsDetected>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d001      	beq.n	80006c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80006bc:	2302      	movs	r3, #2
 80006be:	e005      	b.n	80006cc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <BSP_SD_Init+0x2c>)
 80006c2:	f004 f861 	bl	8004788 <HAL_SD_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3708      	adds	r7, #8
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000248 	.word	0x20000248

080006d8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af02      	add	r7, sp, #8
 80006de:	60f8      	str	r0, [r7, #12]
 80006e0:	60b9      	str	r1, [r7, #8]
 80006e2:	607a      	str	r2, [r7, #4]
 80006e4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80006e6:	2300      	movs	r3, #0
 80006e8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	9300      	str	r3, [sp, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	68f9      	ldr	r1, [r7, #12]
 80006f4:	4806      	ldr	r0, [pc, #24]	; (8000710 <BSP_SD_ReadBlocks+0x38>)
 80006f6:	f004 f8d6 	bl	80048a6 <HAL_SD_ReadBlocks>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8000700:	2301      	movs	r3, #1
 8000702:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8000704:	7dfb      	ldrb	r3, [r7, #23]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3718      	adds	r7, #24
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000248 	.word	0x20000248

08000714 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af02      	add	r7, sp, #8
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	60b9      	str	r1, [r7, #8]
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8000722:	2300      	movs	r3, #0
 8000724:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	68ba      	ldr	r2, [r7, #8]
 800072e:	68f9      	ldr	r1, [r7, #12]
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <BSP_SD_WriteBlocks+0x38>)
 8000732:	f004 fa4e 	bl	8004bd2 <HAL_SD_WriteBlocks>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800073c:	2301      	movs	r3, #1
 800073e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;  
 8000740:	7dfb      	ldrb	r3, [r7, #23]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000248 	.word	0x20000248

08000750 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8000754:	4805      	ldr	r0, [pc, #20]	; (800076c <BSP_SD_GetCardState+0x1c>)
 8000756:	f004 ff55 	bl	8005604 <HAL_SD_GetCardState>
 800075a:	4603      	mov	r3, r0
 800075c:	2b04      	cmp	r3, #4
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
}
 8000766:	4618      	mov	r0, r3
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000248 	.word	0x20000248

08000770 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8000778:	6879      	ldr	r1, [r7, #4]
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <BSP_SD_GetCardInfo+0x18>)
 800077c:	f004 ff16 	bl	80055ac <HAL_SD_GetCardInfo>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000248 	.word	0x20000248

0800078c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8000794:	f000 f818 	bl	80007c8 <BSP_SD_AbortCallback>
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80007a8:	f000 f815 	bl	80007d6 <BSP_SD_WriteCpltCallback>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80007bc:	f000 f812 	bl	80007e4 <BSP_SD_ReadCpltCallback>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <BSP_SD_AbortCallback>:
/**
  * @brief BSP SD Abort callback
  * @retval None
  */
__weak void BSP_SD_AbortCallback(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0

}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <BSP_SD_WriteCpltCallback>:
/**
  * @brief BSP Tx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0

}
 80007da:	bf00      	nop
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <BSP_SD_ReadCpltCallback>:
/**
  * @brief BSP Rx Transfer completed callback
  * @retval None
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr

080007f2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80007f8:	2301      	movs	r3, #1
 80007fa:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80007fc:	f007 fc60 	bl	80080c0 <BSP_PlatformIsDetected>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d101      	bne.n	800080a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8000806:	2300      	movs	r3, #0
 8000808:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	b2db      	uxtb	r3, r3
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800081e:	463b      	mov	r3, r7
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8000826:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_DAC_Init+0x4c>)
 8000828:	4a0f      	ldr	r2, [pc, #60]	; (8000868 <MX_DAC_Init+0x50>)
 800082a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_DAC_Init+0x4c>)
 800082e:	f002 f91e 	bl	8002a6e <HAL_DAC_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000838:	f000 fc04 	bl	8001044 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800083c:	2304      	movs	r3, #4
 800083e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000844:	463b      	mov	r3, r7
 8000846:	2210      	movs	r2, #16
 8000848:	4619      	mov	r1, r3
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <MX_DAC_Init+0x4c>)
 800084c:	f002 f931 	bl	8002ab2 <HAL_DAC_ConfigChannel>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000856:	f000 fbf5 	bl	8001044 <Error_Handler>
  }

}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200000dc 	.word	0x200000dc
 8000868:	40007400 	.word	0x40007400

0800086c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08a      	sub	sp, #40	; 0x28
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a2c      	ldr	r2, [pc, #176]	; (800093c <HAL_DAC_MspInit+0xd0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d152      	bne.n	8000934 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <HAL_DAC_MspInit+0xd4>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <HAL_DAC_MspInit+0xd4>)
 8000894:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <HAL_DAC_MspInit+0xd4>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b26      	ldr	r3, [pc, #152]	; (8000940 <HAL_DAC_MspInit+0xd4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a25      	ldr	r2, [pc, #148]	; (8000940 <HAL_DAC_MspInit+0xd4>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <HAL_DAC_MspInit+0xd4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008be:	2320      	movs	r3, #32
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008c2:	2303      	movs	r3, #3
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	4619      	mov	r1, r3
 80008d0:	481c      	ldr	r0, [pc, #112]	; (8000944 <HAL_DAC_MspInit+0xd8>)
 80008d2:	f002 fc45 	bl	8003160 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 80008d8:	4a1c      	ldr	r2, [pc, #112]	; (800094c <HAL_DAC_MspInit+0xe0>)
 80008da:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80008dc:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 80008de:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80008e2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 80008e6:	2240      	movs	r2, #64	; 0x40
 80008e8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b15      	ldr	r3, [pc, #84]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 8000906:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090a:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000918:	480b      	ldr	r0, [pc, #44]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 800091a:	f002 f917 	bl	8002b4c <HAL_DMA_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <HAL_DAC_MspInit+0xbc>
    {
      Error_Handler();
 8000924:	f000 fb8e 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a07      	ldr	r2, [pc, #28]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	4a06      	ldr	r2, [pc, #24]	; (8000948 <HAL_DAC_MspInit+0xdc>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40007400 	.word	0x40007400
 8000940:	40023800 	.word	0x40023800
 8000944:	40020000 	.word	0x40020000
 8000948:	200000f0 	.word	0x200000f0
 800094c:	400260a0 	.word	0x400260a0

08000950 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000956:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <MX_DMA_Init+0x100>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a3d      	ldr	r2, [pc, #244]	; (8000a50 <MX_DMA_Init+0x100>)
 800095c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b3b      	ldr	r3, [pc, #236]	; (8000a50 <MX_DMA_Init+0x100>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800096e:	4b38      	ldr	r3, [pc, #224]	; (8000a50 <MX_DMA_Init+0x100>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a37      	ldr	r2, [pc, #220]	; (8000a50 <MX_DMA_Init+0x100>)
 8000974:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b35      	ldr	r3, [pc, #212]	; (8000a50 <MX_DMA_Init+0x100>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200c      	movs	r0, #12
 800098c:	f002 f839 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000990:	200c      	movs	r0, #12
 8000992:	f002 f852 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2100      	movs	r1, #0
 800099a:	200d      	movs	r0, #13
 800099c:	f002 f831 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80009a0:	200d      	movs	r0, #13
 80009a2:	f002 f84a 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	200e      	movs	r0, #14
 80009ac:	f002 f829 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80009b0:	200e      	movs	r0, #14
 80009b2:	f002 f842 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	200f      	movs	r0, #15
 80009bc:	f002 f821 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80009c0:	200f      	movs	r0, #15
 80009c2:	f002 f83a 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2010      	movs	r0, #16
 80009cc:	f002 f819 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009d0:	2010      	movs	r0, #16
 80009d2:	f002 f832 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2100      	movs	r1, #0
 80009da:	2011      	movs	r0, #17
 80009dc:	f002 f811 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009e0:	2011      	movs	r0, #17
 80009e2:	f002 f82a 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	202f      	movs	r0, #47	; 0x2f
 80009ec:	f002 f809 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80009f0:	202f      	movs	r0, #47	; 0x2f
 80009f2:	f002 f822 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2038      	movs	r0, #56	; 0x38
 80009fc:	f002 f801 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a00:	2038      	movs	r0, #56	; 0x38
 8000a02:	f002 f81a 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2100      	movs	r1, #0
 8000a0a:	203a      	movs	r0, #58	; 0x3a
 8000a0c:	f001 fff9 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a10:	203a      	movs	r0, #58	; 0x3a
 8000a12:	f002 f812 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2100      	movs	r1, #0
 8000a1a:	203b      	movs	r0, #59	; 0x3b
 8000a1c:	f001 fff1 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a20:	203b      	movs	r0, #59	; 0x3b
 8000a22:	f002 f80a 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2045      	movs	r0, #69	; 0x45
 8000a2c:	f001 ffe9 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000a30:	2045      	movs	r0, #69	; 0x45
 8000a32:	f002 f802 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2046      	movs	r0, #70	; 0x46
 8000a3c:	f001 ffe1 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000a40:	2046      	movs	r0, #70	; 0x46
 8000a42:	f001 fffa 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6a:	4b68      	ldr	r3, [pc, #416]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a67      	ldr	r2, [pc, #412]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000a70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b65      	ldr	r3, [pc, #404]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a7e:	613b      	str	r3, [r7, #16]
 8000a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b62      	ldr	r3, [pc, #392]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a61      	ldr	r2, [pc, #388]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b5f      	ldr	r3, [pc, #380]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9a:	4b5c      	ldr	r3, [pc, #368]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a5b      	ldr	r2, [pc, #364]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b59      	ldr	r3, [pc, #356]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b56      	ldr	r3, [pc, #344]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a55      	ldr	r2, [pc, #340]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b53      	ldr	r3, [pc, #332]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aca:	4b50      	ldr	r3, [pc, #320]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a4f      	ldr	r2, [pc, #316]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b4d      	ldr	r3, [pc, #308]	; (8000c0c <MX_GPIO_Init+0x1b8>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	603b      	str	r3, [r7, #0]
 8000ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	484a      	ldr	r0, [pc, #296]	; (8000c10 <MX_GPIO_Init+0x1bc>)
 8000ae8:	f002 fcec 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INIT_OK_Pin|LLVOE_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 6108 	mov.w	r1, #2176	; 0x880
 8000af2:	4847      	ldr	r0, [pc, #284]	; (8000c10 <MX_GPIO_Init+0x1bc>)
 8000af4:	f002 fce6 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOD0_LED_Pin|CE_Pin, GPIO_PIN_RESET);
 8000af8:	2200      	movs	r2, #0
 8000afa:	2150      	movs	r1, #80	; 0x50
 8000afc:	4845      	ldr	r0, [pc, #276]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000afe:	f002 fce1 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOD1_LED_GPIO_Port, MOD1_LED_Pin, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2102      	movs	r1, #2
 8000b06:	4844      	ldr	r0, [pc, #272]	; (8000c18 <MX_GPIO_Init+0x1c4>)
 8000b08:	f002 fcdc 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF24_NSS_GPIO_Port, RF24_NSS_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b12:	4841      	ldr	r0, [pc, #260]	; (8000c18 <MX_GPIO_Init+0x1c4>)
 8000b14:	f002 fcd6 	bl	80034c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_NSS_Pin;
 8000b18:	2310      	movs	r3, #16
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IMU_NSS_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4838      	ldr	r0, [pc, #224]	; (8000c10 <MX_GPIO_Init+0x1bc>)
 8000b30:	f002 fb16 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INIT_OK_Pin|LLVOE_Pin;
 8000b34:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4830      	ldr	r0, [pc, #192]	; (8000c10 <MX_GPIO_Init+0x1bc>)
 8000b4e:	f002 fb07 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MOD0_LED_Pin|CE_Pin;
 8000b52:	2350      	movs	r3, #80	; 0x50
 8000b54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	482a      	ldr	r0, [pc, #168]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000b6a:	f002 faf9 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOD1_LED_Pin;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MOD1_LED_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4824      	ldr	r0, [pc, #144]	; (8000c18 <MX_GPIO_Init+0x1c4>)
 8000b86:	f002 faeb 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF24_NSS_Pin;
 8000b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF24_NSS_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481d      	ldr	r0, [pc, #116]	; (8000c18 <MX_GPIO_Init+0x1c4>)
 8000ba4:	f002 fadc 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
 8000ba8:	2380      	movs	r3, #128	; 0x80
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_GPIO_Init+0x1c8>)
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4816      	ldr	r0, [pc, #88]	; (8000c14 <MX_GPIO_Init+0x1c0>)
 8000bbc:	f002 fad0 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USBOSD_Pin;
 8000bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USBOSD_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480e      	ldr	r0, [pc, #56]	; (8000c10 <MX_GPIO_Init+0x1bc>)
 8000bd6:	f002 fac3 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTA_Pin;
 8000bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_GPIO_Init+0x1c8>)
 8000be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INTA_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	480a      	ldr	r0, [pc, #40]	; (8000c18 <MX_GPIO_Init+0x1c4>)
 8000bf0:	f002 fab6 	bl	8003160 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2017      	movs	r0, #23
 8000bfa:	f001 ff02 	bl	8002a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bfe:	2017      	movs	r0, #23
 8000c00:	f001 ff1b 	bl	8002a3a <HAL_NVIC_EnableIRQ>

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020000 	.word	0x40020000
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020400 	.word	0x40020400
 8000c1c:	10110000 	.word	0x10110000

08000c20 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c24:	4b1b      	ldr	r3, [pc, #108]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c26:	4a1c      	ldr	r2, [pc, #112]	; (8000c98 <MX_I2C1_Init+0x78>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <MX_I2C1_Init+0x7c>)
 8000c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c5a:	480e      	ldr	r0, [pc, #56]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c5c:	f002 fc70 	bl	8003540 <HAL_I2C_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c66:	f000 f9ed 	bl	8001044 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c6e:	f002 fcf7 	bl	8003660 <HAL_I2CEx_ConfigAnalogFilter>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c78:	f000 f9e4 	bl	8001044 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_I2C1_Init+0x74>)
 8000c80:	f002 fd39 	bl	80036f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c8a:	f000 f9db 	bl	8001044 <Error_Handler>
  }

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	200001fc 	.word	0x200001fc
 8000c98:	40005400 	.word	0x40005400
 8000c9c:	20404768 	.word	0x20404768

08000ca0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <MX_I2C3_Init+0x78>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <MX_I2C3_Init+0x7c>)
 8000cae:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000cb0:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cbc:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000cda:	480e      	ldr	r0, [pc, #56]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cdc:	f002 fc30 	bl	8003540 <HAL_I2C_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000ce6:	f000 f9ad 	bl	8001044 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cea:	2100      	movs	r1, #0
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000cee:	f002 fcb7 	bl	8003660 <HAL_I2CEx_ConfigAnalogFilter>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000cf8:	f000 f9a4 	bl	8001044 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_I2C3_Init+0x74>)
 8000d00:	f002 fcf9 	bl	80036f6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000d0a:	f000 f99b 	bl	8001044 <Error_Handler>
  }

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000150 	.word	0x20000150
 8000d18:	40005c00 	.word	0x40005c00
 8000d1c:	20404768 	.word	0x20404768

08000d20 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a54      	ldr	r2, [pc, #336]	; (8000e90 <HAL_I2C_MspInit+0x170>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d128      	bne.n	8000d94 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d42:	4b54      	ldr	r3, [pc, #336]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	4a53      	ldr	r2, [pc, #332]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000d48:	f043 0302 	orr.w	r3, r3, #2
 8000d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4e:	4b51      	ldr	r3, [pc, #324]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	f003 0302 	and.w	r3, r3, #2
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = IMU2_SCL_Pin|IMU2_SDA_Pin;
 8000d5a:	23c0      	movs	r3, #192	; 0xc0
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5e:	2312      	movs	r3, #18
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6a:	2304      	movs	r3, #4
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 031c 	add.w	r3, r7, #28
 8000d72:	4619      	mov	r1, r3
 8000d74:	4848      	ldr	r0, [pc, #288]	; (8000e98 <HAL_I2C_MspInit+0x178>)
 8000d76:	f002 f9f3 	bl	8003160 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7a:	4b46      	ldr	r3, [pc, #280]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000d80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8e:	617b      	str	r3, [r7, #20]
 8000d90:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000d92:	e078      	b.n	8000e86 <HAL_I2C_MspInit+0x166>
  else if(i2cHandle->Instance==I2C3)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a40      	ldr	r2, [pc, #256]	; (8000e9c <HAL_I2C_MspInit+0x17c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d173      	bne.n	8000e86 <HAL_I2C_MspInit+0x166>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d9e:	4b3d      	ldr	r3, [pc, #244]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a3c      	ldr	r2, [pc, #240]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000da4:	f043 0304 	orr.w	r3, r3, #4
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b3a      	ldr	r3, [pc, #232]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b37      	ldr	r3, [pc, #220]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a36      	ldr	r2, [pc, #216]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60fb      	str	r3, [r7, #12]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDU_SDA_Pin;
 8000dce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000de0:	2304      	movs	r3, #4
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDU_SDA_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	482d      	ldr	r0, [pc, #180]	; (8000ea0 <HAL_I2C_MspInit+0x180>)
 8000dec:	f002 f9b8 	bl	8003160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARDU_SCL_Pin;
 8000df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df6:	2312      	movs	r3, #18
 8000df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e02:	2304      	movs	r3, #4
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDU_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4825      	ldr	r0, [pc, #148]	; (8000ea4 <HAL_I2C_MspInit+0x184>)
 8000e0e:	f002 f9a7 	bl	8003160 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000e18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	; (8000e94 <HAL_I2C_MspInit+0x174>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8000e2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e2c:	4a1f      	ldr	r2, [pc, #124]	; (8000eac <HAL_I2C_MspInit+0x18c>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8000e30:	4b1d      	ldr	r3, [pc, #116]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8000e6a:	480f      	ldr	r0, [pc, #60]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e6c:	f001 fe6e 	bl	8002b4c <HAL_DMA_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <HAL_I2C_MspInit+0x15a>
      Error_Handler();
 8000e76:	f000 f8e5 	bl	8001044 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e80:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x188>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e86:	bf00      	nop
 8000e88:	3730      	adds	r7, #48	; 0x30
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40005400 	.word	0x40005400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40005c00 	.word	0x40005c00
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020000 	.word	0x40020000
 8000ea8:	2000019c 	.word	0x2000019c
 8000eac:	40026028 	.word	0x40026028

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f001 f9d9 	bl	800226a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f826 	bl	8000f08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f7ff fdca 	bl	8000a54 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec0:	f7ff fd46 	bl	8000950 <MX_DMA_Init>
  MX_I2C1_Init();
 8000ec4:	f7ff feac 	bl	8000c20 <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8000ec8:	f000 f8c4 	bl	8001054 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8000ecc:	f000 f9cc 	bl	8001268 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000ed0:	f001 f82e 	bl	8001f30 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ed4:	f001 f85c 	bl	8001f90 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000ed8:	f007 f8e0 	bl	800809c <MX_FATFS_Init>
  MX_I2C3_Init();
 8000edc:	f7ff fee0 	bl	8000ca0 <MX_I2C3_Init>
  MX_TIM2_Init();
 8000ee0:	f000 fcfa 	bl	80018d8 <MX_TIM2_Init>
  MX_DAC_Init();
 8000ee4:	f7ff fc98 	bl	8000818 <MX_DAC_Init>
  MX_SPI3_Init();
 8000ee8:	f000 f9fc 	bl	80012e4 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000eec:	f7ff fb18 	bl	8000520 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ef0:	f000 fd8a 	bl	8001a08 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000ef4:	f000 fe94 	bl	8001c20 <MX_TIM6_Init>
  MX_TIM4_Init();
 8000ef8:	f000 fdf6 	bl	8001ae8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000efc:	f000 fe42 	bl	8001b84 <MX_TIM5_Init>
  MX_TIM7_Init();
 8000f00:	f000 fec4 	bl	8001c8c <MX_TIM7_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <main+0x54>
	...

08000f08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0b4      	sub	sp, #208	; 0xd0
 8000f0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f12:	2230      	movs	r2, #48	; 0x30
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f007 fa4c 	bl	80083b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2280      	movs	r2, #128	; 0x80
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f007 fa3d 	bl	80083b4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <SystemClock_Config+0x130>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	4a3e      	ldr	r2, [pc, #248]	; (8001038 <SystemClock_Config+0x130>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6413      	str	r3, [r2, #64]	; 0x40
 8000f46:	4b3c      	ldr	r3, [pc, #240]	; (8001038 <SystemClock_Config+0x130>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f52:	4b3a      	ldr	r3, [pc, #232]	; (800103c <SystemClock_Config+0x134>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a39      	ldr	r2, [pc, #228]	; (800103c <SystemClock_Config+0x134>)
 8000f58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b37      	ldr	r3, [pc, #220]	; (800103c <SystemClock_Config+0x134>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f86:	2308      	movs	r3, #8
 8000f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000f8c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f9a:	2309      	movs	r3, #9
 8000f9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fc43 	bl	8003830 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000fb0:	f000 f848 	bl	8001044 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fb4:	f002 fbec 	bl	8003790 <HAL_PWREx_EnableOverDrive>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000fbe:	f000 f841 	bl	8001044 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fe4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000fe8:	2107      	movs	r1, #7
 8000fea:	4618      	mov	r0, r3
 8000fec:	f002 fe90 	bl	8003d10 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ff6:	f000 f825 	bl	8001044 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <SystemClock_Config+0x138>)
 8000ffc:	60fb      	str	r3, [r7, #12]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ffe:	2300      	movs	r3, #0
 8001000:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001002:	2300      	movs	r3, #0
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001006:	2300      	movs	r3, #0
 8001008:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800100a:	2300      	movs	r3, #0
 800100c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4618      	mov	r0, r3
 8001020:	f003 f86a 	bl	80040f8 <HAL_RCCEx_PeriphCLKConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x126>
  {
    Error_Handler();
 800102a:	f000 f80b 	bl	8001044 <Error_Handler>
  }
}
 800102e:	bf00      	nop
 8001030:	37d0      	adds	r7, #208	; 0xd0
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000
 8001040:	00a140c0 	.word	0x00a140c0

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_rx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  hsd1.Instance = SDMMC1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_SDMMC1_SD_Init+0x38>)
 800105a:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <MX_SDMMC1_SD_Init+0x3c>)
 800105c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_SDMMC1_SD_Init+0x38>)
 8001060:	2200      	movs	r2, #0
 8001062:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_SDMMC1_SD_Init+0x38>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_SDMMC1_SD_Init+0x38>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_SDMMC1_SD_Init+0x38>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <MX_SDMMC1_SD_Init+0x38>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <MX_SDMMC1_SD_Init+0x38>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]

}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	20000248 	.word	0x20000248
 8001090:	40012c00 	.word	0x40012c00

08001094 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a65      	ldr	r2, [pc, #404]	; (8001248 <HAL_SD_MspInit+0x1b4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f040 80c3 	bne.w	800123e <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80010b8:	4b64      	ldr	r3, [pc, #400]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	4a63      	ldr	r2, [pc, #396]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010c2:	6453      	str	r3, [r2, #68]	; 0x44
 80010c4:	4b61      	ldr	r3, [pc, #388]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b5e      	ldr	r3, [pc, #376]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a5d      	ldr	r2, [pc, #372]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b5b      	ldr	r3, [pc, #364]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e8:	4b58      	ldr	r3, [pc, #352]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a57      	ldr	r2, [pc, #348]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010ee:	f043 0308 	orr.w	r3, r3, #8
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b55      	ldr	r3, [pc, #340]	; (800124c <HAL_SD_MspInit+0x1b8>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration    
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001100:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001112:	230c      	movs	r3, #12
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	484c      	ldr	r0, [pc, #304]	; (8001250 <HAL_SD_MspInit+0x1bc>)
 800111e:	f002 f81f 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001122:	2304      	movs	r3, #4
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001132:	230c      	movs	r3, #12
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4845      	ldr	r0, [pc, #276]	; (8001254 <HAL_SD_MspInit+0x1c0>)
 800113e:	f002 f80f 	bl	8003160 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001144:	4a45      	ldr	r2, [pc, #276]	; (800125c <HAL_SD_MspInit+0x1c8>)
 8001146:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001148:	4b43      	ldr	r3, [pc, #268]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 800114a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800114e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001152:	2240      	movs	r2, #64	; 0x40
 8001154:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001156:	4b40      	ldr	r3, [pc, #256]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001158:	2200      	movs	r2, #0
 800115a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800115c:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 800115e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001162:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001164:	4b3c      	ldr	r3, [pc, #240]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800116a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 800116e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001172:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001174:	4b38      	ldr	r3, [pc, #224]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001176:	2220      	movs	r2, #32
 8001178:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800117a:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001180:	4b35      	ldr	r3, [pc, #212]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001182:	2204      	movs	r2, #4
 8001184:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001186:	4b34      	ldr	r3, [pc, #208]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001188:	2203      	movs	r2, #3
 800118a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 800118e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001192:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001194:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 8001196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800119c:	482e      	ldr	r0, [pc, #184]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 800119e:	f001 fcd5 	bl	8002b4c <HAL_DMA_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80011a8:	f7ff ff4c 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	4a2a      	ldr	r2, [pc, #168]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 80011b0:	641a      	str	r2, [r3, #64]	; 0x40
 80011b2:	4a29      	ldr	r2, [pc, #164]	; (8001258 <HAL_SD_MspInit+0x1c4>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011ba:	4a2a      	ldr	r2, [pc, #168]	; (8001264 <HAL_SD_MspInit+0x1d0>)
 80011bc:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80011be:	4b28      	ldr	r3, [pc, #160]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011c4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011d8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011da:	4b21      	ldr	r3, [pc, #132]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011e2:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011ec:	2220      	movs	r2, #32
 80011ee:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011f8:	2204      	movs	r2, #4
 80011fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011fc:	4b18      	ldr	r3, [pc, #96]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 80011fe:	2203      	movs	r2, #3
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001202:	4b17      	ldr	r3, [pc, #92]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 8001204:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 800120c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001212:	4813      	ldr	r0, [pc, #76]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 8001214:	f001 fc9a 	bl	8002b4c <HAL_DMA_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800121e:	f7ff ff11 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 8001226:	63da      	str	r2, [r3, #60]	; 0x3c
 8001228:	4a0d      	ldr	r2, [pc, #52]	; (8001260 <HAL_SD_MspInit+0x1cc>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2031      	movs	r0, #49	; 0x31
 8001234:	f001 fbe5 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001238:	2031      	movs	r0, #49	; 0x31
 800123a:	f001 fbfe 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800123e:	bf00      	nop
 8001240:	3728      	adds	r7, #40	; 0x28
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40012c00 	.word	0x40012c00
 800124c:	40023800 	.word	0x40023800
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	2000032c 	.word	0x2000032c
 800125c:	400264a0 	.word	0x400264a0
 8001260:	200002cc 	.word	0x200002cc
 8001264:	40026458 	.word	0x40026458

08001268 <MX_SPI2_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_SPI2_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_SPI2_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_SPI2_Init+0x74>)
 8001274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_SPI2_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI2_Init+0x74>)
 8001282:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001286:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI2_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_SPI2_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI2_Init+0x74>)
 8001296:	f44f 7200 	mov.w	r2, #512	; 0x200
 800129a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI2_Init+0x74>)
 800129e:	2220      	movs	r2, #32
 80012a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI2_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI2_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI2_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI2_Init+0x74>)
 80012b6:	2207      	movs	r2, #7
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI2_Init+0x74>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_SPI2_Init+0x74>)
 80012c8:	f004 fc26 	bl	8005b18 <HAL_SPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f7ff feb7 	bl	8001044 <Error_Handler>
  }

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000038c 	.word	0x2000038c
 80012e0:	40003800 	.word	0x40003800

080012e4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 80012e8:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <MX_SPI3_Init+0x74>)
 80012ea:	4a1c      	ldr	r2, [pc, #112]	; (800135c <MX_SPI3_Init+0x78>)
 80012ec:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_SPI3_Init+0x74>)
 80012f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012f4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <MX_SPI3_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_SPI3_Init+0x74>)
 80012fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001302:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_SPI3_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_SPI3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001310:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_SPI3_Init+0x74>)
 8001312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001316:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_SPI3_Init+0x74>)
 800131a:	2210      	movs	r2, #16
 800131c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_SPI3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_SPI3_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <MX_SPI3_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001330:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_SPI3_Init+0x74>)
 8001332:	2207      	movs	r2, #7
 8001334:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <MX_SPI3_Init+0x74>)
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_SPI3_Init+0x74>)
 800133e:	2200      	movs	r2, #0
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	; (8001358 <MX_SPI3_Init+0x74>)
 8001344:	f004 fbe8 	bl	8005b18 <HAL_SPI_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800134e:	f7ff fe79 	bl	8001044 <Error_Handler>
  }

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000450 	.word	0x20000450
 800135c:	40003c00 	.word	0x40003c00

08001360 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <HAL_SPI_MspInit+0x164>)
 800137e:	4293      	cmp	r3, r2
 8001380:	f040 80b0 	bne.w	80014e4 <HAL_SPI_MspInit+0x184>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001384:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 800138a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b4d      	ldr	r3, [pc, #308]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001398:	623b      	str	r3, [r7, #32]
 800139a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 800139e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a0:	4a49      	ldr	r2, [pc, #292]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	6313      	str	r3, [r2, #48]	; 0x30
 80013a8:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 80013aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b4:	4b44      	ldr	r3, [pc, #272]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b8:	4a43      	ldr	r2, [pc, #268]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 80013ba:	f043 0302 	orr.w	r3, r3, #2
 80013be:	6313      	str	r3, [r2, #48]	; 0x30
 80013c0:	4b41      	ldr	r3, [pc, #260]	; (80014c8 <HAL_SPI_MspInit+0x168>)
 80013c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
 80013ca:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = RF24_MOSI_Pin|RF24_MISO_Pin;
 80013cc:	2306      	movs	r3, #6
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013dc:	2305      	movs	r3, #5
 80013de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	4839      	ldr	r0, [pc, #228]	; (80014cc <HAL_SPI_MspInit+0x16c>)
 80013e8:	f001 feba 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RF24_SCK_Pin;
 80013ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013fa:	2303      	movs	r3, #3
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013fe:	2305      	movs	r3, #5
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RF24_SCK_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4831      	ldr	r0, [pc, #196]	; (80014d0 <HAL_SPI_MspInit+0x170>)
 800140a:	f001 fea9 	bl	8003160 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <HAL_SPI_MspInit+0x178>)
 8001412:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001414:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001416:	2200      	movs	r2, #0
 8001418:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800141a:	4b2e      	ldr	r3, [pc, #184]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800142c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001434:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001446:	4b23      	ldr	r3, [pc, #140]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800144c:	4821      	ldr	r0, [pc, #132]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 800144e:	f001 fb7d 	bl	8002b4c <HAL_DMA_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001458:	f7ff fdf4 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a1d      	ldr	r2, [pc, #116]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001460:	659a      	str	r2, [r3, #88]	; 0x58
 8001462:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_SPI_MspInit+0x174>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 800146a:	4a1d      	ldr	r2, [pc, #116]	; (80014e0 <HAL_SPI_MspInit+0x180>)
 800146c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 8001470:	2200      	movs	r2, #0
 8001472:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800147a:	4b18      	ldr	r3, [pc, #96]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 800147c:	2200      	movs	r2, #0
 800147e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 8001482:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001486:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001488:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 800148a:	2200      	movs	r2, #0
 800148c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80014a6:	480d      	ldr	r0, [pc, #52]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 80014a8:	f001 fb50 	bl	8002b4c <HAL_DMA_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 80014b2:	f7ff fdc7 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a08      	ldr	r2, [pc, #32]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 80014ba:	655a      	str	r2, [r3, #84]	; 0x54
 80014bc:	4a07      	ldr	r2, [pc, #28]	; (80014dc <HAL_SPI_MspInit+0x17c>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80014c2:	e0b6      	b.n	8001632 <HAL_SPI_MspInit+0x2d2>
 80014c4:	40003800 	.word	0x40003800
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800
 80014d0:	40020400 	.word	0x40020400
 80014d4:	200003f0 	.word	0x200003f0
 80014d8:	40026058 	.word	0x40026058
 80014dc:	20000514 	.word	0x20000514
 80014e0:	40026070 	.word	0x40026070
  else if(spiHandle->Instance==SPI3)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a54      	ldr	r2, [pc, #336]	; (800163c <HAL_SPI_MspInit+0x2dc>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	f040 80a1 	bne.w	8001632 <HAL_SPI_MspInit+0x2d2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014f0:	4b53      	ldr	r3, [pc, #332]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 80014f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f4:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014fa:	6413      	str	r3, [r2, #64]	; 0x40
 80014fc:	4b50      	ldr	r3, [pc, #320]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 80014fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001508:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 800150e:	f043 0302 	orr.w	r3, r3, #2
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0302 	and.w	r3, r3, #2
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	4b47      	ldr	r3, [pc, #284]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 8001522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001524:	4a46      	ldr	r2, [pc, #280]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 8001526:	f043 0304 	orr.w	r3, r3, #4
 800152a:	6313      	str	r3, [r2, #48]	; 0x30
 800152c:	4b44      	ldr	r3, [pc, #272]	; (8001640 <HAL_SPI_MspInit+0x2e0>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	f003 0304 	and.w	r3, r3, #4
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMU_MOSI_Pin;
 8001538:	2304      	movs	r3, #4
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153c:	2302      	movs	r3, #2
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001544:	2303      	movs	r3, #3
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001548:	2307      	movs	r3, #7
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(IMU_MOSI_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001550:	4619      	mov	r1, r3
 8001552:	483c      	ldr	r0, [pc, #240]	; (8001644 <HAL_SPI_MspInit+0x2e4>)
 8001554:	f001 fe04 	bl	8003160 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin;
 8001558:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156a:	2306      	movs	r3, #6
 800156c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001572:	4619      	mov	r1, r3
 8001574:	4834      	ldr	r0, [pc, #208]	; (8001648 <HAL_SPI_MspInit+0x2e8>)
 8001576:	f001 fdf3 	bl	8003160 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 800157c:	4a34      	ldr	r2, [pc, #208]	; (8001650 <HAL_SPI_MspInit+0x2f0>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001580:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001586:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b2e      	ldr	r3, [pc, #184]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 8001594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001598:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 80015a6:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 80015ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015b2:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b4:	4b25      	ldr	r3, [pc, #148]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80015ba:	4824      	ldr	r0, [pc, #144]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 80015bc:	f001 fac6 	bl	8002b4c <HAL_DMA_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_SPI_MspInit+0x26a>
      Error_Handler();
 80015c6:	f7ff fd3d 	bl	8001044 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a1f      	ldr	r2, [pc, #124]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 80015ce:	659a      	str	r2, [r3, #88]	; 0x58
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_SPI_MspInit+0x2ec>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 80015d8:	4a1f      	ldr	r2, [pc, #124]	; (8001658 <HAL_SPI_MspInit+0x2f8>)
 80015da:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 80015e4:	2240      	movs	r2, #64	; 0x40
 80015e6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 80015f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f4:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 800160a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800160e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8001616:	480f      	ldr	r0, [pc, #60]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 8001618:	f001 fa98 	bl	8002b4c <HAL_DMA_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_SPI_MspInit+0x2c6>
      Error_Handler();
 8001622:	f7ff fd0f 	bl	8001044 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 800162a:	655a      	str	r2, [r3, #84]	; 0x54
 800162c:	4a09      	ldr	r2, [pc, #36]	; (8001654 <HAL_SPI_MspInit+0x2f4>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001632:	bf00      	nop
 8001634:	3738      	adds	r7, #56	; 0x38
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40003c00 	.word	0x40003c00
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400
 8001648:	40020800 	.word	0x40020800
 800164c:	20000574 	.word	0x20000574
 8001650:	40026040 	.word	0x40026040
 8001654:	200004b4 	.word	0x200004b4
 8001658:	400260b8 	.word	0x400260b8

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x44>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	6413      	str	r3, [r2, #64]	; 0x40
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x44>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x44>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x44>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x44>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40023800 	.word	0x40023800

080016a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b6:	e7fe      	b.n	80016b6 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <MemManage_Handler+0x4>

080016be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <BusFault_Handler+0x4>

080016c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <UsageFault_Handler+0x4>

080016ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 fdf4 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <DMA1_Stream1_IRQHandler+0x10>)
 8001706:	f001 faf1 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000019c 	.word	0x2000019c

08001714 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <DMA1_Stream2_IRQHandler+0x10>)
 800171a:	f001 fae7 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000574 	.word	0x20000574

08001728 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <DMA1_Stream3_IRQHandler+0x10>)
 800172e:	f001 fadd 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200003f0 	.word	0x200003f0

0800173c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <DMA1_Stream4_IRQHandler+0x10>)
 8001742:	f001 fad3 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000514 	.word	0x20000514

08001750 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <DMA1_Stream5_IRQHandler+0x10>)
 8001756:	f001 fac9 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20000754 	.word	0x20000754

08001764 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <DMA1_Stream6_IRQHandler+0x10>)
 800176a:	f001 fabf 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200000f0 	.word	0x200000f0

08001778 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800177c:	2080      	movs	r0, #128	; 0x80
 800177e:	f001 febb 	bl	80034f8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001782:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001786:	f001 feb7 	bl	80034f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800178a:	bf00      	nop
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */


  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <TIM4_IRQHandler+0x10>)
 8001796:	f004 faa7 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	200005d4 	.word	0x200005d4

080017a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <USART2_IRQHandler+0x10>)
 80017aa:	f005 fa21 	bl	8006bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200008f4 	.word	0x200008f4

080017b8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <DMA1_Stream7_IRQHandler+0x10>)
 80017be:	f001 fa95 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200004b4 	.word	0x200004b4

080017cc <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <SDMMC1_IRQHandler+0x10>)
 80017d2:	f003 fb65 	bl	8004ea0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000248 	.word	0x20000248

080017e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */


  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <TIM5_IRQHandler+0x10>)
 80017e6:	f004 fa7f 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000614 	.word	0x20000614

080017f4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80017f8:	4802      	ldr	r0, [pc, #8]	; (8001804 <TIM7_IRQHandler+0x10>)
 80017fa:	f004 fa75 	bl	8005ce8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20000714 	.word	0x20000714

08001808 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800180c:	4802      	ldr	r0, [pc, #8]	; (8001818 <DMA2_Stream0_IRQHandler+0x10>)
 800180e:	f001 fa6d 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000007c 	.word	0x2000007c

0800181c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA2_Stream2_IRQHandler+0x10>)
 8001822:	f001 fa63 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000814 	.word	0x20000814

08001830 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001834:	4802      	ldr	r0, [pc, #8]	; (8001840 <DMA2_Stream3_IRQHandler+0x10>)
 8001836:	f001 fa59 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200002cc 	.word	0x200002cc

08001844 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <DMA2_Stream6_IRQHandler+0x10>)
 800184a:	f001 fa4f 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000032c 	.word	0x2000032c

08001858 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <DMA2_Stream7_IRQHandler+0x10>)
 800185e:	f001 fa45 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200007b4 	.word	0x200007b4

0800186c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <SystemInit+0x5c>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001876:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <SystemInit+0x5c>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <SystemInit+0x60>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a11      	ldr	r2, [pc, #68]	; (80018cc <SystemInit+0x60>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <SystemInit+0x60>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <SystemInit+0x60>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	490d      	ldr	r1, [pc, #52]	; (80018cc <SystemInit+0x60>)
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <SystemInit+0x64>)
 800189a:	4013      	ands	r3, r2
 800189c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <SystemInit+0x60>)
 80018a0:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <SystemInit+0x68>)
 80018a2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <SystemInit+0x60>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a08      	ldr	r2, [pc, #32]	; (80018cc <SystemInit+0x60>)
 80018aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <SystemInit+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <SystemInit+0x5c>)
 80018b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018bc:	609a      	str	r2, [r3, #8]
#endif
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	40023800 	.word	0x40023800
 80018d0:	fef6ffff 	.word	0xfef6ffff
 80018d4:	24003010 	.word	0x24003010

080018d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	; 0x38
 80018dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f8:	463b      	mov	r3, r7
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 800190a:	4b3e      	ldr	r3, [pc, #248]	; (8001a04 <MX_TIM2_Init+0x12c>)
 800190c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001910:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8001912:	4b3c      	ldr	r3, [pc, #240]	; (8001a04 <MX_TIM2_Init+0x12c>)
 8001914:	220c      	movs	r2, #12
 8001916:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <MX_TIM2_Init+0x12c>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 800191e:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <MX_TIM2_Init+0x12c>)
 8001920:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001924:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001926:	4b37      	ldr	r3, [pc, #220]	; (8001a04 <MX_TIM2_Init+0x12c>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b35      	ldr	r3, [pc, #212]	; (8001a04 <MX_TIM2_Init+0x12c>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001932:	4834      	ldr	r0, [pc, #208]	; (8001a04 <MX_TIM2_Init+0x12c>)
 8001934:	f004 f982 	bl	8005c3c <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800193e:	f7ff fb81 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001948:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800194c:	4619      	mov	r1, r3
 800194e:	482d      	ldr	r0, [pc, #180]	; (8001a04 <MX_TIM2_Init+0x12c>)
 8001950:	f004 fc02 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800195a:	f7ff fb73 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800195e:	4829      	ldr	r0, [pc, #164]	; (8001a04 <MX_TIM2_Init+0x12c>)
 8001960:	f004 f997 	bl	8005c92 <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800196a:	f7ff fb6b 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4821      	ldr	r0, [pc, #132]	; (8001a04 <MX_TIM2_Init+0x12c>)
 800197e:	f005 f86f 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001988:	f7ff fb5c 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800198c:	2360      	movs	r3, #96	; 0x60
 800198e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001994:	2300      	movs	r3, #0
 8001996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4818      	ldr	r0, [pc, #96]	; (8001a04 <MX_TIM2_Init+0x12c>)
 80019a4:	f004 fac0 	bl	8005f28 <HAL_TIM_PWM_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80019ae:	f7ff fb49 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b2:	463b      	mov	r3, r7
 80019b4:	2204      	movs	r2, #4
 80019b6:	4619      	mov	r1, r3
 80019b8:	4812      	ldr	r0, [pc, #72]	; (8001a04 <MX_TIM2_Init+0x12c>)
 80019ba:	f004 fab5 	bl	8005f28 <HAL_TIM_PWM_ConfigChannel>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80019c4:	f7ff fb3e 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019c8:	463b      	mov	r3, r7
 80019ca:	2208      	movs	r2, #8
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_TIM2_Init+0x12c>)
 80019d0:	f004 faaa 	bl	8005f28 <HAL_TIM_PWM_ConfigChannel>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80019da:	f7ff fb33 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019de:	463b      	mov	r3, r7
 80019e0:	220c      	movs	r2, #12
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM2_Init+0x12c>)
 80019e6:	f004 fa9f 	bl	8005f28 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 80019f0:	f7ff fb28 	bl	8001044 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM2_Init+0x12c>)
 80019f6:	f000 fa23 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	200006d4 	.word	0x200006d4

08001a08 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	; 0x28
 8001a0c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	605a      	str	r2, [r3, #4]
 8001a18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
 8001a28:	615a      	str	r2, [r3, #20]
 8001a2a:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <MX_TIM3_Init+0xdc>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a32:	4b2b      	ldr	r3, [pc, #172]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b29      	ldr	r3, [pc, #164]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8001a3e:	4b28      	ldr	r3, [pc, #160]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	4b26      	ldr	r3, [pc, #152]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a50:	4823      	ldr	r0, [pc, #140]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a52:	f004 f91e 	bl	8005c92 <HAL_TIM_PWM_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a5c:	f7ff faf2 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481c      	ldr	r0, [pc, #112]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a70:	f004 fff6 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a7a:	f7ff fae3 	bl	8001044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a7e:	2360      	movs	r3, #96	; 0x60
 8001a80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a8e:	463b      	mov	r3, r7
 8001a90:	2200      	movs	r2, #0
 8001a92:	4619      	mov	r1, r3
 8001a94:	4812      	ldr	r0, [pc, #72]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001a96:	f004 fa47 	bl	8005f28 <HAL_TIM_PWM_ConfigChannel>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001aa0:	f7ff fad0 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480d      	ldr	r0, [pc, #52]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001aac:	f004 fa3c 	bl	8005f28 <HAL_TIM_PWM_ConfigChannel>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ab6:	f7ff fac5 	bl	8001044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001aba:	463b      	mov	r3, r7
 8001abc:	2208      	movs	r2, #8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001ac2:	f004 fa31 	bl	8005f28 <HAL_TIM_PWM_ConfigChannel>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001acc:	f7ff faba 	bl	8001044 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001ad0:	4803      	ldr	r0, [pc, #12]	; (8001ae0 <MX_TIM3_Init+0xd8>)
 8001ad2:	f000 f9b5 	bl	8001e40 <HAL_TIM_MspPostInit>

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000654 	.word	0x20000654
 8001ae4:	40000400 	.word	0x40000400

08001ae8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aee:	f107 0310 	add.w	r3, r7, #16
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b08:	4a1d      	ldr	r2, [pc, #116]	; (8001b80 <MX_TIM4_Init+0x98>)
 8001b0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3;
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b0e:	2203      	movs	r2, #3
 8001b10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 53999;
 8001b18:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b1a:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8001b1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b2c:	4813      	ldr	r0, [pc, #76]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b2e:	f004 f885 	bl	8005c3c <HAL_TIM_Base_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b38:	f7ff fa84 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b4a:	f004 fb05 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b54:	f7ff fa76 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_TIM4_Init+0x94>)
 8001b66:	f004 ff7b 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b70:	f7ff fa68 	bl	8001044 <Error_Handler>
  }

}
 8001b74:	bf00      	nop
 8001b76:	3720      	adds	r7, #32
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200005d4 	.word	0x200005d4
 8001b80:	40000800 	.word	0x40000800

08001b84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001ba4:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <MX_TIM5_Init+0x98>)
 8001ba6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 7;
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001baa:	2207      	movs	r2, #7
 8001bac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 53999;
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001bb6:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 8001bba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bbc:	4b16      	ldr	r3, [pc, #88]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bc2:	4b15      	ldr	r3, [pc, #84]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bc8:	4813      	ldr	r0, [pc, #76]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001bca:	f004 f837 	bl	8005c3c <HAL_TIM_Base_Init>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001bd4:	f7ff fa36 	bl	8001044 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bde:	f107 0310 	add.w	r3, r7, #16
 8001be2:	4619      	mov	r1, r3
 8001be4:	480c      	ldr	r0, [pc, #48]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001be6:	f004 fab7 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001bf0:	f7ff fa28 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_TIM5_Init+0x94>)
 8001c02:	f004 ff2d 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c0c:	f7ff fa1a 	bl	8001044 <Error_Handler>
  }

}
 8001c10:	bf00      	nop
 8001c12:	3720      	adds	r7, #32
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000614 	.word	0x20000614
 8001c1c:	40000c00 	.word	0x40000c00

08001c20 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c32:	4a15      	ldr	r2, [pc, #84]	; (8001c88 <MX_TIM6_Init+0x68>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001c36:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10;
 8001c42:	4b10      	ldr	r3, [pc, #64]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c44:	220a      	movs	r2, #10
 8001c46:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c4e:	480d      	ldr	r0, [pc, #52]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c50:	f003 fff4 	bl	8005c3c <HAL_TIM_Base_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001c5a:	f7ff f9f3 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c5e:	2320      	movs	r3, #32
 8001c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <MX_TIM6_Init+0x64>)
 8001c6c:	f004 fef8 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001c76:	f7ff f9e5 	bl	8001044 <Error_Handler>
  }

}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000694 	.word	0x20000694
 8001c88:	40001000 	.word	0x40001000

08001c8c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]

  htim7.Instance = TIM7;
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <MX_TIM7_Init+0x64>)
 8001c9e:	4a15      	ldr	r2, [pc, #84]	; (8001cf4 <MX_TIM7_Init+0x68>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17;
 8001ca2:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <MX_TIM7_Init+0x64>)
 8001ca4:	2211      	movs	r2, #17
 8001ca6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <MX_TIM7_Init+0x64>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 59999;
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <MX_TIM7_Init+0x64>)
 8001cb0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001cb4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb6:	4b0e      	ldr	r3, [pc, #56]	; (8001cf0 <MX_TIM7_Init+0x64>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cbc:	480c      	ldr	r0, [pc, #48]	; (8001cf0 <MX_TIM7_Init+0x64>)
 8001cbe:	f003 ffbd 	bl	8005c3c <HAL_TIM_Base_Init>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001cc8:	f7ff f9bc 	bl	8001044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cd4:	1d3b      	adds	r3, r7, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <MX_TIM7_Init+0x64>)
 8001cda:	f004 fec1 	bl	8006a60 <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ce4:	f7ff f9ae 	bl	8001044 <Error_Handler>
  }

}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000714 	.word	0x20000714
 8001cf4:	40001400 	.word	0x40001400

08001cf8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d08:	d10c      	bne.n	8001d24 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0a:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a37      	ldr	r2, [pc, #220]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001d22:	e05e      	b.n	8001de2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM4)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a31      	ldr	r2, [pc, #196]	; (8001df0 <HAL_TIM_Base_MspInit+0xf8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d114      	bne.n	8001d58 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	4a2e      	ldr	r2, [pc, #184]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d34:	f043 0304 	orr.w	r3, r3, #4
 8001d38:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	201e      	movs	r0, #30
 8001d4c:	f000 fe59 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d50:	201e      	movs	r0, #30
 8001d52:	f000 fe72 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8001d56:	e044      	b.n	8001de2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM5)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a25      	ldr	r2, [pc, #148]	; (8001df4 <HAL_TIM_Base_MspInit+0xfc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d114      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a21      	ldr	r2, [pc, #132]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2032      	movs	r0, #50	; 0x32
 8001d80:	f000 fe3f 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d84:	2032      	movs	r0, #50	; 0x32
 8001d86:	f000 fe58 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8001d8a:	e02a      	b.n	8001de2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM6)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a19      	ldr	r2, [pc, #100]	; (8001df8 <HAL_TIM_Base_MspInit+0x100>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d10c      	bne.n	8001db0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	4a14      	ldr	r2, [pc, #80]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001d9c:	f043 0310 	orr.w	r3, r3, #16
 8001da0:	6413      	str	r3, [r2, #64]	; 0x40
 8001da2:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]
}
 8001dae:	e018      	b.n	8001de2 <HAL_TIM_Base_MspInit+0xea>
  else if(tim_baseHandle->Instance==TIM7)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a11      	ldr	r2, [pc, #68]	; (8001dfc <HAL_TIM_Base_MspInit+0x104>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d113      	bne.n	8001de2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dba:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a0b      	ldr	r2, [pc, #44]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001dc0:	f043 0320 	orr.w	r3, r3, #32
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_TIM_Base_MspInit+0xf4>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f003 0320 	and.w	r3, r3, #32
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	2037      	movs	r0, #55	; 0x37
 8001dd8:	f000 fe13 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ddc:	2037      	movs	r0, #55	; 0x37
 8001dde:	f000 fe2c 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40001000 	.word	0x40001000
 8001dfc:	40001400 	.word	0x40001400

08001e00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_TIM_PWM_MspInit+0x38>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10b      	bne.n	8001e2a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	4a09      	ldr	r2, [pc, #36]	; (8001e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1e:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <HAL_TIM_PWM_MspInit+0x3c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40000400 	.word	0x40000400
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08a      	sub	sp, #40	; 0x28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d139      	bne.n	8001ed6 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a28      	ldr	r2, [pc, #160]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b26      	ldr	r3, [pc, #152]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 8001e92:	2303      	movs	r3, #3
 8001e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 0314 	add.w	r3, r7, #20
 8001eaa:	4619      	mov	r1, r3
 8001eac:	481d      	ldr	r0, [pc, #116]	; (8001f24 <HAL_TIM_MspPostInit+0xe4>)
 8001eae:	f001 f957 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_4_Pin;
 8001eb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001eb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 0314 	add.w	r3, r7, #20
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4816      	ldr	r0, [pc, #88]	; (8001f28 <HAL_TIM_MspPostInit+0xe8>)
 8001ed0:	f001 f946 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ed4:	e020      	b.n	8001f18 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM3)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a14      	ldr	r2, [pc, #80]	; (8001f2c <HAL_TIM_MspPostInit+0xec>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d11b      	bne.n	8001f18 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_TIM_MspPostInit+0xe0>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GIMBAL_X_Pin|GIMBAL_Y_Pin|GIMBAL_Z_Pin;
 8001ef8:	2331      	movs	r3, #49	; 0x31
 8001efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_TIM_MspPostInit+0xe8>)
 8001f14:	f001 f924 	bl	8003160 <HAL_GPIO_Init>
}
 8001f18:	bf00      	nop
 8001f1a:	3728      	adds	r7, #40	; 0x28
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40000400 	.word	0x40000400

08001f30 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001f34:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f36:	4a15      	ldr	r2, [pc, #84]	; (8001f8c <MX_USART1_UART_Init+0x5c>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f3a:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	; (8001f88 <MX_USART1_UART_Init+0x58>)
 8001f74:	f004 fdee 	bl	8006b54 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001f7e:	f7ff f861 	bl	8001044 <Error_Handler>
  }

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000874 	.word	0x20000874
 8001f8c:	40011000 	.word	0x40011000

08001f90 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <MX_USART2_UART_Init+0x5c>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f9a:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b0f      	ldr	r3, [pc, #60]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_USART2_UART_Init+0x58>)
 8001fd4:	f004 fdbe 	bl	8006b54 <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fde:	f7ff f831 	bl	8001044 <Error_Handler>
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200008f4 	.word	0x200008f4
 8001fec:	40004400 	.word	0x40004400

08001ff0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08c      	sub	sp, #48	; 0x30
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 031c 	add.w	r3, r7, #28
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a78      	ldr	r2, [pc, #480]	; (80021f0 <HAL_UART_MspInit+0x200>)
 800200e:	4293      	cmp	r3, r2
 8002010:	f040 8086 	bne.w	8002120 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002014:	4b77      	ldr	r3, [pc, #476]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	4a76      	ldr	r2, [pc, #472]	; (80021f4 <HAL_UART_MspInit+0x204>)
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6453      	str	r3, [r2, #68]	; 0x44
 8002020:	4b74      	ldr	r3, [pc, #464]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	61bb      	str	r3, [r7, #24]
 800202a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b71      	ldr	r3, [pc, #452]	; (80021f4 <HAL_UART_MspInit+0x204>)
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002030:	4a70      	ldr	r2, [pc, #448]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	6313      	str	r3, [r2, #48]	; 0x30
 8002038:	4b6e      	ldr	r3, [pc, #440]	; (80021f4 <HAL_UART_MspInit+0x204>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
 8002044:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002056:	2307      	movs	r3, #7
 8002058:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 031c 	add.w	r3, r7, #28
 800205e:	4619      	mov	r1, r3
 8002060:	4865      	ldr	r0, [pc, #404]	; (80021f8 <HAL_UART_MspInit+0x208>)
 8002062:	f001 f87d 	bl	8003160 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002066:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HAL_UART_MspInit+0x20c>)
 8002068:	4a65      	ldr	r2, [pc, #404]	; (8002200 <HAL_UART_MspInit+0x210>)
 800206a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HAL_UART_MspInit+0x20c>)
 800206e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002072:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002074:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_UART_MspInit+0x20c>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800207a:	4b60      	ldr	r3, [pc, #384]	; (80021fc <HAL_UART_MspInit+0x20c>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002080:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <HAL_UART_MspInit+0x20c>)
 8002082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002086:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002088:	4b5c      	ldr	r3, [pc, #368]	; (80021fc <HAL_UART_MspInit+0x20c>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_UART_MspInit+0x20c>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002094:	4b59      	ldr	r3, [pc, #356]	; (80021fc <HAL_UART_MspInit+0x20c>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800209a:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_UART_MspInit+0x20c>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a0:	4b56      	ldr	r3, [pc, #344]	; (80021fc <HAL_UART_MspInit+0x20c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020a6:	4855      	ldr	r0, [pc, #340]	; (80021fc <HAL_UART_MspInit+0x20c>)
 80020a8:	f000 fd50 	bl	8002b4c <HAL_DMA_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80020b2:	f7fe ffc7 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a50      	ldr	r2, [pc, #320]	; (80021fc <HAL_UART_MspInit+0x20c>)
 80020ba:	66da      	str	r2, [r3, #108]	; 0x6c
 80020bc:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HAL_UART_MspInit+0x20c>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80020c2:	4b50      	ldr	r3, [pc, #320]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020c4:	4a50      	ldr	r2, [pc, #320]	; (8002208 <HAL_UART_MspInit+0x218>)
 80020c6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80020c8:	4b4e      	ldr	r3, [pc, #312]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ce:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d0:	4b4c      	ldr	r3, [pc, #304]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020d2:	2240      	movs	r2, #64	; 0x40
 80020d4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020d6:	4b4b      	ldr	r3, [pc, #300]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020dc:	4b49      	ldr	r3, [pc, #292]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020e2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020e4:	4b47      	ldr	r3, [pc, #284]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020ea:	4b46      	ldr	r3, [pc, #280]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80020f0:	4b44      	ldr	r3, [pc, #272]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020f6:	4b43      	ldr	r3, [pc, #268]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020fc:	4b41      	ldr	r3, [pc, #260]	; (8002204 <HAL_UART_MspInit+0x214>)
 80020fe:	2200      	movs	r2, #0
 8002100:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002102:	4840      	ldr	r0, [pc, #256]	; (8002204 <HAL_UART_MspInit+0x214>)
 8002104:	f000 fd22 	bl	8002b4c <HAL_DMA_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_UART_MspInit+0x122>
    {
      Error_Handler();
 800210e:	f7fe ff99 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a3b      	ldr	r2, [pc, #236]	; (8002204 <HAL_UART_MspInit+0x214>)
 8002116:	669a      	str	r2, [r3, #104]	; 0x68
 8002118:	4a3a      	ldr	r2, [pc, #232]	; (8002204 <HAL_UART_MspInit+0x214>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800211e:	e063      	b.n	80021e8 <HAL_UART_MspInit+0x1f8>
  else if(uartHandle->Instance==USART2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a39      	ldr	r2, [pc, #228]	; (800220c <HAL_UART_MspInit+0x21c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d15e      	bne.n	80021e8 <HAL_UART_MspInit+0x1f8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800212a:	4b32      	ldr	r3, [pc, #200]	; (80021f4 <HAL_UART_MspInit+0x204>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a31      	ldr	r2, [pc, #196]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b2f      	ldr	r3, [pc, #188]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002142:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b29      	ldr	r3, [pc, #164]	; (80021f4 <HAL_UART_MspInit+0x204>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800215a:	230c      	movs	r3, #12
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002166:	2303      	movs	r3, #3
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800216a:	2307      	movs	r3, #7
 800216c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 031c 	add.w	r3, r7, #28
 8002172:	4619      	mov	r1, r3
 8002174:	4820      	ldr	r0, [pc, #128]	; (80021f8 <HAL_UART_MspInit+0x208>)
 8002176:	f000 fff3 	bl	8003160 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800217a:	4b25      	ldr	r3, [pc, #148]	; (8002210 <HAL_UART_MspInit+0x220>)
 800217c:	4a25      	ldr	r2, [pc, #148]	; (8002214 <HAL_UART_MspInit+0x224>)
 800217e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002180:	4b23      	ldr	r3, [pc, #140]	; (8002210 <HAL_UART_MspInit+0x220>)
 8002182:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002186:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002188:	4b21      	ldr	r3, [pc, #132]	; (8002210 <HAL_UART_MspInit+0x220>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_UART_MspInit+0x220>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <HAL_UART_MspInit+0x220>)
 8002196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <HAL_UART_MspInit+0x220>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a2:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_UART_MspInit+0x220>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80021a8:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_UART_MspInit+0x220>)
 80021aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021ae:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b0:	4b17      	ldr	r3, [pc, #92]	; (8002210 <HAL_UART_MspInit+0x220>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_UART_MspInit+0x220>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021bc:	4814      	ldr	r0, [pc, #80]	; (8002210 <HAL_UART_MspInit+0x220>)
 80021be:	f000 fcc5 	bl	8002b4c <HAL_DMA_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 80021c8:	f7fe ff3c 	bl	8001044 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_UART_MspInit+0x220>)
 80021d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80021d2:	4a0f      	ldr	r2, [pc, #60]	; (8002210 <HAL_UART_MspInit+0x220>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	2026      	movs	r0, #38	; 0x26
 80021de:	f000 fc10 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021e2:	2026      	movs	r0, #38	; 0x26
 80021e4:	f000 fc29 	bl	8002a3a <HAL_NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000
 80021fc:	20000814 	.word	0x20000814
 8002200:	40026440 	.word	0x40026440
 8002204:	200007b4 	.word	0x200007b4
 8002208:	400264b8 	.word	0x400264b8
 800220c:	40004400 	.word	0x40004400
 8002210:	20000754 	.word	0x20000754
 8002214:	40026088 	.word	0x40026088

08002218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002250 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800221c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800221e:	e003      	b.n	8002228 <LoopCopyDataInit>

08002220 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002220:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002222:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002224:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002226:	3104      	adds	r1, #4

08002228 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002228:	480b      	ldr	r0, [pc, #44]	; (8002258 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800222c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800222e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002230:	d3f6      	bcc.n	8002220 <CopyDataInit>
  ldr  r2, =_sbss
 8002232:	4a0b      	ldr	r2, [pc, #44]	; (8002260 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002234:	e002      	b.n	800223c <LoopFillZerobss>

08002236 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002236:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002238:	f842 3b04 	str.w	r3, [r2], #4

0800223c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800223e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002240:	d3f9      	bcc.n	8002236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002242:	f7ff fb13 	bl	800186c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002246:	f006 f891 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800224a:	f7fe fe31 	bl	8000eb0 <main>
  bx  lr    
 800224e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002250:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8002254:	08008420 	.word	0x08008420
  ldr  r0, =_sdata
 8002258:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800225c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002260:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002264:	20000de0 	.word	0x20000de0

08002268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002268:	e7fe      	b.n	8002268 <ADC_IRQHandler>

0800226a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800226e:	2003      	movs	r0, #3
 8002270:	f000 fbbc 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002274:	2000      	movs	r0, #0
 8002276:	f000 f805 	bl	8002284 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800227a:	f7ff f9ef 	bl	800165c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}

08002284 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800228c:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_InitTick+0x54>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_InitTick+0x58>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fbd7 	bl	8002a56 <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e00e      	b.n	80022d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b0f      	cmp	r3, #15
 80022b6:	d80a      	bhi.n	80022ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	f04f 30ff 	mov.w	r0, #4294967295
 80022c0:	f000 fb9f 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022c4:	4a06      	ldr	r2, [pc, #24]	; (80022e0 <HAL_InitTick+0x5c>)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000000 	.word	0x20000000
 80022dc:	20000008 	.word	0x20000008
 80022e0:	20000004 	.word	0x20000004

080022e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000008 	.word	0x20000008
 8002308:	20000974 	.word	0x20000974

0800230c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000974 	.word	0x20000974

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff ffee 	bl	800230c <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_Delay+0x40>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffde 	bl	800230c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000008 	.word	0x20000008

08002368 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e031      	b.n	80023e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7fe f91c 	bl	80005c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_ADC_Init+0x84>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	f043 0202 	orr.w	r2, r3, #2
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f94e 	bl	8002658 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f023 0303 	bic.w	r3, r3, #3
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	641a      	str	r2, [r3, #64]	; 0x40
 80023d2:	e001      	b.n	80023d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	ffffeefd 	.word	0xffffeefd

080023f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002404:	2b01      	cmp	r3, #1
 8002406:	d101      	bne.n	800240c <HAL_ADC_ConfigChannel+0x1c>
 8002408:	2302      	movs	r3, #2
 800240a:	e115      	b.n	8002638 <HAL_ADC_ConfigChannel+0x248>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b09      	cmp	r3, #9
 800241a:	d935      	bls.n	8002488 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68d9      	ldr	r1, [r3, #12]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	b29b      	uxth	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4613      	mov	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	4413      	add	r3, r2
 8002430:	3b1e      	subs	r3, #30
 8002432:	2207      	movs	r2, #7
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43da      	mvns	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	400a      	ands	r2, r1
 8002440:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7f      	ldr	r2, [pc, #508]	; (8002644 <HAL_ADC_ConfigChannel+0x254>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d10a      	bne.n	8002462 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68d9      	ldr	r1, [r3, #12]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	061a      	lsls	r2, r3, #24
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	60da      	str	r2, [r3, #12]
 8002460:	e035      	b.n	80024ce <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	4603      	mov	r3, r0
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4403      	add	r3, r0
 800247a:	3b1e      	subs	r3, #30
 800247c:	409a      	lsls	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	e022      	b.n	80024ce <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	2207      	movs	r2, #7
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4403      	add	r3, r0
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d824      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b05      	subs	r3, #5
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b05      	subs	r3, #5
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	635a      	str	r2, [r3, #52]	; 0x34
 800251e:	e04c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d824      	bhi.n	8002572 <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b23      	subs	r3, #35	; 0x23
 8002564:	fa00 f203 	lsl.w	r2, r0, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	e023      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b41      	subs	r3, #65	; 0x41
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b41      	subs	r3, #65	; 0x41
 80025ae:	fa00 f203 	lsl.w	r2, r0, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a22      	ldr	r2, [pc, #136]	; (8002648 <HAL_ADC_ConfigChannel+0x258>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d109      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1e8>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b12      	cmp	r3, #18
 80025ca:	d105      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80025cc:	4b1f      	ldr	r3, [pc, #124]	; (800264c <HAL_ADC_ConfigChannel+0x25c>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	4a1e      	ldr	r2, [pc, #120]	; (800264c <HAL_ADC_ConfigChannel+0x25c>)
 80025d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025d6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a1a      	ldr	r2, [pc, #104]	; (8002648 <HAL_ADC_ConfigChannel+0x258>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d125      	bne.n	800262e <HAL_ADC_ConfigChannel+0x23e>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a17      	ldr	r2, [pc, #92]	; (8002644 <HAL_ADC_ConfigChannel+0x254>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d003      	beq.n	80025f4 <HAL_ADC_ConfigChannel+0x204>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b11      	cmp	r3, #17
 80025f2:	d11c      	bne.n	800262e <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80025f4:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_ADC_ConfigChannel+0x25c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <HAL_ADC_ConfigChannel+0x25c>)
 80025fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025fe:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a0f      	ldr	r2, [pc, #60]	; (8002644 <HAL_ADC_ConfigChannel+0x254>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d111      	bne.n	800262e <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800260a:	4b11      	ldr	r3, [pc, #68]	; (8002650 <HAL_ADC_ConfigChannel+0x260>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a11      	ldr	r2, [pc, #68]	; (8002654 <HAL_ADC_ConfigChannel+0x264>)
 8002610:	fba2 2303 	umull	r2, r3, r2, r3
 8002614:	0c9a      	lsrs	r2, r3, #18
 8002616:	4613      	mov	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4413      	add	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002620:	e002      	b.n	8002628 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	3b01      	subs	r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f9      	bne.n	8002622 <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	10000012 	.word	0x10000012
 8002648:	40012000 	.word	0x40012000
 800264c:	40012300 	.word	0x40012300
 8002650:	20000000 	.word	0x20000000
 8002654:	431bde83 	.word	0x431bde83

08002658 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002660:	4b78      	ldr	r3, [pc, #480]	; (8002844 <ADC_Init+0x1ec>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	4a77      	ldr	r2, [pc, #476]	; (8002844 <ADC_Init+0x1ec>)
 8002666:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800266a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800266c:	4b75      	ldr	r3, [pc, #468]	; (8002844 <ADC_Init+0x1ec>)
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4973      	ldr	r1, [pc, #460]	; (8002844 <ADC_Init+0x1ec>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	021a      	lsls	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	689a      	ldr	r2, [r3, #8]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	430a      	orrs	r2, r1
 80026e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	4a58      	ldr	r2, [pc, #352]	; (8002848 <ADC_Init+0x1f0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6899      	ldr	r1, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800271c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	6899      	ldr	r1, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	e00f      	b.n	8002752 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002740:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002750:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0202 	bic.w	r2, r2, #2
 8002760:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	005a      	lsls	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3020 	ldrb.w	r3, [r3, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800278e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800279e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027aa:	3b01      	subs	r3, #1
 80027ac:	035a      	lsls	r2, r3, #13
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e007      	b.n	80027c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	051a      	lsls	r2, r3, #20
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	430a      	orrs	r2, r1
 80027ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80027fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800280a:	025a      	lsls	r2, r3, #9
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002822:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	029a      	lsls	r2, r3, #10
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	609a      	str	r2, [r3, #8]
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	40012300 	.word	0x40012300
 8002848:	0f000001 	.word	0x0f000001

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	4313      	orrs	r3, r2
 8002878:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287a:	4a04      	ldr	r2, [pc, #16]	; (800288c <__NVIC_SetPriorityGrouping+0x40>)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	60d3      	str	r3, [r2, #12]
}
 8002880:	bf00      	nop
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00
 8002890:	05fa0000 	.word	0x05fa0000

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e014      	b.n	8002aaa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	791b      	ldrb	r3, [r3, #4]
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7fd feeb 	bl	800086c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2202      	movs	r2, #2
 8002a9a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	795b      	ldrb	r3, [r3, #5]
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_DAC_ConfigChannel+0x20>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e036      	b.n	8002b40 <HAL_DAC_ConfigChannel+0x8e>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2202      	movs	r2, #2
 8002adc:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002ae6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	4013      	ands	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6819      	ldr	r1, [r3, #0]
 8002b20:	22c0      	movs	r2, #192	; 0xc0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	400a      	ands	r2, r1
 8002b30:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b58:	f7ff fbd8 	bl	800230c <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e099      	b.n	8002c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b88:	e00f      	b.n	8002baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8a:	f7ff fbbf 	bl	800230c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d908      	bls.n	8002baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e078      	b.n	8002c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e8      	bne.n	8002b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	4b38      	ldr	r3, [pc, #224]	; (8002ca4 <HAL_DMA_Init+0x158>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d107      	bne.n	8002c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f023 0307 	bic.w	r3, r3, #7
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d117      	bne.n	8002c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00e      	beq.n	8002c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 fa0b 	bl	800306c <DMA_CheckFifoParam>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e016      	b.n	8002c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f9c2 	bl	8003000 <DMA_CalcBaseAndBitshift>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	223f      	movs	r2, #63	; 0x3f
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	e010803f 	.word	0xe010803f

08002ca8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d004      	beq.n	8002cc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2280      	movs	r2, #128	; 0x80
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e00c      	b.n	8002ce0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2205      	movs	r2, #5
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0201 	bic.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cf8:	4b92      	ldr	r3, [pc, #584]	; (8002f44 <HAL_DMA_IRQHandler+0x258>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a92      	ldr	r2, [pc, #584]	; (8002f48 <HAL_DMA_IRQHandler+0x25c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2208      	movs	r2, #8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2208      	movs	r2, #8
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2204      	movs	r2, #4
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2210      	movs	r2, #16
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d043      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2210      	movs	r2, #16
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e01f      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0208 	bic.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2220      	movs	r2, #32
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808e 	beq.w	8002f8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8086 	beq.w	8002f8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2220      	movs	r2, #32
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d136      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x1da>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	223f      	movs	r2, #63	; 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07d      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
        }
        return;
 8002f02:	e078      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01c      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d030      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e02b      	b.n	8002f8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d027      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
 8002f42:	e022      	b.n	8002f8a <HAL_DMA_IRQHandler+0x29e>
 8002f44:	20000000 	.word	0x20000000
 8002f48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10f      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0210 	bic.w	r2, r2, #16
 8002f68:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d032      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d022      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2205      	movs	r2, #5
 8002fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0201 	bic.w	r2, r2, #1
 8002fb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d307      	bcc.n	8002fd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f2      	bne.n	8002fb6 <HAL_DMA_IRQHandler+0x2ca>
 8002fd0:	e000      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fd2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
 8002ff4:	e000      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002ff6:	bf00      	nop
    }
  }
}
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop

08003000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3b10      	subs	r3, #16
 8003010:	4a13      	ldr	r2, [pc, #76]	; (8003060 <DMA_CalcBaseAndBitshift+0x60>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800301a:	4a12      	ldr	r2, [pc, #72]	; (8003064 <DMA_CalcBaseAndBitshift+0x64>)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d908      	bls.n	8003040 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <DMA_CalcBaseAndBitshift+0x68>)
 8003036:	4013      	ands	r3, r2
 8003038:	1d1a      	adds	r2, r3, #4
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	659a      	str	r2, [r3, #88]	; 0x58
 800303e:	e006      	b.n	800304e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	461a      	mov	r2, r3
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <DMA_CalcBaseAndBitshift+0x68>)
 8003048:	4013      	ands	r3, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003052:	4618      	mov	r0, r3
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	aaaaaaab 	.word	0xaaaaaaab
 8003064:	080083f4 	.word	0x080083f4
 8003068:	fffffc00 	.word	0xfffffc00

0800306c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11f      	bne.n	80030c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d855      	bhi.n	8003138 <DMA_CheckFifoParam+0xcc>
 800308c:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <DMA_CheckFifoParam+0x28>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030b7 	.word	0x080030b7
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	08003139 	.word	0x08003139
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d045      	beq.n	800313c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b4:	e042      	b.n	800313c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030be:	d13f      	bne.n	8003140 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e03c      	b.n	8003140 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	d121      	bne.n	8003114 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d836      	bhi.n	8003144 <DMA_CheckFifoParam+0xd8>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <DMA_CheckFifoParam+0x70>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030f3 	.word	0x080030f3
 80030e4:	080030ed 	.word	0x080030ed
 80030e8:	08003105 	.word	0x08003105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e02f      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d024      	beq.n	8003148 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003102:	e021      	b.n	8003148 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800310c:	d11e      	bne.n	800314c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003112:	e01b      	b.n	800314c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d902      	bls.n	8003120 <DMA_CheckFifoParam+0xb4>
 800311a:	2b03      	cmp	r3, #3
 800311c:	d003      	beq.n	8003126 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800311e:	e018      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      break;
 8003124:	e015      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00e      	beq.n	8003150 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      break;
 8003136:	e00b      	b.n	8003150 <DMA_CheckFifoParam+0xe4>
      break;
 8003138:	bf00      	nop
 800313a:	e00a      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      break;
 800313c:	bf00      	nop
 800313e:	e008      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      break;
 8003140:	bf00      	nop
 8003142:	e006      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      break;
 8003144:	bf00      	nop
 8003146:	e004      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      break;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      break;   
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      break;
 8003150:	bf00      	nop
    }
  } 
  
  return status; 
 8003152:	7bfb      	ldrb	r3, [r7, #15]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	; 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e169      	b.n	8003454 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	f040 8158 	bne.w	800344e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d003      	beq.n	80031ae <HAL_GPIO_Init+0x4e>
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b12      	cmp	r3, #18
 80031ac:	d123      	bne.n	80031f6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	08da      	lsrs	r2, r3, #3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3208      	adds	r2, #8
 80031b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0307 	and.w	r3, r3, #7
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	220f      	movs	r2, #15
 80031c6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	691a      	ldr	r2, [r3, #16]
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	08da      	lsrs	r2, r3, #3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	3208      	adds	r2, #8
 80031f0:	69b9      	ldr	r1, [r7, #24]
 80031f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f003 0203 	and.w	r2, r3, #3
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d00b      	beq.n	800324a <HAL_GPIO_Init+0xea>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b02      	cmp	r3, #2
 8003238:	d007      	beq.n	800324a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800323e:	2b11      	cmp	r3, #17
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b12      	cmp	r3, #18
 8003248:	d130      	bne.n	80032ac <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	2203      	movs	r2, #3
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003280:	2201      	movs	r2, #1
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	091b      	lsrs	r3, r3, #4
 8003296:	f003 0201 	and.w	r2, r3, #1
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80b2 	beq.w	800344e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <HAL_GPIO_Init+0x308>)
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ee:	4a5e      	ldr	r2, [pc, #376]	; (8003468 <HAL_GPIO_Init+0x308>)
 80032f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f4:	6453      	str	r3, [r2, #68]	; 0x44
 80032f6:	4b5c      	ldr	r3, [pc, #368]	; (8003468 <HAL_GPIO_Init+0x308>)
 80032f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003302:	4a5a      	ldr	r2, [pc, #360]	; (800346c <HAL_GPIO_Init+0x30c>)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	3302      	adds	r3, #2
 800330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0303 	and.w	r3, r3, #3
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	220f      	movs	r2, #15
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a51      	ldr	r2, [pc, #324]	; (8003470 <HAL_GPIO_Init+0x310>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d02b      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a50      	ldr	r2, [pc, #320]	; (8003474 <HAL_GPIO_Init+0x314>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d025      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4f      	ldr	r2, [pc, #316]	; (8003478 <HAL_GPIO_Init+0x318>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d01f      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4e      	ldr	r2, [pc, #312]	; (800347c <HAL_GPIO_Init+0x31c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d019      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a4d      	ldr	r2, [pc, #308]	; (8003480 <HAL_GPIO_Init+0x320>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d013      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a4c      	ldr	r2, [pc, #304]	; (8003484 <HAL_GPIO_Init+0x324>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00d      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a4b      	ldr	r2, [pc, #300]	; (8003488 <HAL_GPIO_Init+0x328>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <HAL_GPIO_Init+0x20e>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a4a      	ldr	r2, [pc, #296]	; (800348c <HAL_GPIO_Init+0x32c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <HAL_GPIO_Init+0x20a>
 8003366:	2307      	movs	r3, #7
 8003368:	e00e      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336a:	2308      	movs	r3, #8
 800336c:	e00c      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800336e:	2306      	movs	r3, #6
 8003370:	e00a      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003372:	2305      	movs	r3, #5
 8003374:	e008      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003376:	2304      	movs	r3, #4
 8003378:	e006      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337a:	2303      	movs	r3, #3
 800337c:	e004      	b.n	8003388 <HAL_GPIO_Init+0x228>
 800337e:	2302      	movs	r3, #2
 8003380:	e002      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003382:	2301      	movs	r3, #1
 8003384:	e000      	b.n	8003388 <HAL_GPIO_Init+0x228>
 8003386:	2300      	movs	r3, #0
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	f002 0203 	and.w	r2, r2, #3
 800338e:	0092      	lsls	r2, r2, #2
 8003390:	4093      	lsls	r3, r2
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003398:	4934      	ldr	r1, [pc, #208]	; (800346c <HAL_GPIO_Init+0x30c>)
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	089b      	lsrs	r3, r3, #2
 800339e:	3302      	adds	r3, #2
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a6:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <HAL_GPIO_Init+0x330>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ca:	4a31      	ldr	r2, [pc, #196]	; (8003490 <HAL_GPIO_Init+0x330>)
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033d0:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_GPIO_Init+0x330>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f4:	4a26      	ldr	r2, [pc, #152]	; (8003490 <HAL_GPIO_Init+0x330>)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033fa:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_GPIO_Init+0x330>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800341e:	4a1c      	ldr	r2, [pc, #112]	; (8003490 <HAL_GPIO_Init+0x330>)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_GPIO_Init+0x330>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003448:	4a11      	ldr	r2, [pc, #68]	; (8003490 <HAL_GPIO_Init+0x330>)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	3301      	adds	r3, #1
 8003452:	61fb      	str	r3, [r7, #28]
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	2b0f      	cmp	r3, #15
 8003458:	f67f ae92 	bls.w	8003180 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800345c:	bf00      	nop
 800345e:	3724      	adds	r7, #36	; 0x24
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	40023800 	.word	0x40023800
 800346c:	40013800 	.word	0x40013800
 8003470:	40020000 	.word	0x40020000
 8003474:	40020400 	.word	0x40020400
 8003478:	40020800 	.word	0x40020800
 800347c:	40020c00 	.word	0x40020c00
 8003480:	40021000 	.word	0x40021000
 8003484:	40021400 	.word	0x40021400
 8003488:	40021800 	.word	0x40021800
 800348c:	40021c00 	.word	0x40021c00
 8003490:	40013c00 	.word	0x40013c00

08003494 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	460b      	mov	r3, r1
 800349e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	4013      	ands	r3, r2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
 80034b0:	e001      	b.n	80034b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034b2:	2300      	movs	r3, #0
 80034b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	807b      	strh	r3, [r7, #2]
 80034d0:	4613      	mov	r3, r2
 80034d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d4:	787b      	ldrb	r3, [r7, #1]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034da:	887a      	ldrh	r2, [r7, #2]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034e0:	e003      	b.n	80034ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034e2:	887b      	ldrh	r3, [r7, #2]
 80034e4:	041a      	lsls	r2, r3, #16
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	619a      	str	r2, [r3, #24]
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	88fb      	ldrh	r3, [r7, #6]
 8003508:	4013      	ands	r3, r2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d006      	beq.n	800351c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800350e:	4a05      	ldr	r2, [pc, #20]	; (8003524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003510:	88fb      	ldrh	r3, [r7, #6]
 8003512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003514:	88fb      	ldrh	r3, [r7, #6]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 f806 	bl	8003528 <HAL_GPIO_EXTI_Callback>
  }
}
 800351c:	bf00      	nop
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40013c00 	.word	0x40013c00

08003528 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e07f      	b.n	8003652 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fd fbda 	bl	8000d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2224      	movs	r2, #36	; 0x24
 8003570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003590:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035b6:	609a      	str	r2, [r3, #8]
 80035b8:	e006      	b.n	80035c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	689a      	ldr	r2, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d104      	bne.n	80035da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b1d      	ldr	r3, [pc, #116]	; (800365c <HAL_I2C_Init+0x11c>)
 80035e6:	430b      	orrs	r3, r1
 80035e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	691a      	ldr	r2, [r3, #16]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	ea42 0103 	orr.w	r1, r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	021a      	lsls	r2, r3, #8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	69d9      	ldr	r1, [r3, #28]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1a      	ldr	r2, [r3, #32]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2220      	movs	r2, #32
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	02008000 	.word	0x02008000

08003660 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b20      	cmp	r3, #32
 8003674:	d138      	bne.n	80036e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800367c:	2b01      	cmp	r3, #1
 800367e:	d101      	bne.n	8003684 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003680:	2302      	movs	r3, #2
 8003682:	e032      	b.n	80036ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	; 0x24
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80036b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b20      	cmp	r3, #32
 800370a:	d139      	bne.n	8003780 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003716:	2302      	movs	r3, #2
 8003718:	e033      	b.n	8003782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2224      	movs	r2, #36	; 0x24
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 0201 	bic.w	r2, r2, #1
 8003738:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003748:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003796:	2300      	movs	r3, #0
 8003798:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <HAL_PWREx_EnableOverDrive+0x98>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	4a22      	ldr	r2, [pc, #136]	; (8003828 <HAL_PWREx_EnableOverDrive+0x98>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a4:	6413      	str	r3, [r2, #64]	; 0x40
 80037a6:	4b20      	ldr	r3, [pc, #128]	; (8003828 <HAL_PWREx_EnableOverDrive+0x98>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80037b2:	4b1e      	ldr	r3, [pc, #120]	; (800382c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037be:	f7fe fda5 	bl	800230c <HAL_GetTick>
 80037c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037c4:	e009      	b.n	80037da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037c6:	f7fe fda1 	bl	800230c <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037d4:	d901      	bls.n	80037da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e022      	b.n	8003820 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037da:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e6:	d1ee      	bne.n	80037c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a0f      	ldr	r2, [pc, #60]	; (800382c <HAL_PWREx_EnableOverDrive+0x9c>)
 80037ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037f4:	f7fe fd8a 	bl	800230c <HAL_GetTick>
 80037f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037fa:	e009      	b.n	8003810 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037fc:	f7fe fd86 	bl	800230c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800380a:	d901      	bls.n	8003810 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e007      	b.n	8003820 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800381c:	d1ee      	bne.n	80037fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40023800 	.word	0x40023800
 800382c:	40007000 	.word	0x40007000

08003830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e25c      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8087 	beq.w	8003962 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003854:	4b96      	ldr	r3, [pc, #600]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f003 030c 	and.w	r3, r3, #12
 800385c:	2b04      	cmp	r3, #4
 800385e:	d00c      	beq.n	800387a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003860:	4b93      	ldr	r3, [pc, #588]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f003 030c 	and.w	r3, r3, #12
 8003868:	2b08      	cmp	r3, #8
 800386a:	d112      	bne.n	8003892 <HAL_RCC_OscConfig+0x62>
 800386c:	4b90      	ldr	r3, [pc, #576]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003874:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003878:	d10b      	bne.n	8003892 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800387a:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d06c      	beq.n	8003960 <HAL_RCC_OscConfig+0x130>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d168      	bne.n	8003960 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e236      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x7a>
 800389c:	4b84      	ldr	r3, [pc, #528]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a83      	ldr	r2, [pc, #524]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e02e      	b.n	8003908 <HAL_RCC_OscConfig+0xd8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x9c>
 80038b2:	4b7f      	ldr	r3, [pc, #508]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a7e      	ldr	r2, [pc, #504]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b7c      	ldr	r3, [pc, #496]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7b      	ldr	r2, [pc, #492]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e01d      	b.n	8003908 <HAL_RCC_OscConfig+0xd8>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d4:	d10c      	bne.n	80038f0 <HAL_RCC_OscConfig+0xc0>
 80038d6:	4b76      	ldr	r3, [pc, #472]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a75      	ldr	r2, [pc, #468]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	4b73      	ldr	r3, [pc, #460]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a72      	ldr	r2, [pc, #456]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e00b      	b.n	8003908 <HAL_RCC_OscConfig+0xd8>
 80038f0:	4b6f      	ldr	r3, [pc, #444]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a6e      	ldr	r2, [pc, #440]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038fa:	6013      	str	r3, [r2, #0]
 80038fc:	4b6c      	ldr	r3, [pc, #432]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6b      	ldr	r2, [pc, #428]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003906:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003910:	f7fe fcfc 	bl	800230c <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fcf8 	bl	800230c <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1ea      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b61      	ldr	r3, [pc, #388]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0xe8>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fce8 	bl	800230c <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003940:	f7fe fce4 	bl	800230c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b64      	cmp	r3, #100	; 0x64
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e1d6      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003952:	4b57      	ldr	r3, [pc, #348]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x110>
 800395e:	e000      	b.n	8003962 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003960:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d069      	beq.n	8003a42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800396e:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00b      	beq.n	8003992 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800397a:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b08      	cmp	r3, #8
 8003984:	d11c      	bne.n	80039c0 <HAL_RCC_OscConfig+0x190>
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d116      	bne.n	80039c0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_RCC_OscConfig+0x17a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d001      	beq.n	80039aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e1aa      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039aa:	4b41      	ldr	r3, [pc, #260]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	493d      	ldr	r1, [pc, #244]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039be:	e040      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d023      	beq.n	8003a10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039c8:	4b39      	ldr	r3, [pc, #228]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d4:	f7fe fc9a 	bl	800230c <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039dc:	f7fe fc96 	bl	800230c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e188      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b30      	ldr	r3, [pc, #192]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fa:	4b2d      	ldr	r3, [pc, #180]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4929      	ldr	r1, [pc, #164]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	600b      	str	r3, [r1, #0]
 8003a0e:	e018      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a10:	4b27      	ldr	r3, [pc, #156]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a26      	ldr	r2, [pc, #152]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fc76 	bl	800230c <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a24:	f7fe fc72 	bl	800230c <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e164      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d038      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d019      	beq.n	8003a8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a56:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5a:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7fe fc53 	bl	800230c <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a6a:	f7fe fc4f 	bl	800230c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e141      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x23a>
 8003a88:	e01a      	b.n	8003ac0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_RCC_OscConfig+0x280>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a96:	f7fe fc39 	bl	800230c <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a9c:	e00a      	b.n	8003ab4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a9e:	f7fe fc35 	bl	800230c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d903      	bls.n	8003ab4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e127      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
 8003ab0:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ab4:	4b94      	ldr	r3, [pc, #592]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1ee      	bne.n	8003a9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80a4 	beq.w	8003c16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ace:	4b8e      	ldr	r3, [pc, #568]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10d      	bne.n	8003af6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ada:	4b8b      	ldr	r3, [pc, #556]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ade:	4a8a      	ldr	r2, [pc, #552]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ae6:	4b88      	ldr	r3, [pc, #544]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aee:	60fb      	str	r3, [r7, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003af2:	2301      	movs	r3, #1
 8003af4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af6:	4b85      	ldr	r3, [pc, #532]	; (8003d0c <HAL_RCC_OscConfig+0x4dc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d118      	bne.n	8003b34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003b02:	4b82      	ldr	r3, [pc, #520]	; (8003d0c <HAL_RCC_OscConfig+0x4dc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a81      	ldr	r2, [pc, #516]	; (8003d0c <HAL_RCC_OscConfig+0x4dc>)
 8003b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0e:	f7fe fbfd 	bl	800230c <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7fe fbf9 	bl	800230c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0eb      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b28:	4b78      	ldr	r3, [pc, #480]	; (8003d0c <HAL_RCC_OscConfig+0x4dc>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d106      	bne.n	8003b4a <HAL_RCC_OscConfig+0x31a>
 8003b3c:	4b72      	ldr	r3, [pc, #456]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a71      	ldr	r2, [pc, #452]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
 8003b48:	e02d      	b.n	8003ba6 <HAL_RCC_OscConfig+0x376>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x33c>
 8003b52:	4b6d      	ldr	r3, [pc, #436]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b56:	4a6c      	ldr	r2, [pc, #432]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b5e:	4b6a      	ldr	r3, [pc, #424]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b62:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b64:	f023 0304 	bic.w	r3, r3, #4
 8003b68:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6a:	e01c      	b.n	8003ba6 <HAL_RCC_OscConfig+0x376>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	2b05      	cmp	r3, #5
 8003b72:	d10c      	bne.n	8003b8e <HAL_RCC_OscConfig+0x35e>
 8003b74:	4b64      	ldr	r3, [pc, #400]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b78:	4a63      	ldr	r2, [pc, #396]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b7a:	f043 0304 	orr.w	r3, r3, #4
 8003b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b80:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	4a60      	ldr	r2, [pc, #384]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b8c:	e00b      	b.n	8003ba6 <HAL_RCC_OscConfig+0x376>
 8003b8e:	4b5e      	ldr	r3, [pc, #376]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b92:	4a5d      	ldr	r2, [pc, #372]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	6713      	str	r3, [r2, #112]	; 0x70
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b9e:	4a5a      	ldr	r2, [pc, #360]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003ba0:	f023 0304 	bic.w	r3, r3, #4
 8003ba4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d015      	beq.n	8003bda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fe fbad 	bl	800230c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe fba9 	bl	800230c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e099      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bcc:	4b4e      	ldr	r3, [pc, #312]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ee      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x386>
 8003bd8:	e014      	b.n	8003c04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bda:	f7fe fb97 	bl	800230c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fe fb93 	bl	800230c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e083      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bf8:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1ee      	bne.n	8003be2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c04:	7dfb      	ldrb	r3, [r7, #23]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d105      	bne.n	8003c16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c0a:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a3e      	ldr	r2, [pc, #248]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d06f      	beq.n	8003cfe <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c1e:	4b3a      	ldr	r3, [pc, #232]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d067      	beq.n	8003cfa <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d149      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a34      	ldr	r2, [pc, #208]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fb65 	bl	800230c <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe fb61 	bl	800230c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e053      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c58:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d1f0      	bne.n	8003c46 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69da      	ldr	r2, [r3, #28]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	019b      	lsls	r3, r3, #6
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7a:	085b      	lsrs	r3, r3, #1
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	041b      	lsls	r3, r3, #16
 8003c80:	431a      	orrs	r2, r3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	4a1f      	ldr	r2, [pc, #124]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c90:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fb35 	bl	800230c <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ca4:	e008      	b.n	8003cb8 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe fb31 	bl	800230c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e023      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb8:	4b13      	ldr	r3, [pc, #76]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x476>
 8003cc4:	e01b      	b.n	8003cfe <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc6:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003ccc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd2:	f7fe fb1b 	bl	800230c <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe fb17 	bl	800230c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e009      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCC_OscConfig+0x4aa>
 8003cf8:	e001      	b.n	8003cfe <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40007000 	.word	0x40007000

08003d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e0ce      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d28:	4b69      	ldr	r3, [pc, #420]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 030f 	and.w	r3, r3, #15
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d910      	bls.n	8003d58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d36:	4b66      	ldr	r3, [pc, #408]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 020f 	bic.w	r2, r3, #15
 8003d3e:	4964      	ldr	r1, [pc, #400]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d46:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d001      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0b6      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d020      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d70:	4b58      	ldr	r3, [pc, #352]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	4a57      	ldr	r2, [pc, #348]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0308 	and.w	r3, r3, #8
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d005      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d88:	4b52      	ldr	r3, [pc, #328]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	4a51      	ldr	r2, [pc, #324]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d94:	4b4f      	ldr	r3, [pc, #316]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	494c      	ldr	r1, [pc, #304]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d040      	beq.n	8003e34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	4b46      	ldr	r3, [pc, #280]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d115      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e07d      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dd2:	4b40      	ldr	r3, [pc, #256]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d109      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e071      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de2:	4b3c      	ldr	r3, [pc, #240]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e069      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003df2:	4b38      	ldr	r3, [pc, #224]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 0203 	bic.w	r2, r3, #3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4935      	ldr	r1, [pc, #212]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e04:	f7fe fa82 	bl	800230c <HAL_GetTick>
 8003e08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	e00a      	b.n	8003e22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e0c:	f7fe fa7e 	bl	800230c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e051      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e22:	4b2c      	ldr	r3, [pc, #176]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 020c 	and.w	r2, r3, #12
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d1eb      	bne.n	8003e0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d210      	bcs.n	8003e64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e42:	4b23      	ldr	r3, [pc, #140]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 020f 	bic.w	r2, r3, #15
 8003e4a:	4921      	ldr	r1, [pc, #132]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 030f 	and.w	r3, r3, #15
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e030      	b.n	8003ec6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e70:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	4915      	ldr	r1, [pc, #84]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e8e:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	490d      	ldr	r1, [pc, #52]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ea2:	f000 f81d 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8003ea6:	4601      	mov	r1, r0
 8003ea8:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c4>)
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	091b      	lsrs	r3, r3, #4
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	4a09      	ldr	r2, [pc, #36]	; (8003ed8 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb4:	5cd3      	ldrb	r3, [r2, r3]
 8003eb6:	fa21 f303 	lsr.w	r3, r1, r3
 8003eba:	4a08      	ldr	r2, [pc, #32]	; (8003edc <HAL_RCC_ClockConfig+0x1cc>)
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ebe:	2000      	movs	r0, #0
 8003ec0:	f7fe f9e0 	bl	8002284 <HAL_InitTick>

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40023c00 	.word	0x40023c00
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	080083dc 	.word	0x080083dc
 8003edc:	20000000 	.word	0x20000000

08003ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	b085      	sub	sp, #20
 8003ee4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	607b      	str	r3, [r7, #4]
 8003eea:	2300      	movs	r3, #0
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef6:	4b63      	ldr	r3, [pc, #396]	; (8004084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d007      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x32>
 8003f02:	2b08      	cmp	r3, #8
 8003f04:	d008      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x38>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f040 80b4 	bne.w	8004074 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b5e      	ldr	r3, [pc, #376]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f0e:	60bb      	str	r3, [r7, #8]
       break;
 8003f10:	e0b3      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f12:	4b5e      	ldr	r3, [pc, #376]	; (800408c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003f14:	60bb      	str	r3, [r7, #8]
      break;
 8003f16:	e0b0      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f18:	4b5a      	ldr	r3, [pc, #360]	; (8004084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f20:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f22:	4b58      	ldr	r3, [pc, #352]	; (8004084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d04a      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2e:	4b55      	ldr	r3, [pc, #340]	; (8004084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	099b      	lsrs	r3, r3, #6
 8003f34:	f04f 0400 	mov.w	r4, #0
 8003f38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	ea03 0501 	and.w	r5, r3, r1
 8003f44:	ea04 0602 	and.w	r6, r4, r2
 8003f48:	4629      	mov	r1, r5
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	f04f 0400 	mov.w	r4, #0
 8003f54:	0154      	lsls	r4, r2, #5
 8003f56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f5a:	014b      	lsls	r3, r1, #5
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4622      	mov	r2, r4
 8003f60:	1b49      	subs	r1, r1, r5
 8003f62:	eb62 0206 	sbc.w	r2, r2, r6
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	f04f 0400 	mov.w	r4, #0
 8003f6e:	0194      	lsls	r4, r2, #6
 8003f70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f74:	018b      	lsls	r3, r1, #6
 8003f76:	1a5b      	subs	r3, r3, r1
 8003f78:	eb64 0402 	sbc.w	r4, r4, r2
 8003f7c:	f04f 0100 	mov.w	r1, #0
 8003f80:	f04f 0200 	mov.w	r2, #0
 8003f84:	00e2      	lsls	r2, r4, #3
 8003f86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f8a:	00d9      	lsls	r1, r3, #3
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4614      	mov	r4, r2
 8003f90:	195b      	adds	r3, r3, r5
 8003f92:	eb44 0406 	adc.w	r4, r4, r6
 8003f96:	f04f 0100 	mov.w	r1, #0
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	0262      	lsls	r2, r4, #9
 8003fa0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003fa4:	0259      	lsls	r1, r3, #9
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4614      	mov	r4, r2
 8003faa:	4618      	mov	r0, r3
 8003fac:	4621      	mov	r1, r4
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f04f 0400 	mov.w	r4, #0
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4623      	mov	r3, r4
 8003fb8:	f7fc f932 	bl	8000220 <__aeabi_uldivmod>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	e049      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fc4:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	099b      	lsrs	r3, r3, #6
 8003fca:	f04f 0400 	mov.w	r4, #0
 8003fce:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	ea03 0501 	and.w	r5, r3, r1
 8003fda:	ea04 0602 	and.w	r6, r4, r2
 8003fde:	4629      	mov	r1, r5
 8003fe0:	4632      	mov	r2, r6
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	f04f 0400 	mov.w	r4, #0
 8003fea:	0154      	lsls	r4, r2, #5
 8003fec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ff0:	014b      	lsls	r3, r1, #5
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4622      	mov	r2, r4
 8003ff6:	1b49      	subs	r1, r1, r5
 8003ff8:	eb62 0206 	sbc.w	r2, r2, r6
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	0194      	lsls	r4, r2, #6
 8004006:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800400a:	018b      	lsls	r3, r1, #6
 800400c:	1a5b      	subs	r3, r3, r1
 800400e:	eb64 0402 	sbc.w	r4, r4, r2
 8004012:	f04f 0100 	mov.w	r1, #0
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	00e2      	lsls	r2, r4, #3
 800401c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004020:	00d9      	lsls	r1, r3, #3
 8004022:	460b      	mov	r3, r1
 8004024:	4614      	mov	r4, r2
 8004026:	195b      	adds	r3, r3, r5
 8004028:	eb44 0406 	adc.w	r4, r4, r6
 800402c:	f04f 0100 	mov.w	r1, #0
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	02a2      	lsls	r2, r4, #10
 8004036:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800403a:	0299      	lsls	r1, r3, #10
 800403c:	460b      	mov	r3, r1
 800403e:	4614      	mov	r4, r2
 8004040:	4618      	mov	r0, r3
 8004042:	4621      	mov	r1, r4
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f04f 0400 	mov.w	r4, #0
 800404a:	461a      	mov	r2, r3
 800404c:	4623      	mov	r3, r4
 800404e:	f7fc f8e7 	bl	8000220 <__aeabi_uldivmod>
 8004052:	4603      	mov	r3, r0
 8004054:	460c      	mov	r4, r1
 8004056:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8004058:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0c1b      	lsrs	r3, r3, #16
 800405e:	f003 0303 	and.w	r3, r3, #3
 8004062:	3301      	adds	r3, #1
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004070:	60bb      	str	r3, [r7, #8]
      break;
 8004072:	e002      	b.n	800407a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004076:	60bb      	str	r3, [r7, #8]
      break;
 8004078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407a:	68bb      	ldr	r3, [r7, #8]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000000 	.word	0x20000000

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4601      	mov	r1, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4a03      	ldr	r2, [pc, #12]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	080083ec 	.word	0x080083ec

080040d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040d4:	f7ff ffdc 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040d8:	4601      	mov	r1, r0
 80040da:	4b05      	ldr	r3, [pc, #20]	; (80040f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	0b5b      	lsrs	r3, r3, #13
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	4a03      	ldr	r2, [pc, #12]	; (80040f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040e6:	5cd3      	ldrb	r3, [r2, r3]
 80040e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	40023800 	.word	0x40023800
 80040f4:	080083ec 	.word	0x080083ec

080040f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b088      	sub	sp, #32
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8004108:	2300      	movs	r3, #0
 800410a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d012      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800411c:	4b65      	ldr	r3, [pc, #404]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a64      	ldr	r2, [pc, #400]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004122:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004126:	6093      	str	r3, [r2, #8]
 8004128:	4b62      	ldr	r3, [pc, #392]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4960      	ldr	r1, [pc, #384]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413a:	2b00      	cmp	r3, #0
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d017      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800414e:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004150:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004154:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	4955      	ldr	r1, [pc, #340]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800416c:	d101      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d017      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800418c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004190:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	4946      	ldr	r1, [pc, #280]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a8:	d101      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80041aa:	2301      	movs	r3, #1
 80041ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80041b6:	2301      	movs	r3, #1
 80041b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f000 808b 	beq.w	80042de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041c8:	4b3a      	ldr	r3, [pc, #232]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	4a39      	ldr	r2, [pc, #228]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d2:	6413      	str	r3, [r2, #64]	; 0x40
 80041d4:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041e0:	4b35      	ldr	r3, [pc, #212]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a34      	ldr	r2, [pc, #208]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ec:	f7fe f88e 	bl	800230c <HAL_GetTick>
 80041f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f4:	f7fe f88a 	bl	800230c <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b64      	cmp	r3, #100	; 0x64
 8004200:	d901      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e2ba      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004206:	4b2c      	ldr	r3, [pc, #176]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0f0      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004212:	4b28      	ldr	r3, [pc, #160]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d035      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	429a      	cmp	r2, r3
 800422e:	d02e      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004230:	4b20      	ldr	r3, [pc, #128]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004238:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800423a:	4b1e      	ldr	r3, [pc, #120]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004246:	4b1b      	ldr	r3, [pc, #108]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a1a      	ldr	r2, [pc, #104]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800424c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004250:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004252:	4a18      	ldr	r2, [pc, #96]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004258:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d114      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe f852 	bl	800230c <HAL_GetTick>
 8004268:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	e00a      	b.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fe f84e 	bl	800230c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	; 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e27c      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004282:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0ee      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800429a:	d111      	bne.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042aa:	400b      	ands	r3, r1
 80042ac:	4901      	ldr	r1, [pc, #4]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
 80042b2:	e00b      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40007000 	.word	0x40007000
 80042bc:	0ffffcff 	.word	0x0ffffcff
 80042c0:	4ba3      	ldr	r3, [pc, #652]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	4aa2      	ldr	r2, [pc, #648]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042ca:	6093      	str	r3, [r2, #8]
 80042cc:	4ba0      	ldr	r3, [pc, #640]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042d8:	499d      	ldr	r1, [pc, #628]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ea:	4b99      	ldr	r3, [pc, #612]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042f0:	4a97      	ldr	r2, [pc, #604]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042fa:	4b95      	ldr	r3, [pc, #596]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80042fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004304:	4992      	ldr	r1, [pc, #584]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004306:	4313      	orrs	r3, r2
 8004308:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00a      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004318:	4b8d      	ldr	r3, [pc, #564]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800431a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800431e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004326:	498a      	ldr	r1, [pc, #552]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800433a:	4b85      	ldr	r3, [pc, #532]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004348:	4981      	ldr	r1, [pc, #516]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800434a:	4313      	orrs	r3, r2
 800434c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800435c:	4b7c      	ldr	r3, [pc, #496]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800435e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004362:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800436a:	4979      	ldr	r1, [pc, #484]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800437e:	4b74      	ldr	r3, [pc, #464]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004384:	f023 0203 	bic.w	r2, r3, #3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438c:	4970      	ldr	r1, [pc, #448]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a0:	4b6b      	ldr	r3, [pc, #428]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a6:	f023 020c 	bic.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4968      	ldr	r1, [pc, #416]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	495f      	ldr	r1, [pc, #380]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e4:	4b5a      	ldr	r3, [pc, #360]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f2:	4957      	ldr	r1, [pc, #348]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004406:	4b52      	ldr	r3, [pc, #328]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004414:	494e      	ldr	r1, [pc, #312]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004428:	4b49      	ldr	r3, [pc, #292]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004436:	4946      	ldr	r1, [pc, #280]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004438:	4313      	orrs	r3, r2
 800443a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00a      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800444a:	4b41      	ldr	r3, [pc, #260]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004458:	493d      	ldr	r1, [pc, #244]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800445a:	4313      	orrs	r3, r2
 800445c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800446c:	4b38      	ldr	r3, [pc, #224]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447a:	4935      	ldr	r1, [pc, #212]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d011      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800448e:	4b30      	ldr	r3, [pc, #192]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004494:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449c:	492c      	ldr	r1, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044ac:	d101      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80044ae:	2301      	movs	r3, #1
 80044b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044be:	4b24      	ldr	r3, [pc, #144]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044cc:	4920      	ldr	r1, [pc, #128]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80044e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044ee:	4918      	ldr	r1, [pc, #96]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004502:	4b13      	ldr	r3, [pc, #76]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004508:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004510:	490f      	ldr	r1, [pc, #60]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	2b01      	cmp	r3, #1
 800451c:	d005      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x432>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004526:	f040 809c 	bne.w	8004662 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a08      	ldr	r2, [pc, #32]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8004530:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004536:	f7fd fee9 	bl	800230c <HAL_GetTick>
 800453a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800453c:	e00a      	b.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800453e:	f7fd fee5 	bl	800230c <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b64      	cmp	r3, #100	; 0x64
 800454a:	d903      	bls.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e115      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8004550:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004554:	4b8b      	ldr	r3, [pc, #556]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ee      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	d017      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d113      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004574:	4b83      	ldr	r3, [pc, #524]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800457a:	0e1b      	lsrs	r3, r3, #24
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	019a      	lsls	r2, r3, #6
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	071b      	lsls	r3, r3, #28
 8004594:	497b      	ldr	r1, [pc, #492]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d004      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045b0:	d00a      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d024      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045c6:	d11f      	bne.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80045c8:	4b6e      	ldr	r3, [pc, #440]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80045ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ce:	0f1b      	lsrs	r3, r3, #28
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	019a      	lsls	r2, r3, #6
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	061b      	lsls	r3, r3, #24
 80045e2:	431a      	orrs	r2, r3
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	071b      	lsls	r3, r3, #28
 80045e8:	4966      	ldr	r1, [pc, #408]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80045f0:	4b64      	ldr	r3, [pc, #400]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80045f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f6:	f023 021f 	bic.w	r2, r3, #31
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	3b01      	subs	r3, #1
 8004600:	4960      	ldr	r1, [pc, #384]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004602:	4313      	orrs	r3, r2
 8004604:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	019a      	lsls	r2, r3, #6
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	061b      	lsls	r3, r3, #24
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	071b      	lsls	r3, r3, #28
 8004628:	4956      	ldr	r1, [pc, #344]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004630:	4b54      	ldr	r3, [pc, #336]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a53      	ldr	r2, [pc, #332]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800463a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800463c:	f7fd fe66 	bl	800230c <HAL_GetTick>
 8004640:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004642:	e008      	b.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004644:	f7fd fe62 	bl	800230c <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b64      	cmp	r3, #100	; 0x64
 8004650:	d901      	bls.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e092      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004656:	4b4b      	ldr	r3, [pc, #300]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0f0      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	2b01      	cmp	r3, #1
 8004666:	f040 8088 	bne.w	800477a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800466a:	4b46      	ldr	r3, [pc, #280]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a45      	ldr	r2, [pc, #276]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004676:	f7fd fe49 	bl	800230c <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800467e:	f7fd fe45 	bl	800230c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b64      	cmp	r3, #100	; 0x64
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e075      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004690:	4b3c      	ldr	r3, [pc, #240]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469c:	d0ef      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d024      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d120      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80046c6:	4b2f      	ldr	r3, [pc, #188]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80046c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046cc:	0c1b      	lsrs	r3, r3, #16
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	019a      	lsls	r2, r3, #6
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	041b      	lsls	r3, r3, #16
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	061b      	lsls	r3, r3, #24
 80046e6:	4927      	ldr	r1, [pc, #156]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80046ee:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 80046f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	3b01      	subs	r3, #1
 80046fe:	021b      	lsls	r3, r3, #8
 8004700:	4920      	ldr	r1, [pc, #128]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d018      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471c:	d113      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800471e:	4b19      	ldr	r3, [pc, #100]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004724:	0e1b      	lsrs	r3, r3, #24
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	019a      	lsls	r2, r3, #6
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	431a      	orrs	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	061b      	lsls	r3, r3, #24
 800473e:	4911      	ldr	r1, [pc, #68]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a0e      	ldr	r2, [pc, #56]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800474c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004752:	f7fd fddb 	bl	800230c <HAL_GetTick>
 8004756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004758:	e008      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800475a:	f7fd fdd7 	bl	800230c <HAL_GetTick>
 800475e:	4602      	mov	r2, r0
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	2b64      	cmp	r3, #100	; 0x64
 8004766:	d901      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e007      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800476c:	4b05      	ldr	r3, [pc, #20]	; (8004784 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004778:	d1ef      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40023800 	.word	0x40023800

08004788 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e01d      	b.n	80047d6 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d105      	bne.n	80047b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fc fc71 	bl	8001094 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2203      	movs	r2, #3
 80047b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f80f 	bl	80047de <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80047de:	b5b0      	push	{r4, r5, r7, lr}
 80047e0:	b08e      	sub	sp, #56	; 0x38
 80047e2:	af04      	add	r7, sp, #16
 80047e4:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80047e6:	2300      	movs	r3, #0
 80047e8:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80047ee:	2300      	movs	r3, #0
 80047f0:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80047fe:	2376      	movs	r3, #118	; 0x76
 8004800:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	466c      	mov	r4, sp
 8004808:	f107 0318 	add.w	r3, r7, #24
 800480c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004810:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800481a:	4628      	mov	r0, r5
 800481c:	f002 ff24 	bl	8007668 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800482e:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f002 ff61 	bl	80076fc <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004848:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 800484a:	2002      	movs	r0, #2
 800484c:	f7fd fd6a 	bl	8002324 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f001 f841 	bl	80058d8 <SD_PowerON>
 8004856:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8004858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00b      	beq.n	8004876 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e013      	b.n	800489e <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 ff65 	bl	8005746 <SD_InitCard>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 800487e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00b      	beq.n	800489c <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	431a      	orrs	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3728      	adds	r7, #40	; 0x28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bdb0      	pop	{r4, r5, r7, pc}

080048a6 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80048a6:	b590      	push	{r4, r7, lr}
 80048a8:	b08f      	sub	sp, #60	; 0x3c
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	60f8      	str	r0, [r7, #12]
 80048ae:	60b9      	str	r1, [r7, #8]
 80048b0:	607a      	str	r2, [r7, #4]
 80048b2:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80048b4:	2300      	movs	r3, #0
 80048b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 80048b8:	f7fd fd28 	bl	800230c <HAL_GetTick>
 80048bc:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
 80048be:	2300      	movs	r3, #0
 80048c0:	633b      	str	r3, [r7, #48]	; 0x30
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <HAL_SD_ReadBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e176      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	f040 8169 	bne.w	8004bbc <HAL_SD_ReadBlocks+0x316>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	441a      	add	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d907      	bls.n	800490e <HAL_SD_ReadBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004902:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e15d      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2203      	movs	r2, #3
 8004912:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	2b01      	cmp	r3, #1
 8004924:	d002      	beq.n	800492c <HAL_SD_ReadBlocks+0x86>
    {
      BlockAdd *= 512;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	025b      	lsls	r3, r3, #9
 800492a:	607b      	str	r3, [r7, #4]
    }
      
    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004934:	4618      	mov	r0, r3
 8004936:	f002 ff75 	bl	8007824 <SDMMC_CmdBlockLength>
 800493a:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 800493c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	d010      	beq.n	8004964 <HAL_SD_ReadBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800494a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	431a      	orrs	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e132      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004964:	f04f 33ff 	mov.w	r3, #4294967295
 8004968:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	025b      	lsls	r3, r3, #9
 800496e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004970:	2390      	movs	r3, #144	; 0x90
 8004972:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004974:	2302      	movs	r3, #2
 8004976:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004978:	2300      	movs	r3, #0
 800497a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800497c:	2301      	movs	r3, #1
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f107 0210 	add.w	r2, r7, #16
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f002 ff1e 	bl	80077cc <SDMMC_ConfigData>
    
    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d90a      	bls.n	80049ac <HAL_SD_ReadBlocks+0x106>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2202      	movs	r2, #2
 800499a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f002 ff86 	bl	80078b4 <SDMMC_CmdReadMultiBlock>
 80049a8:	6378      	str	r0, [r7, #52]	; 0x34
 80049aa:	e009      	b.n	80049c0 <HAL_SD_ReadBlocks+0x11a>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2201      	movs	r2, #1
 80049b0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6879      	ldr	r1, [r7, #4]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f002 ff57 	bl	800786c <SDMMC_CmdReadSingleBlock>
 80049be:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80049c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d04a      	beq.n	8004a5c <HAL_SD_ReadBlocks+0x1b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80049ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0f0      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    }
      
    /* Poll on SDMMC flags */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_SD_ReadBlocks+0x17e>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 80049fa:	e00d      	b.n	8004a18 <HAL_SD_ReadBlocks+0x172>
        {
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6819      	ldr	r1, [r3, #0]
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a06:	18d4      	adds	r4, r2, r3
 8004a08:	4608      	mov	r0, r1
 8004a0a:	f002 fe59 	bl	80076c0 <SDMMC_ReadFIFO>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	6023      	str	r3, [r4, #0]
        for(count = 0U; count < 8U; count++)
 8004a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a14:	3301      	adds	r3, #1
 8004a16:	633b      	str	r3, [r7, #48]	; 0x30
 8004a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1a:	2b07      	cmp	r3, #7
 8004a1c:	d9ee      	bls.n	80049fc <HAL_SD_ReadBlocks+0x156>
        }
        tempbuff += 8U;
 8004a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a20:	3320      	adds	r3, #32
 8004a22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004a24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <HAL_SD_ReadBlocks+0x194>
 8004a2a:	f7fd fc6f 	bl	800230c <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d810      	bhi.n	8004a5c <HAL_SD_ReadBlocks+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e0b6      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a62:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0be      	beq.n	80049e8 <HAL_SD_ReadBlocks+0x142>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d020      	beq.n	8004aba <HAL_SD_ReadBlocks+0x214>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d91d      	bls.n	8004aba <HAL_SD_ReadBlocks+0x214>
    {    
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d019      	beq.n	8004aba <HAL_SD_ReadBlocks+0x214>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f002 ff7e 	bl	800798c <SDMMC_CmdStopTransfer>
 8004a90:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8004a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d010      	beq.n	8004aba <HAL_SD_ReadBlocks+0x214>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e087      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d010      	beq.n	8004aea <HAL_SD_ReadBlocks+0x244>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004ad0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	f043 0208 	orr.w	r2, r3, #8
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e06f      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d010      	beq.n	8004b1a <HAL_SD_ReadBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b00:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	f043 0202 	orr.w	r2, r3, #2
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e057      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d037      	beq.n	8004b98 <HAL_SD_ReadBlocks+0x2f2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e03f      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    }
    
    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
    {
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f002 fdb6 	bl	80076c0 <SDMMC_ReadFIFO>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b58:	601a      	str	r2, [r3, #0]
      tempbuff++;
 8004b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004b60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d007      	beq.n	8004b76 <HAL_SD_ReadBlocks+0x2d0>
 8004b66:	f7fd fbd1 	bl	800230c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d810      	bhi.n	8004b98 <HAL_SD_ReadBlocks+0x2f2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e018      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1d1      	bne.n	8004b4a <HAL_SD_ReadBlocks+0x2a4>
      }
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e006      	b.n	8004bca <HAL_SD_ReadBlocks+0x324>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	373c      	adds	r7, #60	; 0x3c
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd90      	pop	{r4, r7, pc}

08004bd2 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b08e      	sub	sp, #56	; 0x38
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	60f8      	str	r0, [r7, #12]
 8004bda:	60b9      	str	r1, [r7, #8]
 8004bdc:	607a      	str	r2, [r7, #4]
 8004bde:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart = HAL_GetTick();
 8004be4:	f7fd fb92 	bl	800230c <HAL_GetTick>
 8004be8:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t count = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t *tempbuff = (uint32_t *)pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_SD_WriteBlocks+0x36>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e147      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	f040 813a 	bne.w	8004e8a <HAL_SD_WriteBlocks+0x2b8>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	441a      	add	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d907      	bls.n	8004c3a <HAL_SD_WriteBlocks+0x68>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e12e      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c
     
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d002      	beq.n	8004c58 <HAL_SD_WriteBlocks+0x86>
    {
      BlockAdd *= 512;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	025b      	lsls	r3, r3, #9
 8004c56:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c60:	4618      	mov	r0, r3
 8004c62:	f002 fddf 	bl	8007824 <SDMMC_CmdBlockLength>
 8004c66:	6378      	str	r0, [r7, #52]	; 0x34
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d010      	beq.n	8004c90 <HAL_SD_WriteBlocks+0xbe>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004c76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e103      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d90a      	bls.n	8004cac <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	6879      	ldr	r1, [r7, #4]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f002 fe4e 	bl	8007944 <SDMMC_CmdWriteMultiBlock>
 8004ca8:	6378      	str	r0, [r7, #52]	; 0x34
 8004caa:	e009      	b.n	8004cc0 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2210      	movs	r2, #16
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6879      	ldr	r1, [r7, #4]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f002 fe1f 	bl	80078fc <SDMMC_CmdWriteSingleBlock>
 8004cbe:	6378      	str	r0, [r7, #52]	; 0x34
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d010      	beq.n	8004ce8 <HAL_SD_WriteBlocks+0x116>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004cce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0d7      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cec:	613b      	str	r3, [r7, #16]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004cf4:	2390      	movs	r3, #144	; 0x90
 8004cf6:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8004d00:	2301      	movs	r3, #1
 8004d02:	627b      	str	r3, [r7, #36]	; 0x24
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f107 0210 	add.w	r2, r7, #16
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f002 fd5c 	bl	80077cc <SDMMC_ConfigData>
    
    /* Write block(s) in polling mode */
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d14:	e037      	b.n	8004d86 <HAL_SD_WriteBlocks+0x1b4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d014      	beq.n	8004d4e <HAL_SD_WriteBlocks+0x17c>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004d24:	2300      	movs	r3, #0
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30
 8004d28:	e00b      	b.n	8004d42 <HAL_SD_WriteBlocks+0x170>
        {
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d34:	4413      	add	r3, r2
 8004d36:	4619      	mov	r1, r3
 8004d38:	f002 fccf 	bl	80076da <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	3301      	adds	r3, #1
 8004d40:	633b      	str	r3, [r7, #48]	; 0x30
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	2b07      	cmp	r3, #7
 8004d46:	d9f0      	bls.n	8004d2a <HAL_SD_WriteBlocks+0x158>
        }
        tempbuff += 8U;
 8004d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d4a:	3320      	adds	r3, #32
 8004d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8004d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <HAL_SD_WriteBlocks+0x192>
 8004d54:	f7fd fada 	bl	800230c <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d810      	bhi.n	8004d86 <HAL_SD_WriteBlocks+0x1b4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e088      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0c0      	beq.n	8004d16 <HAL_SD_WriteBlocks+0x144>
      }
    }
    
    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d020      	beq.n	8004de4 <HAL_SD_WriteBlocks+0x212>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d91d      	bls.n	8004de4 <HAL_SD_WriteBlocks+0x212>
    { 
      if(hsd->SdCard.CardType != CARD_SECURED)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d019      	beq.n	8004de4 <HAL_SD_WriteBlocks+0x212>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f002 fde9 	bl	800798c <SDMMC_CmdStopTransfer>
 8004dba:	6378      	str	r0, [r7, #52]	; 0x34
        if(errorstate != HAL_SD_ERROR_NONE)
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d010      	beq.n	8004de4 <HAL_SD_WriteBlocks+0x212>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004dca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e059      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
        }
      }
    }
    
    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d010      	beq.n	8004e14 <HAL_SD_WriteBlocks+0x242>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	f043 0208 	orr.w	r2, r3, #8
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e041      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d010      	beq.n	8004e44 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	f043 0202 	orr.w	r2, r3, #2
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e029      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	f003 0310 	and.w	r3, r3, #16
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d010      	beq.n	8004e74 <HAL_SD_WriteBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	f043 0210 	orr.w	r2, r3, #16
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e011      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
    }
    
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    hsd->State = HAL_SD_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_OK;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e006      	b.n	8004e98 <HAL_SD_WriteBlocks+0x2c6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
  }
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3738      	adds	r7, #56	; 0x38
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
  
  /* Check for SDMMC interrupt flags */
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 808b 	beq.w	8004fd2 <HAL_SD_IRQHandler+0x132>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004ed4:	63da      	str	r2, [r3, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
    
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0308 	and.w	r3, r3, #8
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d03a      	beq.n	8004f58 <HAL_SD_IRQHandler+0xb8>
    {
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d105      	bne.n	8004efa <HAL_SD_IRQHandler+0x5a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef2:	f003 0320 	and.w	r3, r3, #32
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d011      	beq.n	8004f1e <HAL_SD_IRQHandler+0x7e>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f002 fd44 	bl	800798c <SDMMC_CmdStopTransfer>
 8004f04:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_SD_IRQHandler+0x7e>
        {
          hsd->ErrorCode |= errorstate;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f915 	bl	8005148 <HAL_SD_ErrorCallback>
#endif
        }
      }
      
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8004f26:	639a      	str	r2, [r3, #56]	; 0x38
      
      hsd->State = HAL_SD_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d105      	bne.n	8004f48 <HAL_SD_IRQHandler+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <HAL_SD_IRQHandler+0xb0>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7fb fc33 	bl	80007b4 <HAL_SD_RxCpltCallback>
#else
      HAL_SD_ErrorCallback(hsd);
#endif
    }
  }
}
 8004f4e:	e0f3      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
        HAL_SD_TxCpltCallback(hsd);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fb fc25 	bl	80007a0 <HAL_SD_TxCpltCallback>
}
 8004f56:	e0ef      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 80e9 	beq.w	8005138 <HAL_SD_IRQHandler+0x298>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d011      	beq.n	8004f96 <HAL_SD_IRQHandler+0xf6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f002 fd08 	bl	800798c <SDMMC_CmdStopTransfer>
 8004f7c:	60f8      	str	r0, [r7, #12]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_SD_IRQHandler+0xf6>
          hsd->ErrorCode |= errorstate;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 f8d9 	bl	8005148 <HAL_SD_ErrorCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f040 80ca 	bne.w	8005138 <HAL_SD_IRQHandler+0x298>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f040 80c3 	bne.w	8005138 <HAL_SD_IRQHandler+0x298>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f022 0208 	bic.w	r2, r2, #8
 8004fc0:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fb fbe8 	bl	80007a0 <HAL_SD_TxCpltCallback>
}
 8004fd0:	e0b2      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_SD_IRQHandler+0x152>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fe8:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Write_IT(hsd);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fd6e 	bl	8005acc <SD_Write_IT>
}
 8004ff0:	e0a2      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d008      	beq.n	8005012 <HAL_SD_IRQHandler+0x172>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005008:	639a      	str	r2, [r3, #56]	; 0x38
    SD_Read_IT(hsd);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fd36 	bl	8005a7c <SD_Read_IT>
}
 8005010:	e092      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005018:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 808b 	beq.w	8005138 <HAL_SD_IRQHandler+0x298>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d005      	beq.n	800503c <HAL_SD_IRQHandler+0x19c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	f043 0202 	orr.w	r2, r3, #2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d005      	beq.n	8005056 <HAL_SD_IRQHandler+0x1b6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504e:	f043 0208 	orr.w	r2, r3, #8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505c:	f003 0320 	and.w	r3, r3, #32
 8005060:	2b00      	cmp	r3, #0
 8005062:	d005      	beq.n	8005070 <HAL_SD_IRQHandler+0x1d0>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005082:	f043 0210 	orr.w	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005092:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80050a2:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d036      	beq.n	800511e <HAL_SD_IRQHandler+0x27e>
      if(hsd->hdmatx != NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d011      	beq.n	80050dc <HAL_SD_IRQHandler+0x23c>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	4a20      	ldr	r2, [pc, #128]	; (8005140 <HAL_SD_IRQHandler+0x2a0>)
 80050be:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fd fdef 	bl	8002ca8 <HAL_DMA_Abort_IT>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d033      	beq.n	8005138 <HAL_SD_IRQHandler+0x298>
          SD_DMATxAbort(hsd->hdmatx);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 faba 	bl	800564e <SD_DMATxAbort>
}
 80050da:	e02d      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
      else if(hsd->hdmarx != NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d011      	beq.n	8005108 <HAL_SD_IRQHandler+0x268>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	4a16      	ldr	r2, [pc, #88]	; (8005144 <HAL_SD_IRQHandler+0x2a4>)
 80050ea:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7fd fdd9 	bl	8002ca8 <HAL_DMA_Abort_IT>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01d      	beq.n	8005138 <HAL_SD_IRQHandler+0x298>
          SD_DMARxAbort(hsd->hdmarx);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fae2 	bl	80056ca <SD_DMARxAbort>
}
 8005106:	e017      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7fb fb38 	bl	800078c <HAL_SD_AbortCallback>
}
 800511c:	e00c      	b.n	8005138 <HAL_SD_IRQHandler+0x298>
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d006      	beq.n	8005138 <HAL_SD_IRQHandler+0x298>
      hsd->State = HAL_SD_STATE_READY;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f808 	bl	8005148 <HAL_SD_ErrorCallback>
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	0800564f 	.word	0x0800564f
 8005144:	080056cb 	.word	0x080056cb

08005148 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8005150:	bf00      	nop
 8005152:	370c      	adds	r7, #12
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr

0800515c <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800516e:	0e1b      	lsrs	r3, r3, #24
 8005170:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	099b      	lsrs	r3, r3, #6
 8005176:	b2db      	uxtb	r3, r3
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	b2da      	uxtb	r2, r3
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	089b      	lsrs	r3, r3, #2
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	b2da      	uxtb	r2, r3
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	b2db      	uxtb	r3, r3
 8005196:	f003 0303 	and.w	r3, r3, #3
 800519a:	b2da      	uxtb	r2, r3
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a4:	0c1b      	lsrs	r3, r3, #16
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	b2da      	uxtb	r2, r3
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d8:	0e1b      	lsrs	r3, r3, #24
 80051da:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	b29b      	uxth	r3, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ec:	0c1b      	lsrs	r3, r3, #16
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	88db      	ldrh	r3, [r3, #6]
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	091b      	lsrs	r3, r3, #4
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	b29b      	uxth	r3, r3
 8005204:	4313      	orrs	r3, r2
 8005206:	b29a      	uxth	r2, r3
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	b2da      	uxtb	r2, r3
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800521e:	0a1b      	lsrs	r3, r3, #8
 8005220:	b2db      	uxtb	r3, r3
 8005222:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	09db      	lsrs	r3, r3, #7
 8005228:	b2db      	uxtb	r3, r3
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	b2da      	uxtb	r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	b2db      	uxtb	r3, r3
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	b2da      	uxtb	r2, r3
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	b2db      	uxtb	r3, r3
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	b2da      	uxtb	r2, r3
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 8086 	bne.w	8005380 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	029b      	lsls	r3, r3, #10
 8005278:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005284:	b2db      	uxtb	r3, r3
 8005286:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	431a      	orrs	r2, r3
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529a:	0e1b      	lsrs	r3, r3, #24
 800529c:	b2db      	uxtb	r3, r3
 800529e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	691a      	ldr	r2, [r3, #16]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	099b      	lsrs	r3, r3, #6
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	08db      	lsrs	r3, r3, #3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d4:	0c1b      	lsrs	r3, r3, #16
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	095b      	lsrs	r3, r3, #5
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	089b      	lsrs	r3, r3, #2
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	f003 0306 	and.w	r3, r3, #6
 8005306:	b2da      	uxtb	r2, r3
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005310:	0a1b      	lsrs	r3, r3, #8
 8005312:	b2db      	uxtb	r3, r3
 8005314:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	7e1b      	ldrb	r3, [r3, #24]
 800531a:	b2da      	uxtb	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	09db      	lsrs	r3, r3, #7
 8005320:	b2db      	uxtb	r3, r3
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	4313      	orrs	r3, r2
 800532a:	b2da      	uxtb	r2, r3
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	7e1b      	ldrb	r3, [r3, #24]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	3302      	adds	r3, #2
 8005342:	2201      	movs	r2, #1
 8005344:	409a      	lsls	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	fb02 f203 	mul.w	r2, r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	7a1b      	ldrb	r3, [r3, #8]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	461a      	mov	r2, r3
 800535a:	2301      	movs	r3, #1
 800535c:	4093      	lsls	r3, r2
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800536c:	0a52      	lsrs	r2, r2, #9
 800536e:	fb02 f203 	mul.w	r2, r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f44f 7200 	mov.w	r2, #512	; 0x200
 800537c:	661a      	str	r2, [r3, #96]	; 0x60
 800537e:	e04d      	b.n	800541c <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	2b01      	cmp	r3, #1
 8005386:	d138      	bne.n	80053fa <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800538c:	b2db      	uxtb	r3, r3
 800538e:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	041b      	lsls	r3, r3, #16
 8005394:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053a0:	0e1b      	lsrs	r3, r3, #24
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	431a      	orrs	r2, r3
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	3301      	adds	r3, #1
 80053da:	029a      	lsls	r2, r3, #10
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	655a      	str	r2, [r3, #84]	; 0x54
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ee:	659a      	str	r2, [r3, #88]	; 0x58
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	661a      	str	r2, [r3, #96]	; 0x60
 80053f8:	e010      	b.n	800541c <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8005402:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005408:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e0c1      	b.n	80055a0 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	099b      	lsrs	r3, r3, #6
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	b2da      	uxtb	r2, r3
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005438:	b2da      	uxtb	r2, r3
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005442:	b2db      	uxtb	r3, r3
 8005444:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	7e9b      	ldrb	r3, [r3, #26]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	09db      	lsrs	r3, r3, #7
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	b2db      	uxtb	r3, r3
 8005458:	4313      	orrs	r3, r2
 800545a:	b2da      	uxtb	r2, r3
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005468:	b2da      	uxtb	r2, r3
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	0e1b      	lsrs	r3, r3, #24
 8005474:	b2db      	uxtb	r3, r3
 8005476:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	09db      	lsrs	r3, r3, #7
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	b2da      	uxtb	r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	095b      	lsrs	r3, r3, #5
 800548c:	b2db      	uxtb	r3, r3
 800548e:	f003 0303 	and.w	r3, r3, #3
 8005492:	b2da      	uxtb	r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	089b      	lsrs	r3, r3, #2
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	f003 030c 	and.w	r3, r3, #12
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054be:	0c1b      	lsrs	r3, r3, #16
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	7fdb      	ldrb	r3, [r3, #31]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	099b      	lsrs	r3, r3, #6
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	4313      	orrs	r3, r2
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	b2da      	uxtb	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550c:	0a1b      	lsrs	r3, r3, #8
 800550e:	b2db      	uxtb	r3, r3
 8005510:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	b2da      	uxtb	r2, r3
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	b2da      	uxtb	r2, r3
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	095b      	lsrs	r3, r3, #5
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	b2da      	uxtb	r2, r3
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	b2db      	uxtb	r3, r3
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	b2da      	uxtb	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	089b      	lsrs	r3, r3, #2
 800555e:	b2db      	uxtb	r3, r3
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	b2da      	uxtb	r2, r3
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	b2db      	uxtb	r3, r3
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	b2da      	uxtb	r2, r3
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005580:	b2db      	uxtb	r3, r3
 8005582:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	085b      	lsrs	r3, r3, #1
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800558e:	b2da      	uxtb	r2, r3
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 800559e:	2300      	movs	r3, #0
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 800560c:	2304      	movs	r3, #4
 800560e:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005610:	2300      	movs	r3, #0
 8005612:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8005618:	f107 030c 	add.w	r3, r7, #12
 800561c:	4619      	mov	r1, r3
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fa02 	bl	8005a28 <SD_SendStatus>
 8005624:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	431a      	orrs	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	0a5b      	lsrs	r3, r3, #9
 800563c:	b2db      	uxtb	r3, r3
 800563e:	f003 030f 	and.w	r3, r3, #15
 8005642:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8005644:	7dfb      	ldrb	r3, [r7, #23]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3718      	adds	r7, #24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <SD_DMATxAbort+0x1c>
  {
    hsd->hdmatx = NULL;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800566e:	2b00      	cmp	r3, #0
 8005670:	d127      	bne.n	80056c2 <SD_DMATxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 8005672:	68f8      	ldr	r0, [r7, #12]
 8005674:	f7ff ffc6 	bl	8005604 <HAL_SD_GetCardState>
 8005678:	4603      	mov	r3, r0
 800567a:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800568a:	7afb      	ldrb	r3, [r7, #11]
 800568c:	2b06      	cmp	r3, #6
 800568e:	d002      	beq.n	8005696 <SD_DMATxAbort+0x48>
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d115      	bne.n	80056c2 <SD_DMATxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4618      	mov	r0, r3
 800569c:	f002 f976 	bl	800798c <SDMMC_CmdStopTransfer>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d003      	beq.n	80056bc <SD_DMATxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f7fb f869 	bl	800078c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 80056ba:	e002      	b.n	80056c2 <SD_DMATxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f7ff fd43 	bl	8005148 <HAL_SD_ErrorCallback>
}
 80056c2:	bf00      	nop
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)   
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b084      	sub	sp, #16
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmarx != NULL)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <SD_DMARxAbort+0x1c>
  {
    hsd->hdmarx = NULL;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmatx == NULL)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d127      	bne.n	800573e <SD_DMARxAbort+0x74>
  {
    CardState = HAL_SD_GetCardState(hsd);
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f7ff ff88 	bl	8005604 <HAL_SD_GetCardState>
 80056f4:	4603      	mov	r3, r0
 80056f6:	72fb      	strb	r3, [r7, #11]
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005706:	7afb      	ldrb	r3, [r7, #11]
 8005708:	2b06      	cmp	r3, #6
 800570a:	d002      	beq.n	8005712 <SD_DMARxAbort+0x48>
 800570c:	7afb      	ldrb	r3, [r7, #11]
 800570e:	2b05      	cmp	r3, #5
 8005710:	d115      	bne.n	800573e <SD_DMARxAbort+0x74>
    {
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f002 f938 	bl	800798c <SDMMC_CmdStopTransfer>
 800571c:	4602      	mov	r2, r0
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	431a      	orrs	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	639a      	str	r2, [r3, #56]	; 0x38
      
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d003      	beq.n	8005738 <SD_DMARxAbort+0x6e>
      {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
        hsd->AbortCpltCallback(hsd);
#else
        HAL_SD_AbortCallback(hsd);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7fb f82b 	bl	800078c <HAL_SD_AbortCallback>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8005736:	e002      	b.n	800573e <SD_DMARxAbort+0x74>
        HAL_SD_ErrorCallback(hsd);
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f7ff fd05 	bl	8005148 <HAL_SD_ErrorCallback>
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005746:	b5b0      	push	{r4, r5, r7, lr}
 8005748:	b094      	sub	sp, #80	; 0x50
 800574a:	af04      	add	r7, sp, #16
 800574c:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800574e:	2300      	movs	r3, #0
 8005750:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8005752:	2301      	movs	r3, #1
 8005754:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f001 ffdc 	bl	8007718 <SDMMC_GetPowerState>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005766:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800576a:	e0b1      	b.n	80058d0 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005770:	2b03      	cmp	r3, #3
 8005772:	d02f      	beq.n	80057d4 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f002 f9db 	bl	8007b34 <SDMMC_CmdSendCID>
 800577e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d001      	beq.n	800578a <SD_InitCard+0x44>
    {
      return errorstate;
 8005786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005788:	e0a2      	b.n	80058d0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f002 f806 	bl	80077a2 <SDMMC_GetResponse>
 8005796:	4602      	mov	r2, r0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2104      	movs	r1, #4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 fffd 	bl	80077a2 <SDMMC_GetResponse>
 80057a8:	4602      	mov	r2, r0
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2108      	movs	r1, #8
 80057b4:	4618      	mov	r0, r3
 80057b6:	f001 fff4 	bl	80077a2 <SDMMC_GetResponse>
 80057ba:	4602      	mov	r2, r0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	210c      	movs	r1, #12
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 ffeb 	bl	80077a2 <SDMMC_GetResponse>
 80057cc:	4602      	mov	r2, r0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d00d      	beq.n	80057f8 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f107 020e 	add.w	r2, r7, #14
 80057e4:	4611      	mov	r1, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 f9e5 	bl	8007bb6 <SDMMC_CmdSetRelAdd>
 80057ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80057ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d001      	beq.n	80057f8 <SD_InitCard+0xb2>
    {
      return errorstate;
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	e06b      	b.n	80058d0 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fc:	2b03      	cmp	r3, #3
 80057fe:	d036      	beq.n	800586e <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005800:	89fb      	ldrh	r3, [r7, #14]
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005810:	041b      	lsls	r3, r3, #16
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f002 f9ad 	bl	8007b74 <SDMMC_CmdSendCSD>
 800581a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <SD_InitCard+0xe0>
    {
      return errorstate;
 8005822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005824:	e054      	b.n	80058d0 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f001 ffb8 	bl	80077a2 <SDMMC_GetResponse>
 8005832:	4602      	mov	r2, r0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2104      	movs	r1, #4
 800583e:	4618      	mov	r0, r3
 8005840:	f001 ffaf 	bl	80077a2 <SDMMC_GetResponse>
 8005844:	4602      	mov	r2, r0
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2108      	movs	r1, #8
 8005850:	4618      	mov	r0, r3
 8005852:	f001 ffa6 	bl	80077a2 <SDMMC_GetResponse>
 8005856:	4602      	mov	r2, r0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	210c      	movs	r1, #12
 8005862:	4618      	mov	r0, r3
 8005864:	f001 ff9d 	bl	80077a2 <SDMMC_GetResponse>
 8005868:	4602      	mov	r2, r0
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2104      	movs	r1, #4
 8005874:	4618      	mov	r0, r3
 8005876:	f001 ff94 	bl	80077a2 <SDMMC_GetResponse>
 800587a:	4603      	mov	r3, r0
 800587c:	0d1a      	lsrs	r2, r3, #20
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005882:	f107 0310 	add.w	r3, r7, #16
 8005886:	4619      	mov	r1, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7ff fc67 	bl	800515c <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6819      	ldr	r1, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	f04f 0400 	mov.w	r4, #0
 800589c:	461a      	mov	r2, r3
 800589e:	4623      	mov	r3, r4
 80058a0:	4608      	mov	r0, r1
 80058a2:	f002 f897 	bl	80079d4 <SDMMC_CmdSelDesel>
 80058a6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80058a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d001      	beq.n	80058b2 <SD_InitCard+0x16c>
  {
    return errorstate;
 80058ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058b0:	e00e      	b.n	80058d0 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681d      	ldr	r5, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	466c      	mov	r4, sp
 80058ba:	f103 0210 	add.w	r2, r3, #16
 80058be:	ca07      	ldmia	r2, {r0, r1, r2}
 80058c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058c4:	3304      	adds	r3, #4
 80058c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058c8:	4628      	mov	r0, r5
 80058ca:	f001 fecd 	bl	8007668 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3740      	adds	r7, #64	; 0x40
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bdb0      	pop	{r4, r5, r7, pc}

080058d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	2300      	movs	r3, #0
 80058ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f002 f892 	bl	8007a1e <SDMMC_CmdGoIdleState>
 80058fa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <SD_PowerON+0x2e>
  {
    return errorstate;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	e08c      	b.n	8005a20 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f002 f8a7 	bl	8007a5e <SDMMC_CmdOperCond>
 8005910:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d03d      	beq.n	8005994 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800591e:	e032      	b.n	8005986 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	60ba      	str	r2, [r7, #8]
 8005926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800592a:	4293      	cmp	r3, r2
 800592c:	d102      	bne.n	8005934 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800592e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005932:	e075      	b.n	8005a20 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2100      	movs	r1, #0
 800593a:	4618      	mov	r0, r3
 800593c:	f002 f8b0 	bl	8007aa0 <SDMMC_CmdAppCommand>
 8005940:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005948:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800594c:	e068      	b.n	8005a20 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f002 f8c7 	bl	8007ae8 <SDMMC_CmdAppOperCommand>
 800595a:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005962:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005966:	e05b      	b.n	8005a20 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f001 ff17 	bl	80077a2 <SDMMC_GetResponse>
 8005974:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	0fdb      	lsrs	r3, r3, #31
 800597a:	2b01      	cmp	r3, #1
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d0c9      	beq.n	8005920 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	645a      	str	r2, [r3, #68]	; 0x44
 8005992:	e044      	b.n	8005a1e <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 800599a:	e031      	b.n	8005a00 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	60ba      	str	r2, [r7, #8]
 80059a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d102      	bne.n	80059b0 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80059aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059ae:	e037      	b.n	8005a20 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f002 f872 	bl	8007aa0 <SDMMC_CmdAppCommand>
 80059bc:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <SD_PowerON+0xf0>
      {
        return errorstate;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	e02b      	b.n	8005a20 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80059d0:	4618      	mov	r0, r3
 80059d2:	f002 f889 	bl	8007ae8 <SDMMC_CmdAppOperCommand>
 80059d6:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <SD_PowerON+0x10a>
      {
        return errorstate;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	e01e      	b.n	8005a20 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2100      	movs	r1, #0
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 feda 	bl	80077a2 <SDMMC_GetResponse>
 80059ee:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	0fdb      	lsrs	r3, r3, #31
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d0ca      	beq.n	800599c <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
 8005a16:	e002      	b.n	8005a1e <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 8005a3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a40:	e018      	b.n	8005a74 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f002 f8d4 	bl	8007bfc <SDMMC_CmdSendStatus>
 8005a54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <SD_SendStatus+0x38>
  {
    return errorstate;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	e009      	b.n	8005a74 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 fe9b 	bl	80077a2 <SDMMC_GetResponse>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <SD_Read_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005a7c:	b590      	push	{r4, r7, lr}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;

  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	60bb      	str	r3, [r7, #8]
  
  /* Read data from SDMMC Rx FIFO */
  for(count = 0; count < 8; count++)
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
 8005a92:	e00d      	b.n	8005ab0 <SD_Read_IT+0x34>
  {
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	18d4      	adds	r4, r2, r3
 8005aa0:	4608      	mov	r0, r1
 8005aa2:	f001 fe0d 	bl	80076c0 <SDMMC_ReadFIFO>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	6023      	str	r3, [r4, #0]
  for(count = 0; count < 8; count++)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b07      	cmp	r3, #7
 8005ab4:	d9ee      	bls.n	8005a94 <SD_Read_IT+0x18>
  }
  
  hsd->pRxBuffPtr += 8;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aba:	f103 0220 	add.w	r2, r3, #32
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	629a      	str	r2, [r3, #40]	; 0x28
  
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd90      	pop	{r4, r7, pc}

08005acc <SD_Write_IT>:
  * @param  hsd pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval HAL status
  */
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	60bb      	str	r3, [r7, #8]
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60fb      	str	r3, [r7, #12]
 8005ae2:	e00b      	b.n	8005afc <SD_Write_IT+0x30>
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	68ba      	ldr	r2, [r7, #8]
 8005aee:	4413      	add	r3, r2
 8005af0:	4619      	mov	r1, r3
 8005af2:	f001 fdf2 	bl	80076da <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	3301      	adds	r3, #1
 8005afa:	60fb      	str	r3, [r7, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2b07      	cmp	r3, #7
 8005b00:	d9f0      	bls.n	8005ae4 <SD_Write_IT+0x18>
  }
  
  hsd->pTxBuffPtr += 8;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f103 0220 	add.w	r2, r3, #32
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	621a      	str	r2, [r3, #32]
  
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e084      	b.n	8005c34 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d106      	bne.n	8005b4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f7fb fc0b 	bl	8001360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b60:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b6a:	d902      	bls.n	8005b72 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	e002      	b.n	8005b78 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b76:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b80:	d007      	beq.n	8005b92 <HAL_SPI_Init+0x7a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b8a:	d002      	beq.n	8005b92 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba2:	d903      	bls.n	8005bac <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2202      	movs	r2, #2
 8005ba8:	631a      	str	r2, [r3, #48]	; 0x30
 8005baa:	e002      	b.n	8005bb2 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	ea42 0103 	orr.w	r1, r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	0c1b      	lsrs	r3, r3, #16
 8005bf2:	f003 0204 	and.w	r2, r3, #4
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	ea42 0103 	orr.w	r1, r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	69da      	ldr	r2, [r3, #28]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c32:	2300      	movs	r3, #0
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e01d      	b.n	8005c8a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fc f848 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f000 fb58 	bl	8006330 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e01d      	b.n	8005ce0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f7fc f8a1 	bl	8001e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	3304      	adds	r3, #4
 8005cce:	4619      	mov	r1, r3
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	f000 fb2d 	bl	8006330 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0202 	mvn.w	r2, #2
 8005d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fae2 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fad4 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fae5 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b04      	cmp	r3, #4
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0204 	mvn.w	r2, #4
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fab8 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 faaa 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fabb 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b08      	cmp	r3, #8
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0308 	and.w	r3, r3, #8
 8005db0:	2b08      	cmp	r3, #8
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0208 	mvn.w	r2, #8
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2204      	movs	r2, #4
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fa8e 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa80 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fa91 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0310 	and.w	r3, r3, #16
 8005df6:	2b10      	cmp	r3, #16
 8005df8:	d122      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0310 	and.w	r3, r3, #16
 8005e04:	2b10      	cmp	r3, #16
 8005e06:	d11b      	bne.n	8005e40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0210 	mvn.w	r2, #16
 8005e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2208      	movs	r2, #8
 8005e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 fa64 	bl	80062f4 <HAL_TIM_IC_CaptureCallback>
 8005e2c:	e005      	b.n	8005e3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa56 	bl	80062e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f000 fa67 	bl	8006308 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d10e      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d107      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0201 	mvn.w	r2, #1
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fa30 	bl	80062cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d10e      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e84:	2b80      	cmp	r3, #128	; 0x80
 8005e86:	d107      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 fe4a 	bl	8006b2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea6:	d10e      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eb2:	2b80      	cmp	r3, #128	; 0x80
 8005eb4:	d107      	bne.n	8005ec6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fe3d 	bl	8006b40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d10e      	bne.n	8005ef2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	2b40      	cmp	r3, #64	; 0x40
 8005ee0:	d107      	bne.n	8005ef2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f000 fa15 	bl	800631c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d10e      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f003 0320 	and.w	r3, r3, #32
 8005f0a:	2b20      	cmp	r3, #32
 8005f0c:	d107      	bne.n	8005f1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f06f 0220 	mvn.w	r2, #32
 8005f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fdfd 	bl	8006b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f1e:	bf00      	nop
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
	...

08005f28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	60b9      	str	r1, [r7, #8]
 8005f32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e105      	b.n	800614e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2b14      	cmp	r3, #20
 8005f56:	f200 80f0 	bhi.w	800613a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005f5a:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f60:	08005fb5 	.word	0x08005fb5
 8005f64:	0800613b 	.word	0x0800613b
 8005f68:	0800613b 	.word	0x0800613b
 8005f6c:	0800613b 	.word	0x0800613b
 8005f70:	08005ff5 	.word	0x08005ff5
 8005f74:	0800613b 	.word	0x0800613b
 8005f78:	0800613b 	.word	0x0800613b
 8005f7c:	0800613b 	.word	0x0800613b
 8005f80:	08006037 	.word	0x08006037
 8005f84:	0800613b 	.word	0x0800613b
 8005f88:	0800613b 	.word	0x0800613b
 8005f8c:	0800613b 	.word	0x0800613b
 8005f90:	08006077 	.word	0x08006077
 8005f94:	0800613b 	.word	0x0800613b
 8005f98:	0800613b 	.word	0x0800613b
 8005f9c:	0800613b 	.word	0x0800613b
 8005fa0:	080060b9 	.word	0x080060b9
 8005fa4:	0800613b 	.word	0x0800613b
 8005fa8:	0800613b 	.word	0x0800613b
 8005fac:	0800613b 	.word	0x0800613b
 8005fb0:	080060f9 	.word	0x080060f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68b9      	ldr	r1, [r7, #8]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 fa58 	bl	8006470 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f042 0208 	orr.w	r2, r2, #8
 8005fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699a      	ldr	r2, [r3, #24]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 0204 	bic.w	r2, r2, #4
 8005fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6999      	ldr	r1, [r3, #24]
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	619a      	str	r2, [r3, #24]
      break;
 8005ff2:	e0a3      	b.n	800613c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f000 faaa 	bl	8006554 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699a      	ldr	r2, [r3, #24]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800600e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800601e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6999      	ldr	r1, [r3, #24]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	021a      	lsls	r2, r3, #8
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	430a      	orrs	r2, r1
 8006032:	619a      	str	r2, [r3, #24]
      break;
 8006034:	e082      	b.n	800613c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	4618      	mov	r0, r3
 800603e:	f000 fb01 	bl	8006644 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69da      	ldr	r2, [r3, #28]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0208 	orr.w	r2, r2, #8
 8006050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f022 0204 	bic.w	r2, r2, #4
 8006060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69d9      	ldr	r1, [r3, #28]
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	430a      	orrs	r2, r1
 8006072:	61da      	str	r2, [r3, #28]
      break;
 8006074:	e062      	b.n	800613c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	68b9      	ldr	r1, [r7, #8]
 800607c:	4618      	mov	r0, r3
 800607e:	f000 fb57 	bl	8006730 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69da      	ldr	r2, [r3, #28]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69d9      	ldr	r1, [r3, #28]
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	021a      	lsls	r2, r3, #8
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	61da      	str	r2, [r3, #28]
      break;
 80060b6:	e041      	b.n	800613c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fb8e 	bl	80067e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f022 0204 	bic.w	r2, r2, #4
 80060e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	691a      	ldr	r2, [r3, #16]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060f6:	e021      	b.n	800613c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68b9      	ldr	r1, [r7, #8]
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fbc0 	bl	8006884 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006112:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006122:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	021a      	lsls	r2, r3, #8
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006138:	e000      	b.n	800613c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800613a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006168:	2b01      	cmp	r3, #1
 800616a:	d101      	bne.n	8006170 <HAL_TIM_ConfigClockSource+0x18>
 800616c:	2302      	movs	r3, #2
 800616e:	e0a6      	b.n	80062be <HAL_TIM_ConfigClockSource+0x166>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2202      	movs	r2, #2
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4b4f      	ldr	r3, [pc, #316]	; (80062c8 <HAL_TIM_ConfigClockSource+0x170>)
 800618c:	4013      	ands	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006196:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d067      	beq.n	8006278 <HAL_TIM_ConfigClockSource+0x120>
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	d80b      	bhi.n	80061c4 <HAL_TIM_ConfigClockSource+0x6c>
 80061ac:	2b10      	cmp	r3, #16
 80061ae:	d073      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
 80061b0:	2b10      	cmp	r3, #16
 80061b2:	d802      	bhi.n	80061ba <HAL_TIM_ConfigClockSource+0x62>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d06f      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80061b8:	e078      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061ba:	2b20      	cmp	r3, #32
 80061bc:	d06c      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
 80061be:	2b30      	cmp	r3, #48	; 0x30
 80061c0:	d06a      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061c2:	e073      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061c4:	2b70      	cmp	r3, #112	; 0x70
 80061c6:	d00d      	beq.n	80061e4 <HAL_TIM_ConfigClockSource+0x8c>
 80061c8:	2b70      	cmp	r3, #112	; 0x70
 80061ca:	d804      	bhi.n	80061d6 <HAL_TIM_ConfigClockSource+0x7e>
 80061cc:	2b50      	cmp	r3, #80	; 0x50
 80061ce:	d033      	beq.n	8006238 <HAL_TIM_ConfigClockSource+0xe0>
 80061d0:	2b60      	cmp	r3, #96	; 0x60
 80061d2:	d041      	beq.n	8006258 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80061d4:	e06a      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061da:	d066      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x152>
 80061dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e0:	d017      	beq.n	8006212 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80061e2:	e063      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	6899      	ldr	r1, [r3, #8]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f000 fc14 	bl	8006a20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006206:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	609a      	str	r2, [r3, #8]
      break;
 8006210:	e04c      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6818      	ldr	r0, [r3, #0]
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f000 fbfd 	bl	8006a20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006234:	609a      	str	r2, [r3, #8]
      break;
 8006236:	e039      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	6859      	ldr	r1, [r3, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	461a      	mov	r2, r3
 8006246:	f000 fb71 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2150      	movs	r1, #80	; 0x50
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fbca 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006256:	e029      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	461a      	mov	r2, r3
 8006266:	f000 fb90 	bl	800698a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2160      	movs	r1, #96	; 0x60
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fbba 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006276:	e019      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	461a      	mov	r2, r3
 8006286:	f000 fb51 	bl	800692c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2140      	movs	r1, #64	; 0x40
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fbaa 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 8006296:	e009      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 fba1 	bl	80069ea <TIM_ITRx_SetConfig>
      break;
 80062a8:	e000      	b.n	80062ac <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	fffeff88 	.word	0xfffeff88

080062cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a40      	ldr	r2, [pc, #256]	; (8006444 <TIM_Base_SetConfig+0x114>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800634e:	d00f      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a3d      	ldr	r2, [pc, #244]	; (8006448 <TIM_Base_SetConfig+0x118>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00b      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a3c      	ldr	r2, [pc, #240]	; (800644c <TIM_Base_SetConfig+0x11c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d007      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a3b      	ldr	r2, [pc, #236]	; (8006450 <TIM_Base_SetConfig+0x120>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d003      	beq.n	8006370 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a3a      	ldr	r2, [pc, #232]	; (8006454 <TIM_Base_SetConfig+0x124>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d108      	bne.n	8006382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a2f      	ldr	r2, [pc, #188]	; (8006444 <TIM_Base_SetConfig+0x114>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d02b      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006390:	d027      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <TIM_Base_SetConfig+0x118>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d023      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a2b      	ldr	r2, [pc, #172]	; (800644c <TIM_Base_SetConfig+0x11c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01f      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <TIM_Base_SetConfig+0x120>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01b      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a29      	ldr	r2, [pc, #164]	; (8006454 <TIM_Base_SetConfig+0x124>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d017      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a28      	ldr	r2, [pc, #160]	; (8006458 <TIM_Base_SetConfig+0x128>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d013      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a27      	ldr	r2, [pc, #156]	; (800645c <TIM_Base_SetConfig+0x12c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d00f      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a26      	ldr	r2, [pc, #152]	; (8006460 <TIM_Base_SetConfig+0x130>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d00b      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a25      	ldr	r2, [pc, #148]	; (8006464 <TIM_Base_SetConfig+0x134>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d007      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a24      	ldr	r2, [pc, #144]	; (8006468 <TIM_Base_SetConfig+0x138>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d003      	beq.n	80063e2 <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a23      	ldr	r2, [pc, #140]	; (800646c <TIM_Base_SetConfig+0x13c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d108      	bne.n	80063f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	689a      	ldr	r2, [r3, #8]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a0a      	ldr	r2, [pc, #40]	; (8006444 <TIM_Base_SetConfig+0x114>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d003      	beq.n	8006428 <TIM_Base_SetConfig+0xf8>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a0c      	ldr	r2, [pc, #48]	; (8006454 <TIM_Base_SetConfig+0x124>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d103      	bne.n	8006430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	615a      	str	r2, [r3, #20]
}
 8006436:	bf00      	nop
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40010000 	.word	0x40010000
 8006448:	40000400 	.word	0x40000400
 800644c:	40000800 	.word	0x40000800
 8006450:	40000c00 	.word	0x40000c00
 8006454:	40010400 	.word	0x40010400
 8006458:	40014000 	.word	0x40014000
 800645c:	40014400 	.word	0x40014400
 8006460:	40014800 	.word	0x40014800
 8006464:	40001800 	.word	0x40001800
 8006468:	40001c00 	.word	0x40001c00
 800646c:	40002000 	.word	0x40002000

08006470 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4b2b      	ldr	r3, [pc, #172]	; (8006548 <TIM_OC1_SetConfig+0xd8>)
 800649c:	4013      	ands	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0303 	bic.w	r3, r3, #3
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 0302 	bic.w	r3, r3, #2
 80064b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a21      	ldr	r2, [pc, #132]	; (800654c <TIM_OC1_SetConfig+0xdc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC1_SetConfig+0x64>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a20      	ldr	r2, [pc, #128]	; (8006550 <TIM_OC1_SetConfig+0xe0>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10c      	bne.n	80064ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0308 	bic.w	r3, r3, #8
 80064da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 0304 	bic.w	r3, r3, #4
 80064ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a16      	ldr	r2, [pc, #88]	; (800654c <TIM_OC1_SetConfig+0xdc>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC1_SetConfig+0x8e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <TIM_OC1_SetConfig+0xe0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800650c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
}
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr
 8006548:	fffeff8f 	.word	0xfffeff8f
 800654c:	40010000 	.word	0x40010000
 8006550:	40010400 	.word	0x40010400

08006554 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f023 0210 	bic.w	r2, r3, #16
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	699b      	ldr	r3, [r3, #24]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4b2e      	ldr	r3, [pc, #184]	; (8006638 <TIM_OC2_SetConfig+0xe4>)
 8006580:	4013      	ands	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0320 	bic.w	r3, r3, #32
 800659e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a23      	ldr	r2, [pc, #140]	; (800663c <TIM_OC2_SetConfig+0xe8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d003      	beq.n	80065bc <TIM_OC2_SetConfig+0x68>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a22      	ldr	r2, [pc, #136]	; (8006640 <TIM_OC2_SetConfig+0xec>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d10d      	bne.n	80065d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a18      	ldr	r2, [pc, #96]	; (800663c <TIM_OC2_SetConfig+0xe8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_OC2_SetConfig+0x94>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a17      	ldr	r2, [pc, #92]	; (8006640 <TIM_OC2_SetConfig+0xec>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d113      	bne.n	8006610 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	695b      	ldr	r3, [r3, #20]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	4313      	orrs	r3, r2
 8006602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	621a      	str	r2, [r3, #32]
}
 800662a:	bf00      	nop
 800662c:	371c      	adds	r7, #28
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	feff8fff 	.word	0xfeff8fff
 800663c:	40010000 	.word	0x40010000
 8006640:	40010400 	.word	0x40010400

08006644 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4b2d      	ldr	r3, [pc, #180]	; (8006724 <TIM_OC3_SetConfig+0xe0>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4313      	orrs	r3, r2
 8006684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800668c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	021b      	lsls	r3, r3, #8
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a22      	ldr	r2, [pc, #136]	; (8006728 <TIM_OC3_SetConfig+0xe4>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_OC3_SetConfig+0x66>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a21      	ldr	r2, [pc, #132]	; (800672c <TIM_OC3_SetConfig+0xe8>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d10d      	bne.n	80066c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	021b      	lsls	r3, r3, #8
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a17      	ldr	r2, [pc, #92]	; (8006728 <TIM_OC3_SetConfig+0xe4>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d003      	beq.n	80066d6 <TIM_OC3_SetConfig+0x92>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a16      	ldr	r2, [pc, #88]	; (800672c <TIM_OC3_SetConfig+0xe8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d113      	bne.n	80066fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	4313      	orrs	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	621a      	str	r2, [r3, #32]
}
 8006718:	bf00      	nop
 800671a:	371c      	adds	r7, #28
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	fffeff8f 	.word	0xfffeff8f
 8006728:	40010000 	.word	0x40010000
 800672c:	40010400 	.word	0x40010400

08006730 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006730:	b480      	push	{r7}
 8006732:	b087      	sub	sp, #28
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <TIM_OC4_SetConfig+0xa4>)
 800675c:	4013      	ands	r3, r2
 800675e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	021b      	lsls	r3, r3, #8
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4313      	orrs	r3, r2
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800677a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	031b      	lsls	r3, r3, #12
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a13      	ldr	r2, [pc, #76]	; (80067d8 <TIM_OC4_SetConfig+0xa8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC4_SetConfig+0x68>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a12      	ldr	r2, [pc, #72]	; (80067dc <TIM_OC4_SetConfig+0xac>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d109      	bne.n	80067ac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800679e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	019b      	lsls	r3, r3, #6
 80067a6:	697a      	ldr	r2, [r7, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	621a      	str	r2, [r3, #32]
}
 80067c6:	bf00      	nop
 80067c8:	371c      	adds	r7, #28
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	feff8fff 	.word	0xfeff8fff
 80067d8:	40010000 	.word	0x40010000
 80067dc:	40010400 	.word	0x40010400

080067e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <TIM_OC5_SetConfig+0x98>)
 800680c:	4013      	ands	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4313      	orrs	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006820:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	041b      	lsls	r3, r3, #16
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	4313      	orrs	r3, r2
 800682c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a12      	ldr	r2, [pc, #72]	; (800687c <TIM_OC5_SetConfig+0x9c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_OC5_SetConfig+0x5e>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a11      	ldr	r2, [pc, #68]	; (8006880 <TIM_OC5_SetConfig+0xa0>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d109      	bne.n	8006852 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006844:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	021b      	lsls	r3, r3, #8
 800684c:	697a      	ldr	r2, [r7, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	693a      	ldr	r2, [r7, #16]
 800686a:	621a      	str	r2, [r3, #32]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	fffeff8f 	.word	0xfffeff8f
 800687c:	40010000 	.word	0x40010000
 8006880:	40010400 	.word	0x40010400

08006884 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4b1c      	ldr	r3, [pc, #112]	; (8006920 <TIM_OC6_SetConfig+0x9c>)
 80068b0:	4013      	ands	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	4a13      	ldr	r2, [pc, #76]	; (8006924 <TIM_OC6_SetConfig+0xa0>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d003      	beq.n	80068e4 <TIM_OC6_SetConfig+0x60>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a12      	ldr	r2, [pc, #72]	; (8006928 <TIM_OC6_SetConfig+0xa4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d109      	bne.n	80068f8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	697a      	ldr	r2, [r7, #20]
 80068f4:	4313      	orrs	r3, r2
 80068f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	621a      	str	r2, [r3, #32]
}
 8006912:	bf00      	nop
 8006914:	371c      	adds	r7, #28
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	feff8fff 	.word	0xfeff8fff
 8006924:	40010000 	.word	0x40010000
 8006928:	40010400 	.word	0x40010400

0800692c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6a1b      	ldr	r3, [r3, #32]
 800693c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	f023 0201 	bic.w	r2, r3, #1
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f023 030a 	bic.w	r3, r3, #10
 8006968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
 8006970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	621a      	str	r2, [r3, #32]
}
 800697e:	bf00      	nop
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698a:	b480      	push	{r7}
 800698c:	b087      	sub	sp, #28
 800698e:	af00      	add	r7, sp, #0
 8006990:	60f8      	str	r0, [r7, #12]
 8006992:	60b9      	str	r1, [r7, #8]
 8006994:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	f023 0210 	bic.w	r2, r3, #16
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	031b      	lsls	r3, r3, #12
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	697a      	ldr	r2, [r7, #20]
 80069d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	621a      	str	r2, [r3, #32]
}
 80069de:	bf00      	nop
 80069e0:	371c      	adds	r7, #28
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f043 0307 	orr.w	r3, r3, #7
 8006a0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	609a      	str	r2, [r3, #8]
}
 8006a14:	bf00      	nop
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]
 8006a2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	021a      	lsls	r2, r3, #8
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	431a      	orrs	r2, r3
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	bf00      	nop
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e045      	b.n	8006b04 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2202      	movs	r2, #2
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d004      	beq.n	8006aac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d108      	bne.n	8006abe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad6:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3714      	adds	r7, #20
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40010400 	.word	0x40010400

08006b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e040      	b.n	8006be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d106      	bne.n	8006b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fb fa3a 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2224      	movs	r2, #36	; 0x24
 8006b80:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0201 	bic.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f95c 	bl	8006e50 <UART_SetConfig>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d101      	bne.n	8006ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e022      	b.n	8006be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fbf4 	bl	8007398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	689a      	ldr	r2, [r3, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bce:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fc7b 	bl	80074dc <UART_CheckIdleState>
 8006be6:	4603      	mov	r3, r0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b088      	sub	sp, #32
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f003 030f 	and.w	r3, r3, #15
 8006c16:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d113      	bne.n	8006c46 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	f003 0320 	and.w	r3, r3, #32
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00e      	beq.n	8006c46 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d009      	beq.n	8006c46 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 80eb 	beq.w	8006e12 <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	4798      	blx	r3
      }
      return;
 8006c44:	e0e5      	b.n	8006e12 <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 80c0 	beq.w	8006dce <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d105      	bne.n	8006c64 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 80b5 	beq.w	8006dce <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f003 0301 	and.w	r3, r3, #1
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d00e      	beq.n	8006c8c <HAL_UART_IRQHandler+0x9c>
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c84:	f043 0201 	orr.w	r2, r3, #1
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d00e      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xc4>
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d009      	beq.n	8006cb4 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cac:	f043 0204 	orr.w	r2, r3, #4
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00e      	beq.n	8006cdc <HAL_UART_IRQHandler+0xec>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2204      	movs	r2, #4
 8006cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cd4:	f043 0202 	orr.w	r2, r3, #2
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d013      	beq.n	8006d0e <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f003 0320 	and.w	r3, r3, #32
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2208      	movs	r2, #8
 8006d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d06:	f043 0208 	orr.w	r2, r3, #8
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d07f      	beq.n	8006e16 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 0320 	and.w	r3, r3, #32
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00c      	beq.n	8006d3a <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d3e:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d4a:	2b40      	cmp	r3, #64	; 0x40
 8006d4c:	d004      	beq.n	8006d58 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d031      	beq.n	8006dbc <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fc36 	bl	80075ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d68:	2b40      	cmp	r3, #64	; 0x40
 8006d6a:	d123      	bne.n	8006db4 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d7a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d013      	beq.n	8006dac <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d88:	4a26      	ldr	r2, [pc, #152]	; (8006e24 <HAL_UART_IRQHandler+0x234>)
 8006d8a:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fb ff89 	bl	8002ca8 <HAL_DMA_Abort_IT>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d016      	beq.n	8006dca <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8006da6:	4610      	mov	r0, r2
 8006da8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006daa:	e00e      	b.n	8006dca <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f845 	bl	8006e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db2:	e00a      	b.n	8006dca <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f841 	bl	8006e3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dba:	e006      	b.n	8006dca <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f000 f83d 	bl	8006e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006dc8:	e025      	b.n	8006e16 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dca:	bf00      	nop
    return;
 8006dcc:	e023      	b.n	8006e16 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00d      	beq.n	8006df4 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d008      	beq.n	8006df4 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	4798      	blx	r3
    }
    return;
 8006df2:	e012      	b.n	8006e1a <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <HAL_UART_IRQHandler+0x22c>
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d009      	beq.n	8006e1c <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fc14 	bl	8007636 <UART_EndTransmit_IT>
    return;
 8006e0e:	bf00      	nop
 8006e10:	e004      	b.n	8006e1c <HAL_UART_IRQHandler+0x22c>
      return;
 8006e12:	bf00      	nop
 8006e14:	e002      	b.n	8006e1c <HAL_UART_IRQHandler+0x22c>
    return;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <HAL_UART_IRQHandler+0x22c>
    return;
 8006e1a:	bf00      	nop
  }

}
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	0800760b 	.word	0x0800760b

08006e28 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b083      	sub	sp, #12
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	689a      	ldr	r2, [r3, #8]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	431a      	orrs	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	4bb1      	ldr	r3, [pc, #708]	; (8007144 <UART_SetConfig+0x2f4>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	6812      	ldr	r2, [r2, #0]
 8006e86:	6939      	ldr	r1, [r7, #16]
 8006e88:	430b      	orrs	r3, r1
 8006e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68da      	ldr	r2, [r3, #12]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	693a      	ldr	r2, [r7, #16]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	693a      	ldr	r2, [r7, #16]
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a9f      	ldr	r2, [pc, #636]	; (8007148 <UART_SetConfig+0x2f8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d121      	bne.n	8006f14 <UART_SetConfig+0xc4>
 8006ed0:	4b9e      	ldr	r3, [pc, #632]	; (800714c <UART_SetConfig+0x2fc>)
 8006ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed6:	f003 0303 	and.w	r3, r3, #3
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d816      	bhi.n	8006f0c <UART_SetConfig+0xbc>
 8006ede:	a201      	add	r2, pc, #4	; (adr r2, 8006ee4 <UART_SetConfig+0x94>)
 8006ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee4:	08006ef5 	.word	0x08006ef5
 8006ee8:	08006f01 	.word	0x08006f01
 8006eec:	08006efb 	.word	0x08006efb
 8006ef0:	08006f07 	.word	0x08006f07
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	e151      	b.n	800719e <UART_SetConfig+0x34e>
 8006efa:	2302      	movs	r3, #2
 8006efc:	77fb      	strb	r3, [r7, #31]
 8006efe:	e14e      	b.n	800719e <UART_SetConfig+0x34e>
 8006f00:	2304      	movs	r3, #4
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e14b      	b.n	800719e <UART_SetConfig+0x34e>
 8006f06:	2308      	movs	r3, #8
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e148      	b.n	800719e <UART_SetConfig+0x34e>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	bf00      	nop
 8006f12:	e144      	b.n	800719e <UART_SetConfig+0x34e>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a8d      	ldr	r2, [pc, #564]	; (8007150 <UART_SetConfig+0x300>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d134      	bne.n	8006f88 <UART_SetConfig+0x138>
 8006f1e:	4b8b      	ldr	r3, [pc, #556]	; (800714c <UART_SetConfig+0x2fc>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	f003 030c 	and.w	r3, r3, #12
 8006f28:	2b0c      	cmp	r3, #12
 8006f2a:	d829      	bhi.n	8006f80 <UART_SetConfig+0x130>
 8006f2c:	a201      	add	r2, pc, #4	; (adr r2, 8006f34 <UART_SetConfig+0xe4>)
 8006f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f32:	bf00      	nop
 8006f34:	08006f69 	.word	0x08006f69
 8006f38:	08006f81 	.word	0x08006f81
 8006f3c:	08006f81 	.word	0x08006f81
 8006f40:	08006f81 	.word	0x08006f81
 8006f44:	08006f75 	.word	0x08006f75
 8006f48:	08006f81 	.word	0x08006f81
 8006f4c:	08006f81 	.word	0x08006f81
 8006f50:	08006f81 	.word	0x08006f81
 8006f54:	08006f6f 	.word	0x08006f6f
 8006f58:	08006f81 	.word	0x08006f81
 8006f5c:	08006f81 	.word	0x08006f81
 8006f60:	08006f81 	.word	0x08006f81
 8006f64:	08006f7b 	.word	0x08006f7b
 8006f68:	2300      	movs	r3, #0
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e117      	b.n	800719e <UART_SetConfig+0x34e>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	77fb      	strb	r3, [r7, #31]
 8006f72:	e114      	b.n	800719e <UART_SetConfig+0x34e>
 8006f74:	2304      	movs	r3, #4
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e111      	b.n	800719e <UART_SetConfig+0x34e>
 8006f7a:	2308      	movs	r3, #8
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e10e      	b.n	800719e <UART_SetConfig+0x34e>
 8006f80:	2310      	movs	r3, #16
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	bf00      	nop
 8006f86:	e10a      	b.n	800719e <UART_SetConfig+0x34e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a71      	ldr	r2, [pc, #452]	; (8007154 <UART_SetConfig+0x304>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d120      	bne.n	8006fd4 <UART_SetConfig+0x184>
 8006f92:	4b6e      	ldr	r3, [pc, #440]	; (800714c <UART_SetConfig+0x2fc>)
 8006f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f9c:	2b10      	cmp	r3, #16
 8006f9e:	d00f      	beq.n	8006fc0 <UART_SetConfig+0x170>
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d802      	bhi.n	8006faa <UART_SetConfig+0x15a>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d005      	beq.n	8006fb4 <UART_SetConfig+0x164>
 8006fa8:	e010      	b.n	8006fcc <UART_SetConfig+0x17c>
 8006faa:	2b20      	cmp	r3, #32
 8006fac:	d005      	beq.n	8006fba <UART_SetConfig+0x16a>
 8006fae:	2b30      	cmp	r3, #48	; 0x30
 8006fb0:	d009      	beq.n	8006fc6 <UART_SetConfig+0x176>
 8006fb2:	e00b      	b.n	8006fcc <UART_SetConfig+0x17c>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e0f1      	b.n	800719e <UART_SetConfig+0x34e>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	77fb      	strb	r3, [r7, #31]
 8006fbe:	e0ee      	b.n	800719e <UART_SetConfig+0x34e>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e0eb      	b.n	800719e <UART_SetConfig+0x34e>
 8006fc6:	2308      	movs	r3, #8
 8006fc8:	77fb      	strb	r3, [r7, #31]
 8006fca:	e0e8      	b.n	800719e <UART_SetConfig+0x34e>
 8006fcc:	2310      	movs	r3, #16
 8006fce:	77fb      	strb	r3, [r7, #31]
 8006fd0:	bf00      	nop
 8006fd2:	e0e4      	b.n	800719e <UART_SetConfig+0x34e>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a5f      	ldr	r2, [pc, #380]	; (8007158 <UART_SetConfig+0x308>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d120      	bne.n	8007020 <UART_SetConfig+0x1d0>
 8006fde:	4b5b      	ldr	r3, [pc, #364]	; (800714c <UART_SetConfig+0x2fc>)
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	d00f      	beq.n	800700c <UART_SetConfig+0x1bc>
 8006fec:	2b40      	cmp	r3, #64	; 0x40
 8006fee:	d802      	bhi.n	8006ff6 <UART_SetConfig+0x1a6>
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <UART_SetConfig+0x1b0>
 8006ff4:	e010      	b.n	8007018 <UART_SetConfig+0x1c8>
 8006ff6:	2b80      	cmp	r3, #128	; 0x80
 8006ff8:	d005      	beq.n	8007006 <UART_SetConfig+0x1b6>
 8006ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8006ffc:	d009      	beq.n	8007012 <UART_SetConfig+0x1c2>
 8006ffe:	e00b      	b.n	8007018 <UART_SetConfig+0x1c8>
 8007000:	2300      	movs	r3, #0
 8007002:	77fb      	strb	r3, [r7, #31]
 8007004:	e0cb      	b.n	800719e <UART_SetConfig+0x34e>
 8007006:	2302      	movs	r3, #2
 8007008:	77fb      	strb	r3, [r7, #31]
 800700a:	e0c8      	b.n	800719e <UART_SetConfig+0x34e>
 800700c:	2304      	movs	r3, #4
 800700e:	77fb      	strb	r3, [r7, #31]
 8007010:	e0c5      	b.n	800719e <UART_SetConfig+0x34e>
 8007012:	2308      	movs	r3, #8
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e0c2      	b.n	800719e <UART_SetConfig+0x34e>
 8007018:	2310      	movs	r3, #16
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	bf00      	nop
 800701e:	e0be      	b.n	800719e <UART_SetConfig+0x34e>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a4d      	ldr	r2, [pc, #308]	; (800715c <UART_SetConfig+0x30c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d124      	bne.n	8007074 <UART_SetConfig+0x224>
 800702a:	4b48      	ldr	r3, [pc, #288]	; (800714c <UART_SetConfig+0x2fc>)
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007038:	d012      	beq.n	8007060 <UART_SetConfig+0x210>
 800703a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703e:	d802      	bhi.n	8007046 <UART_SetConfig+0x1f6>
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <UART_SetConfig+0x204>
 8007044:	e012      	b.n	800706c <UART_SetConfig+0x21c>
 8007046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704a:	d006      	beq.n	800705a <UART_SetConfig+0x20a>
 800704c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007050:	d009      	beq.n	8007066 <UART_SetConfig+0x216>
 8007052:	e00b      	b.n	800706c <UART_SetConfig+0x21c>
 8007054:	2300      	movs	r3, #0
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e0a1      	b.n	800719e <UART_SetConfig+0x34e>
 800705a:	2302      	movs	r3, #2
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e09e      	b.n	800719e <UART_SetConfig+0x34e>
 8007060:	2304      	movs	r3, #4
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e09b      	b.n	800719e <UART_SetConfig+0x34e>
 8007066:	2308      	movs	r3, #8
 8007068:	77fb      	strb	r3, [r7, #31]
 800706a:	e098      	b.n	800719e <UART_SetConfig+0x34e>
 800706c:	2310      	movs	r3, #16
 800706e:	77fb      	strb	r3, [r7, #31]
 8007070:	bf00      	nop
 8007072:	e094      	b.n	800719e <UART_SetConfig+0x34e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a39      	ldr	r2, [pc, #228]	; (8007160 <UART_SetConfig+0x310>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d124      	bne.n	80070c8 <UART_SetConfig+0x278>
 800707e:	4b33      	ldr	r3, [pc, #204]	; (800714c <UART_SetConfig+0x2fc>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708c:	d012      	beq.n	80070b4 <UART_SetConfig+0x264>
 800708e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007092:	d802      	bhi.n	800709a <UART_SetConfig+0x24a>
 8007094:	2b00      	cmp	r3, #0
 8007096:	d007      	beq.n	80070a8 <UART_SetConfig+0x258>
 8007098:	e012      	b.n	80070c0 <UART_SetConfig+0x270>
 800709a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800709e:	d006      	beq.n	80070ae <UART_SetConfig+0x25e>
 80070a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070a4:	d009      	beq.n	80070ba <UART_SetConfig+0x26a>
 80070a6:	e00b      	b.n	80070c0 <UART_SetConfig+0x270>
 80070a8:	2301      	movs	r3, #1
 80070aa:	77fb      	strb	r3, [r7, #31]
 80070ac:	e077      	b.n	800719e <UART_SetConfig+0x34e>
 80070ae:	2302      	movs	r3, #2
 80070b0:	77fb      	strb	r3, [r7, #31]
 80070b2:	e074      	b.n	800719e <UART_SetConfig+0x34e>
 80070b4:	2304      	movs	r3, #4
 80070b6:	77fb      	strb	r3, [r7, #31]
 80070b8:	e071      	b.n	800719e <UART_SetConfig+0x34e>
 80070ba:	2308      	movs	r3, #8
 80070bc:	77fb      	strb	r3, [r7, #31]
 80070be:	e06e      	b.n	800719e <UART_SetConfig+0x34e>
 80070c0:	2310      	movs	r3, #16
 80070c2:	77fb      	strb	r3, [r7, #31]
 80070c4:	bf00      	nop
 80070c6:	e06a      	b.n	800719e <UART_SetConfig+0x34e>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a25      	ldr	r2, [pc, #148]	; (8007164 <UART_SetConfig+0x314>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d124      	bne.n	800711c <UART_SetConfig+0x2cc>
 80070d2:	4b1e      	ldr	r3, [pc, #120]	; (800714c <UART_SetConfig+0x2fc>)
 80070d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e0:	d012      	beq.n	8007108 <UART_SetConfig+0x2b8>
 80070e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e6:	d802      	bhi.n	80070ee <UART_SetConfig+0x29e>
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d007      	beq.n	80070fc <UART_SetConfig+0x2ac>
 80070ec:	e012      	b.n	8007114 <UART_SetConfig+0x2c4>
 80070ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f2:	d006      	beq.n	8007102 <UART_SetConfig+0x2b2>
 80070f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070f8:	d009      	beq.n	800710e <UART_SetConfig+0x2be>
 80070fa:	e00b      	b.n	8007114 <UART_SetConfig+0x2c4>
 80070fc:	2300      	movs	r3, #0
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e04d      	b.n	800719e <UART_SetConfig+0x34e>
 8007102:	2302      	movs	r3, #2
 8007104:	77fb      	strb	r3, [r7, #31]
 8007106:	e04a      	b.n	800719e <UART_SetConfig+0x34e>
 8007108:	2304      	movs	r3, #4
 800710a:	77fb      	strb	r3, [r7, #31]
 800710c:	e047      	b.n	800719e <UART_SetConfig+0x34e>
 800710e:	2308      	movs	r3, #8
 8007110:	77fb      	strb	r3, [r7, #31]
 8007112:	e044      	b.n	800719e <UART_SetConfig+0x34e>
 8007114:	2310      	movs	r3, #16
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	bf00      	nop
 800711a:	e040      	b.n	800719e <UART_SetConfig+0x34e>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a11      	ldr	r2, [pc, #68]	; (8007168 <UART_SetConfig+0x318>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d139      	bne.n	800719a <UART_SetConfig+0x34a>
 8007126:	4b09      	ldr	r3, [pc, #36]	; (800714c <UART_SetConfig+0x2fc>)
 8007128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007134:	d027      	beq.n	8007186 <UART_SetConfig+0x336>
 8007136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800713a:	d817      	bhi.n	800716c <UART_SetConfig+0x31c>
 800713c:	2b00      	cmp	r3, #0
 800713e:	d01c      	beq.n	800717a <UART_SetConfig+0x32a>
 8007140:	e027      	b.n	8007192 <UART_SetConfig+0x342>
 8007142:	bf00      	nop
 8007144:	efff69f3 	.word	0xefff69f3
 8007148:	40011000 	.word	0x40011000
 800714c:	40023800 	.word	0x40023800
 8007150:	40004400 	.word	0x40004400
 8007154:	40004800 	.word	0x40004800
 8007158:	40004c00 	.word	0x40004c00
 800715c:	40005000 	.word	0x40005000
 8007160:	40011400 	.word	0x40011400
 8007164:	40007800 	.word	0x40007800
 8007168:	40007c00 	.word	0x40007c00
 800716c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007170:	d006      	beq.n	8007180 <UART_SetConfig+0x330>
 8007172:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007176:	d009      	beq.n	800718c <UART_SetConfig+0x33c>
 8007178:	e00b      	b.n	8007192 <UART_SetConfig+0x342>
 800717a:	2300      	movs	r3, #0
 800717c:	77fb      	strb	r3, [r7, #31]
 800717e:	e00e      	b.n	800719e <UART_SetConfig+0x34e>
 8007180:	2302      	movs	r3, #2
 8007182:	77fb      	strb	r3, [r7, #31]
 8007184:	e00b      	b.n	800719e <UART_SetConfig+0x34e>
 8007186:	2304      	movs	r3, #4
 8007188:	77fb      	strb	r3, [r7, #31]
 800718a:	e008      	b.n	800719e <UART_SetConfig+0x34e>
 800718c:	2308      	movs	r3, #8
 800718e:	77fb      	strb	r3, [r7, #31]
 8007190:	e005      	b.n	800719e <UART_SetConfig+0x34e>
 8007192:	2310      	movs	r3, #16
 8007194:	77fb      	strb	r3, [r7, #31]
 8007196:	bf00      	nop
 8007198:	e001      	b.n	800719e <UART_SetConfig+0x34e>
 800719a:	2310      	movs	r3, #16
 800719c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a6:	d17c      	bne.n	80072a2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80071a8:	7ffb      	ldrb	r3, [r7, #31]
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d859      	bhi.n	8007262 <UART_SetConfig+0x412>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0x364>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	080071d9 	.word	0x080071d9
 80071b8:	080071f7 	.word	0x080071f7
 80071bc:	08007215 	.word	0x08007215
 80071c0:	08007263 	.word	0x08007263
 80071c4:	0800722d 	.word	0x0800722d
 80071c8:	08007263 	.word	0x08007263
 80071cc:	08007263 	.word	0x08007263
 80071d0:	08007263 	.word	0x08007263
 80071d4:	0800724b 	.word	0x0800724b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80071d8:	f7fc ff66 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80071dc:	4603      	mov	r3, r0
 80071de:	005a      	lsls	r2, r3, #1
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	085b      	lsrs	r3, r3, #1
 80071e6:	441a      	add	r2, r3
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	61bb      	str	r3, [r7, #24]
        break;
 80071f4:	e038      	b.n	8007268 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80071f6:	f7fc ff6b 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 80071fa:	4603      	mov	r3, r0
 80071fc:	005a      	lsls	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	085b      	lsrs	r3, r3, #1
 8007204:	441a      	add	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	fbb2 f3f3 	udiv	r3, r2, r3
 800720e:	b29b      	uxth	r3, r3
 8007210:	61bb      	str	r3, [r7, #24]
        break;
 8007212:	e029      	b.n	8007268 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	085a      	lsrs	r2, r3, #1
 800721a:	4b5d      	ldr	r3, [pc, #372]	; (8007390 <UART_SetConfig+0x540>)
 800721c:	4413      	add	r3, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	6852      	ldr	r2, [r2, #4]
 8007222:	fbb3 f3f2 	udiv	r3, r3, r2
 8007226:	b29b      	uxth	r3, r3
 8007228:	61bb      	str	r3, [r7, #24]
        break;
 800722a:	e01d      	b.n	8007268 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800722c:	f7fc fe58 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8007230:	4603      	mov	r3, r0
 8007232:	005a      	lsls	r2, r3, #1
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	441a      	add	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	fbb2 f3f3 	udiv	r3, r2, r3
 8007244:	b29b      	uxth	r3, r3
 8007246:	61bb      	str	r3, [r7, #24]
        break;
 8007248:	e00e      	b.n	8007268 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	085b      	lsrs	r3, r3, #1
 8007250:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	fbb2 f3f3 	udiv	r3, r2, r3
 800725c:	b29b      	uxth	r3, r3
 800725e:	61bb      	str	r3, [r7, #24]
        break;
 8007260:	e002      	b.n	8007268 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	75fb      	strb	r3, [r7, #23]
        break;
 8007266:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	2b0f      	cmp	r3, #15
 800726c:	d916      	bls.n	800729c <UART_SetConfig+0x44c>
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007274:	d212      	bcs.n	800729c <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	b29b      	uxth	r3, r3
 800727a:	f023 030f 	bic.w	r3, r3, #15
 800727e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	085b      	lsrs	r3, r3, #1
 8007284:	b29b      	uxth	r3, r3
 8007286:	f003 0307 	and.w	r3, r3, #7
 800728a:	b29a      	uxth	r2, r3
 800728c:	89fb      	ldrh	r3, [r7, #14]
 800728e:	4313      	orrs	r3, r2
 8007290:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	89fa      	ldrh	r2, [r7, #14]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	e06e      	b.n	800737a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
 80072a0:	e06b      	b.n	800737a <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 80072a2:	7ffb      	ldrb	r3, [r7, #31]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d857      	bhi.n	8007358 <UART_SetConfig+0x508>
 80072a8:	a201      	add	r2, pc, #4	; (adr r2, 80072b0 <UART_SetConfig+0x460>)
 80072aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ae:	bf00      	nop
 80072b0:	080072d5 	.word	0x080072d5
 80072b4:	080072f1 	.word	0x080072f1
 80072b8:	0800730d 	.word	0x0800730d
 80072bc:	08007359 	.word	0x08007359
 80072c0:	08007325 	.word	0x08007325
 80072c4:	08007359 	.word	0x08007359
 80072c8:	08007359 	.word	0x08007359
 80072cc:	08007359 	.word	0x08007359
 80072d0:	08007341 	.word	0x08007341
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80072d4:	f7fc fee8 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 80072d8:	4602      	mov	r2, r0
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	085b      	lsrs	r3, r3, #1
 80072e0:	441a      	add	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	61bb      	str	r3, [r7, #24]
        break;
 80072ee:	e036      	b.n	800735e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80072f0:	f7fc feee 	bl	80040d0 <HAL_RCC_GetPCLK2Freq>
 80072f4:	4602      	mov	r2, r0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	441a      	add	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	fbb2 f3f3 	udiv	r3, r2, r3
 8007306:	b29b      	uxth	r3, r3
 8007308:	61bb      	str	r3, [r7, #24]
        break;
 800730a:	e028      	b.n	800735e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	085a      	lsrs	r2, r3, #1
 8007312:	4b20      	ldr	r3, [pc, #128]	; (8007394 <UART_SetConfig+0x544>)
 8007314:	4413      	add	r3, r2
 8007316:	687a      	ldr	r2, [r7, #4]
 8007318:	6852      	ldr	r2, [r2, #4]
 800731a:	fbb3 f3f2 	udiv	r3, r3, r2
 800731e:	b29b      	uxth	r3, r3
 8007320:	61bb      	str	r3, [r7, #24]
        break;
 8007322:	e01c      	b.n	800735e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007324:	f7fc fddc 	bl	8003ee0 <HAL_RCC_GetSysClockFreq>
 8007328:	4602      	mov	r2, r0
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	085b      	lsrs	r3, r3, #1
 8007330:	441a      	add	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	fbb2 f3f3 	udiv	r3, r2, r3
 800733a:	b29b      	uxth	r3, r3
 800733c:	61bb      	str	r3, [r7, #24]
        break;
 800733e:	e00e      	b.n	800735e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	085b      	lsrs	r3, r3, #1
 8007346:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007352:	b29b      	uxth	r3, r3
 8007354:	61bb      	str	r3, [r7, #24]
        break;
 8007356:	e002      	b.n	800735e <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	75fb      	strb	r3, [r7, #23]
        break;
 800735c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d908      	bls.n	8007376 <UART_SetConfig+0x526>
 8007364:	69bb      	ldr	r3, [r7, #24]
 8007366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800736a:	d204      	bcs.n	8007376 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	60da      	str	r2, [r3, #12]
 8007374:	e001      	b.n	800737a <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8007376:	2301      	movs	r3, #1
 8007378:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3720      	adds	r7, #32
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	01e84800 	.word	0x01e84800
 8007394:	00f42400 	.word	0x00f42400

08007398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d00a      	beq.n	80073c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00a      	beq.n	80073e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	f003 0304 	and.w	r3, r3, #4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00a      	beq.n	8007406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	f003 0308 	and.w	r3, r3, #8
 800740e:	2b00      	cmp	r3, #0
 8007410:	d00a      	beq.n	8007428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	430a      	orrs	r2, r1
 8007426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00a      	beq.n	800744a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	430a      	orrs	r2, r1
 8007448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d00a      	beq.n	800746c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007474:	2b00      	cmp	r3, #0
 8007476:	d01a      	beq.n	80074ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007496:	d10a      	bne.n	80074ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00a      	beq.n	80074d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	605a      	str	r2, [r3, #4]
  }
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b086      	sub	sp, #24
 80074e0:	af02      	add	r7, sp, #8
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80074ea:	f7fa ff0f 	bl	800230c <HAL_GetTick>
 80074ee:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0308 	and.w	r3, r3, #8
 80074fa:	2b08      	cmp	r3, #8
 80074fc:	d10e      	bne.n	800751c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f814 	bl	800753a <UART_WaitOnFlagUntilTimeout>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	e00a      	b.n	8007532 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2220      	movs	r2, #32
 8007526:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b084      	sub	sp, #16
 800753e:	af00      	add	r7, sp, #0
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	60b9      	str	r1, [r7, #8]
 8007544:	603b      	str	r3, [r7, #0]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800754a:	e02a      	b.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007552:	d026      	beq.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007554:	f7fa feda 	bl	800230c <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	429a      	cmp	r2, r3
 8007562:	d302      	bcc.n	800756a <UART_WaitOnFlagUntilTimeout+0x30>
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d11b      	bne.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007578:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f022 0201 	bic.w	r2, r2, #1
 8007588:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2220      	movs	r2, #32
 800758e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e00f      	b.n	80075c2 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	69da      	ldr	r2, [r3, #28]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4013      	ands	r3, r2
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	bf0c      	ite	eq
 80075b2:	2301      	moveq	r3, #1
 80075b4:	2300      	movne	r3, #0
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	461a      	mov	r2, r3
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d0c5      	beq.n	800754c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075c0:	2300      	movs	r3, #0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075e0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 0201 	bic.w	r2, r2, #1
 80075f0:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2220      	movs	r2, #32
 80075f6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	661a      	str	r2, [r3, #96]	; 0x60
}
 80075fe:	bf00      	nop
 8007600:	370c      	adds	r7, #12
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f7ff fc07 	bl	8006e3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800762e:	bf00      	nop
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800764c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2220      	movs	r2, #32
 8007652:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fbe4 	bl	8006e28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8007668:	b084      	sub	sp, #16
 800766a:	b480      	push	{r7}
 800766c:	b085      	sub	sp, #20
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	f107 001c 	add.w	r0, r7, #28
 8007676:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800767e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007680:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007682:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007686:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007688:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800768a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800768c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800768e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007692:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685a      	ldr	r2, [r3, #4]
 800769e:	4b07      	ldr	r3, [pc, #28]	; (80076bc <SDMMC_Init+0x54>)
 80076a0:	4013      	ands	r3, r2
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	431a      	orrs	r2, r3
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	b004      	add	sp, #16
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	ffff8100 	.word	0xffff8100

080076c0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <SDMMC_WriteFIFO>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pWriteData pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 80076da:	b480      	push	{r7}
 80076dc:	b083      	sub	sp, #12
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
 80076e2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2203      	movs	r2, #3
 8007708:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 0303 	and.w	r3, r3, #3
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	681a      	ldr	r2, [r3, #0]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007752:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007758:	431a      	orrs	r2, r3
                       Command->CPSM);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800775e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68da      	ldr	r2, [r3, #12]
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <SDMMC_SendCommand+0x50>)
 800776c:	4013      	ands	r3, r2
 800776e:	68fa      	ldr	r2, [r7, #12]
 8007770:	431a      	orrs	r2, r3
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	fffff000 	.word	0xfffff000

08007788 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	b2db      	uxtb	r3, r3
}
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b085      	sub	sp, #20
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 80077ac:	2300      	movs	r3, #0
 80077ae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3314      	adds	r3, #20
 80077b4:	461a      	mov	r2, r3
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	4413      	add	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
}  
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	685a      	ldr	r2, [r3, #4]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80077f2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80077f8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80077fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007816:	2300      	movs	r3, #0

}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b088      	sub	sp, #32
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800782e:	2300      	movs	r3, #0
 8007830:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007836:	2310      	movs	r3, #16
 8007838:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800783a:	2340      	movs	r3, #64	; 0x40
 800783c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007842:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007846:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007848:	f107 0308 	add.w	r3, r7, #8
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7ff ff70 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007854:	f241 3288 	movw	r2, #5000	; 0x1388
 8007858:	2110      	movs	r1, #16
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa1c 	bl	8007c98 <SDMMC_GetCmdResp1>
 8007860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007862:	69fb      	ldr	r3, [r7, #28]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007876:	2300      	movs	r3, #0
 8007878:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800787e:	2311      	movs	r3, #17
 8007880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007882:	2340      	movs	r3, #64	; 0x40
 8007884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007886:	2300      	movs	r3, #0
 8007888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800788a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800788e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7ff ff4c 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800789c:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a0:	2111      	movs	r1, #17
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f9f8 	bl	8007c98 <SDMMC_GetCmdResp1>
 80078a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078aa:	69fb      	ldr	r3, [r7, #28]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b088      	sub	sp, #32
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80078be:	2300      	movs	r3, #0
 80078c0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80078c6:	2312      	movs	r3, #18
 80078c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80078ca:	2340      	movs	r3, #64	; 0x40
 80078cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80078ce:	2300      	movs	r3, #0
 80078d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80078d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078d6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80078d8:	f107 0308 	add.w	r3, r7, #8
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff ff28 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80078e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e8:	2112      	movs	r1, #18
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f9d4 	bl	8007c98 <SDMMC_GetCmdResp1>
 80078f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80078f2:	69fb      	ldr	r3, [r7, #28]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3720      	adds	r7, #32
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007906:	2300      	movs	r3, #0
 8007908:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800790e:	2318      	movs	r3, #24
 8007910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007912:	2340      	movs	r3, #64	; 0x40
 8007914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800791a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800791e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007920:	f107 0308 	add.w	r3, r7, #8
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff ff04 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800792c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007930:	2118      	movs	r1, #24
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f9b0 	bl	8007c98 <SDMMC_GetCmdResp1>
 8007938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800793a:	69fb      	ldr	r3, [r7, #28]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3720      	adds	r7, #32
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800794e:	2300      	movs	r3, #0
 8007950:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007956:	2319      	movs	r3, #25
 8007958:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800795a:	2340      	movs	r3, #64	; 0x40
 800795c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007962:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007966:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007968:	f107 0308 	add.w	r3, r7, #8
 800796c:	4619      	mov	r1, r3
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff fee0 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007974:	f241 3288 	movw	r2, #5000	; 0x1388
 8007978:	2119      	movs	r1, #25
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f98c 	bl	8007c98 <SDMMC_GetCmdResp1>
 8007980:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007982:	69fb      	ldr	r3, [r7, #28]
}
 8007984:	4618      	mov	r0, r3
 8007986:	3720      	adds	r7, #32
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007994:	2300      	movs	r3, #0
 8007996:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800799c:	230c      	movs	r3, #12
 800799e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079a0:	2340      	movs	r3, #64	; 0x40
 80079a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ac:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079ae:	f107 0308 	add.w	r3, r7, #8
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f7ff febd 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 80079ba:	4a05      	ldr	r2, [pc, #20]	; (80079d0 <SDMMC_CmdStopTransfer+0x44>)
 80079bc:	210c      	movs	r1, #12
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f96a 	bl	8007c98 <SDMMC_GetCmdResp1>
 80079c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80079c6:	69fb      	ldr	r3, [r7, #28]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3720      	adds	r7, #32
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	05f5e100 	.word	0x05f5e100

080079d4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08a      	sub	sp, #40	; 0x28
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80079e8:	2307      	movs	r3, #7
 80079ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079ec:	2340      	movs	r3, #64	; 0x40
 80079ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079f8:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80079fa:	f107 0310 	add.w	r3, r7, #16
 80079fe:	4619      	mov	r1, r3
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f7ff fe97 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0a:	2107      	movs	r1, #7
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f000 f943 	bl	8007c98 <SDMMC_GetCmdResp1>
 8007a12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3728      	adds	r7, #40	; 0x28
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b088      	sub	sp, #32
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007a26:	2300      	movs	r3, #0
 8007a28:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a3e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a40:	f107 0308 	add.w	r3, r7, #8
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7ff fe74 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f8f9 	bl	8007c44 <SDMMC_GetCmdError>
 8007a52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a54:	69fb      	ldr	r3, [r7, #28]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3720      	adds	r7, #32
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b088      	sub	sp, #32
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007a6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007a6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007a70:	2308      	movs	r3, #8
 8007a72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a74:	2340      	movs	r3, #64	; 0x40
 8007a76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a80:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a82:	f107 0308 	add.w	r3, r7, #8
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f7ff fe53 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 faca 	bl	8008028 <SDMMC_GetCmdResp7>
 8007a94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a96:	69fb      	ldr	r3, [r7, #28]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3720      	adds	r7, #32
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b088      	sub	sp, #32
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007ab2:	2337      	movs	r3, #55	; 0x37
 8007ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007ab6:	2340      	movs	r3, #64	; 0x40
 8007ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac2:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007ac4:	f107 0308 	add.w	r3, r7, #8
 8007ac8:	4619      	mov	r1, r3
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff fe32 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad4:	2137      	movs	r1, #55	; 0x37
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f8de 	bl	8007c98 <SDMMC_GetCmdResp1>
 8007adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ade:	69fb      	ldr	r3, [r7, #28]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8007af6:	683a      	ldr	r2, [r7, #0]
 8007af8:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <SDMMC_CmdAppOperCommand+0x48>)
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007afe:	2329      	movs	r3, #41	; 0x29
 8007b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b02:	2340      	movs	r3, #64	; 0x40
 8007b04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b0e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b10:	f107 0308 	add.w	r3, r7, #8
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff fe0c 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f9e1 	bl	8007ee4 <SDMMC_GetCmdResp3>
 8007b22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b24:	69fb      	ldr	r3, [r7, #28]
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	80100000 	.word	0x80100000

08007b34 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007b44:	2302      	movs	r3, #2
 8007b46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007b48:	23c0      	movs	r3, #192	; 0xc0
 8007b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b54:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f7ff fde9 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f97e 	bl	8007e64 <SDMMC_GetCmdResp2>
 8007b68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b6a:	69fb      	ldr	r3, [r7, #28]
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3720      	adds	r7, #32
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007b86:	2309      	movs	r3, #9
 8007b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007b8a:	23c0      	movs	r3, #192	; 0xc0
 8007b8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b96:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b98:	f107 0308 	add.w	r3, r7, #8
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff fdc8 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f95d 	bl	8007e64 <SDMMC_GetCmdResp2>
 8007baa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bac:	69fb      	ldr	r3, [r7, #28]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3720      	adds	r7, #32
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b088      	sub	sp, #32
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007bc8:	2303      	movs	r3, #3
 8007bca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bcc:	2340      	movs	r3, #64	; 0x40
 8007bce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bda:	f107 0308 	add.w	r3, r7, #8
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fda7 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	2103      	movs	r1, #3
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9ae 	bl	8007f4c <SDMMC_GetCmdResp6>
 8007bf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3720      	adds	r7, #32
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 8007c06:	2300      	movs	r3, #0
 8007c08:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007c0e:	230d      	movs	r3, #13
 8007c10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c12:	2340      	movs	r3, #64	; 0x40
 8007c14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c16:	2300      	movs	r3, #0
 8007c18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c20:	f107 0308 	add.w	r3, r7, #8
 8007c24:	4619      	mov	r1, r3
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fd84 	bl	8007734 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c30:	210d      	movs	r1, #13
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f830 	bl	8007c98 <SDMMC_GetCmdResp1>
 8007c38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3720      	adds	r7, #32
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8007c44:	b490      	push	{r4, r7}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007c4c:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <SDMMC_GetCmdError+0x4c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a10      	ldr	r2, [pc, #64]	; (8007c94 <SDMMC_GetCmdError+0x50>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	0a5b      	lsrs	r3, r3, #9
 8007c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8007c60:	4623      	mov	r3, r4
 8007c62:	1e5c      	subs	r4, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d102      	bne.n	8007c6e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007c68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c6c:	e00a      	b.n	8007c84 <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0f2      	beq.n	8007c60 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c80:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3708      	adds	r7, #8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bc90      	pop	{r4, r7}
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	20000000 	.word	0x20000000
 8007c94:	10624dd3 	.word	0x10624dd3

08007c98 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007c98:	b590      	push	{r4, r7, lr}
 8007c9a:	b087      	sub	sp, #28
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007ca6:	4b6c      	ldr	r3, [pc, #432]	; (8007e58 <SDMMC_GetCmdResp1+0x1c0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a6c      	ldr	r2, [pc, #432]	; (8007e5c <SDMMC_GetCmdResp1+0x1c4>)
 8007cac:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb0:	0a5b      	lsrs	r3, r3, #9
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8007cb8:	4623      	mov	r3, r4
 8007cba:	1e5c      	subs	r4, r3, #1
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007cc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007cc4:	e0c3      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d0f2      	beq.n	8007cb8 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd6:	f003 0304 	and.w	r3, r3, #4
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d004      	beq.n	8007ce8 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2204      	movs	r2, #4
 8007ce2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	e0b2      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e0a7      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fd42 	bl	8007788 <SDMMC_GetCommandResponse>
 8007d04:	4603      	mov	r3, r0
 8007d06:	461a      	mov	r2, r3
 8007d08:	7afb      	ldrb	r3, [r7, #11]
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d001      	beq.n	8007d12 <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e09d      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fd40 	bl	80077a2 <SDMMC_GetResponse>
 8007d22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d24:	697a      	ldr	r2, [r7, #20]
 8007d26:	4b4e      	ldr	r3, [pc, #312]	; (8007e60 <SDMMC_GetCmdResp1+0x1c8>)
 8007d28:	4013      	ands	r3, r2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e08d      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	da02      	bge.n	8007d3e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d38:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d3c:	e087      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d001      	beq.n	8007d4c <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	e080      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d56:	2380      	movs	r3, #128	; 0x80
 8007d58:	e079      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d002      	beq.n	8007d6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d68:	e071      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d002      	beq.n	8007d7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d78:	e069      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d88:	e061      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007d98:	e059      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da8:	e051      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007db4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007db8:	e049      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007dc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007dc8:	e041      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 8007dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dd8:	e039      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007de8:	e031      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007df4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007df8:	e029      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e08:	e021      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e14:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e18:	e019      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007e24:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e28:	e011      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e34:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e38:	e009      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e44:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e48:	e001      	b.n	8007e4e <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	371c      	adds	r7, #28
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd90      	pop	{r4, r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000000 	.word	0x20000000
 8007e5c:	10624dd3 	.word	0x10624dd3
 8007e60:	fdffe008 	.word	0xfdffe008

08007e64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007e64:	b490      	push	{r4, r7}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007e6c:	4b1b      	ldr	r3, [pc, #108]	; (8007edc <SDMMC_GetCmdResp2+0x78>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a1b      	ldr	r2, [pc, #108]	; (8007ee0 <SDMMC_GetCmdResp2+0x7c>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	0a5b      	lsrs	r3, r3, #9
 8007e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8007e80:	4623      	mov	r3, r4
 8007e82:	1e5c      	subs	r4, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d102      	bne.n	8007e8e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007e88:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007e8c:	e020      	b.n	8007ed0 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0f2      	beq.n	8007e80 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9e:	f003 0304 	and.w	r3, r3, #4
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d004      	beq.n	8007eb0 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2204      	movs	r2, #4
 8007eaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eac:	2304      	movs	r3, #4
 8007eae:	e00f      	b.n	8007ed0 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d004      	beq.n	8007ec6 <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e004      	b.n	8007ed0 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007ecc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007ece:	2300      	movs	r3, #0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bc90      	pop	{r4, r7}
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	20000000 	.word	0x20000000
 8007ee0:	10624dd3 	.word	0x10624dd3

08007ee4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007ee4:	b490      	push	{r4, r7}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007eec:	4b15      	ldr	r3, [pc, #84]	; (8007f44 <SDMMC_GetCmdResp3+0x60>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <SDMMC_GetCmdResp3+0x64>)
 8007ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef6:	0a5b      	lsrs	r3, r3, #9
 8007ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007efc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8007f00:	4623      	mov	r3, r4
 8007f02:	1e5c      	subs	r4, r3, #1
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d102      	bne.n	8007f0e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f0c:	e015      	b.n	8007f3a <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f12:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f2      	beq.n	8007f00 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	f003 0304 	and.w	r3, r3, #4
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d004      	beq.n	8007f30 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2204      	movs	r2, #4
 8007f2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	e004      	b.n	8007f3a <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007f36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc90      	pop	{r4, r7}
 8007f42:	4770      	bx	lr
 8007f44:	20000000 	.word	0x20000000
 8007f48:	10624dd3 	.word	0x10624dd3

08007f4c <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007f4c:	b590      	push	{r4, r7, lr}
 8007f4e:	b087      	sub	sp, #28
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	460b      	mov	r3, r1
 8007f56:	607a      	str	r2, [r7, #4]
 8007f58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007f5a:	4b31      	ldr	r3, [pc, #196]	; (8008020 <SDMMC_GetCmdResp6+0xd4>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a31      	ldr	r2, [pc, #196]	; (8008024 <SDMMC_GetCmdResp6+0xd8>)
 8007f60:	fba2 2303 	umull	r2, r3, r2, r3
 8007f64:	0a5b      	lsrs	r3, r3, #9
 8007f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f6a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8007f6e:	4623      	mov	r3, r4
 8007f70:	1e5c      	subs	r4, r3, #1
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d102      	bne.n	8007f7c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f7a:	e04c      	b.n	8008016 <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d0f2      	beq.n	8007f6e <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2204      	movs	r2, #4
 8007f98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f9a:	2304      	movs	r3, #4
 8007f9c:	e03b      	b.n	8008016 <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2201      	movs	r2, #1
 8007fae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e030      	b.n	8008016 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f7ff fbe7 	bl	8007788 <SDMMC_GetCommandResponse>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	7afb      	ldrb	r3, [r7, #11]
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d001      	beq.n	8007fc8 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e026      	b.n	8008016 <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007fce:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f7ff fbe5 	bl	80077a2 <SDMMC_GetResponse>
 8007fd8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	0c1b      	lsrs	r3, r3, #16
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	e011      	b.n	8008016 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d002      	beq.n	8008002 <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007ffc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008000:	e009      	b.n	8008016 <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800800c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008010:	e001      	b.n	8008016 <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008016:	4618      	mov	r0, r3
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	bd90      	pop	{r4, r7, pc}
 800801e:	bf00      	nop
 8008020:	20000000 	.word	0x20000000
 8008024:	10624dd3 	.word	0x10624dd3

08008028 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008028:	b490      	push	{r4, r7}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8008030:	4b18      	ldr	r3, [pc, #96]	; (8008094 <SDMMC_GetCmdResp7+0x6c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a18      	ldr	r2, [pc, #96]	; (8008098 <SDMMC_GetCmdResp7+0x70>)
 8008036:	fba2 2303 	umull	r2, r3, r2, r3
 800803a:	0a5b      	lsrs	r3, r3, #9
 800803c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008040:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 8008044:	4623      	mov	r3, r4
 8008046:	1e5c      	subs	r4, r3, #1
 8008048:	2b00      	cmp	r3, #0
 800804a:	d102      	bne.n	8008052 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800804c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008050:	e01a      	b.n	8008088 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008056:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800805a:	2b00      	cmp	r3, #0
 800805c:	d0f2      	beq.n	8008044 <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008062:	f003 0304 	and.w	r3, r3, #4
 8008066:	2b00      	cmp	r3, #0
 8008068:	d004      	beq.n	8008074 <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2240      	movs	r2, #64	; 0x40
 800806e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008070:	2304      	movs	r3, #4
 8008072:	e009      	b.n	8008088 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2240      	movs	r2, #64	; 0x40
 8008084:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008086:	2300      	movs	r3, #0
  
}
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bc90      	pop	{r4, r7}
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000000 	.word	0x20000000
 8008098:	10624dd3 	.word	0x10624dd3

0800809c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80080a0:	4904      	ldr	r1, [pc, #16]	; (80080b4 <MX_FATFS_Init+0x18>)
 80080a2:	4805      	ldr	r0, [pc, #20]	; (80080b8 <MX_FATFS_Init+0x1c>)
 80080a4:	f000 f952 	bl	800834c <FATFS_LinkDriver>
 80080a8:	4603      	mov	r3, r0
 80080aa:	461a      	mov	r2, r3
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <MX_FATFS_Init+0x20>)
 80080ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80080b0:	bf00      	nop
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	2000097c 	.word	0x2000097c
 80080b8:	080083fc 	.word	0x080083fc
 80080bc:	20000978 	.word	0x20000978

080080c0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80080c6:	2301      	movs	r3, #1
 80080c8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80080ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80080ce:	4806      	ldr	r0, [pc, #24]	; (80080e8 <BSP_PlatformIsDetected+0x28>)
 80080d0:	f7fb f9e0 	bl	8003494 <HAL_GPIO_ReadPin>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80080da:	2300      	movs	r3, #0
 80080dc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80080de:	79fb      	ldrb	r3, [r7, #7]
}  
 80080e0:	4618      	mov	r0, r3
 80080e2:	3708      	adds	r7, #8
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	40020000 	.word	0x40020000

080080ec <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80080f6:	4b0b      	ldr	r3, [pc, #44]	; (8008124 <SD_CheckStatus+0x38>)
 80080f8:	2201      	movs	r2, #1
 80080fa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80080fc:	f7f8 fb28 	bl	8000750 <BSP_SD_GetCardState>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d107      	bne.n	8008116 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008106:	4b07      	ldr	r3, [pc, #28]	; (8008124 <SD_CheckStatus+0x38>)
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	f023 0301 	bic.w	r3, r3, #1
 8008110:	b2da      	uxtb	r2, r3
 8008112:	4b04      	ldr	r3, [pc, #16]	; (8008124 <SD_CheckStatus+0x38>)
 8008114:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008116:	4b03      	ldr	r3, [pc, #12]	; (8008124 <SD_CheckStatus+0x38>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	b2db      	uxtb	r3, r3
}
 800811c:	4618      	mov	r0, r3
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	20000009 	.word	0x20000009

08008128 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	4603      	mov	r3, r0
 8008130:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;  
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <SD_initialize+0x38>)
 8008134:	2201      	movs	r2, #1
 8008136:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008138:	f7f8 fab6 	bl	80006a8 <BSP_SD_Init>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d107      	bne.n	8008152 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8008142:	79fb      	ldrb	r3, [r7, #7]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff ffd1 	bl	80080ec <SD_CheckStatus>
 800814a:	4603      	mov	r3, r0
 800814c:	461a      	mov	r2, r3
 800814e:	4b04      	ldr	r3, [pc, #16]	; (8008160 <SD_initialize+0x38>)
 8008150:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8008152:	4b03      	ldr	r3, [pc, #12]	; (8008160 <SD_initialize+0x38>)
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	b2db      	uxtb	r3, r3
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20000009 	.word	0x20000009

08008164 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	4603      	mov	r3, r0
 800816c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800816e:	79fb      	ldrb	r3, [r7, #7]
 8008170:	4618      	mov	r0, r3
 8008172:	f7ff ffbb 	bl	80080ec <SD_CheckStatus>
 8008176:	4603      	mov	r3, r0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b086      	sub	sp, #24
 8008184:	af00      	add	r7, sp, #0
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
 800818a:	603b      	str	r3, [r7, #0]
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008194:	f04f 33ff 	mov.w	r3, #4294967295
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	6879      	ldr	r1, [r7, #4]
 800819c:	68b8      	ldr	r0, [r7, #8]
 800819e:	f7f8 fa9b 	bl	80006d8 <BSP_SD_ReadBlocks>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d107      	bne.n	80081b8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80081a8:	bf00      	nop
 80081aa:	f7f8 fad1 	bl	8000750 <BSP_SD_GetCardState>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1fa      	bne.n	80081aa <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b086      	sub	sp, #24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
 80081ce:	4603      	mov	r3, r0
 80081d0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80081d6:	f04f 33ff 	mov.w	r3, #4294967295
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	68b8      	ldr	r0, [r7, #8]
 80081e0:	f7f8 fa98 	bl	8000714 <BSP_SD_WriteBlocks>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d107      	bne.n	80081fa <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80081ea:	bf00      	nop
 80081ec:	f7f8 fab0 	bl	8000750 <BSP_SD_GetCardState>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1fa      	bne.n	80081ec <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80081fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3718      	adds	r7, #24
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08c      	sub	sp, #48	; 0x30
 8008208:	af00      	add	r7, sp, #0
 800820a:	4603      	mov	r3, r0
 800820c:	603a      	str	r2, [r7, #0]
 800820e:	71fb      	strb	r3, [r7, #7]
 8008210:	460b      	mov	r3, r1
 8008212:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800821a:	4b25      	ldr	r3, [pc, #148]	; (80082b0 <SD_ioctl+0xac>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <SD_ioctl+0x28>
 8008228:	2303      	movs	r3, #3
 800822a:	e03c      	b.n	80082a6 <SD_ioctl+0xa2>

  switch (cmd)
 800822c:	79bb      	ldrb	r3, [r7, #6]
 800822e:	2b03      	cmp	r3, #3
 8008230:	d834      	bhi.n	800829c <SD_ioctl+0x98>
 8008232:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <SD_ioctl+0x34>)
 8008234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008238:	08008249 	.word	0x08008249
 800823c:	08008251 	.word	0x08008251
 8008240:	08008269 	.word	0x08008269
 8008244:	08008283 	.word	0x08008283
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008248:	2300      	movs	r3, #0
 800824a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800824e:	e028      	b.n	80082a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8008250:	f107 030c 	add.w	r3, r7, #12
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 fa8b 	bl	8000770 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800825a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008266:	e01c      	b.n	80082a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008268:	f107 030c 	add.w	r3, r7, #12
 800826c:	4618      	mov	r0, r3
 800826e:	f7f8 fa7f 	bl	8000770 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008274:	b29a      	uxth	r2, r3
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800827a:	2300      	movs	r3, #0
 800827c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008280:	e00f      	b.n	80082a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008282:	f107 030c 	add.w	r3, r7, #12
 8008286:	4618      	mov	r0, r3
 8008288:	f7f8 fa72 	bl	8000770 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	0a5a      	lsrs	r2, r3, #9
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800829a:	e002      	b.n	80082a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800829c:	2304      	movs	r3, #4
 800829e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80082a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3730      	adds	r7, #48	; 0x30
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	20000009 	.word	0x20000009

080082b4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	4613      	mov	r3, r2
 80082c0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80082ca:	4b1f      	ldr	r3, [pc, #124]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 80082cc:	7a5b      	ldrb	r3, [r3, #9]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d131      	bne.n	8008338 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082d4:	4b1c      	ldr	r3, [pc, #112]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 80082d6:	7a5b      	ldrb	r3, [r3, #9]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	4b1a      	ldr	r3, [pc, #104]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 80082de:	2100      	movs	r1, #0
 80082e0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082e2:	4b19      	ldr	r3, [pc, #100]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 80082e4:	7a5b      	ldrb	r3, [r3, #9]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	4a17      	ldr	r2, [pc, #92]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082f2:	4b15      	ldr	r3, [pc, #84]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 80082f4:	7a5b      	ldrb	r3, [r3, #9]
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	461a      	mov	r2, r3
 80082fa:	4b13      	ldr	r3, [pc, #76]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 80082fc:	4413      	add	r3, r2
 80082fe:	79fa      	ldrb	r2, [r7, #7]
 8008300:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008302:	4b11      	ldr	r3, [pc, #68]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 8008304:	7a5b      	ldrb	r3, [r3, #9]
 8008306:	b2db      	uxtb	r3, r3
 8008308:	1c5a      	adds	r2, r3, #1
 800830a:	b2d1      	uxtb	r1, r2
 800830c:	4a0e      	ldr	r2, [pc, #56]	; (8008348 <FATFS_LinkDriverEx+0x94>)
 800830e:	7251      	strb	r1, [r2, #9]
 8008310:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008312:	7dbb      	ldrb	r3, [r7, #22]
 8008314:	3330      	adds	r3, #48	; 0x30
 8008316:	b2da      	uxtb	r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	3301      	adds	r3, #1
 8008320:	223a      	movs	r2, #58	; 0x3a
 8008322:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	3302      	adds	r3, #2
 8008328:	222f      	movs	r2, #47	; 0x2f
 800832a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	3303      	adds	r3, #3
 8008330:	2200      	movs	r2, #0
 8008332:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008334:	2300      	movs	r3, #0
 8008336:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008338:	7dfb      	ldrb	r3, [r7, #23]
}
 800833a:	4618      	mov	r0, r3
 800833c:	371c      	adds	r7, #28
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
 8008346:	bf00      	nop
 8008348:	20000028 	.word	0x20000028

0800834c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b082      	sub	sp, #8
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008356:	2200      	movs	r2, #0
 8008358:	6839      	ldr	r1, [r7, #0]
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f7ff ffaa 	bl	80082b4 <FATFS_LinkDriverEx>
 8008360:	4603      	mov	r3, r0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3708      	adds	r7, #8
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	4e0d      	ldr	r6, [pc, #52]	; (80083a4 <__libc_init_array+0x38>)
 8008370:	4c0d      	ldr	r4, [pc, #52]	; (80083a8 <__libc_init_array+0x3c>)
 8008372:	1ba4      	subs	r4, r4, r6
 8008374:	10a4      	asrs	r4, r4, #2
 8008376:	2500      	movs	r5, #0
 8008378:	42a5      	cmp	r5, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	4e0b      	ldr	r6, [pc, #44]	; (80083ac <__libc_init_array+0x40>)
 800837e:	4c0c      	ldr	r4, [pc, #48]	; (80083b0 <__libc_init_array+0x44>)
 8008380:	f000 f820 	bl	80083c4 <_init>
 8008384:	1ba4      	subs	r4, r4, r6
 8008386:	10a4      	asrs	r4, r4, #2
 8008388:	2500      	movs	r5, #0
 800838a:	42a5      	cmp	r5, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008394:	4798      	blx	r3
 8008396:	3501      	adds	r5, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800839e:	4798      	blx	r3
 80083a0:	3501      	adds	r5, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	08008418 	.word	0x08008418
 80083a8:	08008418 	.word	0x08008418
 80083ac:	08008418 	.word	0x08008418
 80083b0:	0800841c 	.word	0x0800841c

080083b4 <memset>:
 80083b4:	4402      	add	r2, r0
 80083b6:	4603      	mov	r3, r0
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d100      	bne.n	80083be <memset+0xa>
 80083bc:	4770      	bx	lr
 80083be:	f803 1b01 	strb.w	r1, [r3], #1
 80083c2:	e7f9      	b.n	80083b8 <memset+0x4>

080083c4 <_init>:
 80083c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c6:	bf00      	nop
 80083c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ca:	bc08      	pop	{r3}
 80083cc:	469e      	mov	lr, r3
 80083ce:	4770      	bx	lr

080083d0 <_fini>:
 80083d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083d2:	bf00      	nop
 80083d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083d6:	bc08      	pop	{r3}
 80083d8:	469e      	mov	lr, r3
 80083da:	4770      	bx	lr
