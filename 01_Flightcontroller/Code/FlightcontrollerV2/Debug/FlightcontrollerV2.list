
FlightcontrollerV2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a36c  080001e0  080001e0  000101e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800a54c  0800a54c  0001a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a6d0  0800a6d0  00020854  2**0
                  CONTENTS
  4 .ARM          00000008  0800a6d0  0800a6d0  0001a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a6d8  0800a6d8  00020854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800a6d8  0800a6d8  0001a6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a6e4  0800a6e4  0001a6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000854  20000000  0800a6ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000038d4  20000858  0800af40  00020858  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000412c  0800af40  0002412c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020854  2**0
                  CONTENTS, READONLY
 12 .debug_line   00022d0b  00000000  00000000  00020884  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0004a6d9  00000000  00000000  0004358f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00006f9e  00000000  00000000  0008dc68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001830  00000000  00000000  00094c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000f656b  00000000  00000000  00096438  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000098d8  00000000  00000000  0018c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00024c77  00000000  00000000  00196280  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  0002c5ee  00000000  00000000  001baef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001e74e5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006190  00000000  00000000  001e7560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000858 	.word	0x20000858
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a534 	.word	0x0800a534

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000085c 	.word	0x2000085c
 800021c:	0800a534 	.word	0x0800a534

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000eb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000eb2:	e003      	b.n	8000ebc <LoopCopyDataInit>

08000eb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000eb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000eba:	3104      	adds	r1, #4

08000ebc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ebc:	480b      	ldr	r0, [pc, #44]	; (8000eec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ec0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ec2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ec4:	d3f6      	bcc.n	8000eb4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ec6:	4a0b      	ldr	r2, [pc, #44]	; (8000ef4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ec8:	e002      	b.n	8000ed0 <LoopFillZerobss>

08000eca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ecc:	f842 3b04 	str.w	r3, [r2], #4

08000ed0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ed0:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ed2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ed4:	d3f9      	bcc.n	8000eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ed6:	f008 fb45 	bl	8009564 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eda:	f008 fee3 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f007 ff79 	bl	8008dd4 <main>
  bx  lr    
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 8000ee8:	0800a6ec 	.word	0x0800a6ec
  ldr  r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ef0:	20000854 	.word	0x20000854
  ldr  r2, =_sbss
 8000ef4:	20000858 	.word	0x20000858
  ldr  r3, = _ebss
 8000ef8:	2000412c 	.word	0x2000412c

08000efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC_IRQHandler>
	...

08000f00 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f00:	f240 0100 	movw	r1, #0
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	f240 020c 	movw	r2, #12
 8000f0c:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f10:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8000f14:	7809      	ldrb	r1, [r1, #0]
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
{
 8000f1a:	b510      	push	{r4, lr}
 8000f1c:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1e:	6810      	ldr	r0, [r2, #0]
 8000f20:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f24:	f000 fa1c 	bl	8001360 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f28:	b908      	cbnz	r0, 8000f2e <HAL_InitTick+0x2e>
 8000f2a:	2c0f      	cmp	r4, #15
 8000f2c:	d901      	bls.n	8000f32 <HAL_InitTick+0x32>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f2e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000f30:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f32:	2200      	movs	r2, #0
 8000f34:	4621      	mov	r1, r4
 8000f36:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3a:	f000 f9c7 	bl	80012cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3e:	f240 0304 	movw	r3, #4
 8000f42:	2000      	movs	r0, #0
 8000f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f48:	601c      	str	r4, [r3, #0]
}
 8000f4a:	bd10      	pop	{r4, pc}

08000f4c <HAL_Init>:
{
 8000f4c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 f9a6 	bl	80012a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f54:	2000      	movs	r0, #0
 8000f56:	f7ff ffd3 	bl	8000f00 <HAL_InitTick>
  HAL_MspInit();
 8000f5a:	f008 fa45 	bl	80093e8 <HAL_MspInit>
}
 8000f5e:	2000      	movs	r0, #0
 8000f60:	bd08      	pop	{r3, pc}
 8000f62:	bf00      	nop

08000f64 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f64:	f243 33f0 	movw	r3, #13296	; 0x33f0
 8000f68:	f240 0100 	movw	r1, #0
 8000f6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f70:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8000f74:	6818      	ldr	r0, [r3, #0]
 8000f76:	780a      	ldrb	r2, [r1, #0]
 8000f78:	4402      	add	r2, r0
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f80:	f243 33f0 	movw	r3, #13296	; 0x33f0
 8000f84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f88:	6818      	ldr	r0, [r3, #0]
}
 8000f8a:	4770      	bx	lr

08000f8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f8c:	b538      	push	{r3, r4, r5, lr}
 8000f8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f90:	f7ff fff6 	bl	8000f80 <HAL_GetTick>
 8000f94:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	1c63      	adds	r3, r4, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x1a>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	f240 0300 	movw	r3, #0
 8000f9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	f7ff ffeb 	bl	8000f80 <HAL_GetTick>
 8000faa:	1b40      	subs	r0, r0, r5
 8000fac:	42a0      	cmp	r0, r4
 8000fae:	d3fa      	bcc.n	8000fa6 <HAL_Delay+0x1a>
  {
  }
}
 8000fb0:	bd38      	pop	{r3, r4, r5, pc}
 8000fb2:	bf00      	nop

08000fb4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fb4:	2800      	cmp	r0, #0
 8000fb6:	f000 809a 	beq.w	80010ee <HAL_ADC_Init+0x13a>
{
 8000fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fbc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000fbe:	4604      	mov	r4, r0
 8000fc0:	2d00      	cmp	r5, #0
 8000fc2:	f000 808a 	beq.w	80010da <HAL_ADC_Init+0x126>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fc8:	06db      	lsls	r3, r3, #27
 8000fca:	d504      	bpl.n	8000fd6 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fcc:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8000fce:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000fd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8000fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	f64e 62fd 	movw	r2, #61181	; 0xeefd
 8000fda:	6c20      	ldr	r0, [r4, #64]	; 0x40
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000fdc:	f44f 510c 	mov.w	r1, #8960	; 0x2300
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fe0:	6823      	ldr	r3, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	f6cf 72ff 	movt	r2, #65535	; 0xffff
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fe6:	2501      	movs	r5, #1
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000fe8:	f2c4 0101 	movt	r1, #16385	; 0x4001
    ADC_STATE_CLR_SET(hadc->State,
 8000fec:	4002      	ands	r2, r0
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fee:	f6c0 7500 	movt	r5, #3840	; 0xf00
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	f042 0202 	orr.w	r2, r2, #2
 8000ff6:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000ff8:	684a      	ldr	r2, [r1, #4]
 8000ffa:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ffe:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001000:	684a      	ldr	r2, [r1, #4]
 8001002:	6860      	ldr	r0, [r4, #4]
 8001004:	4302      	orrs	r2, r0
 8001006:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001008:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800100a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800100c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001010:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001014:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001016:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001018:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800101a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800101c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001020:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001022:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001024:	6858      	ldr	r0, [r3, #4]
 8001026:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800102a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800102c:	6859      	ldr	r1, [r3, #4]
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001034:	6899      	ldr	r1, [r3, #8]
 8001036:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800103a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	ea42 0207 	orr.w	r2, r2, r7
 8001042:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001044:	d055      	beq.n	80010f2 <HAL_ADC_Init+0x13e>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001046:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001048:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800104a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800104e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	4316      	orrs	r6, r2
 8001054:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001056:	6899      	ldr	r1, [r3, #8]
 8001058:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800105c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	4302      	orrs	r2, r0
 8001062:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001064:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001066:	69a5      	ldr	r5, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001068:	f021 0102 	bic.w	r1, r1, #2
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800106c:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001070:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001078:	609a      	str	r2, [r3, #8]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800107a:	2800      	cmp	r0, #0
 800107c:	d142      	bne.n	8001104 <HAL_ADC_Init+0x150>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001084:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001086:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8001088:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800108a:	69e5      	ldr	r5, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800108c:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001090:	f894 c030 	ldrb.w	ip, [r4, #48]	; 0x30
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001094:	1e6a      	subs	r2, r5, #1
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001096:	6967      	ldr	r7, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001098:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800109a:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800109c:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800109e:	ea45 5502 	orr.w	r5, r5, r2, lsl #20
 80010a2:	62dd      	str	r5, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010a4:	689d      	ldr	r5, [r3, #8]
 80010a6:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 80010aa:	609d      	str	r5, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ac:	6899      	ldr	r1, [r3, #8]
 80010ae:	ea41 214c 	orr.w	r1, r1, ip, lsl #9
 80010b2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010b4:	6899      	ldr	r1, [r3, #8]
 80010b6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80010ba:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80010c2:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80010c4:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80010c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80010c8:	f023 0303 	bic.w	r3, r3, #3
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80010d2:	2300      	movs	r3, #0
 80010d4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80010d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80010da:	f007 f9a3 	bl	8008424 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80010de:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80010e2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e6:	06db      	lsls	r3, r3, #27
 80010e8:	f53f af70 	bmi.w	8000fcc <HAL_ADC_Init+0x18>
 80010ec:	e773      	b.n	8000fd6 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80010ee:	2001      	movs	r0, #1
}
 80010f0:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	e7af      	b.n	8001064 <HAL_ADC_Init+0xb0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001104:	6858      	ldr	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001106:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001108:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800110c:	1e51      	subs	r1, r2, #1
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800110e:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001116:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	e7b1      	b.n	8001086 <HAL_ADC_Init+0xd2>
 8001122:	bf00      	nop

08001124 <HAL_ADC_ConfigChannel>:
  __HAL_LOCK(hadc);
 8001124:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  __IO uint32_t counter = 0;
 8001128:	2200      	movs	r2, #0
{
 800112a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 800112c:	2b01      	cmp	r3, #1
{
 800112e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0;
 8001130:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001132:	f000 80ac 	beq.w	800128e <HAL_ADC_ConfigChannel+0x16a>
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001136:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8001138:	2201      	movs	r2, #1
 800113a:	6803      	ldr	r3, [r0, #0]
	if (sConfig->Channel > ADC_CHANNEL_9)
 800113c:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 800113e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 8001142:	b2af      	uxth	r7, r5
 8001144:	688a      	ldr	r2, [r1, #8]
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001146:	d82b      	bhi.n	80011a0 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001148:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800114c:	f04f 0c07 	mov.w	ip, #7
 8001150:	691c      	ldr	r4, [r3, #16]
 8001152:	fa0c fc06 	lsl.w	ip, ip, r6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001156:	fa02 f606 	lsl.w	r6, r2, r6
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800115a:	ea24 040c 	bic.w	r4, r4, ip
 800115e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	4316      	orrs	r6, r2
 8001164:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7)
 8001166:	684e      	ldr	r6, [r1, #4]
 8001168:	2e06      	cmp	r6, #6
 800116a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800116e:	d832      	bhi.n	80011d6 <HAL_ADC_ConfigChannel+0xb2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001170:	3a05      	subs	r2, #5
 8001172:	241f      	movs	r4, #31
 8001174:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001176:	4094      	lsls	r4, r2
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001178:	fa07 f202 	lsl.w	r2, r7, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800117c:	ea21 0104 	bic.w	r1, r1, r4
 8001180:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001182:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001184:	430a      	orrs	r2, r1
 8001186:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001188:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800118c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8001190:	4293      	cmp	r3, r2
 8001192:	d035      	beq.n	8001200 <HAL_ADC_ConfigChannel+0xdc>
  __HAL_UNLOCK(hadc);
 8001194:	2300      	movs	r3, #0
 8001196:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800119a:	4618      	mov	r0, r3
}
 800119c:	b003      	add	sp, #12
 800119e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011a0:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 80011a4:	f04f 0c07 	mov.w	ip, #7
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011a8:	f04f 0e12 	mov.w	lr, #18
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011ac:	68dc      	ldr	r4, [r3, #12]
 80011ae:	3e1e      	subs	r6, #30
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b0:	f2c1 0e00 	movt	lr, #4096	; 0x1000
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011b4:	fa0c fc06 	lsl.w	ip, ip, r6
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011b8:	4575      	cmp	r5, lr
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011ba:	ea24 040c 	bic.w	r4, r4, ip
 80011be:	60dc      	str	r4, [r3, #12]
		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011c0:	d068      	beq.n	8001294 <HAL_ADC_ConfigChannel+0x170>
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011c2:	fa02 f606 	lsl.w	r6, r2, r6
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	4316      	orrs	r6, r2
 80011ca:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 80011cc:	684e      	ldr	r6, [r1, #4]
 80011ce:	2e06      	cmp	r6, #6
 80011d0:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 80011d4:	d9cc      	bls.n	8001170 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13)
 80011d6:	2e0c      	cmp	r6, #12
 80011d8:	d842      	bhi.n	8001260 <HAL_ADC_ConfigChannel+0x13c>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011da:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 80011de:	261f      	movs	r6, #31
 80011e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e2:	40a6      	lsls	r6, r4
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011e4:	fa07 f204 	lsl.w	r2, r7, r4
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011e8:	ea21 0106 	bic.w	r1, r1, r6
 80011ec:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011ee:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80011f0:	4314      	orrs	r4, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011f6:	f2c4 0201 	movt	r2, #16385	; 0x4001
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fa:	631c      	str	r4, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d1c9      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x70>
 8001200:	2d12      	cmp	r5, #18
 8001202:	d03b      	beq.n	800127c <HAL_ADC_ConfigChannel+0x158>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001204:	2312      	movs	r3, #18
 8001206:	f2c1 0300 	movt	r3, #4096	; 0x1000
 800120a:	429d      	cmp	r5, r3
 800120c:	d001      	beq.n	8001212 <HAL_ADC_ConfigChannel+0xee>
 800120e:	2d11      	cmp	r5, #17
 8001210:	d1c0      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x70>
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001212:	f44f 530c 	mov.w	r3, #8960	; 0x2300
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001216:	2112      	movs	r1, #18
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001218:	f2c4 0301 	movt	r3, #16385	; 0x4001
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800121c:	f2c1 0100 	movt	r1, #4096	; 0x1000
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001220:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001222:	428d      	cmp	r5, r1
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001224:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001228:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800122a:	d1b3      	bne.n	8001194 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800122c:	f240 020c 	movw	r2, #12
 8001230:	f64d 6183 	movw	r1, #56963	; 0xde83
 8001234:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001238:	f2c4 311b 	movt	r1, #17179	; 0x431b
 800123c:	6813      	ldr	r3, [r2, #0]
 800123e:	fba1 2303 	umull	r2, r3, r1, r3
 8001242:	0c9b      	lsrs	r3, r3, #18
 8001244:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 800124c:	9b01      	ldr	r3, [sp, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0a0      	beq.n	8001194 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 8001252:	9b01      	ldr	r3, [sp, #4]
 8001254:	3b01      	subs	r3, #1
 8001256:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 8001258:	9b01      	ldr	r3, [sp, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f9      	bne.n	8001252 <HAL_ADC_ConfigChannel+0x12e>
 800125e:	e799      	b.n	8001194 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001260:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8001264:	261f      	movs	r6, #31
 8001266:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001268:	408e      	lsls	r6, r1
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800126a:	fa07 f201 	lsl.w	r2, r7, r1
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800126e:	ea24 0406 	bic.w	r4, r4, r6
 8001272:	62dc      	str	r4, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001276:	430a      	orrs	r2, r1
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
 800127a:	e785      	b.n	8001188 <HAL_ADC_ConfigChannel+0x64>
    ADC->CCR |= ADC_CCR_VBATE;
 800127c:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8001280:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	e782      	b.n	8001194 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 800128e:	2002      	movs	r0, #2
}
 8001290:	b003      	add	sp, #12
 8001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001294:	68de      	ldr	r6, [r3, #12]
 8001296:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
 800129a:	60de      	str	r6, [r3, #12]
 800129c:	e763      	b.n	8001166 <HAL_ADC_ConfigChannel+0x42>
 800129e:	bf00      	nop

080012a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80012a4:	2300      	movs	r3, #0
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a8:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80012ac:	f2c0 53fa 	movt	r3, #1530	; 0x5fa
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b0:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b4:	68d1      	ldr	r1, [r2, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b6:	b410      	push	{r4}
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80012bc:	4021      	ands	r1, r4
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80012be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80012c2:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 80012c4:	4318      	orrs	r0, r3
  SCB->AIRCR =  reg_value;
 80012c6:	60d0      	str	r0, [r2, #12]
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80012d0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	f1c3 0507 	rsb	r5, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e0:	1d1c      	adds	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e2:	2d04      	cmp	r5, #4
 80012e4:	bf28      	it	cs
 80012e6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e8:	2c06      	cmp	r4, #6
 80012ea:	d91d      	bls.n	8001328 <HAL_NVIC_SetPriority+0x5c>
 80012ec:	3b03      	subs	r3, #3
 80012ee:	f04f 34ff 	mov.w	r4, #4294967295
 80012f2:	409c      	lsls	r4, r3
 80012f4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	f04f 32ff 	mov.w	r2, #4294967295
  if ((int32_t)(IRQn) >= 0)
 80012fc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fe:	fa02 f205 	lsl.w	r2, r2, r5
 8001302:	ea21 0102 	bic.w	r1, r1, r2
 8001306:	fa01 f203 	lsl.w	r2, r1, r3
 800130a:	ea42 0204 	orr.w	r2, r2, r4
 800130e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001312:	b2d2      	uxtb	r2, r2
  if ((int32_t)(IRQn) >= 0)
 8001314:	db0b      	blt.n	800132e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001316:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 800131a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800131e:	4403      	add	r3, r0
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001324:	bc30      	pop	{r4, r5}
 8001326:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001328:	2400      	movs	r4, #0
 800132a:	4623      	mov	r3, r4
 800132c:	e7e4      	b.n	80012f8 <HAL_NVIC_SetPriority+0x2c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8001332:	f000 000f 	and.w	r0, r0, #15
 8001336:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800133a:	4403      	add	r3, r0
 800133c:	761a      	strb	r2, [r3, #24]
 800133e:	bc30      	pop	{r4, r5}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop

08001344 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001344:	2800      	cmp	r0, #0
 8001346:	db0a      	blt.n	800135e <HAL_NVIC_EnableIRQ+0x1a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001348:	f000 011f 	and.w	r1, r0, #31
 800134c:	2301      	movs	r3, #1
 800134e:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001352:	0940      	lsrs	r0, r0, #5
 8001354:	408b      	lsls	r3, r1
 8001356:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800135a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800135e:	4770      	bx	lr

08001360 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001360:	3801      	subs	r0, #1
 8001362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001366:	d213      	bcs.n	8001390 <HAL_SYSTICK_Config+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001368:	f24e 0310 	movw	r3, #57360	; 0xe010
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800136c:	f44f 416d 	mov.w	r1, #60672	; 0xed00
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001370:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001372:	f2ce 0300 	movt	r3, #57344	; 0xe000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	f2ce 0100 	movt	r1, #57344	; 0xe000
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b430      	push	{r4, r5}
 800137c:	25f0      	movs	r5, #240	; 0xf0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800137e:	2407      	movs	r4, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001380:	6058      	str	r0, [r3, #4]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001382:	4610      	mov	r0, r2
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001384:	f881 5023 	strb.w	r5, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800138a:	601c      	str	r4, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800138c:	bc30      	pop	{r4, r5}
 800138e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001390:	2001      	movs	r0, #1
 8001392:	4770      	bx	lr

08001394 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8001394:	b188      	cbz	r0, 80013ba <HAL_DAC_Init+0x26>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001396:	7903      	ldrb	r3, [r0, #4]
{ 
 8001398:	b510      	push	{r4, lr}
  if(hdac->State == HAL_DAC_STATE_RESET)
 800139a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800139e:	4604      	mov	r4, r0
 80013a0:	b13b      	cbz	r3, 80013b2 <HAL_DAC_Init+0x1e>
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013a2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80013a4:	2102      	movs	r1, #2
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80013a6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80013a8:	7121      	strb	r1, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80013aa:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80013ac:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80013ae:	7122      	strb	r2, [r4, #4]
}
 80013b0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED; 
 80013b2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80013b4:	f007 f918 	bl	80085e8 <HAL_DAC_MspInit>
 80013b8:	e7f3      	b.n	80013a2 <HAL_DAC_Init+0xe>
     return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop

080013c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80013c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80013c4:	7944      	ldrb	r4, [r0, #5]
{
 80013c6:	f8dd c018 	ldr.w	ip, [sp, #24]
  __HAL_LOCK(hdac);
 80013ca:	2c01      	cmp	r4, #1
 80013cc:	d06b      	beq.n	80014a6 <HAL_DAC_Start_DMA+0xe6>
 80013ce:	4617      	mov	r7, r2
 80013d0:	460e      	mov	r6, r1
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80013d2:	2202      	movs	r2, #2
  __HAL_LOCK(hdac);
 80013d4:	2101      	movs	r1, #1
 80013d6:	4604      	mov	r4, r0
 80013d8:	6805      	ldr	r5, [r0, #0]
 80013da:	7141      	strb	r1, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80013dc:	7102      	strb	r2, [r0, #4]

  if(Channel == DAC_CHANNEL_1)
 80013de:	bb46      	cbnz	r6, 8001432 <HAL_DAC_Start_DMA+0x72>

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80013e0:	682a      	ldr	r2, [r5, #0]
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80013e2:	f241 48c9 	movw	r8, #5321	; 0x14c9
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80013e6:	f241 4edd 	movw	lr, #5341	; 0x14dd
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80013ea:	f241 41ed 	movw	r1, #5357	; 0x14ed
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80013ee:	6880      	ldr	r0, [r0, #8]
 80013f0:	f6c0 0800 	movt	r8, #2048	; 0x800
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80013f4:	f6c0 0e00 	movt	lr, #2048	; 0x800
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80013f8:	f6c0 0100 	movt	r1, #2048	; 0x800
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80013fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001400:	f1bc 0f04 	cmp.w	ip, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001404:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001408:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800140c:	64c1      	str	r1, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800140e:	602a      	str	r2, [r5, #0]
    switch(Alignment)
 8001410:	d055      	beq.n	80014be <HAL_DAC_Start_DMA+0xfe>
 8001412:	f1bc 0f08 	cmp.w	ip, #8
 8001416:	d04f      	beq.n	80014b8 <HAL_DAC_Start_DMA+0xf8>
 8001418:	f1bc 0f00 	cmp.w	ip, #0
 800141c:	d03d      	beq.n	800149a <HAL_DAC_Start_DMA+0xda>
        break;
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800141e:	2200      	movs	r2, #0
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001420:	f8d5 c000 	ldr.w	ip, [r5]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001424:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001426:	f44c 5700 	orr.w	r7, ip, #8192	; 0x2000
 800142a:	602f      	str	r7, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800142c:	f000 f94c 	bl	80016c8 <HAL_DMA_Start_IT>
 8001430:	e027      	b.n	8001482 <HAL_DAC_Start_DMA+0xc2>
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8001432:	682a      	ldr	r2, [r5, #0]
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001434:	f241 5859 	movw	r8, #5465	; 0x1559
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001438:	f241 5e69 	movw	lr, #5481	; 0x1569
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800143c:	f241 5175 	movw	r1, #5493	; 0x1575
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001440:	68c0      	ldr	r0, [r0, #12]
 8001442:	f6c0 0800 	movt	r8, #2048	; 0x800
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001446:	f6c0 0e00 	movt	lr, #2048	; 0x800
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800144a:	f6c0 0100 	movt	r1, #2048	; 0x800
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800144e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    switch(Alignment)
 8001452:	f1bc 0f04 	cmp.w	ip, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001456:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800145a:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800145e:	64c1      	str	r1, [r0, #76]	; 0x4c
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8001460:	602a      	str	r2, [r5, #0]
    switch(Alignment)
 8001462:	d026      	beq.n	80014b2 <HAL_DAC_Start_DMA+0xf2>
 8001464:	f1bc 0f08 	cmp.w	ip, #8
 8001468:	d020      	beq.n	80014ac <HAL_DAC_Start_DMA+0xec>
 800146a:	f1bc 0f00 	cmp.w	ip, #0
 800146e:	d017      	beq.n	80014a0 <HAL_DAC_Start_DMA+0xe0>
  if(Channel == DAC_CHANNEL_1)
 8001470:	2200      	movs	r2, #0
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001472:	f8d5 c000 	ldr.w	ip, [r5]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001476:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001478:	f04c 5700 	orr.w	r7, ip, #536870912	; 0x20000000
 800147c:	602f      	str	r7, [r5, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800147e:	f000 f923 	bl	80016c8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001482:	6825      	ldr	r5, [r4, #0]
 8001484:	2301      	movs	r3, #1
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001486:	2200      	movs	r2, #0
  __HAL_DAC_ENABLE(hdac, Channel);
 8001488:	682f      	ldr	r7, [r5, #0]
 800148a:	fa03 f106 	lsl.w	r1, r3, r6
  
  /* Return function status */
  return HAL_OK;
 800148e:	4610      	mov	r0, r2
  __HAL_DAC_ENABLE(hdac, Channel);
 8001490:	4339      	orrs	r1, r7
 8001492:	6029      	str	r1, [r5, #0]
  __HAL_UNLOCK(hdac);
 8001494:	7162      	strb	r2, [r4, #5]
}
 8001496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800149a:	f105 0208 	add.w	r2, r5, #8
        break;
 800149e:	e7bf      	b.n	8001420 <HAL_DAC_Start_DMA+0x60>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80014a0:	f105 0214 	add.w	r2, r5, #20
        break;
 80014a4:	e7e5      	b.n	8001472 <HAL_DAC_Start_DMA+0xb2>
  __HAL_LOCK(hdac);
 80014a6:	2002      	movs	r0, #2
}
 80014a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80014ac:	f105 021c 	add.w	r2, r5, #28
        break;
 80014b0:	e7df      	b.n	8001472 <HAL_DAC_Start_DMA+0xb2>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80014b2:	f105 0218 	add.w	r2, r5, #24
        break;
 80014b6:	e7dc      	b.n	8001472 <HAL_DAC_Start_DMA+0xb2>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80014b8:	f105 0210 	add.w	r2, r5, #16
        break;
 80014bc:	e7b0      	b.n	8001420 <HAL_DAC_Start_DMA+0x60>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80014be:	f105 020c 	add.w	r2, r5, #12
        break;
 80014c2:	e7ad      	b.n	8001420 <HAL_DAC_Start_DMA+0x60>

080014c4 <HAL_DAC_ConvCpltCallbackCh1>:
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80014c8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ca:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80014cc:	4620      	mov	r0, r4
 80014ce:	f7ff fff9 	bl	80014c4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80014d2:	2301      	movs	r3, #1
 80014d4:	7123      	strb	r3, [r4, #4]
}
 80014d6:	bd10      	pop	{r4, pc}

080014d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop

080014dc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80014dc:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80014de:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80014e0:	f7ff fffa 	bl	80014d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80014e4:	bd08      	pop	{r3, pc}
 80014e6:	bf00      	nop

080014e8 <HAL_DAC_ErrorCallbackCh1>:
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop

080014ec <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80014ec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014f0:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80014f2:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80014fa:	f7ff fff5 	bl	80014e8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80014fe:	2301      	movs	r3, #1
 8001500:	7123      	strb	r3, [r4, #4]
}
 8001502:	bd10      	pop	{r4, pc}

08001504 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8001504:	7943      	ldrb	r3, [r0, #5]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d01d      	beq.n	8001546 <HAL_DAC_ConfigChannel+0x42>
{
 800150a:	b470      	push	{r4, r5, r6}
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800150c:	e9d1 3100 	ldrd	r3, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8001510:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001512:	2602      	movs	r6, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001514:	f640 75fe 	movw	r5, #4094	; 0xffe
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001518:	430b      	orrs	r3, r1
  hdac->State = HAL_DAC_STATE_BUSY;
 800151a:	7106      	strb	r6, [r0, #4]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800151c:	21c0      	movs	r1, #192	; 0xc0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800151e:	fa05 f602 	lsl.w	r6, r5, r2
  tmpreg1 = hdac->Instance->CR;
 8001522:	6825      	ldr	r5, [r4, #0]
  tmpreg1 |= tmpreg2 << Channel;
 8001524:	4093      	lsls	r3, r2
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001526:	4091      	lsls	r1, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001528:	ea25 0506 	bic.w	r5, r5, r6
  hdac->State = HAL_DAC_STATE_READY;
 800152c:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << Channel;
 800152e:	432b      	orrs	r3, r5
  __HAL_UNLOCK(hdac);
 8001530:	2500      	movs	r5, #0
  hdac->Instance->CR = tmpreg1;
 8001532:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001534:	6822      	ldr	r2, [r4, #0]
 8001536:	ea22 0201 	bic.w	r2, r2, r1
 800153a:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800153c:	7106      	strb	r6, [r0, #4]
  __HAL_UNLOCK(hdac);
 800153e:	7145      	strb	r5, [r0, #5]
}
 8001540:	4628      	mov	r0, r5
 8001542:	bc70      	pop	{r4, r5, r6}
 8001544:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8001546:	2302      	movs	r3, #2
}
 8001548:	4618      	mov	r0, r3
 800154a:	4770      	bx	lr

0800154c <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop

08001554 <HAL_DACEx_ErrorCallbackCh2>:
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop

08001558 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001558:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800155a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800155c:	4620      	mov	r0, r4
 800155e:	f7ff fff5 	bl	800154c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001562:	2301      	movs	r3, #1
 8001564:	7123      	strb	r3, [r4, #4]
}
 8001566:	bd10      	pop	{r4, pc}

08001568 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001568:	b508      	push	{r3, lr}
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800156a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800156c:	f7ff fff0 	bl	8001550 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001570:	bd08      	pop	{r3, pc}
 8001572:	bf00      	nop

08001574 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001574:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001576:	6b84      	ldr	r4, [r0, #56]	; 0x38
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001578:	6923      	ldr	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800157a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001582:	f7ff ffe7 	bl	8001554 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001586:	2301      	movs	r3, #1
 8001588:	7123      	strb	r3, [r4, #4]
}
 800158a:	bd10      	pop	{r4, pc}

0800158c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800158c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff fcf6 	bl	8000f80 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001594:	2c00      	cmp	r4, #0
 8001596:	d05f      	beq.n	8001658 <HAL_DMA_Init+0xcc>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001598:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800159a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800159c:	2100      	movs	r1, #0
 800159e:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80015a4:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80015a6:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80015aa:	f022 0201 	bic.w	r2, r2, #1
 80015ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b0:	e005      	b.n	80015be <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015b2:	f7ff fce5 	bl	8000f80 <HAL_GetTick>
 80015b6:	1b40      	subs	r0, r0, r5
 80015b8:	2805      	cmp	r0, #5
 80015ba:	d846      	bhi.n	800164a <HAL_DMA_Init+0xbe>
 80015bc:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	07d1      	lsls	r1, r2, #31
 80015c2:	d4f6      	bmi.n	80015b2 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c4:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 80015c8:	6862      	ldr	r2, [r4, #4]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ca:	f248 013f 	movw	r1, #32831	; 0x803f
  tmp = hdma->Instance->CR;
 80015ce:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015d0:	4302      	orrs	r2, r0
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015d2:	f2ce 0110 	movt	r1, #57360	; 0xe010
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d6:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015da:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	69a6      	ldr	r6, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015de:	4039      	ands	r1, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e0:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e2:	69e5      	ldr	r5, [r4, #28]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e4:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e6:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e8:	4332      	orrs	r2, r6
 80015ea:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ee:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f0:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015f2:	ea42 0201 	orr.w	r2, r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f6:	d031      	beq.n	800165c <HAL_DMA_Init+0xd0>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015f8:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015fa:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015fc:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001600:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001602:	b2da      	uxtb	r2, r3
 8001604:	f64a 26ab 	movw	r6, #43691	; 0xaaab
  hdma->Instance->FCR = tmp;
 8001608:	615d      	str	r5, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800160a:	f24a 604c 	movw	r0, #42572	; 0xa64c
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800160e:	f6ca 26aa 	movt	r6, #43690	; 0xaaaa
 8001612:	3a10      	subs	r2, #16
 8001614:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001618:	f6c0 0000 	movt	r0, #2048	; 0x800
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800161c:	fba6 5202 	umull	r5, r2, r6, r2
  hdma->State = HAL_DMA_STATE_READY;
 8001620:	2501      	movs	r5, #1
 8001622:	f6cf 71ff 	movt	r1, #65535	; 0xffff
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001626:	0912      	lsrs	r2, r2, #4
 8001628:	4019      	ands	r1, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162a:	233f      	movs	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800162c:	5c80      	ldrb	r0, [r0, r2]
  
  if (stream_number > 3U)
 800162e:	2a03      	cmp	r2, #3
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001630:	f04f 0200 	mov.w	r2, #0
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001634:	bf88      	it	hi
 8001636:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001638:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800163a:	65e0      	str	r0, [r4, #92]	; 0x5c
  return HAL_OK;
 800163c:	4610      	mov	r0, r2
 800163e:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001640:	608b      	str	r3, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001642:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001644:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164a:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800164c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800164e:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001650:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001652:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001658:	2001      	movs	r0, #1
}
 800165a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800165c:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001660:	6aa7      	ldr	r7, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001662:	4301      	orrs	r1, r0
    tmp |= hdma->Init.FIFOThreshold;
 8001664:	f047 0504 	orr.w	r5, r7, #4
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001668:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800166a:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800166c:	695a      	ldr	r2, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800166e:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001672:	4315      	orrs	r5, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001674:	2800      	cmp	r0, #0
 8001676:	d0c4      	beq.n	8001602 <HAL_DMA_Init+0x76>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001678:	b17e      	cbz	r6, 800169a <HAL_DMA_Init+0x10e>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800167a:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800167e:	d016      	beq.n	80016ae <HAL_DMA_Init+0x122>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001680:	2f02      	cmp	r7, #2
 8001682:	d903      	bls.n	800168c <HAL_DMA_Init+0x100>
 8001684:	2f03      	cmp	r7, #3
 8001686:	d1bc      	bne.n	8001602 <HAL_DMA_Init+0x76>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001688:	01c2      	lsls	r2, r0, #7
 800168a:	d5ba      	bpl.n	8001602 <HAL_DMA_Init+0x76>
        hdma->State = HAL_DMA_STATE_READY;
 800168c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800168e:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8001690:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001692:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001694:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800169a:	2f01      	cmp	r7, #1
 800169c:	d003      	beq.n	80016a6 <HAL_DMA_Init+0x11a>
 800169e:	d3f3      	bcc.n	8001688 <HAL_DMA_Init+0xfc>
 80016a0:	2f02      	cmp	r7, #2
 80016a2:	d1ae      	bne.n	8001602 <HAL_DMA_Init+0x76>
 80016a4:	e7f0      	b.n	8001688 <HAL_DMA_Init+0xfc>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016a6:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80016aa:	d1aa      	bne.n	8001602 <HAL_DMA_Init+0x76>
 80016ac:	e7ee      	b.n	800168c <HAL_DMA_Init+0x100>
    switch (tmp)
 80016ae:	2f03      	cmp	r7, #3
 80016b0:	d8a7      	bhi.n	8001602 <HAL_DMA_Init+0x76>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <HAL_DMA_Init+0x12c>)
 80016b4:	f852 f027 	ldr.w	pc, [r2, r7, lsl #2]
 80016b8:	0800168d 	.word	0x0800168d
 80016bc:	08001689 	.word	0x08001689
 80016c0:	0800168d 	.word	0x0800168d
 80016c4:	080016a7 	.word	0x080016a7

080016c8 <HAL_DMA_Start_IT>:
{
 80016c8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80016ca:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80016ce:	2c01      	cmp	r4, #1
 80016d0:	d038      	beq.n	8001744 <HAL_DMA_Start_IT+0x7c>
 80016d2:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80016d4:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80016da:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80016dc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80016e0:	d129      	bne.n	8001736 <HAL_DMA_Start_IT+0x6e>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016e2:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 80016e4:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e6:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80016e8:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ec:	6545      	str	r5, [r0, #84]	; 0x54
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ee:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016f0:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016f2:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016f4:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80016f8:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80016fa:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016fc:	d026      	beq.n	800174c <HAL_DMA_Start_IT+0x84>
    hdma->Instance->PAR = SrcAddress;
 80016fe:	60a1      	str	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001700:	60e2      	str	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001702:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 8001704:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 8001706:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001708:	408b      	lsls	r3, r1
 800170a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	f043 0316 	orr.w	r3, r3, #22
 8001712:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001714:	6963      	ldr	r3, [r4, #20]
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 800171c:	b11a      	cbz	r2, 8001726 <HAL_DMA_Start_IT+0x5e>
      hdma->Instance->CR  |= DMA_IT_HT;
 800171e:	6823      	ldr	r3, [r4, #0]
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001726:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001728:	2300      	movs	r3, #0
    __HAL_DMA_ENABLE(hdma);
 800172a:	f042 0201 	orr.w	r2, r2, #1
}
 800172e:	4618      	mov	r0, r3
    __HAL_DMA_ENABLE(hdma);
 8001730:	6022      	str	r2, [r4, #0]
}
 8001732:	bcf0      	pop	{r4, r5, r6, r7}
 8001734:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 8001736:	2200      	movs	r2, #0
    status = HAL_BUSY;
 8001738:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);	  
 800173a:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 800173e:	4618      	mov	r0, r3
 8001740:	bcf0      	pop	{r4, r5, r6, r7}
 8001742:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8001744:	2302      	movs	r3, #2
}
 8001746:	bcf0      	pop	{r4, r5, r6, r7}
 8001748:	4618      	mov	r0, r3
 800174a:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800174c:	60a2      	str	r2, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800174e:	60e1      	str	r1, [r4, #12]
 8001750:	e7d7      	b.n	8001702 <HAL_DMA_Start_IT+0x3a>
 8001752:	bf00      	nop

08001754 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001754:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8001758:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800175a:	2a02      	cmp	r2, #2
 800175c:	d003      	beq.n	8001766 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8001760:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001762:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001764:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001766:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001768:	2105      	movs	r1, #5
  return HAL_OK;
 800176a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800176c:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001770:	6813      	ldr	r3, [r2, #0]
 8001772:	f023 0301 	bic.w	r3, r3, #1
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop

0800177c <HAL_DMA_IRQHandler>:
{
 800177c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177e:	4604      	mov	r4, r0
 8001780:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
 8001782:	2000      	movs	r0, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001784:	2208      	movs	r2, #8
  uint32_t timeout = SystemCoreClock / 9600;
 8001786:	f240 010c 	movw	r1, #12
  __IO uint32_t count = 0;
 800178a:	9001      	str	r0, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;
 800178c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001790:	e9d4 7316 	ldrd	r7, r3, [r4, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600;
 8001794:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001796:	409a      	lsls	r2, r3
  tmpisr = regs->ISR;
 8001798:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800179a:	422a      	tst	r2, r5
 800179c:	d003      	beq.n	80017a6 <HAL_DMA_IRQHandler+0x2a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800179e:	6821      	ldr	r1, [r4, #0]
 80017a0:	6808      	ldr	r0, [r1, #0]
 80017a2:	0740      	lsls	r0, r0, #29
 80017a4:	d45d      	bmi.n	8001862 <HAL_DMA_IRQHandler+0xe6>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a6:	2201      	movs	r2, #1
 80017a8:	409a      	lsls	r2, r3
 80017aa:	422a      	tst	r2, r5
 80017ac:	d003      	beq.n	80017b6 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017ae:	6821      	ldr	r1, [r4, #0]
 80017b0:	6949      	ldr	r1, [r1, #20]
 80017b2:	0608      	lsls	r0, r1, #24
 80017b4:	d478      	bmi.n	80018a8 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b6:	2204      	movs	r2, #4
 80017b8:	409a      	lsls	r2, r3
 80017ba:	422a      	tst	r2, r5
 80017bc:	d003      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x4a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017be:	6821      	ldr	r1, [r4, #0]
 80017c0:	6809      	ldr	r1, [r1, #0]
 80017c2:	0789      	lsls	r1, r1, #30
 80017c4:	d46a      	bmi.n	800189c <HAL_DMA_IRQHandler+0x120>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017c6:	2210      	movs	r2, #16
 80017c8:	409a      	lsls	r2, r3
 80017ca:	422a      	tst	r2, r5
 80017cc:	d003      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x5a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017ce:	6821      	ldr	r1, [r4, #0]
 80017d0:	6808      	ldr	r0, [r1, #0]
 80017d2:	0700      	lsls	r0, r0, #28
 80017d4:	d44f      	bmi.n	8001876 <HAL_DMA_IRQHandler+0xfa>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80017d6:	2220      	movs	r2, #32
 80017d8:	409a      	lsls	r2, r3
 80017da:	422a      	tst	r2, r5
 80017dc:	d015      	beq.n	800180a <HAL_DMA_IRQHandler+0x8e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80017de:	6821      	ldr	r1, [r4, #0]
 80017e0:	6808      	ldr	r0, [r1, #0]
 80017e2:	06c0      	lsls	r0, r0, #27
 80017e4:	d511      	bpl.n	800180a <HAL_DMA_IRQHandler+0x8e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80017e6:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80017e8:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80017ec:	2a05      	cmp	r2, #5
 80017ee:	d067      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x144>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f0:	680b      	ldr	r3, [r1, #0]
 80017f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017f6:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f8:	f000 8082 	beq.w	8001900 <HAL_DMA_IRQHandler+0x184>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017fc:	0319      	lsls	r1, r3, #12
 80017fe:	f140 808d 	bpl.w	800191c <HAL_DMA_IRQHandler+0x1a0>
        if(hdma->XferCpltCallback != NULL)
 8001802:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001804:	b10b      	cbz	r3, 800180a <HAL_DMA_IRQHandler+0x8e>
          hdma->XferCpltCallback(hdma);
 8001806:	4620      	mov	r0, r4
 8001808:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800180c:	b33b      	cbz	r3, 800185e <HAL_DMA_IRQHandler+0xe2>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800180e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001810:	07da      	lsls	r2, r3, #31
 8001812:	d51d      	bpl.n	8001850 <HAL_DMA_IRQHandler+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001814:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8001816:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001818:	f248 11b5 	movw	r1, #33205	; 0x81b5
      hdma->State = HAL_DMA_STATE_ABORT;
 800181c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8001820:	f6c1 314e 	movt	r1, #6990	; 0x1b4e
      __HAL_DMA_DISABLE(hdma);
 8001824:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8001826:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800182a:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800182e:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e002      	b.n	800183a <HAL_DMA_IRQHandler+0xbe>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001834:	6813      	ldr	r3, [r2, #0]
 8001836:	07db      	lsls	r3, r3, #31
 8001838:	d504      	bpl.n	8001844 <HAL_DMA_IRQHandler+0xc8>
        if (++count > timeout)
 800183a:	9b01      	ldr	r3, [sp, #4]
 800183c:	3301      	adds	r3, #1
 800183e:	42b3      	cmp	r3, r6
 8001840:	9301      	str	r3, [sp, #4]
 8001842:	d9f7      	bls.n	8001834 <HAL_DMA_IRQHandler+0xb8>
      __HAL_UNLOCK(hdma);
 8001844:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001846:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001848:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800184c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001850:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001852:	b123      	cbz	r3, 800185e <HAL_DMA_IRQHandler+0xe2>
      hdma->XferErrorCallback(hdma);
 8001854:	4620      	mov	r0, r4
}
 8001856:	b003      	add	sp, #12
 8001858:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800185c:	4718      	bx	r3
}
 800185e:	b003      	add	sp, #12
 8001860:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001862:	6808      	ldr	r0, [r1, #0]
 8001864:	f020 0004 	bic.w	r0, r0, #4
 8001868:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800186a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800186c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	6562      	str	r2, [r4, #84]	; 0x54
 8001874:	e797      	b.n	80017a6 <HAL_DMA_IRQHandler+0x2a>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001876:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001878:	680a      	ldr	r2, [r1, #0]
 800187a:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800187e:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001880:	d118      	bne.n	80018b4 <HAL_DMA_IRQHandler+0x138>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001882:	05d2      	lsls	r2, r2, #23
 8001884:	d403      	bmi.n	800188e <HAL_DMA_IRQHandler+0x112>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001886:	680a      	ldr	r2, [r1, #0]
 8001888:	f022 0208 	bic.w	r2, r2, #8
 800188c:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800188e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001890:	2a00      	cmp	r2, #0
 8001892:	d0a0      	beq.n	80017d6 <HAL_DMA_IRQHandler+0x5a>
          hdma->XferHalfCpltCallback(hdma);
 8001894:	4620      	mov	r0, r4
 8001896:	4790      	blx	r2
 8001898:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800189a:	e79c      	b.n	80017d6 <HAL_DMA_IRQHandler+0x5a>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800189c:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800189e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018a0:	f042 0204 	orr.w	r2, r2, #4
 80018a4:	6562      	str	r2, [r4, #84]	; 0x54
 80018a6:	e78e      	b.n	80017c6 <HAL_DMA_IRQHandler+0x4a>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80018a8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80018aa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80018ac:	f042 0202 	orr.w	r2, r2, #2
 80018b0:	6562      	str	r2, [r4, #84]	; 0x54
 80018b2:	e780      	b.n	80017b6 <HAL_DMA_IRQHandler+0x3a>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b4:	0311      	lsls	r1, r2, #12
 80018b6:	d5ea      	bpl.n	800188e <HAL_DMA_IRQHandler+0x112>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018b8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80018ba:	2a00      	cmp	r2, #0
 80018bc:	d1ea      	bne.n	8001894 <HAL_DMA_IRQHandler+0x118>
 80018be:	e78a      	b.n	80017d6 <HAL_DMA_IRQHandler+0x5a>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c0:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018c2:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018c4:	f022 0216 	bic.w	r2, r2, #22
 80018c8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ca:	694a      	ldr	r2, [r1, #20]
 80018cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d0:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018d2:	b340      	cbz	r0, 8001926 <HAL_DMA_IRQHandler+0x1aa>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d4:	680a      	ldr	r2, [r1, #0]
 80018d6:	f022 0208 	bic.w	r2, r2, #8
 80018da:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018dc:	223f      	movs	r2, #63	; 0x3f
        __HAL_UNLOCK(hdma);
 80018de:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80018e0:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80018e6:	6d22      	ldr	r2, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e8:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80018ea:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80018ee:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80018f2:	2a00      	cmp	r2, #0
 80018f4:	d0b3      	beq.n	800185e <HAL_DMA_IRQHandler+0xe2>
          hdma->XferAbortCallback(hdma);
 80018f6:	4620      	mov	r0, r4
}
 80018f8:	b003      	add	sp, #12
 80018fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80018fe:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001900:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001904:	f47f af7d 	bne.w	8001802 <HAL_DMA_IRQHandler+0x86>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001908:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800190a:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800190c:	f022 0210 	bic.w	r2, r2, #16
 8001910:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8001912:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001916:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800191a:	e772      	b.n	8001802 <HAL_DMA_IRQHandler+0x86>
          if(hdma->XferM1CpltCallback != NULL)
 800191c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f af71 	bne.w	8001806 <HAL_DMA_IRQHandler+0x8a>
 8001924:	e771      	b.n	800180a <HAL_DMA_IRQHandler+0x8e>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001926:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001928:	2a00      	cmp	r2, #0
 800192a:	d1d3      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x158>
 800192c:	e7d6      	b.n	80018dc <HAL_DMA_IRQHandler+0x160>
 800192e:	bf00      	nop

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001934:	f44f 5860 	mov.w	r8, #14336	; 0x3800
{
 8001938:	468e      	mov	lr, r1

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001940:	4643      	mov	r3, r8
 8001942:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001946:	f44f 6540 	mov.w	r5, #3072	; 0xc00
 800194a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800194e:	f44f 57a0 	mov.w	r7, #5120	; 0x1400
{
 8001952:	b08b      	sub	sp, #44	; 0x2c
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001954:	f2c4 0502 	movt	r5, #16386	; 0x4002
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001958:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 800195c:	f2c4 0301 	movt	r3, #16385	; 0x4001
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001960:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001964:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001968:	f2c4 0402 	movt	r4, #16386	; 0x4002
 800196c:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8001970:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8001974:	9505      	str	r5, [sp, #20]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001976:	f2c4 0802 	movt	r8, #16386	; 0x4002
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197a:	f8de 9000 	ldr.w	r9, [lr]
        temp = EXTI->IMR;
 800197e:	f2c4 0c01 	movt	ip, #16385	; 0x4001
 8001982:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001984:	2500      	movs	r5, #0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001986:	9202      	str	r2, [sp, #8]
 8001988:	9103      	str	r1, [sp, #12]
 800198a:	9404      	str	r4, [sp, #16]
 800198c:	9606      	str	r6, [sp, #24]
 800198e:	9707      	str	r7, [sp, #28]
 8001990:	e003      	b.n	800199a <HAL_GPIO_Init+0x6a>
  for(position = 0; position < GPIO_NUMBER; position++)
 8001992:	3501      	adds	r5, #1
 8001994:	2d10      	cmp	r5, #16
 8001996:	f000 80b3 	beq.w	8001b00 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 800199a:	2301      	movs	r3, #1
 800199c:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	ea09 0103 	and.w	r1, r9, r3
    if(iocurrent == ioposition)
 80019a2:	428b      	cmp	r3, r1
 80019a4:	d1f5      	bne.n	8001992 <HAL_GPIO_Init+0x62>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019a6:	f8de 4004 	ldr.w	r4, [lr, #4]
 80019aa:	f024 0710 	bic.w	r7, r4, #16
 80019ae:	2f02      	cmp	r7, #2
 80019b0:	f040 80a9 	bne.w	8001b06 <HAL_GPIO_Init+0x1d6>
        temp = GPIOx->AFR[position >> 3];
 80019b4:	08ee      	lsrs	r6, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019b6:	f005 0a07 	and.w	sl, r5, #7
 80019ba:	f04f 0b0f 	mov.w	fp, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019be:	f8de 2010 	ldr.w	r2, [lr, #16]
 80019c2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019c6:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80019ca:	6a37      	ldr	r7, [r6, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019cc:	fa0b fb0a 	lsl.w	fp, fp, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019d0:	fa02 f20a 	lsl.w	r2, r2, sl
 80019d4:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019d8:	ea27 0b0b 	bic.w	fp, r7, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019dc:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019de:	ea42 020b 	orr.w	r2, r2, fp
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019e2:	fa07 f70a 	lsl.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019e6:	f004 0b03 	and.w	fp, r4, #3
        GPIOx->AFR[position >> 3] = temp;
 80019ea:	6232      	str	r2, [r6, #32]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019ec:	43fa      	mvns	r2, r7
      temp = GPIOx->MODER;
 80019ee:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f0:	fa0b fb0a 	lsl.w	fp, fp, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80019f4:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f6:	ea4b 0606 	orr.w	r6, fp, r6
      GPIOx->MODER = temp;
 80019fa:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 80019fc:	6887      	ldr	r7, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80019fe:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a02:	ea07 0b02 	and.w	fp, r7, r2
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a06:	f8de 700c 	ldr.w	r7, [lr, #12]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a0a:	40ae      	lsls	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a0c:	fa07 f70a 	lsl.w	r7, r7, sl
 8001a10:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 8001a14:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a16:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a1c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001a1e:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a20:	68c6      	ldr	r6, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a22:	00e7      	lsls	r7, r4, #3
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a24:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a28:	ea02 0206 	and.w	r2, r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a2c:	fa03 f30a 	lsl.w	r3, r3, sl
 8001a30:	ea42 0203 	orr.w	r2, r2, r3
      GPIOx->PUPDR = temp;
 8001a34:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a36:	d5ac      	bpl.n	8001992 <HAL_GPIO_Init+0x62>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a38:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001a3c:	f025 0603 	bic.w	r6, r5, #3
 8001a40:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a42:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a4a:	f04f 0a0f 	mov.w	sl, #15
 8001a4e:	4416      	add	r6, r2
 8001a50:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001a56:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a5a:	fa0a f203 	lsl.w	r2, sl, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001a62:	9709      	str	r7, [sp, #36]	; 0x24
 8001a64:	9f09      	ldr	r7, [sp, #36]	; 0x24
        temp = SYSCFG->EXTICR[position >> 2];
 8001a66:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a68:	ea27 0202 	bic.w	r2, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001a6c:	9f02      	ldr	r7, [sp, #8]
 8001a6e:	42b8      	cmp	r0, r7
 8001a70:	d01f      	beq.n	8001ab2 <HAL_GPIO_Init+0x182>
 8001a72:	9f03      	ldr	r7, [sp, #12]
 8001a74:	42b8      	cmp	r0, r7
 8001a76:	d05d      	beq.n	8001b34 <HAL_GPIO_Init+0x204>
 8001a78:	9f04      	ldr	r7, [sp, #16]
 8001a7a:	42b8      	cmp	r0, r7
 8001a7c:	d05f      	beq.n	8001b3e <HAL_GPIO_Init+0x20e>
 8001a7e:	9f05      	ldr	r7, [sp, #20]
 8001a80:	42b8      	cmp	r0, r7
 8001a82:	d061      	beq.n	8001b48 <HAL_GPIO_Init+0x218>
 8001a84:	9f06      	ldr	r7, [sp, #24]
 8001a86:	42b8      	cmp	r0, r7
 8001a88:	d063      	beq.n	8001b52 <HAL_GPIO_Init+0x222>
 8001a8a:	9f07      	ldr	r7, [sp, #28]
 8001a8c:	42b8      	cmp	r0, r7
 8001a8e:	d065      	beq.n	8001b5c <HAL_GPIO_Init+0x22c>
 8001a90:	f44f 57c0 	mov.w	r7, #6144	; 0x1800
 8001a94:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8001a98:	42b8      	cmp	r0, r7
 8001a9a:	d064      	beq.n	8001b66 <HAL_GPIO_Init+0x236>
 8001a9c:	f44f 57e0 	mov.w	r7, #7168	; 0x1c00
 8001aa0:	f2c4 0702 	movt	r7, #16386	; 0x4002
 8001aa4:	42b8      	cmp	r0, r7
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2707      	moveq	r7, #7
 8001aaa:	2708      	movne	r7, #8
 8001aac:	fa07 f303 	lsl.w	r3, r7, r3
 8001ab0:	431a      	orrs	r2, r3
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ab2:	60b2      	str	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	43ca      	mvns	r2, r1
        temp = EXTI->IMR;
 8001ab6:	f8dc 3000 	ldr.w	r3, [ip]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aba:	03e6      	lsls	r6, r4, #15
  for(position = 0; position < GPIO_NUMBER; position++)
 8001abc:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	bf54      	ite	pl
 8001ac2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001ac4:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ac6:	03a7      	lsls	r7, r4, #14
        EXTI->IMR = temp;
 8001ac8:	f8cc 3000 	str.w	r3, [ip]
        temp = EXTI->EMR;
 8001acc:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	bf54      	ite	pl
 8001ad2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001ad4:	430b      	orrmi	r3, r1
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ad6:	02e6      	lsls	r6, r4, #11
        EXTI->EMR = temp;
 8001ad8:	f8cc 3004 	str.w	r3, [ip, #4]
        temp = EXTI->RTSR;
 8001adc:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
 8001ae0:	bf54      	ite	pl
 8001ae2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001ae4:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae6:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8001ae8:	f8cc 3008 	str.w	r3, [ip, #8]
        temp = EXTI->FTSR;
 8001aec:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	bf54      	ite	pl
 8001af2:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8001af4:	430b      	orrmi	r3, r1
  for(position = 0; position < GPIO_NUMBER; position++)
 8001af6:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8001af8:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001afc:	f47f af4d 	bne.w	800199a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8001b00:	b00b      	add	sp, #44	; 0x2c
 8001b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b06:	ea4f 0a45 	mov.w	sl, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b0a:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8001b0c:	f8d0 b000 	ldr.w	fp, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b10:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b12:	ea04 0602 	and.w	r6, r4, r2
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b16:	fa02 f20a 	lsl.w	r2, r2, sl
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b1a:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b1c:	ea6f 0202 	mvn.w	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b20:	fa06 f60a 	lsl.w	r6, r6, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b24:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b28:	ea46 060b 	orr.w	r6, r6, fp
      GPIOx->MODER = temp;
 8001b2c:	6006      	str	r6, [r0, #0]
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b2e:	f63f af77 	bhi.w	8001a20 <HAL_GPIO_Init+0xf0>
 8001b32:	e763      	b.n	80019fc <HAL_GPIO_Init+0xcc>
 8001b34:	2701      	movs	r7, #1
 8001b36:	fa07 f303 	lsl.w	r3, r7, r3
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	e7b9      	b.n	8001ab2 <HAL_GPIO_Init+0x182>
 8001b3e:	2702      	movs	r7, #2
 8001b40:	fa07 f303 	lsl.w	r3, r7, r3
 8001b44:	431a      	orrs	r2, r3
 8001b46:	e7b4      	b.n	8001ab2 <HAL_GPIO_Init+0x182>
 8001b48:	2703      	movs	r7, #3
 8001b4a:	fa07 f303 	lsl.w	r3, r7, r3
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	e7af      	b.n	8001ab2 <HAL_GPIO_Init+0x182>
 8001b52:	2704      	movs	r7, #4
 8001b54:	fa07 f303 	lsl.w	r3, r7, r3
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	e7aa      	b.n	8001ab2 <HAL_GPIO_Init+0x182>
 8001b5c:	2705      	movs	r7, #5
 8001b5e:	fa07 f303 	lsl.w	r3, r7, r3
 8001b62:	431a      	orrs	r2, r3
 8001b64:	e7a5      	b.n	8001ab2 <HAL_GPIO_Init+0x182>
 8001b66:	2706      	movs	r7, #6
 8001b68:	fa07 f303 	lsl.w	r3, r7, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	e7a0      	b.n	8001ab2 <HAL_GPIO_Init+0x182>

08001b70 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b70:	6903      	ldr	r3, [r0, #16]
 8001b72:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b74:	bf14      	ite	ne
 8001b76:	2001      	movne	r0, #1
 8001b78:	2000      	moveq	r0, #0
 8001b7a:	4770      	bx	lr

08001b7c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b7c:	b902      	cbnz	r2, 8001b80 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001b7e:	0409      	lsls	r1, r1, #16
 8001b80:	6181      	str	r1, [r0, #24]
  }
}
 8001b82:	4770      	bx	lr

08001b84 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001b84:	6943      	ldr	r3, [r0, #20]
 8001b86:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b8a:	bf08      	it	eq
 8001b8c:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8e:	6181      	str	r1, [r0, #24]
  }
}
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop

08001b94 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop

08001b98 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001b98:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001b9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001ba2:	6959      	ldr	r1, [r3, #20]
 8001ba4:	4201      	tst	r1, r0
 8001ba6:	d100      	bne.n	8001baa <HAL_GPIO_EXTI_IRQHandler+0x12>
}
 8001ba8:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001baa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bac:	f7ff fff2 	bl	8001b94 <HAL_GPIO_EXTI_Callback>
}
 8001bb0:	bd08      	pop	{r3, pc}
 8001bb2:	bf00      	nop

08001bb4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d050      	beq.n	8001c5a <HAL_I2C_Init+0xa6>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bb8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bc2:	4604      	mov	r4, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d043      	beq.n	8001c50 <HAL_I2C_Init+0x9c>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc8:	2124      	movs	r1, #36	; 0x24
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bca:	68e5      	ldr	r5, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bcc:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001bd0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bd4:	2d01      	cmp	r5, #1
  __HAL_I2C_DISABLE(hi2c);
 8001bd6:	6818      	ldr	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bd8:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
 8001bdc:	68a2      	ldr	r2, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8001bde:	f020 0001 	bic.w	r0, r0, #1
 8001be2:	6018      	str	r0, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001be4:	6119      	str	r1, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001be6:	6899      	ldr	r1, [r3, #8]
 8001be8:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8001bec:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001bee:	d02b      	beq.n	8001c48 <HAL_I2C_Init+0x94>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf4:	2d02      	cmp	r5, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001bf6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bf8:	d102      	bne.n	8001c00 <HAL_I2C_Init+0x4c>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bfe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c04:	685e      	ldr	r6, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c06:	6965      	ldr	r5, [r4, #20]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c08:	2100      	movs	r1, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c0a:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c0c:	f2c0 2000 	movt	r0, #512	; 0x200
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c10:	432a      	orrs	r2, r5
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c12:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c14:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c16:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c18:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c1c:	68dd      	ldr	r5, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c1e:	e9d4 0607 	ldrd	r0, r6, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c22:	f425 4500 	bic.w	r5, r5, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c26:	4330      	orrs	r0, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c28:	60dd      	str	r5, [r3, #12]
  hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	2520      	movs	r5, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001c2c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c2e:	6018      	str	r0, [r3, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8001c30:	4608      	mov	r0, r1
  __HAL_I2C_ENABLE(hi2c);
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	f042 0201 	orr.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3a:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c40:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c42:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 8001c46:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	e7d7      	b.n	8001c00 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8001c50:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001c54:	f006 fefa 	bl	8008a4c <HAL_I2C_MspInit>
 8001c58:	e7b6      	b.n	8001bc8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8001c5a:	2001      	movs	r0, #1
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop

08001c60 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c60:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b20      	cmp	r3, #32
{
 8001c68:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c6a:	d11f      	bne.n	8001cac <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001c70:	2a01      	cmp	r2, #1
 8001c72:	d01b      	beq.n	8001cac <HAL_I2CEx_ConfigAnalogFilter+0x4c>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c74:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c76:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c78:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001c7e:	6815      	ldr	r5, [r2, #0]

    return HAL_OK;
 8001c80:	4634      	mov	r4, r6
    __HAL_I2C_DISABLE(hi2c);
 8001c82:	f025 0501 	bic.w	r5, r5, #1
 8001c86:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c88:	6815      	ldr	r5, [r2, #0]
 8001c8a:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8001c8e:	6015      	str	r5, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c90:	6815      	ldr	r5, [r2, #0]
 8001c92:	4329      	orrs	r1, r5
 8001c94:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001c96:	6811      	ldr	r1, [r2, #0]
 8001c98:	f041 0101 	orr.w	r1, r1, #1
 8001c9c:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001c9e:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	bc70      	pop	{r4, r5, r6}
 8001caa:	4770      	bx	lr
    return HAL_BUSY;
 8001cac:	2402      	movs	r4, #2
}
 8001cae:	4620      	mov	r0, r4
 8001cb0:	bc70      	pop	{r4, r5, r6}
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
{
 8001cbc:	b470      	push	{r4, r5, r6}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cbe:	d11e      	bne.n	8001cfe <HAL_I2CEx_ConfigDigitalFilter+0x4a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8001cc4:	2a01      	cmp	r2, #1
 8001cc6:	d01a      	beq.n	8001cfe <HAL_I2CEx_ConfigDigitalFilter+0x4a>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cc8:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cca:	2424      	movs	r4, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ccc:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cce:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8001cd2:	6814      	ldr	r4, [r2, #0]

    return HAL_OK;
 8001cd4:	4635      	mov	r5, r6
    __HAL_I2C_DISABLE(hi2c);
 8001cd6:	f024 0401 	bic.w	r4, r4, #1
 8001cda:	6014      	str	r4, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
 8001cdc:	6814      	ldr	r4, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001cde:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 8001ce2:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 8001ce6:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001ce8:	6811      	ldr	r1, [r2, #0]
 8001cea:	f041 0101 	orr.w	r1, r1, #1
 8001cee:	6011      	str	r1, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001cf0:	f880 6040 	strb.w	r6, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001cf4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	bc70      	pop	{r4, r5, r6}
 8001cfc:	4770      	bx	lr
    return HAL_BUSY;
 8001cfe:	2502      	movs	r5, #2
}
 8001d00:	4628      	mov	r0, r5
 8001d02:	bc70      	pop	{r4, r5, r6}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop

08001d08 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d0c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d10:	f2c4 0202 	movt	r2, #16386	; 0x4002
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d14:	f2c4 0300 	movt	r3, #16384	; 0x4000
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001d1a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 8001d1e:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	6411      	str	r1, [r2, #64]	; 0x40
{
 8001d22:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d26:	461c      	mov	r4, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001d2c:	9201      	str	r2, [sp, #4]
 8001d2e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d36:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001d38:	f7ff f922 	bl	8000f80 <HAL_GetTick>
 8001d3c:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d3e:	e005      	b.n	8001d4c <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d40:	f7ff f91e 	bl	8000f80 <HAL_GetTick>
 8001d44:	1b40      	subs	r0, r0, r5
 8001d46:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d4a:	d81a      	bhi.n	8001d82 <HAL_PWREx_EnableOverDrive+0x7a>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d4c:	6863      	ldr	r3, [r4, #4]
 8001d4e:	03da      	lsls	r2, r3, #15
 8001d50:	d5f6      	bpl.n	8001d40 <HAL_PWREx_EnableOverDrive+0x38>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d52:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d54:	f44f 45e0 	mov.w	r5, #28672	; 0x7000
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d5c:	f2c4 0500 	movt	r5, #16384	; 0x4000
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d60:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8001d62:	f7ff f90d 	bl	8000f80 <HAL_GetTick>
 8001d66:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d68:	e005      	b.n	8001d76 <HAL_PWREx_EnableOverDrive+0x6e>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d6a:	f7ff f909 	bl	8000f80 <HAL_GetTick>
 8001d6e:	1b00      	subs	r0, r0, r4
 8001d70:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001d74:	d805      	bhi.n	8001d82 <HAL_PWREx_EnableOverDrive+0x7a>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d76:	686b      	ldr	r3, [r5, #4]
 8001d78:	039b      	lsls	r3, r3, #14
 8001d7a:	d5f6      	bpl.n	8001d6a <HAL_PWREx_EnableOverDrive+0x62>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001d7c:	2000      	movs	r0, #0
}
 8001d7e:	b003      	add	sp, #12
 8001d80:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 8001d82:	2003      	movs	r0, #3
}
 8001d84:	b003      	add	sp, #12
 8001d86:	bd30      	pop	{r4, r5, pc}

08001d88 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d88:	2800      	cmp	r0, #0
 8001d8a:	f000 816b 	beq.w	8002064 <HAL_RCC_OscConfig+0x2dc>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8e:	6803      	ldr	r3, [r0, #0]
{
 8001d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d94:	07dd      	lsls	r5, r3, #31
{
 8001d96:	b082      	sub	sp, #8
 8001d98:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d9a:	d541      	bpl.n	8001e20 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d9c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001da0:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8001da4:	688a      	ldr	r2, [r1, #8]
 8001da6:	f002 020c 	and.w	r2, r2, #12
 8001daa:	2a04      	cmp	r2, #4
 8001dac:	f000 812c 	beq.w	8002008 <HAL_RCC_OscConfig+0x280>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001db0:	688a      	ldr	r2, [r1, #8]
 8001db2:	f002 020c 	and.w	r2, r2, #12
 8001db6:	2a08      	cmp	r2, #8
 8001db8:	f000 8122 	beq.w	8002000 <HAL_RCC_OscConfig+0x278>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dbc:	6863      	ldr	r3, [r4, #4]
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d013      	beq.n	8001dec <HAL_RCC_OscConfig+0x64>
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 814f 	beq.w	8002068 <HAL_RCC_OscConfig+0x2e0>
 8001dca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001dd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	f000 8198 	beq.w	800210c <HAL_RCC_OscConfig+0x384>
 8001ddc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e007      	b.n	8001dfc <HAL_RCC_OscConfig+0x74>
 8001dec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001df0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001dfa:	601a      	str	r2, [r3, #0]
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfc:	f44f 5560 	mov.w	r5, #14336	; 0x3800
        tickstart = HAL_GetTick();
 8001e00:	f7ff f8be 	bl	8000f80 <HAL_GetTick>
 8001e04:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e06:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_OscConfig+0x90>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f8b8 	bl	8000f80 <HAL_GetTick>
 8001e10:	1b80      	subs	r0, r0, r6
 8001e12:	2864      	cmp	r0, #100	; 0x64
 8001e14:	f200 8116 	bhi.w	8002044 <HAL_RCC_OscConfig+0x2bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e18:	682b      	ldr	r3, [r5, #0]
 8001e1a:	039a      	lsls	r2, r3, #14
 8001e1c:	d5f6      	bpl.n	8001e0c <HAL_RCC_OscConfig+0x84>
 8001e1e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e20:	079f      	lsls	r7, r3, #30
 8001e22:	d44f      	bmi.n	8001ec4 <HAL_RCC_OscConfig+0x13c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e24:	071a      	lsls	r2, r3, #28
 8001e26:	d51a      	bpl.n	8001e5e <HAL_RCC_OscConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e28:	6963      	ldr	r3, [r4, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80d2 	beq.w	8001fd4 <HAL_RCC_OscConfig+0x24c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e38:	6f5a      	ldr	r2, [r3, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	461d      	mov	r5, r3
      __HAL_RCC_LSI_ENABLE();
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001e42:	f7ff f89d 	bl	8000f80 <HAL_GetTick>
 8001e46:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e48:	e005      	b.n	8001e56 <HAL_RCC_OscConfig+0xce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff f899 	bl	8000f80 <HAL_GetTick>
 8001e4e:	1b80      	subs	r0, r0, r6
 8001e50:	2802      	cmp	r0, #2
 8001e52:	f200 80f7 	bhi.w	8002044 <HAL_RCC_OscConfig+0x2bc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e56:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001e58:	079b      	lsls	r3, r3, #30
 8001e5a:	d5f6      	bpl.n	8001e4a <HAL_RCC_OscConfig+0xc2>
 8001e5c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5e:	075d      	lsls	r5, r3, #29
 8001e60:	f140 8084 	bpl.w	8001f6c <HAL_RCC_OscConfig+0x1e4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001e68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e6e:	00d0      	lsls	r0, r2, #3
 8001e70:	f100 8114 	bmi.w	800209c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001e76:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e78:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	9b01      	ldr	r3, [sp, #4]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e88:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	05d1      	lsls	r1, r2, #23
 8001e94:	f140 80c5 	bpl.w	8002022 <HAL_RCC_OscConfig+0x29a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e98:	68a3      	ldr	r3, [r4, #8]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d042      	beq.n	8001f24 <HAL_RCC_OscConfig+0x19c>
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80fe 	beq.w	80020a0 <HAL_RCC_OscConfig+0x318>
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eaa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eb0:	f000 8134 	beq.w	800211c <HAL_RCC_OscConfig+0x394>
 8001eb4:	f022 0201 	bic.w	r2, r2, #1
 8001eb8:	671a      	str	r2, [r3, #112]	; 0x70
 8001eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ebc:	f022 0204 	bic.w	r2, r2, #4
 8001ec0:	671a      	str	r2, [r3, #112]	; 0x70
 8001ec2:	e037      	b.n	8001f34 <HAL_RCC_OscConfig+0x1ac>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ec4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ec8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001ecc:	6891      	ldr	r1, [r2, #8]
 8001ece:	f011 0f0c 	tst.w	r1, #12
 8001ed2:	d071      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x230>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ed4:	6891      	ldr	r1, [r2, #8]
 8001ed6:	f001 010c 	and.w	r1, r1, #12
 8001eda:	2908      	cmp	r1, #8
 8001edc:	d069      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x22a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ede:	68e3      	ldr	r3, [r4, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f000 80fc 	beq.w	80020de <HAL_RCC_OscConfig+0x356>
        __HAL_RCC_HSI_ENABLE();
 8001ee6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001eea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001eee:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef0:	461d      	mov	r5, r3
        __HAL_RCC_HSI_ENABLE();
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ef8:	f7ff f842 	bl	8000f80 <HAL_GetTick>
 8001efc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efe:	e005      	b.n	8001f0c <HAL_RCC_OscConfig+0x184>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f00:	f7ff f83e 	bl	8000f80 <HAL_GetTick>
 8001f04:	1b80      	subs	r0, r0, r6
 8001f06:	2802      	cmp	r0, #2
 8001f08:	f200 809c 	bhi.w	8002044 <HAL_RCC_OscConfig+0x2bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	0798      	lsls	r0, r3, #30
 8001f10:	d5f6      	bpl.n	8001f00 <HAL_RCC_OscConfig+0x178>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	682b      	ldr	r3, [r5, #0]
 8001f14:	6922      	ldr	r2, [r4, #16]
 8001f16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f1a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f1e:	602b      	str	r3, [r5, #0]
 8001f20:	6823      	ldr	r3, [r4, #0]
 8001f22:	e77f      	b.n	8001e24 <HAL_RCC_OscConfig+0x9c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	671a      	str	r2, [r3, #112]	; 0x70
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f34:	f44f 5660 	mov.w	r6, #14336	; 0x3800
      tickstart = HAL_GetTick();
 8001f38:	f7ff f822 	bl	8000f80 <HAL_GetTick>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001f40:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f42:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8001f46:	e005      	b.n	8001f54 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f48:	f7ff f81a 	bl	8000f80 <HAL_GetTick>
 8001f4c:	eba0 0008 	sub.w	r0, r0, r8
 8001f50:	42b8      	cmp	r0, r7
 8001f52:	d877      	bhi.n	8002044 <HAL_RCC_OscConfig+0x2bc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f56:	079b      	lsls	r3, r3, #30
 8001f58:	d5f6      	bpl.n	8001f48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5a:	b13d      	cbz	r5, 8001f6c <HAL_RCC_OscConfig+0x1e4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f5c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f66:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f6c:	69a2      	ldr	r2, [r4, #24]
 8001f6e:	b1e2      	cbz	r2, 8001faa <HAL_RCC_OscConfig+0x222>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001f78:	6899      	ldr	r1, [r3, #8]
 8001f7a:	f001 010c 	and.w	r1, r1, #12
 8001f7e:	2908      	cmp	r1, #8
 8001f80:	d024      	beq.n	8001fcc <HAL_RCC_OscConfig+0x244>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f82:	2a02      	cmp	r2, #2
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f86:	f000 80d1 	beq.w	800212c <HAL_RCC_OscConfig+0x3a4>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f8a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8e:	461c      	mov	r4, r3
        __HAL_RCC_PLL_DISABLE();
 8001f90:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f92:	f7fe fff5 	bl	8000f80 <HAL_GetTick>
 8001f96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f98:	e004      	b.n	8001fa4 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7fe fff1 	bl	8000f80 <HAL_GetTick>
 8001f9e:	1b40      	subs	r0, r0, r5
 8001fa0:	2802      	cmp	r0, #2
 8001fa2:	d84f      	bhi.n	8002044 <HAL_RCC_OscConfig+0x2bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	019b      	lsls	r3, r3, #6
 8001fa8:	d4f7      	bmi.n	8001f9a <HAL_RCC_OscConfig+0x212>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001faa:	2000      	movs	r0, #0
}
 8001fac:	b002      	add	sp, #8
 8001fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fb2:	6852      	ldr	r2, [r2, #4]
 8001fb4:	0256      	lsls	r6, r2, #9
 8001fb6:	d492      	bmi.n	8001ede <HAL_RCC_OscConfig+0x156>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001fbc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001fc0:	6812      	ldr	r2, [r2, #0]
 8001fc2:	0795      	lsls	r5, r2, #30
 8001fc4:	d542      	bpl.n	800204c <HAL_RCC_OscConfig+0x2c4>
 8001fc6:	68e2      	ldr	r2, [r4, #12]
 8001fc8:	2a01      	cmp	r2, #1
 8001fca:	d03f      	beq.n	800204c <HAL_RCC_OscConfig+0x2c4>
    return HAL_ERROR;
 8001fcc:	2001      	movs	r0, #1
}
 8001fce:	b002      	add	sp, #8
 8001fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001fd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001fd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001fdc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fde:	461d      	mov	r5, r3
      __HAL_RCC_LSI_DISABLE();
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001fe6:	f7fe ffcb 	bl	8000f80 <HAL_GetTick>
 8001fea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fec:	e004      	b.n	8001ff8 <HAL_RCC_OscConfig+0x270>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fee:	f7fe ffc7 	bl	8000f80 <HAL_GetTick>
 8001ff2:	1b80      	subs	r0, r0, r6
 8001ff4:	2802      	cmp	r0, #2
 8001ff6:	d825      	bhi.n	8002044 <HAL_RCC_OscConfig+0x2bc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ffa:	079f      	lsls	r7, r3, #30
 8001ffc:	d4f7      	bmi.n	8001fee <HAL_RCC_OscConfig+0x266>
 8001ffe:	e72d      	b.n	8001e5c <HAL_RCC_OscConfig+0xd4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002000:	684a      	ldr	r2, [r1, #4]
 8002002:	0250      	lsls	r0, r2, #9
 8002004:	f57f aeda 	bpl.w	8001dbc <HAL_RCC_OscConfig+0x34>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002008:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800200c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	0391      	lsls	r1, r2, #14
 8002014:	f57f af04 	bpl.w	8001e20 <HAL_RCC_OscConfig+0x98>
 8002018:	6862      	ldr	r2, [r4, #4]
 800201a:	2a00      	cmp	r2, #0
 800201c:	f47f af00 	bne.w	8001e20 <HAL_RCC_OscConfig+0x98>
 8002020:	e7d4      	b.n	8001fcc <HAL_RCC_OscConfig+0x244>
      PWR->CR1 |= PWR_CR1_DBP;
 8002022:	681a      	ldr	r2, [r3, #0]
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	461e      	mov	r6, r3
      PWR->CR1 |= PWR_CR1_DBP;
 8002026:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800202a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800202c:	f7fe ffa8 	bl	8000f80 <HAL_GetTick>
 8002030:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002032:	6833      	ldr	r3, [r6, #0]
 8002034:	05da      	lsls	r2, r3, #23
 8002036:	f53f af2f 	bmi.w	8001e98 <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800203a:	f7fe ffa1 	bl	8000f80 <HAL_GetTick>
 800203e:	1bc0      	subs	r0, r0, r7
 8002040:	2864      	cmp	r0, #100	; 0x64
 8002042:	d9f6      	bls.n	8002032 <HAL_RCC_OscConfig+0x2aa>
            return HAL_TIMEOUT;
 8002044:	2003      	movs	r0, #3
}
 8002046:	b002      	add	sp, #8
 8002048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800204c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8002050:	6920      	ldr	r0, [r4, #16]
 8002052:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002056:	680a      	ldr	r2, [r1, #0]
 8002058:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800205c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002060:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002062:	e6df      	b.n	8001e24 <HAL_RCC_OscConfig+0x9c>
    return HAL_ERROR;
 8002064:	2001      	movs	r0, #1
}
 8002066:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002068:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800206c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002070:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	461d      	mov	r5, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002074:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002080:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002082:	f7fe ff7d 	bl	8000f80 <HAL_GetTick>
 8002086:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002088:	e004      	b.n	8002094 <HAL_RCC_OscConfig+0x30c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800208a:	f7fe ff79 	bl	8000f80 <HAL_GetTick>
 800208e:	1b80      	subs	r0, r0, r6
 8002090:	2864      	cmp	r0, #100	; 0x64
 8002092:	d8d7      	bhi.n	8002044 <HAL_RCC_OscConfig+0x2bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002094:	682b      	ldr	r3, [r5, #0]
 8002096:	039b      	lsls	r3, r3, #14
 8002098:	d4f7      	bmi.n	800208a <HAL_RCC_OscConfig+0x302>
 800209a:	e6c0      	b.n	8001e1e <HAL_RCC_OscConfig+0x96>
  FlagStatus pwrclkchanged = RESET;
 800209c:	2500      	movs	r5, #0
 800209e:	e6f3      	b.n	8001e88 <HAL_RCC_OscConfig+0x100>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ae:	461e      	mov	r6, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b0:	f022 0201 	bic.w	r2, r2, #1
 80020b4:	671a      	str	r2, [r3, #112]	; 0x70
 80020b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020b8:	f022 0204 	bic.w	r2, r2, #4
 80020bc:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 80020be:	f7fe ff5f 	bl	8000f80 <HAL_GetTick>
 80020c2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	e004      	b.n	80020d0 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020c6:	f7fe ff5b 	bl	8000f80 <HAL_GetTick>
 80020ca:	1bc0      	subs	r0, r0, r7
 80020cc:	4540      	cmp	r0, r8
 80020ce:	d8b9      	bhi.n	8002044 <HAL_RCC_OscConfig+0x2bc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d0:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80020d2:	0798      	lsls	r0, r3, #30
 80020d4:	d4f7      	bmi.n	80020c6 <HAL_RCC_OscConfig+0x33e>
    if(pwrclkchanged == SET)
 80020d6:	2d00      	cmp	r5, #0
 80020d8:	f43f af48 	beq.w	8001f6c <HAL_RCC_OscConfig+0x1e4>
 80020dc:	e73e      	b.n	8001f5c <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_DISABLE();
 80020de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80020e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80020e6:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e8:	461d      	mov	r5, r3
        __HAL_RCC_HSI_DISABLE();
 80020ea:	f022 0201 	bic.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80020f0:	f7fe ff46 	bl	8000f80 <HAL_GetTick>
 80020f4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	e004      	b.n	8002102 <HAL_RCC_OscConfig+0x37a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f8:	f7fe ff42 	bl	8000f80 <HAL_GetTick>
 80020fc:	1b80      	subs	r0, r0, r6
 80020fe:	2802      	cmp	r0, #2
 8002100:	d8a0      	bhi.n	8002044 <HAL_RCC_OscConfig+0x2bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002102:	682b      	ldr	r3, [r5, #0]
 8002104:	0799      	lsls	r1, r3, #30
 8002106:	d4f7      	bmi.n	80020f8 <HAL_RCC_OscConfig+0x370>
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	e68b      	b.n	8001e24 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	e66f      	b.n	8001dfc <HAL_RCC_OscConfig+0x74>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800211c:	f042 0204 	orr.w	r2, r2, #4
 8002120:	671a      	str	r2, [r3, #112]	; 0x70
 8002122:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002124:	f042 0201 	orr.w	r2, r2, #1
 8002128:	671a      	str	r2, [r3, #112]	; 0x70
 800212a:	e703      	b.n	8001f34 <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_PLL_DISABLE();
 800212c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002130:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 8002132:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002134:	f7fe ff24 	bl	8000f80 <HAL_GetTick>
 8002138:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	e005      	b.n	8002148 <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe ff20 	bl	8000f80 <HAL_GetTick>
 8002140:	1b80      	subs	r0, r0, r6
 8002142:	2802      	cmp	r0, #2
 8002144:	f63f af7e 	bhi.w	8002044 <HAL_RCC_OscConfig+0x2bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	0199      	lsls	r1, r3, #6
 800214c:	d4f6      	bmi.n	800213c <HAL_RCC_OscConfig+0x3b4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214e:	6a22      	ldr	r2, [r4, #32]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002150:	f44f 5660 	mov.w	r6, #14336	; 0x3800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002154:	69e3      	ldr	r3, [r4, #28]
 8002156:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002158:	f2c4 0602 	movt	r6, #16386	; 0x4002
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800215c:	4313      	orrs	r3, r2
 800215e:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8002162:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002166:	0852      	lsrs	r2, r2, #1
 8002168:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800216c:	3a01      	subs	r2, #1
 800216e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002172:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002176:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002178:	682b      	ldr	r3, [r5, #0]
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002180:	f7fe fefe 	bl	8000f80 <HAL_GetTick>
 8002184:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002186:	e005      	b.n	8002194 <HAL_RCC_OscConfig+0x40c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe fefa 	bl	8000f80 <HAL_GetTick>
 800218c:	1b00      	subs	r0, r0, r4
 800218e:	2802      	cmp	r0, #2
 8002190:	f63f af58 	bhi.w	8002044 <HAL_RCC_OscConfig+0x2bc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002194:	6833      	ldr	r3, [r6, #0]
 8002196:	019a      	lsls	r2, r3, #6
 8002198:	d5f6      	bpl.n	8002188 <HAL_RCC_OscConfig+0x400>
 800219a:	e706      	b.n	8001faa <HAL_RCC_OscConfig+0x222>

0800219c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219c:	b190      	cbz	r0, 80021c4 <HAL_RCC_ClockConfig+0x28>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800219e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80021a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	f002 020f 	and.w	r2, r2, #15
 80021ac:	428a      	cmp	r2, r1
 80021ae:	d20b      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x2c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	f022 020f 	bic.w	r2, r2, #15
 80021b6:	430a      	orrs	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	428b      	cmp	r3, r1
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x2c>
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
}
 80021c6:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	6803      	ldr	r3, [r0, #0]
{
 80021ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ce:	079d      	lsls	r5, r3, #30
 80021d0:	d51d      	bpl.n	800220e <HAL_RCC_ClockConfig+0x72>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d2:	075c      	lsls	r4, r3, #29
 80021d4:	d507      	bpl.n	80021e6 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021de:	6894      	ldr	r4, [r2, #8]
 80021e0:	f444 54e0 	orr.w	r4, r4, #7168	; 0x1c00
 80021e4:	6094      	str	r4, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	071a      	lsls	r2, r3, #28
 80021e8:	d507      	bpl.n	80021fa <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80021f2:	6894      	ldr	r4, [r2, #8]
 80021f4:	f444 4460 	orr.w	r4, r4, #57344	; 0xe000
 80021f8:	6094      	str	r4, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021fa:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 80021fe:	6885      	ldr	r5, [r0, #8]
 8002200:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8002204:	68a2      	ldr	r2, [r4, #8]
 8002206:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800220a:	432a      	orrs	r2, r5
 800220c:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220e:	07df      	lsls	r7, r3, #31
 8002210:	4604      	mov	r4, r0
 8002212:	460d      	mov	r5, r1
 8002214:	d529      	bpl.n	800226a <HAL_RCC_ClockConfig+0xce>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002216:	6842      	ldr	r2, [r0, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002218:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221c:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800221e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002222:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002224:	d07a      	beq.n	800231c <HAL_RCC_ClockConfig+0x180>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002226:	2a02      	cmp	r2, #2
 8002228:	f000 809e 	beq.w	8002368 <HAL_RCC_ClockConfig+0x1cc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800222c:	0799      	lsls	r1, r3, #30
 800222e:	d52f      	bpl.n	8002290 <HAL_RCC_ClockConfig+0xf4>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002230:	f44f 5160 	mov.w	r1, #14336	; 0x3800
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002238:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800223c:	688b      	ldr	r3, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	460e      	mov	r6, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002240:	f023 0303 	bic.w	r3, r3, #3
 8002244:	4313      	orrs	r3, r2
 8002246:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002248:	f7fe fe9a 	bl	8000f80 <HAL_GetTick>
 800224c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224e:	e005      	b.n	800225c <HAL_RCC_ClockConfig+0xc0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002250:	f7fe fe96 	bl	8000f80 <HAL_GetTick>
 8002254:	1bc0      	subs	r0, r0, r7
 8002256:	4540      	cmp	r0, r8
 8002258:	f200 8084 	bhi.w	8002364 <HAL_RCC_ClockConfig+0x1c8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225c:	68b3      	ldr	r3, [r6, #8]
 800225e:	6862      	ldr	r2, [r4, #4]
 8002260:	f003 030c 	and.w	r3, r3, #12
 8002264:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002268:	d1f2      	bne.n	8002250 <HAL_RCC_ClockConfig+0xb4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800226e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	f002 020f 	and.w	r2, r2, #15
 8002278:	42aa      	cmp	r2, r5
 800227a:	d90c      	bls.n	8002296 <HAL_RCC_ClockConfig+0xfa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f022 020f 	bic.w	r2, r2, #15
 8002282:	432a      	orrs	r2, r5
 8002284:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	42ab      	cmp	r3, r5
 800228e:	d002      	beq.n	8002296 <HAL_RCC_ClockConfig+0xfa>
    return HAL_ERROR;
 8002290:	2001      	movs	r0, #1
}
 8002292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	075a      	lsls	r2, r3, #29
 800229a:	d509      	bpl.n	80022b0 <HAL_RCC_ClockConfig+0x114>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800229c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80022a0:	68e0      	ldr	r0, [r4, #12]
 80022a2:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80022a6:	688a      	ldr	r2, [r1, #8]
 80022a8:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80022ac:	4302      	orrs	r2, r0
 80022ae:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	071b      	lsls	r3, r3, #28
 80022b2:	d50a      	bpl.n	80022ca <HAL_RCC_ClockConfig+0x12e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022b8:	6921      	ldr	r1, [r4, #16]
 80022ba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80022be:	6893      	ldr	r3, [r2, #8]
 80022c0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80022c4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80022c8:	6093      	str	r3, [r2, #8]
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022ca:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80022ce:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80022d2:	688b      	ldr	r3, [r1, #8]
 80022d4:	f003 030c 	and.w	r3, r3, #12
 80022d8:	2b04      	cmp	r3, #4
 80022da:	d022      	beq.n	8002322 <HAL_RCC_ClockConfig+0x186>
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d13c      	bne.n	800235a <HAL_RCC_ClockConfig+0x1be>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e0:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022e2:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e8:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80022ea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80022ee:	d13f      	bne.n	8002370 <HAL_RCC_ClockConfig+0x1d4>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80022f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022f8:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80022fc:	fba1 0100 	umull	r0, r1, r1, r0
 8002300:	f7fe fc54 	bl	8000bac <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002304:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002308:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002316:	fbb0 f3f3 	udiv	r3, r0, r3
 800231a:	e006      	b.n	800232a <HAL_RCC_ClockConfig+0x18e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800231c:	039e      	lsls	r6, r3, #14
 800231e:	d487      	bmi.n	8002230 <HAL_RCC_ClockConfig+0x94>
 8002320:	e7b6      	b.n	8002290 <HAL_RCC_ClockConfig+0xf4>
      sysclockfreq = HSE_VALUE;
 8002322:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8002326:	f2c0 037a 	movt	r3, #122	; 0x7a
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800232a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800232e:	f24a 64b4 	movw	r4, #42676	; 0xa6b4
 8002332:	f240 020c 	movw	r2, #12
  HAL_InitTick (TICK_INT_PRIORITY);
 8002336:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002338:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800233c:	f6c0 0400 	movt	r4, #2048	; 0x800
 8002340:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8002344:	6889      	ldr	r1, [r1, #8]
 8002346:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800234a:	5c61      	ldrb	r1, [r4, r1]
 800234c:	40cb      	lsrs	r3, r1
 800234e:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002350:	f7fe fdd6 	bl	8000f00 <HAL_InitTick>
  return HAL_OK;
 8002354:	2000      	movs	r0, #0
}
 8002356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      sysclockfreq = HSI_VALUE;
 800235a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800235e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8002362:	e7e2      	b.n	800232a <HAL_RCC_ClockConfig+0x18e>
        return HAL_TIMEOUT;
 8002364:	2003      	movs	r0, #3
 8002366:	e794      	b.n	8002292 <HAL_RCC_ClockConfig+0xf6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002368:	0198      	lsls	r0, r3, #6
 800236a:	f53f af61 	bmi.w	8002230 <HAL_RCC_ClockConfig+0x94>
 800236e:	e78f      	b.n	8002290 <HAL_RCC_ClockConfig+0xf4>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002370:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8002374:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002378:	2300      	movs	r3, #0
 800237a:	f2c0 007a 	movt	r0, #122	; 0x7a
 800237e:	fba1 0100 	umull	r0, r1, r1, r0
 8002382:	f7fe fc13 	bl	8000bac <__aeabi_uldivmod>
 8002386:	e7bd      	b.n	8002304 <HAL_RCC_ClockConfig+0x168>

08002388 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002388:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800238c:	f2c4 0102 	movt	r1, #16386	; 0x4002
{
 8002390:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002392:	688b      	ldr	r3, [r1, #8]
 8002394:	f003 030c 	and.w	r3, r3, #12
 8002398:	2b04      	cmp	r3, #4
 800239a:	d024      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x5e>
 800239c:	2b08      	cmp	r3, #8
 800239e:	d11d      	bne.n	80023dc <HAL_RCC_GetSysClockFreq+0x54>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a0:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023a2:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a8:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023aa:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 80023ae:	d11f      	bne.n	80023f0 <HAL_RCC_GetSysClockFreq+0x68>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80023b4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023b8:	f2c0 00f4 	movt	r0, #244	; 0xf4
 80023bc:	fba1 0100 	umull	r0, r1, r1, r0
 80023c0:	f7fe fbf4 	bl	8000bac <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80023c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80023c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80023d6:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80023da:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80023dc:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 80023e0:	f2c0 00f4 	movt	r0, #244	; 0xf4
}
 80023e4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80023e6:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 80023ea:	f2c0 007a 	movt	r0, #122	; 0x7a
}
 80023ee:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f0:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 80023f4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80023f8:	2300      	movs	r3, #0
 80023fa:	f2c0 007a 	movt	r0, #122	; 0x7a
 80023fe:	fba1 0100 	umull	r0, r1, r1, r0
 8002402:	f7fe fbd3 	bl	8000bac <__aeabi_uldivmod>
 8002406:	e7dd      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x3c>

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002408:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800240c:	f24a 62c4 	movw	r2, #42692	; 0xa6c4
  return SystemCoreClock;
 8002410:	f240 010c 	movw	r1, #12
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002414:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002418:	f6c0 0200 	movt	r2, #2048	; 0x800
  return SystemCoreClock;
 800241c:	f2c2 0100 	movt	r1, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	6808      	ldr	r0, [r1, #0]
 8002424:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002428:	5cd3      	ldrb	r3, [r2, r3]
}
 800242a:	40d8      	lsrs	r0, r3
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop

08002430 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002430:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002434:	f24a 62c4 	movw	r2, #42692	; 0xa6c4
  return SystemCoreClock;
 8002438:	f240 010c 	movw	r1, #12
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800243c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002440:	f6c0 0200 	movt	r2, #2048	; 0x800
  return SystemCoreClock;
 8002444:	f2c2 0100 	movt	r1, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	6808      	ldr	r0, [r1, #0]
 800244c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002450:	5cd3      	ldrb	r3, [r2, r3]
}
 8002452:	40d8      	lsrs	r0, r3
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop

08002458 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002458:	6803      	ldr	r3, [r0, #0]
{
 800245a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800245e:	f013 0601 	ands.w	r6, r3, #1
{
 8002462:	b083      	sub	sp, #12
 8002464:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002466:	d00e      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002468:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800246c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002470:	6891      	ldr	r1, [r2, #8]
 8002472:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002476:	6091      	str	r1, [r2, #8]
 8002478:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800247a:	6891      	ldr	r1, [r2, #8]
 800247c:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800247e:	fab6 f686 	clz	r6, r6
 8002482:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002484:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002486:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800248a:	d013      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800248c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8002490:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8002492:	f2c4 0102 	movt	r1, #16386	; 0x4002
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002496:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800249a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800249e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80024a2:	ea42 0205 	orr.w	r2, r2, r5
 80024a6:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024aa:	f000 81c8 	beq.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024ae:	fab5 f585 	clz	r5, r5
 80024b2:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024b4:	02da      	lsls	r2, r3, #11
 80024b6:	d513      	bpl.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024b8:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80024bc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024be:	f2c4 0102 	movt	r1, #16386	; 0x4002

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024c2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024c6:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80024ca:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80024ce:	ea42 0200 	orr.w	r2, r2, r0
 80024d2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80024d6:	f000 81b0 	beq.w	800283a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80024da:	2800      	cmp	r0, #0
 80024dc:	bf08      	it	eq
 80024de:	2501      	moveq	r5, #1
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024e0:	069f      	lsls	r7, r3, #26
 80024e2:	f100 8153 	bmi.w	800278c <HAL_RCCEx_PeriphCLKConfig+0x334>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024e6:	06df      	lsls	r7, r3, #27
 80024e8:	d50f      	bpl.n	800250a <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80024ee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80024f2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80024f6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80024fa:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80024fe:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8002502:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002504:	4301      	orrs	r1, r0
 8002506:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800250a:	0458      	lsls	r0, r3, #17
 800250c:	d50b      	bpl.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800250e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8002512:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002514:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002518:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800251c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002520:	4302      	orrs	r2, r0
 8002522:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002526:	0419      	lsls	r1, r3, #16
 8002528:	d50b      	bpl.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800252a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800252e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002530:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002534:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002538:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800253c:	4302      	orrs	r2, r0
 800253e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002542:	03da      	lsls	r2, r3, #15
 8002544:	d50b      	bpl.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002546:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800254a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800254c:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002550:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002554:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002558:	4302      	orrs	r2, r0
 800255a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255e:	065f      	lsls	r7, r3, #25
 8002560:	d50b      	bpl.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002562:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8002566:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002568:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800256c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002570:	f022 0203 	bic.w	r2, r2, #3
 8002574:	4302      	orrs	r2, r0
 8002576:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800257a:	0618      	lsls	r0, r3, #24
 800257c:	d50b      	bpl.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800257e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8002582:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002584:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002588:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800258c:	f022 020c 	bic.w	r2, r2, #12
 8002590:	4302      	orrs	r2, r0
 8002592:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002596:	05d9      	lsls	r1, r3, #23
 8002598:	d50b      	bpl.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800259a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800259e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80025a0:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80025a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025a8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80025ac:	4302      	orrs	r2, r0
 80025ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025b2:	059a      	lsls	r2, r3, #22
 80025b4:	d50b      	bpl.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025b6:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80025ba:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80025bc:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80025c0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025c4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80025c8:	4302      	orrs	r2, r0
 80025ca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ce:	055f      	lsls	r7, r3, #21
 80025d0:	d50b      	bpl.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025d2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80025d6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80025d8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80025dc:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80025e4:	4302      	orrs	r2, r0
 80025e6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025ea:	0518      	lsls	r0, r3, #20
 80025ec:	d50b      	bpl.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025ee:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80025f2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80025f4:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80025f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80025fc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002600:	4302      	orrs	r2, r0
 8002602:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002606:	04d9      	lsls	r1, r3, #19
 8002608:	d50b      	bpl.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800260a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800260e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002610:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002614:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002618:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800261c:	4302      	orrs	r2, r0
 800261e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002622:	049a      	lsls	r2, r3, #18
 8002624:	d50b      	bpl.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002626:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800262a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800262c:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002630:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002634:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002638:	4302      	orrs	r2, r0
 800263a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800263e:	029f      	lsls	r7, r3, #10
 8002640:	d50f      	bpl.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002642:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8002646:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8002648:	f2c4 0102 	movt	r1, #16386	; 0x4002

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800264c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002650:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
      pllsaiused = 1;
 8002654:	bf08      	it	eq
 8002656:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002658:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800265c:	4302      	orrs	r2, r0
 800265e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002662:	0358      	lsls	r0, r3, #13
 8002664:	d50b      	bpl.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002666:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800266a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800266c:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8002670:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002674:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002678:	4302      	orrs	r2, r0
 800267a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800267e:	0219      	lsls	r1, r3, #8
 8002680:	d50b      	bpl.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002682:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8002686:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002688:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800268c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8002690:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002694:	4302      	orrs	r2, r0
 8002696:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	d40a      	bmi.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800269e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026a2:	d017      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80026a4:	b9b6      	cbnz	r6, 80026d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80026a6:	2d01      	cmp	r5, #1
 80026a8:	f000 80cc 	beq.w	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80026ac:	2000      	movs	r0, #0
}
 80026ae:	b003      	add	sp, #12
 80026b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026b4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80026b8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80026ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026be:	f2c4 0102 	movt	r1, #16386	; 0x4002
 80026c2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80026c6:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80026ca:	ea42 0200 	orr.w	r2, r2, r0
 80026ce:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80026d2:	d1e7      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_PLLI2S_DISABLE();
 80026d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80026d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80026dc:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026de:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_DISABLE();
 80026e0:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80026e4:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80026e6:	f7fe fc4b 	bl	8000f80 <HAL_GetTick>
 80026ea:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ec:	e004      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026ee:	f7fe fc47 	bl	8000f80 <HAL_GetTick>
 80026f2:	1bc0      	subs	r0, r0, r7
 80026f4:	2864      	cmp	r0, #100	; 0x64
 80026f6:	d845      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026f8:	6833      	ldr	r3, [r6, #0]
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	d4f7      	bmi.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x296>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	07df      	lsls	r7, r3, #31
 8002702:	d50d      	bpl.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8002704:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002706:	b95a      	cbnz	r2, 8002720 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002708:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800270c:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 8002710:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002714:	0712      	lsls	r2, r2, #28
 8002716:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800271a:	430a      	orrs	r2, r1
 800271c:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002720:	0318      	lsls	r0, r3, #12
 8002722:	f100 80f2 	bmi.w	800290a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002726:	02d9      	lsls	r1, r3, #11
 8002728:	d504      	bpl.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800272a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800272c:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8002730:	f000 80f0 	beq.w	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002734:	019a      	lsls	r2, r3, #6
 8002736:	d50d      	bpl.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002738:	68e3      	ldr	r3, [r4, #12]
 800273a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800273e:	6860      	ldr	r0, [r4, #4]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	68a1      	ldr	r1, [r4, #8]
 8002744:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002748:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800274c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002750:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002754:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002758:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800275c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800275e:	461e      	mov	r6, r3
    __HAL_RCC_PLLI2S_ENABLE();
 8002760:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002764:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002766:	f7fe fc0b 	bl	8000f80 <HAL_GetTick>
 800276a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800276c:	e004      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x320>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800276e:	f7fe fc07 	bl	8000f80 <HAL_GetTick>
 8002772:	1bc0      	subs	r0, r0, r7
 8002774:	2864      	cmp	r0, #100	; 0x64
 8002776:	d805      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002778:	6833      	ldr	r3, [r6, #0]
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	d5f7      	bpl.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x316>
  if(pllsaiused == 1)
 800277e:	2d01      	cmp	r5, #1
 8002780:	d194      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x254>
 8002782:	e05f      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
        return HAL_TIMEOUT;
 8002784:	2003      	movs	r0, #3
}
 8002786:	b003      	add	sp, #12
 8002788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800278c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
    PWR->CR1 |= PWR_CR1_DBP;
 8002790:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
    __HAL_RCC_PWR_CLK_ENABLE();
 8002794:	f2c4 0202 	movt	r2, #16386	; 0x4002
    PWR->CR1 |= PWR_CR1_DBP;
 8002798:	f2c4 0300 	movt	r3, #16384	; 0x4000
    __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	6c11      	ldr	r1, [r2, #64]	; 0x40
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800279e:	461f      	mov	r7, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80027a4:	6411      	str	r1, [r2, #64]	; 0x40
 80027a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027a8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80027ac:	9201      	str	r2, [sp, #4]
 80027ae:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027b6:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80027b8:	f7fe fbe2 	bl	8000f80 <HAL_GetTick>
 80027bc:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027be:	e005      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x374>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7fe fbde 	bl	8000f80 <HAL_GetTick>
 80027c4:	eba0 0008 	sub.w	r0, r0, r8
 80027c8:	2864      	cmp	r0, #100	; 0x64
 80027ca:	d8db      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	05d8      	lsls	r0, r3, #23
 80027d0:	d5f6      	bpl.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80027d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80027dc:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80027e0:	6f11      	ldr	r1, [r2, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e2:	f411 7140 	ands.w	r1, r1, #768	; 0x300
 80027e6:	d011      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
 80027e8:	4281      	cmp	r1, r0
 80027ea:	d00f      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ec:	6f11      	ldr	r1, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ee:	6f17      	ldr	r7, [r2, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027f0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80027f4:	f447 3780 	orr.w	r7, r7, #65536	; 0x10000
 80027f8:	6717      	str	r7, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027fa:	6f17      	ldr	r7, [r2, #112]	; 0x70
 80027fc:	f427 3780 	bic.w	r7, r7, #65536	; 0x10000
 8002800:	6717      	str	r7, [r2, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8002802:	6711      	str	r1, [r2, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002804:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002806:	07c9      	lsls	r1, r1, #31
 8002808:	f100 80b1 	bmi.w	800296e <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280c:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8002810:	f000 809a 	beq.w	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002814:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002818:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800281c:	6891      	ldr	r1, [r2, #8]
 800281e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002822:	6091      	str	r1, [r2, #8]
 8002824:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8002830:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002832:	430b      	orrs	r3, r1
 8002834:	6713      	str	r3, [r2, #112]	; 0x70
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	e655      	b.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      plli2sused = 1;
 800283a:	2601      	movs	r6, #1
 800283c:	e650      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  uint32_t pllsaiused = 0;
 800283e:	2500      	movs	r5, #0
      plli2sused = 1;
 8002840:	2601      	movs	r6, #1
 8002842:	e637      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    __HAL_RCC_PLLSAI_DISABLE();
 8002844:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002848:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800284c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800284e:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_DISABLE();
 8002850:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002854:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002856:	f7fe fb93 	bl	8000f80 <HAL_GetTick>
 800285a:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800285c:	e004      	b.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x410>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800285e:	f7fe fb8f 	bl	8000f80 <HAL_GetTick>
 8002862:	1b80      	subs	r0, r0, r6
 8002864:	2864      	cmp	r0, #100	; 0x64
 8002866:	d88d      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002868:	682b      	ldr	r3, [r5, #0]
 800286a:	009f      	lsls	r7, r3, #2
 800286c:	d4f7      	bmi.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x406>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	0318      	lsls	r0, r3, #12
 8002872:	d478      	bmi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8002874:	02d9      	lsls	r1, r3, #11
 8002876:	d51b      	bpl.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002878:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800287a:	b9ca      	cbnz	r2, 80028b0 <HAL_RCCEx_PeriphCLKConfig+0x458>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800287c:	f44f 5160 	mov.w	r1, #14336	; 0x3800
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002880:	e9d4 5204 	ldrd	r5, r2, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002884:	f2c4 0102 	movt	r1, #16386	; 0x4002
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8002888:	0612      	lsls	r2, r2, #24
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800288a:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800288e:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 8002892:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8002896:	4302      	orrs	r2, r0
 8002898:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800289c:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 80028a0:	6a20      	ldr	r0, [r4, #32]
 80028a2:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 80028a6:	3801      	subs	r0, #1
 80028a8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80028ac:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028b0:	029a      	lsls	r2, r3, #10
 80028b2:	d513      	bpl.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x484>
 80028b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80028b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ba:	d10f      	bne.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x484>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80028c0:	69a3      	ldr	r3, [r4, #24]
 80028c2:	6920      	ldr	r0, [r4, #16]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028c4:	f2c4 0202 	movt	r2, #16386	; 0x4002
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80028c8:	041b      	lsls	r3, r3, #16
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80028ca:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 80028ce:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80028d2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80028d6:	430b      	orrs	r3, r1
 80028d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    __HAL_RCC_PLLSAI_ENABLE();
 80028dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80028e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028e4:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028e6:	461c      	mov	r4, r3
    __HAL_RCC_PLLSAI_ENABLE();
 80028e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028ec:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80028ee:	f7fe fb47 	bl	8000f80 <HAL_GetTick>
 80028f2:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80028f4:	e005      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028f6:	f7fe fb43 	bl	8000f80 <HAL_GetTick>
 80028fa:	1b40      	subs	r0, r0, r5
 80028fc:	2864      	cmp	r0, #100	; 0x64
 80028fe:	f63f af41 	bhi.w	8002784 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002902:	6823      	ldr	r3, [r4, #0]
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	d5f6      	bpl.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8002908:	e6d0      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x254>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800290a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800290c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8002910:	f47f af09 	bne.w	8002726 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002914:	f44f 5160 	mov.w	r1, #14336	; 0x3800
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002918:	68e2      	ldr	r2, [r4, #12]
 800291a:	6866      	ldr	r6, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800291c:	f2c4 0102 	movt	r1, #16386	; 0x4002
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002920:	0612      	lsls	r2, r2, #24
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002922:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8002926:	ea42 1286 	orr.w	r2, r2, r6, lsl #6
 800292a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800292e:	4302      	orrs	r2, r0
 8002930:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002934:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002938:	69e2      	ldr	r2, [r4, #28]
 800293a:	f020 001f 	bic.w	r0, r0, #31
 800293e:	3a01      	subs	r2, #1
 8002940:	4302      	orrs	r2, r0
 8002942:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
 8002946:	e6f5      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002948:	f44f 5060 	mov.w	r0, #14336	; 0x3800
 800294c:	f64f 41ff 	movw	r1, #64767	; 0xfcff
 8002950:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002954:	f6c0 71ff 	movt	r1, #4095	; 0xfff
 8002958:	6882      	ldr	r2, [r0, #8]
 800295a:	4019      	ands	r1, r3
 800295c:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002960:	430a      	orrs	r2, r1
 8002962:	6082      	str	r2, [r0, #8]
 8002964:	e75e      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002966:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002968:	2a00      	cmp	r2, #0
 800296a:	d087      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x424>
 800296c:	e782      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296e:	4617      	mov	r7, r2
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002970:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002974:	f7fe fb04 	bl	8000f80 <HAL_GetTick>
 8002978:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297a:	e006      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x532>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f7fe fb00 	bl	8000f80 <HAL_GetTick>
 8002980:	eba0 0009 	sub.w	r0, r0, r9
 8002984:	4540      	cmp	r0, r8
 8002986:	f63f aefd 	bhi.w	8002784 <HAL_RCCEx_PeriphCLKConfig+0x32c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800298c:	079b      	lsls	r3, r3, #30
 800298e:	d5f5      	bpl.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002990:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002992:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002996:	e739      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x3b4>

08002998 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to read
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800299c:	460d      	mov	r5, r1
 800299e:	b086      	sub	sp, #24
 80029a0:	4604      	mov	r4, r0
 80029a2:	4616      	mov	r6, r2
 80029a4:	461f      	mov	r7, r3
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 80029a6:	f7fe faeb 	bl	8000f80 <HAL_GetTick>
  uint32_t count = 0, *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 80029aa:	b375      	cbz	r5, 8002a0a <HAL_SD_ReadBlocks+0x72>
 80029ac:	4680      	mov	r8, r0
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
    return HAL_ERROR;
  }
 
  if(hsd->State == HAL_SD_STATE_READY)
 80029ae:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80029b2:	b2c0      	uxtb	r0, r0
 80029b4:	2801      	cmp	r0, #1
 80029b6:	d007      	beq.n	80029c8 <HAL_SD_ReadBlocks+0x30>
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80029b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 80029ba:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80029bc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80029c0:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 80029c2:	b006      	add	sp, #24
 80029c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029c8:	19f3      	adds	r3, r6, r7
 80029ca:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80029cc:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029ce:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 80029d0:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80029d2:	d822      	bhi.n	8002a1a <HAL_SD_ReadBlocks+0x82>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 80029d6:	2203      	movs	r2, #3
    hsd->Instance->DCTRL = 0;
 80029d8:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80029da:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 80029dc:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 80029e0:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029e2:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512;
 80029e6:	bf18      	it	ne
 80029e8:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80029ea:	f002 fe39 	bl	8005660 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80029ee:	4603      	mov	r3, r0
 80029f0:	b1d0      	cbz	r0, 8002a28 <HAL_SD_ReadBlocks+0x90>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80029f2:	6822      	ldr	r2, [r4, #0]
 80029f4:	f240 50ff 	movw	r0, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 80029f8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);      
 80029fa:	6390      	str	r0, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      return HAL_ERROR;
 80029fe:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8002a00:	4313      	orrs	r3, r2
 8002a02:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a04:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002a08:	e7db      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a12:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002a14:	b006      	add	sp, #24
 8002a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a1a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a20:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002a22:	b006      	add	sp, #24
 8002a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a28:	f04f 31ff 	mov.w	r1, #4294967295
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a2c:	0278      	lsls	r0, r7, #9
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002a2e:	2290      	movs	r2, #144	; 0x90
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002a30:	f04f 0a01 	mov.w	sl, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002a34:	f04f 0902 	mov.w	r9, #2
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002a38:	9100      	str	r1, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002a3a:	9001      	str	r0, [sp, #4]
    SDMMC_ConfigData(hsd->Instance, &config);
 8002a3c:	4669      	mov	r1, sp
 8002a3e:	6820      	ldr	r0, [r4, #0]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002a40:	9304      	str	r3, [sp, #16]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002a42:	f8cd a014 	str.w	sl, [sp, #20]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002a46:	e9cd 2902 	strd	r2, r9, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8002a4a:	f002 fdf3 	bl	8005634 <SDMMC_ConfigData>
    if(NumberOfBlocks > 1)
 8002a4e:	4557      	cmp	r7, sl
 8002a50:	d933      	bls.n	8002aba <HAL_SD_ReadBlocks+0x122>
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002a52:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8002a56:	4631      	mov	r1, r6
 8002a58:	6820      	ldr	r0, [r4, #0]
 8002a5a:	f002 fe85 	bl	8005768 <SDMMC_CmdReadMultiBlock>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	6823      	ldr	r3, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002a62:	b152      	cbz	r2, 8002a7a <HAL_SD_ReadBlocks+0xe2>
 8002a64:	e01e      	b.n	8002aa4 <HAL_SD_ReadBlocks+0x10c>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002a66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a68:	b37b      	cbz	r3, 8002aca <HAL_SD_ReadBlocks+0x132>
 8002a6a:	f7fe fa89 	bl	8000f80 <HAL_GetTick>
 8002a6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002a70:	eba0 0008 	sub.w	r0, r0, r8
 8002a74:	4298      	cmp	r0, r3
 8002a76:	d228      	bcs.n	8002aca <HAL_SD_ReadBlocks+0x132>
 8002a78:	6823      	ldr	r3, [r4, #0]
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	f412 7f95 	tst.w	r2, #298	; 0x12a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8002a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002a82:	d12f      	bne.n	8002ae4 <HAL_SD_ReadBlocks+0x14c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8002a84:	0411      	lsls	r1, r2, #16
 8002a86:	d5ee      	bpl.n	8002a66 <HAL_SD_ReadBlocks+0xce>
 8002a88:	1f2e      	subs	r6, r5, #4
 8002a8a:	f105 091c 	add.w	r9, r5, #28
 8002a8e:	e000      	b.n	8002a92 <HAL_SD_ReadBlocks+0xfa>
 8002a90:	6823      	ldr	r3, [r4, #0]
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8002a92:	4618      	mov	r0, r3
 8002a94:	f002 fdb0 	bl	80055f8 <SDMMC_ReadFIFO>
 8002a98:	f846 0f04 	str.w	r0, [r6, #4]!
        for(count = 0U; count < 8U; count++)
 8002a9c:	45b1      	cmp	r9, r6
 8002a9e:	d1f7      	bne.n	8002a90 <HAL_SD_ReadBlocks+0xf8>
        tempbuff += 8U;
 8002aa0:	3520      	adds	r5, #32
 8002aa2:	e7e0      	b.n	8002a66 <HAL_SD_ReadBlocks+0xce>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002aa4:	f240 50ff 	movw	r0, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002aa8:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002aaa:	6398      	str	r0, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002aac:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8002aae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ab4:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002ab8:	e783      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002aba:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8002abe:	4631      	mov	r1, r6
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	f002 fe0f 	bl	80056e4 <SDMMC_CmdReadSingleBlock>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	e7ca      	b.n	8002a60 <HAL_SD_ReadBlocks+0xc8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	f240 51ff 	movw	r1, #1535	; 0x5ff
        hsd->State= HAL_SD_STATE_READY;
 8002ad0:	2201      	movs	r2, #1
        return HAL_TIMEOUT;
 8002ad2:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ad4:	6399      	str	r1, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ad6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ad8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002adc:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002ade:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002ae2:	e76e      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002ae4:	05d2      	lsls	r2, r2, #23
 8002ae6:	d50b      	bpl.n	8002b00 <HAL_SD_ReadBlocks+0x168>
 8002ae8:	2f01      	cmp	r7, #1
 8002aea:	d909      	bls.n	8002b00 <HAL_SD_ReadBlocks+0x168>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002aec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002aee:	2a03      	cmp	r2, #3
 8002af0:	d006      	beq.n	8002b00 <HAL_SD_ReadBlocks+0x168>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fefe 	bl	80058f4 <SDMMC_CmdStopTransfer>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002af8:	6823      	ldr	r3, [r4, #0]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002afa:	4601      	mov	r1, r0
 8002afc:	2800      	cmp	r0, #0
 8002afe:	d15b      	bne.n	8002bb8 <HAL_SD_ReadBlocks+0x220>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b02:	0717      	lsls	r7, r2, #28
 8002b04:	d420      	bmi.n	8002b48 <HAL_SD_ReadBlocks+0x1b0>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b08:	0796      	lsls	r6, r2, #30
 8002b0a:	d429      	bmi.n	8002b60 <HAL_SD_ReadBlocks+0x1c8>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8002b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b0e:	0690      	lsls	r0, r2, #26
 8002b10:	d432      	bmi.n	8002b78 <HAL_SD_ReadBlocks+0x1e0>
 8002b12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002b14:	b962      	cbnz	r2, 8002b30 <HAL_SD_ReadBlocks+0x198>
 8002b16:	e03b      	b.n	8002b90 <HAL_SD_ReadBlocks+0x1f8>
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8002b18:	f002 fd6e 	bl	80055f8 <SDMMC_ReadFIFO>
 8002b1c:	f845 0b04 	str.w	r0, [r5], #4
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002b20:	f7fe fa2e 	bl	8000f80 <HAL_GetTick>
 8002b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b26:	eba0 0008 	sub.w	r0, r0, r8
 8002b2a:	4283      	cmp	r3, r0
 8002b2c:	d937      	bls.n	8002b9e <HAL_SD_ReadBlocks+0x206>
 8002b2e:	6823      	ldr	r3, [r4, #0]
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8002b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8002b32:	4618      	mov	r0, r3
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8002b34:	0291      	lsls	r1, r2, #10
 8002b36:	d4ef      	bmi.n	8002b18 <HAL_SD_ReadBlocks+0x180>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b38:	f240 51ff 	movw	r1, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8002b3c:	2201      	movs	r2, #1
    return HAL_OK;
 8002b3e:	2000      	movs	r0, #0
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b40:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8002b46:	e73c      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b48:	f240 51ff 	movw	r1, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002b4c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b4e:	6399      	str	r1, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002b50:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b5a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002b5e:	e730      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b60:	f240 51ff 	movw	r1, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002b64:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b66:	6399      	str	r1, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002b68:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b72:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002b76:	e724      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b78:	f240 51ff 	movw	r1, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002b7c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002b7e:	6399      	str	r1, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002b80:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002b84:	f043 0320 	orr.w	r3, r3, #32
 8002b88:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b8a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002b8e:	e718      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)))
 8002b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b92:	0292      	lsls	r2, r2, #10
 8002b94:	d5d0      	bpl.n	8002b38 <HAL_SD_ReadBlocks+0x1a0>
      *tempbuff = SDMMC_ReadFIFO(hsd->Instance);
 8002b96:	4618      	mov	r0, r3
 8002b98:	f002 fd2e 	bl	80055f8 <SDMMC_ReadFIFO>
 8002b9c:	6028      	str	r0, [r5, #0]
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	f240 51ff 	movw	r1, #1535	; 0x5ff
        hsd->State= HAL_SD_STATE_READY;
 8002ba4:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);        
 8002ba6:	6399      	str	r1, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002baa:	4610      	mov	r0, r2
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb0:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002bb2:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        return HAL_ERROR;
 8002bb6:	e704      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bb8:	f240 50ff 	movw	r0, #1535	; 0x5ff
          hsd->State = HAL_SD_STATE_READY;
 8002bbc:	2201      	movs	r2, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002bbe:	6398      	str	r0, [r3, #56]	; 0x38
          return HAL_ERROR;
 8002bc0:	4610      	mov	r0, r2
          hsd->ErrorCode |= errorstate;
 8002bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002bc8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          return HAL_ERROR;
 8002bcc:	e6f9      	b.n	80029c2 <HAL_SD_ReadBlocks+0x2a>
 8002bce:	bf00      	nop

08002bd0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks Number of SD blocks to write
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bd4:	460d      	mov	r5, r1
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4616      	mov	r6, r2
 8002bdc:	461f      	mov	r7, r3
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8002bde:	f7fe f9cf 	bl	8000f80 <HAL_GetTick>
  uint32_t count = 0;
  uint32_t *tempbuff = (uint32_t *)pData;
  
  if(NULL == pData)
 8002be2:	2d00      	cmp	r5, #0
 8002be4:	d038      	beq.n	8002c58 <HAL_SD_WriteBlocks+0x88>
 8002be6:	4680      	mov	r8, r0
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
    return HAL_ERROR;
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002be8:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8002bec:	b2c0      	uxtb	r0, r0
 8002bee:	2801      	cmp	r0, #1
 8002bf0:	d007      	beq.n	8002c02 <HAL_SD_WriteBlocks+0x32>
    
    return HAL_OK;
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002bf4:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002bf6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002bfa:	63a3      	str	r3, [r4, #56]	; 0x38
  }
}
 8002bfc:	b006      	add	sp, #24
 8002bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c02:	19f3      	adds	r3, r6, r7
 8002c04:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c06:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c08:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0a:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002c0c:	d82c      	bhi.n	8002c68 <HAL_SD_WriteBlocks+0x98>
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hsd->State = HAL_SD_STATE_BUSY;
 8002c10:	2203      	movs	r2, #3
    hsd->Instance->DCTRL = 0;
 8002c12:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002c14:	2b01      	cmp	r3, #1
    hsd->State = HAL_SD_STATE_BUSY;
 8002c16:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0;
 8002c1a:	62c1      	str	r1, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c1c:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512;
 8002c20:	bf18      	it	ne
 8002c22:	0276      	lslne	r6, r6, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002c24:	f002 fd1c 	bl	8005660 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c28:	4603      	mov	r3, r0
 8002c2a:	bb20      	cbnz	r0, 8002c76 <HAL_SD_WriteBlocks+0xa6>
    if(NumberOfBlocks > 1U)
 8002c2c:	2f01      	cmp	r7, #1
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	d92d      	bls.n	8002c8e <HAL_SD_WriteBlocks+0xbe>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002c32:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002c34:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002c36:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8002c38:	f002 fe1a 	bl	8005870 <SDMMC_CmdWriteMultiBlock>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	6820      	ldr	r0, [r4, #0]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002c40:	b363      	cbz	r3, 8002c9c <HAL_SD_WriteBlocks+0xcc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002c42:	f240 52ff 	movw	r2, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002c46:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002c48:	6382      	str	r2, [r0, #56]	; 0x38
      return HAL_ERROR;
 8002c4a:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8002c4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c52:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002c56:	e7d1      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002c60:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002c62:	b006      	add	sp, #24
 8002c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002c68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c6e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002c70:	b006      	add	sp, #24
 8002c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	f240 50ff 	movw	r0, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002c7c:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002c7e:	6390      	str	r0, [r2, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002c80:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      return HAL_ERROR;
 8002c82:	4608      	mov	r0, r1
      hsd->ErrorCode |= errorstate;
 8002c84:	4313      	orrs	r3, r2
 8002c86:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c88:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002c8c:	e7b6      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002c8e:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002c90:	4631      	mov	r1, r6
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002c92:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8002c94:	f002 fdaa 	bl	80057ec <SDMMC_CmdWriteSingleBlock>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	e7d0      	b.n	8002c3e <HAL_SD_WriteBlocks+0x6e>
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002c9c:	0279      	lsls	r1, r7, #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002c9e:	f04f 36ff 	mov.w	r6, #4294967295
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002ca2:	2290      	movs	r2, #144	; 0x90
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ca4:	9101      	str	r1, [sp, #4]
    SDMMC_ConfigData(hsd->Instance, &config);
 8002ca6:	4669      	mov	r1, sp
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ca8:	9600      	str	r6, [sp, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002caa:	9202      	str	r2, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002cac:	e9cd 3303 	strd	r3, r3, [sp, #12]
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	9305      	str	r3, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8002cb4:	f002 fcbe 	bl	8005634 <SDMMC_ConfigData>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002cb8:	e008      	b.n	8002ccc <HAL_SD_WriteBlocks+0xfc>
      if((Timeout == 0U)||((HAL_GetTick()-tickstart) >=  Timeout))
 8002cba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cbc:	b1db      	cbz	r3, 8002cf6 <HAL_SD_WriteBlocks+0x126>
 8002cbe:	f7fe f95f 	bl	8000f80 <HAL_GetTick>
 8002cc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cc4:	eba0 0008 	sub.w	r0, r0, r8
 8002cc8:	4298      	cmp	r0, r3
 8002cca:	d214      	bcs.n	8002cf6 <HAL_SD_WriteBlocks+0x126>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd0:	f412 7f8d 	tst.w	r2, #282	; 0x11a
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8002cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8002cd6:	d119      	bne.n	8002d0c <HAL_SD_WriteBlocks+0x13c>
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE))
 8002cd8:	0456      	lsls	r6, r2, #17
 8002cda:	d5ee      	bpl.n	8002cba <HAL_SD_WriteBlocks+0xea>
 8002cdc:	f105 0620 	add.w	r6, r5, #32
 8002ce0:	e000      	b.n	8002ce4 <HAL_SD_WriteBlocks+0x114>
 8002ce2:	6823      	ldr	r3, [r4, #0]
          SDMMC_WriteFIFO(hsd->Instance, (tempbuff + count));
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	3504      	adds	r5, #4
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f002 fc89 	bl	8005600 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002cee:	42ae      	cmp	r6, r5
 8002cf0:	d1f7      	bne.n	8002ce2 <HAL_SD_WriteBlocks+0x112>
        tempbuff += 8U;
 8002cf2:	4635      	mov	r5, r6
 8002cf4:	e7e1      	b.n	8002cba <HAL_SD_WriteBlocks+0xea>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002cf6:	6822      	ldr	r2, [r4, #0]
 8002cf8:	f240 51ff 	movw	r1, #1535	; 0x5ff
        hsd->State = HAL_SD_STATE_READY;
 8002cfc:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8002cfe:	2003      	movs	r0, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002d00:	6391      	str	r1, [r2, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002d02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002d04:	63a2      	str	r2, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002d06:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 8002d0a:	e777      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002d0c:	05d0      	lsls	r0, r2, #23
 8002d0e:	d50b      	bpl.n	8002d28 <HAL_SD_WriteBlocks+0x158>
 8002d10:	2f01      	cmp	r7, #1
 8002d12:	d909      	bls.n	8002d28 <HAL_SD_WriteBlocks+0x158>
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002d14:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8002d16:	2a03      	cmp	r2, #3
 8002d18:	d006      	beq.n	8002d28 <HAL_SD_WriteBlocks+0x158>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fdea 	bl	80058f4 <SDMMC_CmdStopTransfer>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002d20:	6823      	ldr	r3, [r4, #0]
        if(errorstate != HAL_SD_ERROR_NONE)
 8002d22:	4601      	mov	r1, r0
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d135      	bne.n	8002d94 <HAL_SD_WriteBlocks+0x1c4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8002d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2a:	0711      	lsls	r1, r2, #28
 8002d2c:	d412      	bmi.n	8002d54 <HAL_SD_WriteBlocks+0x184>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d30:	0792      	lsls	r2, r2, #30
 8002d32:	d41b      	bmi.n	8002d6c <HAL_SD_WriteBlocks+0x19c>
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8002d34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d36:	f012 0210 	ands.w	r2, r2, #16
 8002d3a:	d023      	beq.n	8002d84 <HAL_SD_WriteBlocks+0x1b4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d3c:	f240 51ff 	movw	r1, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002d40:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d42:	6399      	str	r1, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d44:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d48:	f043 0310 	orr.w	r3, r3, #16
 8002d4c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d4e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002d52:	e753      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d54:	f240 51ff 	movw	r1, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002d58:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d5a:	6399      	str	r1, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d5c:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d60:	f043 0308 	orr.w	r3, r3, #8
 8002d64:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d66:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002d6a:	e747      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d6c:	f240 51ff 	movw	r1, #1535	; 0x5ff
      hsd->State = HAL_SD_STATE_READY;
 8002d70:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d72:	6399      	str	r1, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002d74:	4610      	mov	r0, r2
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;      
 8002d76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d7e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      return HAL_ERROR;
 8002d82:	e73b      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d84:	f240 55ff 	movw	r5, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 8002d88:	2101      	movs	r1, #1
    return HAL_OK;
 8002d8a:	4610      	mov	r0, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d8c:	639d      	str	r5, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d8e:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    return HAL_OK;
 8002d92:	e733      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002d94:	f240 50ff 	movw	r0, #1535	; 0x5ff
          hsd->State = HAL_SD_STATE_READY;
 8002d98:	2201      	movs	r2, #1
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);  
 8002d9a:	6398      	str	r0, [r3, #56]	; 0x38
          return HAL_ERROR;
 8002d9c:	4610      	mov	r0, r2
          hsd->ErrorCode |= errorstate;
 8002d9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002da0:	430b      	orrs	r3, r1
 8002da2:	63a3      	str	r3, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002da4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          return HAL_ERROR;
 8002da8:	e728      	b.n	8002bfc <HAL_SD_WriteBlocks+0x2c>
 8002daa:	bf00      	nop

08002dac <HAL_SD_ErrorCallback>:
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop

08002db0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)   
{
 8002db0:	b570      	push	{r4, r5, r6, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002db2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  HAL_SD_CardStateTypeDef CardState;
  
  if(hsd->hdmatx != NULL)
 8002db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002db6:	b10b      	cbz	r3, 8002dbc <SD_DMATxAbort+0xc>
  {
    hsd->hdmatx = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  /* All DMA channels are aborted */
  if(hsd->hdmarx == NULL)
 8002dbc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8002dbe:	b105      	cbz	r5, 8002dc2 <SD_DMATxAbort+0x12>
        HAL_SD_ErrorCallback(hsd);
#endif
      }
    }
  }
}
 8002dc0:	bd70      	pop	{r4, r5, r6, pc}
  {
    return HAL_SD_ERROR_PARAM;
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002dc2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002dc4:	6820      	ldr	r0, [r4, #0]
 8002dc6:	0409      	lsls	r1, r1, #16
 8002dc8:	f002 ffe0 	bl	8005d8c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002dcc:	4606      	mov	r6, r0
 8002dce:	b138      	cbz	r0, 8002de0 <SD_DMATxAbort+0x30>
    hsd->ErrorCode |= errorstate;
 8002dd0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002dd2:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 8002dd4:	431e      	orrs	r6, r3
 8002dd6:	63a6      	str	r6, [r4, #56]	; 0x38
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dd8:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002dda:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8002dde:	bd70      	pop	{r4, r5, r6, pc}
  {
    return errorstate;
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002de0:	4601      	mov	r1, r0
 8002de2:	6820      	ldr	r0, [r4, #0]
 8002de4:	f002 fc1c 	bl	8005620 <SDMMC_GetResponse>
  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8002de8:	f3c0 2043 	ubfx	r0, r0, #9, #4
    hsd->State = HAL_SD_STATE_READY;
 8002dec:	2301      	movs	r3, #1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002dee:	63a6      	str	r6, [r4, #56]	; 0x38
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002df0:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8002df2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002df6:	4298      	cmp	r0, r3
 8002df8:	d8e2      	bhi.n	8002dc0 <SD_DMATxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002dfa:	6820      	ldr	r0, [r4, #0]
 8002dfc:	f002 fd7a 	bl	80058f4 <SDMMC_CmdStopTransfer>
 8002e00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e02:	4318      	orrs	r0, r3
 8002e04:	63a0      	str	r0, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002e06:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002e08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e0a:	b913      	cbnz	r3, 8002e12 <SD_DMATxAbort+0x62>
        HAL_SD_ErrorCallback(hsd);
 8002e0c:	f7ff ffce 	bl	8002dac <HAL_SD_ErrorCallback>
}
 8002e10:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SD_AbortCallback(hsd);
 8002e12:	f005 fbb3 	bl	800857c <HAL_SD_AbortCallback>
}
 8002e16:	bd70      	pop	{r4, r5, r6, pc}

08002e18 <SD_DMARxAbort>:
{
 8002e18:	b570      	push	{r4, r5, r6, lr}
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8002e1a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(hsd->hdmarx != NULL)
 8002e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e1e:	b10b      	cbz	r3, 8002e24 <SD_DMARxAbort+0xc>
    hsd->hdmarx = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	63e3      	str	r3, [r4, #60]	; 0x3c
  if(hsd->hdmatx == NULL)
 8002e24:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8002e26:	b105      	cbz	r5, 8002e2a <SD_DMARxAbort+0x12>
}
 8002e28:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8002e2a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002e2c:	6820      	ldr	r0, [r4, #0]
 8002e2e:	0409      	lsls	r1, r1, #16
 8002e30:	f002 ffac 	bl	8005d8c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8002e34:	4606      	mov	r6, r0
 8002e36:	b138      	cbz	r0, 8002e48 <SD_DMARxAbort+0x30>
    hsd->ErrorCode |= errorstate;
 8002e38:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e3a:	2201      	movs	r2, #1
    hsd->ErrorCode |= errorstate;
 8002e3c:	431e      	orrs	r6, r3
 8002e3e:	63a6      	str	r6, [r4, #56]	; 0x38
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e40:	63a5      	str	r5, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002e42:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8002e46:	bd70      	pop	{r4, r5, r6, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8002e48:	4601      	mov	r1, r0
 8002e4a:	6820      	ldr	r0, [r4, #0]
 8002e4c:	f002 fbe8 	bl	8005620 <SDMMC_GetResponse>
  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8002e50:	f3c0 2043 	ubfx	r0, r0, #9, #4
    hsd->State = HAL_SD_STATE_READY;
 8002e54:	2301      	movs	r3, #1
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e56:	63a6      	str	r6, [r4, #56]	; 0x38
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002e58:	3805      	subs	r0, #5
    hsd->State = HAL_SD_STATE_READY;
 8002e5a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8002e5e:	4298      	cmp	r0, r3
 8002e60:	d8e2      	bhi.n	8002e28 <SD_DMARxAbort+0x10>
      hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8002e62:	6820      	ldr	r0, [r4, #0]
 8002e64:	f002 fd46 	bl	80058f4 <SDMMC_CmdStopTransfer>
 8002e68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e6a:	4318      	orrs	r0, r3
 8002e6c:	63a0      	str	r0, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 8002e6e:	4620      	mov	r0, r4
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e72:	b913      	cbnz	r3, 8002e7a <SD_DMARxAbort+0x62>
        HAL_SD_ErrorCallback(hsd);
 8002e74:	f7ff ff9a 	bl	8002dac <HAL_SD_ErrorCallback>
}
 8002e78:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SD_AbortCallback(hsd);
 8002e7a:	f005 fb7f 	bl	800857c <HAL_SD_AbortCallback>
}
 8002e7e:	bd70      	pop	{r4, r5, r6, pc}

08002e80 <HAL_SD_IRQHandler>:
{
 8002e80:	b570      	push	{r4, r5, r6, lr}
 8002e82:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8002e84:	6800      	ldr	r0, [r0, #0]
 8002e86:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002e88:	05db      	lsls	r3, r3, #23
 8002e8a:	d527      	bpl.n	8002edc <HAL_SD_IRQHandler+0x5c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8002e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e90:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002e92:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002e94:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8002e98:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002e9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e9c:	f013 0f08 	tst.w	r3, #8
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002ea0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002ea2:	d05d      	beq.n	8002f60 <HAL_SD_IRQHandler+0xe0>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8002ea4:	079e      	lsls	r6, r3, #30
 8002ea6:	d402      	bmi.n	8002eae <HAL_SD_IRQHandler+0x2e>
 8002ea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eaa:	069d      	lsls	r5, r3, #26
 8002eac:	d506      	bpl.n	8002ebc <HAL_SD_IRQHandler+0x3c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002eae:	f002 fd21 	bl	80058f4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	f040 8099 	bne.w	8002fec <HAL_SD_IRQHandler+0x16c>
 8002eba:	6820      	ldr	r0, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 8002ebc:	2301      	movs	r3, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ebe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8002ec2:	6382      	str	r2, [r0, #56]	; 0x38
        HAL_SD_RxCpltCallback(hsd);
 8002ec4:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 8002ec6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8002eca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ecc:	07d9      	lsls	r1, r3, #31
 8002ece:	d402      	bmi.n	8002ed6 <HAL_SD_IRQHandler+0x56>
 8002ed0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ed2:	079a      	lsls	r2, r3, #30
 8002ed4:	d558      	bpl.n	8002f88 <HAL_SD_IRQHandler+0x108>
        HAL_SD_RxCpltCallback(hsd);
 8002ed6:	f005 fb5d 	bl	8008594 <HAL_SD_RxCpltCallback>
}
 8002eda:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8002edc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ede:	0459      	lsls	r1, r3, #17
 8002ee0:	d455      	bmi.n	8002f8e <HAL_SD_IRQHandler+0x10e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8002ee2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ee4:	041a      	lsls	r2, r3, #16
 8002ee6:	d464      	bmi.n	8002fb2 <HAL_SD_IRQHandler+0x132>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8002ee8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002eea:	f013 0f3a 	tst.w	r3, #58	; 0x3a
 8002eee:	d0f4      	beq.n	8002eda <HAL_SD_IRQHandler+0x5a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8002ef0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ef2:	079b      	lsls	r3, r3, #30
 8002ef4:	d503      	bpl.n	8002efe <HAL_SD_IRQHandler+0x7e>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8002ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8002efe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f00:	071e      	lsls	r6, r3, #28
 8002f02:	d503      	bpl.n	8002f0c <HAL_SD_IRQHandler+0x8c>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT; 
 8002f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f06:	f043 0308 	orr.w	r3, r3, #8
 8002f0a:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8002f0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f0e:	069d      	lsls	r5, r3, #26
 8002f10:	d503      	bpl.n	8002f1a <HAL_SD_IRQHandler+0x9a>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN; 
 8002f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f14:	f043 0320 	orr.w	r3, r3, #32
 8002f18:	63a3      	str	r3, [r4, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8002f1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002f1c:	06d9      	lsls	r1, r3, #27
 8002f1e:	d503      	bpl.n	8002f28 <HAL_SD_IRQHandler+0xa8>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8002f20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f22:	f043 0310 	orr.w	r3, r3, #16
 8002f26:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002f28:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8002f2c:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8002f2e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f30:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 8002f34:	63c3      	str	r3, [r0, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002f36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f38:	061a      	lsls	r2, r3, #24
 8002f3a:	d54c      	bpl.n	8002fd6 <HAL_SD_IRQHandler+0x156>
      if(hsd->hdmatx != NULL)
 8002f3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d05b      	beq.n	8002ffa <HAL_SD_IRQHandler+0x17a>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002f42:	f642 52b1 	movw	r2, #11697	; 0x2db1
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002f46:	4618      	mov	r0, r3
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8002f48:	f6c0 0200 	movt	r2, #2048	; 0x800
 8002f4c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8002f4e:	f7fe fc01 	bl	8001754 <HAL_DMA_Abort_IT>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d0c1      	beq.n	8002eda <HAL_SD_IRQHandler+0x5a>
          SD_DMATxAbort(hsd->hdmatx);
 8002f56:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8002f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMATxAbort(hsd->hdmatx);
 8002f5c:	f7ff bf28 	b.w	8002db0 <SD_DMATxAbort>
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8002f60:	061b      	lsls	r3, r3, #24
 8002f62:	d5ba      	bpl.n	8002eda <HAL_SD_IRQHandler+0x5a>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8002f64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f66:	069e      	lsls	r6, r3, #26
 8002f68:	d459      	bmi.n	800301e <HAL_SD_IRQHandler+0x19e>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET) && ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == RESET))
 8002f6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f6c:	07dd      	lsls	r5, r3, #31
 8002f6e:	d4b4      	bmi.n	8002eda <HAL_SD_IRQHandler+0x5a>
 8002f70:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f72:	0798      	lsls	r0, r3, #30
 8002f74:	d4b1      	bmi.n	8002eda <HAL_SD_IRQHandler+0x5a>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8002f76:	6822      	ldr	r2, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8002f78:	2101      	movs	r1, #1
        HAL_SD_TxCpltCallback(hsd);
 8002f7a:	4620      	mov	r0, r4
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8002f7c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002f7e:	f023 0308 	bic.w	r3, r3, #8
 8002f82:	62d3      	str	r3, [r2, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8002f84:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8002f88:	f005 fafe 	bl	8008588 <HAL_SD_TxCpltCallback>
}
 8002f8c:	bd70      	pop	{r4, r5, r6, pc}
 8002f8e:	6a25      	ldr	r5, [r4, #32]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_TXFIFOHE);
 8002f90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f94:	f105 0620 	add.w	r6, r5, #32
 8002f98:	6383      	str	r3, [r0, #56]	; 0x38
 8002f9a:	e000      	b.n	8002f9e <HAL_SD_IRQHandler+0x11e>
 8002f9c:	6820      	ldr	r0, [r4, #0]
  tmp = (uint32_t*)hsd->pTxBuffPtr;
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8002f9e:	4629      	mov	r1, r5
 8002fa0:	3504      	adds	r5, #4
 8002fa2:	f002 fb2d 	bl	8005600 <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8002fa6:	42ae      	cmp	r6, r5
 8002fa8:	d1f8      	bne.n	8002f9c <HAL_SD_IRQHandler+0x11c>
  }
  
  hsd->pTxBuffPtr += 8;
 8002faa:	6a23      	ldr	r3, [r4, #32]
 8002fac:	3320      	adds	r3, #32
 8002fae:	6223      	str	r3, [r4, #32]
}
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8002fb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXFIFOHF);
 8002fb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fb8:	1f35      	subs	r5, r6, #4
 8002fba:	6383      	str	r3, [r0, #56]	; 0x38
 8002fbc:	361c      	adds	r6, #28
 8002fbe:	e000      	b.n	8002fc2 <HAL_SD_IRQHandler+0x142>
 8002fc0:	6820      	ldr	r0, [r4, #0]
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8002fc2:	f002 fb19 	bl	80055f8 <SDMMC_ReadFIFO>
 8002fc6:	f845 0f04 	str.w	r0, [r5, #4]!
  for(count = 0; count < 8; count++)
 8002fca:	42ae      	cmp	r6, r5
 8002fcc:	d1f8      	bne.n	8002fc0 <HAL_SD_IRQHandler+0x140>
  hsd->pRxBuffPtr += 8;
 8002fce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fd0:	3320      	adds	r3, #32
 8002fd2:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002fd4:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8002fd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	f57f af7e 	bpl.w	8002eda <HAL_SD_IRQHandler+0x5a>
      hsd->State = HAL_SD_STATE_READY;
 8002fde:	2301      	movs	r3, #1
      HAL_SD_ErrorCallback(hsd);
 8002fe0:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 8002fe2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      HAL_SD_ErrorCallback(hsd);
 8002fe6:	f7ff fee1 	bl	8002dac <HAL_SD_ErrorCallback>
}
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
          hsd->ErrorCode |= errorstate;
 8002fec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002fee:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8002ff4:	f7ff feda 	bl	8002dac <HAL_SD_ErrorCallback>
 8002ff8:	e75f      	b.n	8002eba <HAL_SD_IRQHandler+0x3a>
      else if(hsd->hdmarx != NULL)
 8002ffa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ffc:	b1db      	cbz	r3, 8003036 <HAL_SD_IRQHandler+0x1b6>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8002ffe:	f642 6219 	movw	r2, #11801	; 0x2e19
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003002:	4618      	mov	r0, r3
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003004:	f6c0 0200 	movt	r2, #2048	; 0x800
 8003008:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800300a:	f7fe fba3 	bl	8001754 <HAL_DMA_Abort_IT>
 800300e:	2800      	cmp	r0, #0
 8003010:	f43f af63 	beq.w	8002eda <HAL_SD_IRQHandler+0x5a>
          SD_DMARxAbort(hsd->hdmarx);
 8003014:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8003016:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
          SD_DMARxAbort(hsd->hdmarx);
 800301a:	f7ff befd 	b.w	8002e18 <SD_DMARxAbort>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800301e:	f002 fc69 	bl	80058f4 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8003022:	4603      	mov	r3, r0
 8003024:	2800      	cmp	r0, #0
 8003026:	d0a0      	beq.n	8002f6a <HAL_SD_IRQHandler+0xea>
          hsd->ErrorCode |= errorstate;
 8003028:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800302a:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800302c:	4313      	orrs	r3, r2
 800302e:	63a3      	str	r3, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003030:	f7ff febc 	bl	8002dac <HAL_SD_ErrorCallback>
 8003034:	e799      	b.n	8002f6a <HAL_SD_IRQHandler+0xea>
        hsd->State = HAL_SD_STATE_READY;
 8003036:	2201      	movs	r2, #1
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003038:	63a3      	str	r3, [r4, #56]	; 0x38
        HAL_SD_AbortCallback(hsd);
 800303a:	4620      	mov	r0, r4
        hsd->State = HAL_SD_STATE_READY;
 800303c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        HAL_SD_AbortCallback(hsd);
 8003040:	f005 fa9c 	bl	800857c <HAL_SD_AbortCallback>
}
 8003044:	bd70      	pop	{r4, r5, r6, pc}
 8003046:	bf00      	nop

08003048 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8003048:	6e43      	ldr	r3, [r0, #100]	; 0x64
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800304a:	0f9a      	lsrs	r2, r3, #30
{
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800304e:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8003050:	f3c3 6783 	ubfx	r7, r3, #26, #4
  pCSD->Reserved1      = tmp & 0x03;
 8003054:	f3c3 6501 	ubfx	r5, r3, #24, #2
  pCSD->TAAC = (uint8_t)tmp;
 8003058:	f3c3 4407 	ubfx	r4, r3, #16, #8
  pCSD->NSAC = (uint8_t)tmp;
 800305c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8003060:	b2db      	uxtb	r3, r3
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8003062:	704f      	strb	r7, [r1, #1]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8003064:	2600      	movs	r6, #0
  pCSD->Reserved1      = tmp & 0x03;
 8003066:	708d      	strb	r5, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8003068:	70cc      	strb	r4, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 800306a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 800306c:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800306e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8003070:	0e1d      	lsrs	r5, r3, #24
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8003072:	f3c3 5403 	ubfx	r4, r3, #20, #4
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8003076:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800307a:	012d      	lsls	r5, r5, #4
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800307c:	ea4f 1cd2 	mov.w	ip, r2, lsr #7
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8003080:	80cd      	strh	r5, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003082:	f3c3 4503 	ubfx	r5, r3, #16, #4
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8003086:	88cf      	ldrh	r7, [r1, #6]
 8003088:	433c      	orrs	r4, r7
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800308a:	f3c2 1780 	ubfx	r7, r2, #6, #1
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 800308e:	80cc      	strh	r4, [r1, #6]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8003090:	f3c2 1400 	ubfx	r4, r2, #4, #1
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8003094:	720d      	strb	r5, [r1, #8]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8003096:	f3c2 1540 	ubfx	r5, r2, #5, #1
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800309a:	f881 c009 	strb.w	ip, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800309e:	728f      	strb	r7, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 80030a0:	72cd      	strb	r5, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 80030a2:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 80030a4:	734e      	strb	r6, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 80030a6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030a8:	2c00      	cmp	r4, #0
 80030aa:	f040 8088 	bne.w	80031be <HAL_SD_GetCardCSD+0x176>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80030ae:	0292      	lsls	r2, r2, #10
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80030b0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    pCSD->DeviceSize |= (tmp) << 2;
 80030b2:	009b      	lsls	r3, r3, #2
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80030b4:	2501      	movs	r5, #1
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80030b6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80030ba:	0be6      	lsrs	r6, r4, #15
    pCSD->DeviceSize |= (tmp) << 2;
 80030bc:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80030c0:	f3c4 6c02 	ubfx	ip, r4, #24, #3
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 80030c4:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80030c6:	f006 0606 	and.w	r6, r6, #6
    pCSD->DeviceSize |= (tmp) << 2;
 80030ca:	690a      	ldr	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80030cc:	f3c4 5742 	ubfx	r7, r4, #21, #3
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80030d0:	f3c4 6ec2 	ubfx	lr, r4, #27, #3
    pCSD->DeviceSize |= (tmp) << 2;
 80030d4:	431a      	orrs	r2, r3
 80030d6:	610a      	str	r2, [r1, #16]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80030d8:	f3c4 4282 	ubfx	r2, r4, #18, #3
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 80030dc:	690b      	ldr	r3, [r1, #16]
 80030de:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80030e2:	610b      	str	r3, [r1, #16]
 80030e4:	f3c4 2307 	ubfx	r3, r4, #8, #8
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 80030e8:	f881 e014 	strb.w	lr, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80030ec:	f881 c015 	strb.w	ip, [r1, #21]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80030f0:	f3c4 3cc0 	ubfx	ip, r4, #15, #1
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80030f4:	758f      	strb	r7, [r1, #22]
    hsd->SdCard.LogBlockSize = 512;
 80030f6:	f44f 7700 	mov.w	r7, #512	; 0x200
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80030fa:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80030fc:	760e      	strb	r6, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80030fe:	7e0a      	ldrb	r2, [r1, #24]
 8003100:	ea42 020c 	orr.w	r2, r2, ip
 8003104:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8003106:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8003108:	7e0e      	ldrb	r6, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800310a:	442a      	add	r2, r5
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800310c:	3602      	adds	r6, #2
 800310e:	40b2      	lsls	r2, r6
 8003110:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8003112:	7a0e      	ldrb	r6, [r1, #8]
    hsd->SdCard.LogBlockSize = 512;
 8003114:	6607      	str	r7, [r0, #96]	; 0x60
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8003116:	40b5      	lsls	r5, r6
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8003118:	0a6e      	lsrs	r6, r5, #9
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800311a:	6585      	str	r5, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 800311c:	fb02 f206 	mul.w	r2, r2, r6
 8003120:	65c2      	str	r2, [r0, #92]	; 0x5c
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8003122:	005d      	lsls	r5, r3, #1
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8003124:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8003128:	f3c4 17c0 	ubfx	r7, r4, #7, #1
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800312c:	f004 037f 	and.w	r3, r4, #127	; 0x7f
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8003130:	f005 047e 	and.w	r4, r5, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8003134:	764a      	strb	r2, [r1, #25]
  pCSD->Reserved3           = 0;
 8003136:	2500      	movs	r5, #0
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8003138:	768c      	strb	r4, [r1, #26]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800313a:	7e8a      	ldrb	r2, [r1, #26]
  return HAL_OK;
 800313c:	462e      	mov	r6, r5
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800313e:	433a      	orrs	r2, r7
  pCSD->Reserved4 = 1;
 8003140:	2701      	movs	r7, #1
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8003142:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8003144:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8003146:	6f03      	ldr	r3, [r0, #112]	; 0x70
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003148:	0fda      	lsrs	r2, r3, #31
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800314a:	f3c3 7041 	ubfx	r0, r3, #29, #2
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800314e:	0d9c      	lsrs	r4, r3, #22
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8003150:	f3c3 5c40 	ubfx	ip, r3, #21, #1
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8003154:	770a      	strb	r2, [r1, #28]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003156:	f3c3 6282 	ubfx	r2, r3, #26, #3
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800315a:	f004 040c 	and.w	r4, r4, #12
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800315e:	7748      	strb	r0, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8003160:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003162:	f3c3 5081 	ubfx	r0, r3, #22, #2
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8003166:	77cc      	strb	r4, [r1, #31]
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8003168:	f3c3 4400 	ubfx	r4, r3, #16, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800316c:	7fca      	ldrb	r2, [r1, #31]
 800316e:	4302      	orrs	r2, r0
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8003170:	f3c3 30c0 	ubfx	r0, r3, #15, #1
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8003174:	77ca      	strb	r2, [r1, #31]
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8003176:	f3c3 3280 	ubfx	r2, r3, #14, #1
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800317a:	f881 c020 	strb.w	ip, [r1, #32]
  pCSD->Reserved3           = 0;
 800317e:	f881 5021 	strb.w	r5, [r1, #33]	; 0x21
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8003182:	f3c3 3540 	ubfx	r5, r3, #13, #1
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8003186:	f881 4022 	strb.w	r4, [r1, #34]	; 0x22
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800318a:	f3c3 3400 	ubfx	r4, r3, #12, #1
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800318e:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8003192:	f3c3 2081 	ubfx	r0, r3, #10, #2
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8003196:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->ECC              = (tmp & 0x03);
 800319a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800319e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80031a2:	f881 5025 	strb.w	r5, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80031a6:	f881 4026 	strb.w	r4, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80031aa:	f881 0027 	strb.w	r0, [r1, #39]	; 0x27
}
 80031ae:	4630      	mov	r0, r6
  pCSD->ECC              = (tmp & 0x03);
 80031b0:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80031b4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80031b8:	f881 702a 	strb.w	r7, [r1, #42]	; 0x2a
}
 80031bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80031be:	2c01      	cmp	r4, #1
 80031c0:	d00d      	beq.n	80031de <HAL_SD_GetCardCSD+0x196>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80031c2:	6803      	ldr	r3, [r0, #0]
 80031c4:	f240 51ff 	movw	r1, #1535	; 0x5ff
    hsd->State = HAL_SD_STATE_READY;
 80031c8:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80031ca:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031cc:	6b83      	ldr	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 80031ce:	4616      	mov	r6, r2
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031d4:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031d6:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
}
 80031da:	4630      	mov	r0, r6
 80031dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80031de:	041a      	lsls	r2, r3, #16
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80031e0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80031e2:	f44f 7600 	mov.w	r6, #512	; 0x200
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80031e6:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80031ea:	0e23      	lsrs	r3, r4, #24
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80031ec:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80031ee:	f3c4 4207 	ubfx	r2, r4, #16, #8
    pCSD->DeviceSize |= (tmp << 8);
 80031f2:	690d      	ldr	r5, [r1, #16]
 80031f4:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
 80031f8:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80031fc:	610d      	str	r5, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 80031fe:	690d      	ldr	r5, [r1, #16]
 8003200:	432a      	orrs	r2, r5
 8003202:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8003204:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8003206:	6586      	str	r6, [r0, #88]	; 0x58
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8003208:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800320a:	6606      	str	r6, [r0, #96]	; 0x60
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 800320c:	0292      	lsls	r2, r2, #10
 800320e:	6542      	str	r2, [r0, #84]	; 0x54
 8003210:	65c2      	str	r2, [r0, #92]	; 0x5c
 8003212:	e786      	b.n	8003122 <HAL_SD_GetCardCSD+0xda>

08003214 <HAL_SD_InitCard>:
{
 8003214:	b570      	push	{r4, r5, r6, lr}
 8003216:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8003218:	2500      	movs	r5, #0
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800321a:	2176      	movs	r1, #118	; 0x76
{
 800321c:	4604      	mov	r4, r0
  SDMMC_Init(hsd->Instance, Init);
 800321e:	aa0a      	add	r2, sp, #40	; 0x28
 8003220:	6806      	ldr	r6, [r0, #0]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8003222:	950a      	str	r5, [sp, #40]	; 0x28
  SDMMC_Init(hsd->Instance, Init);
 8003224:	ab07      	add	r3, sp, #28
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003226:	9509      	str	r5, [sp, #36]	; 0x24
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8003228:	e9cd 510b 	strd	r5, r1, [sp, #44]	; 0x2c
  SDMMC_Init(hsd->Instance, Init);
 800322c:	ca07      	ldmia	r2, {r0, r1, r2}
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800322e:	e9cd 5507 	strd	r5, r5, [sp, #28]
  SDMMC_Init(hsd->Instance, Init);
 8003232:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003236:	4630      	mov	r0, r6
 8003238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800323a:	f002 f9bf 	bl	80055bc <SDMMC_Init>
  __HAL_SD_DISABLE(hsd); 
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 8003242:	4618      	mov	r0, r3
  __HAL_SD_DISABLE(hsd); 
 8003244:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003248:	605a      	str	r2, [r3, #4]
  SDMMC_PowerState_ON(hsd->Instance);
 800324a:	f002 f9df 	bl	800560c <SDMMC_PowerState_ON>
  __HAL_SD_ENABLE(hsd);
 800324e:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(2);
 8003250:	2002      	movs	r0, #2
  __HAL_SD_ENABLE(hsd);
 8003252:	6853      	ldr	r3, [r2, #4]
 8003254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003258:	6053      	str	r3, [r2, #4]
  HAL_Delay(2);
 800325a:	f7fd fe97 	bl	8000f8c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800325e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8003260:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003262:	f002 fbcd 	bl	8005a00 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003266:	4605      	mov	r5, r0
 8003268:	b138      	cbz	r0, 800327a <HAL_SD_InitCard+0x66>
    hsd->State = HAL_SD_STATE_READY;
 800326a:	2001      	movs	r0, #1
 800326c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003270:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003272:	431d      	orrs	r5, r3
 8003274:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8003276:	b018      	add	sp, #96	; 0x60
 8003278:	bd70      	pop	{r4, r5, r6, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	f002 fbee 	bl	8005a5c <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 8003280:	2800      	cmp	r0, #0
 8003282:	d04b      	beq.n	800331c <HAL_SD_InitCard+0x108>
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003284:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003288:	64a5      	str	r5, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800328a:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800328c:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	42b3      	cmp	r3, r6
 8003292:	9206      	str	r2, [sp, #24]
 8003294:	f000 80b5 	beq.w	8003402 <HAL_SD_InitCard+0x1ee>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003298:	6820      	ldr	r0, [r4, #0]
 800329a:	f002 fc1d 	bl	8005ad8 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 800329e:	2800      	cmp	r0, #0
 80032a0:	f040 80b2 	bne.w	8003408 <HAL_SD_InitCard+0x1f4>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80032a4:	4601      	mov	r1, r0
 80032a6:	6820      	ldr	r0, [r4, #0]
 80032a8:	f002 fc58 	bl	8005b5c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80032ac:	2800      	cmp	r0, #0
 80032ae:	f040 80ab 	bne.w	8003408 <HAL_SD_InitCard+0x1f4>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80032b2:	4601      	mov	r1, r0
 80032b4:	6820      	ldr	r0, [r4, #0]
 80032b6:	f002 f9b3 	bl	8005620 <SDMMC_GetResponse>
    while(validvoltage == 0)
 80032ba:	2800      	cmp	r0, #0
 80032bc:	dae5      	bge.n	800328a <HAL_SD_InitCard+0x76>
    hsd->SdCard.CardType = CARD_SDSC;
 80032be:	2300      	movs	r3, #0
 80032c0:	6463      	str	r3, [r4, #68]	; 0x44
  uint16_t sd_rca = 1;
 80032c2:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80032c4:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 80032c6:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80032ca:	f002 f9a5 	bl	8005618 <SDMMC_GetPowerState>
 80032ce:	2800      	cmp	r0, #0
 80032d0:	f000 8094 	beq.w	80033fc <HAL_SD_InitCard+0x1e8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80032d4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80032d6:	6823      	ldr	r3, [r4, #0]
 80032d8:	2a03      	cmp	r2, #3
 80032da:	d142      	bne.n	8003362 <HAL_SD_InitCard+0x14e>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80032dc:	4618      	mov	r0, r3
 80032de:	2104      	movs	r1, #4
 80032e0:	f002 f99e 	bl	8005620 <SDMMC_GetResponse>
  HAL_SD_GetCardCSD(hsd, &CSD);
 80032e4:	a90d      	add	r1, sp, #52	; 0x34
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80032e6:	0d03      	lsrs	r3, r0, #20
  HAL_SD_GetCardCSD(hsd, &CSD);
 80032e8:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80032ea:	64e3      	str	r3, [r4, #76]	; 0x4c
  HAL_SD_GetCardCSD(hsd, &CSD);
 80032ec:	f7ff feac 	bl	8003048 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80032f0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80032f2:	2300      	movs	r3, #0
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	0412      	lsls	r2, r2, #16
 80032f8:	f002 fb40 	bl	800597c <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80032fc:	4605      	mov	r5, r0
 80032fe:	2800      	cmp	r0, #0
 8003300:	d1b3      	bne.n	800326a <HAL_SD_InitCard+0x56>
  SDMMC_Init(hsd->Instance, hsd->Init);
 8003302:	1d23      	adds	r3, r4, #4
 8003304:	f854 6b10 	ldr.w	r6, [r4], #16
 8003308:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800330c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8003310:	4630      	mov	r0, r6
 8003312:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003314:	f002 f952 	bl	80055bc <SDMMC_Init>
  return HAL_OK;
 8003318:	4628      	mov	r0, r5
 800331a:	e7ac      	b.n	8003276 <HAL_SD_InitCard+0x62>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800331c:	2301      	movs	r3, #1
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 800331e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003322:	64a3      	str	r3, [r4, #72]	; 0x48
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003324:	9b06      	ldr	r3, [sp, #24]
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003326:	2100      	movs	r1, #0
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	42b3      	cmp	r3, r6
 800332c:	9206      	str	r2, [sp, #24]
 800332e:	d068      	beq.n	8003402 <HAL_SD_InitCard+0x1ee>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003330:	6820      	ldr	r0, [r4, #0]
 8003332:	f002 fbd1 	bl	8005ad8 <SDMMC_CmdAppCommand>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003336:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
      if(errorstate != HAL_SD_ERROR_NONE)
 800333a:	4605      	mov	r5, r0
 800333c:	2800      	cmp	r0, #0
 800333e:	d194      	bne.n	800326a <HAL_SD_InitCard+0x56>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8003340:	6820      	ldr	r0, [r4, #0]
 8003342:	f002 fc0b 	bl	8005b5c <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8003346:	4605      	mov	r5, r0
 8003348:	2800      	cmp	r0, #0
 800334a:	d18e      	bne.n	800326a <HAL_SD_InitCard+0x56>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800334c:	4601      	mov	r1, r0
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	f002 f966 	bl	8005620 <SDMMC_GetResponse>
    while(validvoltage == 0)
 8003354:	2800      	cmp	r0, #0
 8003356:	dae5      	bge.n	8003324 <HAL_SD_InitCard+0x110>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003358:	0043      	lsls	r3, r0, #1
 800335a:	d5b0      	bpl.n	80032be <HAL_SD_InitCard+0xaa>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800335c:	2301      	movs	r3, #1
 800335e:	6463      	str	r3, [r4, #68]	; 0x44
 8003360:	e7af      	b.n	80032c2 <HAL_SD_InitCard+0xae>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003362:	4618      	mov	r0, r3
 8003364:	f002 fc34 	bl	8005bd0 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8003368:	4605      	mov	r5, r0
 800336a:	2800      	cmp	r0, #0
 800336c:	f47f af7d 	bne.w	800326a <HAL_SD_InitCard+0x56>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003370:	4601      	mov	r1, r0
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	f002 f954 	bl	8005620 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003378:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800337a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	f002 f94f 	bl	8005620 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003382:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003384:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003386:	6820      	ldr	r0, [r4, #0]
 8003388:	f002 f94a 	bl	8005620 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800338c:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800338e:	67e0      	str	r0, [r4, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003390:	6820      	ldr	r0, [r4, #0]
 8003392:	f002 f945 	bl	8005620 <SDMMC_GetResponse>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8003396:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003398:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800339c:	2b03      	cmp	r3, #3
 800339e:	d036      	beq.n	800340e <HAL_SD_InitCard+0x1fa>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80033a0:	f10d 0116 	add.w	r1, sp, #22
 80033a4:	6820      	ldr	r0, [r4, #0]
 80033a6:	f002 fc8f 	bl	8005cc8 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 80033aa:	4605      	mov	r5, r0
 80033ac:	2800      	cmp	r0, #0
 80033ae:	f47f af5c 	bne.w	800326a <HAL_SD_InitCard+0x56>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80033b2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	2a03      	cmp	r2, #3
 80033b8:	d090      	beq.n	80032dc <HAL_SD_InitCard+0xc8>
    hsd->SdCard.RelCardAdd = sd_rca;
 80033ba:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033be:	4618      	mov	r0, r3
    hsd->SdCard.RelCardAdd = sd_rca;
 80033c0:	6521      	str	r1, [r4, #80]	; 0x50
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80033c2:	0409      	lsls	r1, r1, #16
 80033c4:	f002 fc42 	bl	8005c4c <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80033c8:	4605      	mov	r5, r0
 80033ca:	2800      	cmp	r0, #0
 80033cc:	f47f af4d 	bne.w	800326a <HAL_SD_InitCard+0x56>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80033d0:	4601      	mov	r1, r0
 80033d2:	6820      	ldr	r0, [r4, #0]
 80033d4:	f002 f924 	bl	8005620 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80033d8:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80033da:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80033dc:	6820      	ldr	r0, [r4, #0]
 80033de:	f002 f91f 	bl	8005620 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80033e2:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80033e4:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80033e6:	6820      	ldr	r0, [r4, #0]
 80033e8:	f002 f91a 	bl	8005620 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80033ec:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80033ee:	66e0      	str	r0, [r4, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80033f0:	6820      	ldr	r0, [r4, #0]
 80033f2:	f002 f915 	bl	8005620 <SDMMC_GetResponse>
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	6720      	str	r0, [r4, #112]	; 0x70
 80033fa:	e76f      	b.n	80032dc <HAL_SD_InitCard+0xc8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033fc:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8003400:	e733      	b.n	800326a <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003402:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 8003406:	e730      	b.n	800326a <HAL_SD_InitCard+0x56>
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003408:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800340c:	e72d      	b.n	800326a <HAL_SD_InitCard+0x56>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	e764      	b.n	80032dc <HAL_SD_InitCard+0xc8>
 8003412:	bf00      	nop

08003414 <HAL_SD_Init>:
  if(hsd == NULL)
 8003414:	b1c0      	cbz	r0, 8003448 <HAL_SD_Init+0x34>
  if(hsd->State == HAL_SD_STATE_RESET)
 8003416:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
{
 800341a:	b510      	push	{r4, lr}
  if(hsd->State == HAL_SD_STATE_RESET)
 800341c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003420:	4604      	mov	r4, r0
 8003422:	b16b      	cbz	r3, 8003440 <HAL_SD_Init+0x2c>
  hsd->State = HAL_SD_STATE_BUSY;
 8003424:	2303      	movs	r3, #3
  HAL_SD_InitCard(hsd);
 8003426:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 8003428:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  HAL_SD_InitCard(hsd);
 800342c:	f7ff fef2 	bl	8003214 <HAL_SD_InitCard>
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003430:	2300      	movs	r3, #0
  hsd->State = HAL_SD_STATE_READY;
 8003432:	2201      	movs	r2, #1
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8003434:	63a3      	str	r3, [r4, #56]	; 0x38
  return HAL_OK;
 8003436:	4618      	mov	r0, r3
  hsd->Context = SD_CONTEXT_NONE;
 8003438:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 800343a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800343e:	bd10      	pop	{r4, pc}
    hsd->Lock = HAL_UNLOCKED;
 8003440:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8003442:	f005 fda7 	bl	8008f94 <HAL_SD_MspInit>
 8003446:	e7ed      	b.n	8003424 <HAL_SD_Init+0x10>
    return HAL_ERROR;
 8003448:	2001      	movs	r0, #1
}
 800344a:	4770      	bx	lr

0800344c <HAL_SD_GetCardInfo>:
{
 800344c:	4603      	mov	r3, r0
}
 800344e:	2000      	movs	r0, #0
{
 8003450:	b430      	push	{r4, r5}
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003452:	e9d3 2511 	ldrd	r2, r5, [r3, #68]	; 0x44
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003456:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003458:	600a      	str	r2, [r1, #0]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800345a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800345c:	604d      	str	r5, [r1, #4]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800345e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003460:	608c      	str	r4, [r1, #8]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003462:	6d9c      	ldr	r4, [r3, #88]	; 0x58
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003464:	60ca      	str	r2, [r1, #12]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003466:	e9d3 2317 	ldrd	r2, r3, [r3, #92]	; 0x5c
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800346a:	e9c1 5404 	strd	r5, r4, [r1, #16]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800346e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8003472:	bc30      	pop	{r4, r5}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop

08003478 <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003478:	6d01      	ldr	r1, [r0, #80]	; 0x50
{
 800347a:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800347c:	0409      	lsls	r1, r1, #16
{
 800347e:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8003480:	6800      	ldr	r0, [r0, #0]
 8003482:	f002 fc83 	bl	8005d8c <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8003486:	4601      	mov	r1, r0
 8003488:	b120      	cbz	r0, 8003494 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800348a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800348c:	2000      	movs	r0, #0
 800348e:	4319      	orrs	r1, r3
 8003490:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8003492:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	f002 f8c3 	bl	8005620 <SDMMC_GetResponse>
 800349a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800349e:	bd10      	pop	{r4, pc}

080034a0 <SPI_EndRxTxTransaction.constprop.10>:
  * @param  hspi SPI handle
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4604      	mov	r4, r0
 80034a4:	460d      	mov	r5, r1
 80034a6:	e004      	b.n	80034b2 <SPI_EndRxTxTransaction.constprop.10+0x12>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034a8:	f7fd fd6a 	bl	8000f80 <HAL_GetTick>
 80034ac:	1b40      	subs	r0, r0, r5
 80034ae:	2863      	cmp	r0, #99	; 0x63
 80034b0:	d81b      	bhi.n	80034ea <SPI_EndRxTxTransaction.constprop.10+0x4a>
  while ((hspi->Instance->SR & Fifo) != State)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 80034ba:	d1f5      	bne.n	80034a8 <SPI_EndRxTxTransaction.constprop.10+0x8>
 80034bc:	e005      	b.n	80034ca <SPI_EndRxTxTransaction.constprop.10+0x2a>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034be:	f7fd fd5f 	bl	8000f80 <HAL_GetTick>
 80034c2:	1b40      	subs	r0, r0, r5
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034c4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034c6:	2863      	cmp	r0, #99	; 0x63
 80034c8:	d810      	bhi.n	80034ec <SPI_EndRxTxTransaction.constprop.10+0x4c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	0612      	lsls	r2, r2, #24
 80034ce:	d4f6      	bmi.n	80034be <SPI_EndRxTxTransaction.constprop.10+0x1e>
 80034d0:	e006      	b.n	80034e0 <SPI_EndRxTxTransaction.constprop.10+0x40>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80034d2:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034d4:	f7fd fd54 	bl	8000f80 <HAL_GetTick>
 80034d8:	1b40      	subs	r0, r0, r5
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034da:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80034dc:	2863      	cmp	r0, #99	; 0x63
 80034de:	d805      	bhi.n	80034ec <SPI_EndRxTxTransaction.constprop.10+0x4c>
  while ((hspi->Instance->SR & Fifo) != State)
 80034e0:	6898      	ldr	r0, [r3, #8]
 80034e2:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 80034e6:	d1f4      	bne.n	80034d2 <SPI_EndRxTxTransaction.constprop.10+0x32>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80034e8:	bd38      	pop	{r3, r4, r5, pc}
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ea:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ec:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ee:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034f8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fa:	d017      	beq.n	800352c <SPI_EndRxTxTransaction.constprop.10+0x8c>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80034fe:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003502:	d107      	bne.n	8003514 <SPI_EndRxTxTransaction.constprop.10+0x74>
          SPI_RESET_CRC(hspi);
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003512:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003514:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 8003516:	2200      	movs	r2, #0
    return HAL_TIMEOUT;
 8003518:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800351a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351e:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8003520:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	6623      	str	r3, [r4, #96]	; 0x60
}
 800352a:	bd38      	pop	{r3, r4, r5, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800352c:	68a2      	ldr	r2, [r4, #8]
 800352e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003532:	d002      	beq.n	800353a <SPI_EndRxTxTransaction.constprop.10+0x9a>
 8003534:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003538:	d1e0      	bne.n	80034fc <SPI_EndRxTxTransaction.constprop.10+0x5c>
          __HAL_SPI_DISABLE(hspi);
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	e7db      	b.n	80034fc <SPI_EndRxTxTransaction.constprop.10+0x5c>

08003544 <SPI_EndRxTxTransaction>:
{
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
 800354a:	4616      	mov	r6, r2
 800354c:	1c68      	adds	r0, r5, #1
  while ((hspi->Instance->SR & Fifo) != State)
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	d110      	bne.n	8003574 <SPI_EndRxTxTransaction+0x30>
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 8003558:	d1fb      	bne.n	8003552 <SPI_EndRxTxTransaction+0xe>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	0611      	lsls	r1, r2, #24
 800355e:	d504      	bpl.n	800356a <SPI_EndRxTxTransaction+0x26>
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	0611      	lsls	r1, r2, #24
 8003564:	d4f9      	bmi.n	800355a <SPI_EndRxTxTransaction+0x16>
 8003566:	e000      	b.n	800356a <SPI_EndRxTxTransaction+0x26>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003568:	7b1a      	ldrb	r2, [r3, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 800356a:	6898      	ldr	r0, [r3, #8]
 800356c:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 8003570:	d1fa      	bne.n	8003568 <SPI_EndRxTxTransaction+0x24>
}
 8003572:	bd70      	pop	{r4, r5, r6, pc}
  while ((hspi->Instance->SR & Fifo) != State)
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	f412 5fc0 	tst.w	r2, #6144	; 0x1800
 800357a:	d02b      	beq.n	80035d4 <SPI_EndRxTxTransaction+0x90>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800357c:	f7fd fd00 	bl	8000f80 <HAL_GetTick>
 8003580:	1b80      	subs	r0, r0, r6
 8003582:	4285      	cmp	r5, r0
 8003584:	d8e2      	bhi.n	800354c <SPI_EndRxTxTransaction+0x8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003586:	6823      	ldr	r3, [r4, #0]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003588:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800358a:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358c:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003590:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003594:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003596:	d02d      	beq.n	80035f4 <SPI_EndRxTxTransaction+0xb0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003598:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800359a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800359e:	d107      	bne.n	80035b0 <SPI_EndRxTxTransaction+0x6c>
          SPI_RESET_CRC(hspi);
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035ae:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80035b0:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 80035b2:	2200      	movs	r2, #0
    return HAL_TIMEOUT;
 80035b4:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 80035b6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 80035bc:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035c0:	f043 0320 	orr.w	r3, r3, #32
 80035c4:	6623      	str	r3, [r4, #96]	; 0x60
}
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035c8:	f7fd fcda 	bl	8000f80 <HAL_GetTick>
 80035cc:	1b80      	subs	r0, r0, r6
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ce:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035d0:	4285      	cmp	r5, r0
 80035d2:	d9d9      	bls.n	8003588 <SPI_EndRxTxTransaction+0x44>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	0612      	lsls	r2, r2, #24
 80035d8:	d4f6      	bmi.n	80035c8 <SPI_EndRxTxTransaction+0x84>
 80035da:	e006      	b.n	80035ea <SPI_EndRxTxTransaction+0xa6>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80035dc:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035de:	f7fd fccf 	bl	8000f80 <HAL_GetTick>
 80035e2:	1b80      	subs	r0, r0, r6
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035e4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80035e6:	4285      	cmp	r5, r0
 80035e8:	d9ce      	bls.n	8003588 <SPI_EndRxTxTransaction+0x44>
  while ((hspi->Instance->SR & Fifo) != State)
 80035ea:	6898      	ldr	r0, [r3, #8]
 80035ec:	f410 60c0 	ands.w	r0, r0, #1536	; 0x600
 80035f0:	d1f4      	bne.n	80035dc <SPI_EndRxTxTransaction+0x98>
}
 80035f2:	bd70      	pop	{r4, r5, r6, pc}
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035f4:	68a2      	ldr	r2, [r4, #8]
 80035f6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80035fa:	d002      	beq.n	8003602 <SPI_EndRxTxTransaction+0xbe>
 80035fc:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003600:	d1ca      	bne.n	8003598 <SPI_EndRxTxTransaction+0x54>
          __HAL_SPI_DISABLE(hspi);
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	e7c5      	b.n	8003598 <SPI_EndRxTxTransaction+0x54>

0800360c <HAL_SPI_Init>:
  if (hspi == NULL)
 800360c:	2800      	cmp	r0, #0
 800360e:	d05d      	beq.n	80036cc <HAL_SPI_Init+0xc0>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003610:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003612:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
{
 8003616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800361a:	6282      	str	r2, [r0, #40]	; 0x28
 800361c:	4604      	mov	r4, r0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800361e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003622:	2b00      	cmp	r3, #0
 8003624:	d04d      	beq.n	80036c2 <HAL_SPI_Init+0xb6>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003626:	68e7      	ldr	r7, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003628:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800362a:	6822      	ldr	r2, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800362c:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 8003630:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003634:	f427 6100 	bic.w	r1, r7, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 8003638:	6813      	ldr	r3, [r2, #0]
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800363a:	bf94      	ite	ls
 800363c:	f44f 5580 	movls.w	r5, #4096	; 0x1000
 8003640:	2500      	movhi	r5, #0
  __HAL_SPI_DISABLE(hspi);
 8003642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003646:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800364a:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800364c:	d135      	bne.n	80036ba <HAL_SPI_Init+0xae>
 800364e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003650:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003652:	b92b      	cbnz	r3, 8003660 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003654:	f5b7 6fe0 	cmp.w	r7, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003658:	bf8c      	ite	hi
 800365a:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800365c:	2301      	movls	r3, #1
 800365e:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003660:	68a1      	ldr	r1, [r4, #8]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003662:	f04f 0800 	mov.w	r8, #0
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	6920      	ldr	r0, [r4, #16]
 800366a:	430b      	orrs	r3, r1
 800366c:	6961      	ldr	r1, [r4, #20]
 800366e:	4303      	orrs	r3, r0
 8003670:	430b      	orrs	r3, r1
 8003672:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8003676:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003678:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800367a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800367e:	f400 7e00 	and.w	lr, r0, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003682:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003684:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003686:	f00c 0c04 	and.w	ip, ip, #4
  return HAL_OK;
 800368a:	4640      	mov	r0, r8
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800368c:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800368e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003690:	430f      	orrs	r7, r1
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8003692:	ea43 030e 	orr.w	r3, r3, lr
  hspi->State     = HAL_SPI_STATE_READY;
 8003696:	f04f 0e01 	mov.w	lr, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800369a:	ea47 070c 	orr.w	r7, r7, ip
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800369e:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036a0:	433d      	orrs	r5, r7
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80036a2:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80036a4:	6055      	str	r5, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036a6:	69d3      	ldr	r3, [r2, #28]
 80036a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ac:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ae:	f8c4 8060 	str.w	r8, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036b2:	f884 e05d 	strb.w	lr, [r4, #93]	; 0x5d
}
 80036b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	461e      	mov	r6, r3
 80036be:	62a3      	str	r3, [r4, #40]	; 0x28
 80036c0:	e7c6      	b.n	8003650 <HAL_SPI_Init+0x44>
    hspi->Lock = HAL_UNLOCKED;
 80036c2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80036c6:	f005 fd7b 	bl	80091c0 <HAL_SPI_MspInit>
 80036ca:	e7ac      	b.n	8003626 <HAL_SPI_Init+0x1a>
    return HAL_ERROR;
 80036cc:	2001      	movs	r0, #1
}
 80036ce:	4770      	bx	lr

080036d0 <HAL_SPI_Transmit>:
{
 80036d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hspi);
 80036d4:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
{
 80036d8:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 80036da:	2c01      	cmp	r4, #1
 80036dc:	f000 8082 	beq.w	80037e4 <HAL_SPI_Transmit+0x114>
 80036e0:	461d      	mov	r5, r3
 80036e2:	2301      	movs	r3, #1
 80036e4:	4604      	mov	r4, r0
 80036e6:	4617      	mov	r7, r2
 80036e8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 80036ec:	4688      	mov	r8, r1
  tickstart = HAL_GetTick();
 80036ee:	f7fd fc47 	bl	8000f80 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80036f2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 80036f6:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d009      	beq.n	8003710 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 80036fc:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80036fe:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003700:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003702:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003706:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800370a:	b002      	add	sp, #8
 800370c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003710:	f1b8 0f00 	cmp.w	r8, #0
 8003714:	d06a      	beq.n	80037ec <HAL_SPI_Transmit+0x11c>
 8003716:	fab7 f387 	clz	r3, r7
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	2b00      	cmp	r3, #0
 800371e:	d165      	bne.n	80037ec <HAL_SPI_Transmit+0x11c>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003720:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003722:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003724:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003726:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800372a:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800372e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003732:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003734:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003738:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800373a:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800373c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 8003740:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8003744:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003746:	d103      	bne.n	8003750 <HAL_SPI_Transmit+0x80>
    SPI_1LINE_TX(hspi);
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800374e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	0651      	lsls	r1, r2, #25
 8003754:	d403      	bmi.n	800375e <HAL_SPI_Transmit+0x8e>
    __HAL_SPI_ENABLE(hspi);
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	f1a7 0201 	sub.w	r2, r7, #1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003762:	68e1      	ldr	r1, [r4, #12]
 8003764:	6867      	ldr	r7, [r4, #4]
 8003766:	fab2 f282 	clz	r2, r2
 800376a:	0952      	lsrs	r2, r2, #5
 800376c:	2f00      	cmp	r7, #0
 800376e:	bf08      	it	eq
 8003770:	2201      	moveq	r2, #1
 8003772:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003776:	d954      	bls.n	8003822 <HAL_SPI_Transmit+0x152>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003778:	b142      	cbz	r2, 800378c <HAL_SPI_Transmit+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800377a:	4641      	mov	r1, r8
 800377c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003780:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003782:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003784:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003786:	3b01      	subs	r3, #1
 8003788:	b29b      	uxth	r3, r3
 800378a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800378c:	1c6b      	adds	r3, r5, #1
 800378e:	d12f      	bne.n	80037f0 <HAL_SPI_Transmit+0x120>
    while (hspi->TxXferCount > 0U)
 8003790:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003792:	b292      	uxth	r2, r2
 8003794:	b182      	cbz	r2, 80037b8 <HAL_SPI_Transmit+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	0797      	lsls	r7, r2, #30
 800379c:	d53e      	bpl.n	800381c <HAL_SPI_Transmit+0x14c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800379e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80037a0:	f832 1b02 	ldrh.w	r1, [r2], #2
 80037a4:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 80037a6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037a8:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80037aa:	3b01      	subs	r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80037b0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80037b2:	b292      	uxth	r2, r2
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	d1ee      	bne.n	8003796 <HAL_SPI_Transmit+0xc6>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037b8:	4632      	mov	r2, r6
 80037ba:	4629      	mov	r1, r5
 80037bc:	4620      	mov	r0, r4
 80037be:	f7ff fec1 	bl	8003544 <SPI_EndRxTxTransaction>
 80037c2:	b108      	cbz	r0, 80037c8 <HAL_SPI_Transmit+0xf8>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037c4:	2320      	movs	r3, #32
 80037c6:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037c8:	68a3      	ldr	r3, [r4, #8]
 80037ca:	b933      	cbnz	r3, 80037da <HAL_SPI_Transmit+0x10a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	68d3      	ldr	r3, [r2, #12]
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6893      	ldr	r3, [r2, #8]
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037da:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 80037dc:	3000      	adds	r0, #0
 80037de:	bf18      	it	ne
 80037e0:	2001      	movne	r0, #1
error:
 80037e2:	e78c      	b.n	80036fe <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 80037e4:	2002      	movs	r0, #2
}
 80037e6:	b002      	add	sp, #8
 80037e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorcode = HAL_ERROR;
 80037ec:	2001      	movs	r0, #1
 80037ee:	e786      	b.n	80036fe <HAL_SPI_Transmit+0x2e>
    while (hspi->TxXferCount > 0U)
 80037f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0df      	beq.n	80037b8 <HAL_SPI_Transmit+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037f8:	6823      	ldr	r3, [r4, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	0792      	lsls	r2, r2, #30
 80037fe:	d568      	bpl.n	80038d2 <HAL_SPI_Transmit+0x202>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003800:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003802:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003806:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8003808:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800380a:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800380c:	3b01      	subs	r3, #1
 800380e:	b29b      	uxth	r3, r3
 8003810:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003812:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1ee      	bne.n	80037f8 <HAL_SPI_Transmit+0x128>
 800381a:	e7cd      	b.n	80037b8 <HAL_SPI_Transmit+0xe8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381c:	f7fd fbb0 	bl	8000f80 <HAL_GetTick>
 8003820:	e7b6      	b.n	8003790 <HAL_SPI_Transmit+0xc0>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003822:	b15a      	cbz	r2, 800383c <HAL_SPI_Transmit+0x16c>
      if (hspi->TxXferCount > 1U)
 8003824:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003826:	2a01      	cmp	r2, #1
 8003828:	d960      	bls.n	80038ec <HAL_SPI_Transmit+0x21c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800382a:	4641      	mov	r1, r8
 800382c:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003830:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8003832:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003834:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003836:	3b02      	subs	r3, #2
 8003838:	b29b      	uxth	r3, r3
 800383a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800383c:	1c69      	adds	r1, r5, #1
 800383e:	d128      	bne.n	8003892 <HAL_SPI_Transmit+0x1c2>
    while (hspi->TxXferCount > 0U)
 8003840:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003842:	b292      	uxth	r2, r2
 8003844:	2a00      	cmp	r2, #0
 8003846:	d0b7      	beq.n	80037b8 <HAL_SPI_Transmit+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	0792      	lsls	r2, r2, #30
 800384e:	d514      	bpl.n	800387a <HAL_SPI_Transmit+0x1aa>
        if (hspi->TxXferCount > 1U)
 8003850:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003852:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003854:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003856:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 8003858:	d931      	bls.n	80038be <HAL_SPI_Transmit+0x1ee>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800385e:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 8003860:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003862:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003864:	3b02      	subs	r3, #2
 8003866:	b29b      	uxth	r3, r3
 8003868:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800386a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800386c:	b292      	uxth	r2, r2
 800386e:	2a00      	cmp	r2, #0
 8003870:	d0a2      	beq.n	80037b8 <HAL_SPI_Transmit+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	689a      	ldr	r2, [r3, #8]
 8003876:	0792      	lsls	r2, r2, #30
 8003878:	d4ea      	bmi.n	8003850 <HAL_SPI_Transmit+0x180>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800387a:	f7fd fb81 	bl	8000f80 <HAL_GetTick>
 800387e:	e7df      	b.n	8003840 <HAL_SPI_Transmit+0x170>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003880:	780a      	ldrb	r2, [r1, #0]
 8003882:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8003884:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8003886:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003888:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800388a:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800388c:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800388e:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003890:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003892:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d08e      	beq.n	80037b8 <HAL_SPI_Transmit+0xe8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	0790      	lsls	r0, r2, #30
 80038a0:	d51e      	bpl.n	80038e0 <HAL_SPI_Transmit+0x210>
        if (hspi->TxXferCount > 1U)
 80038a2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80038a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80038a6:	2a01      	cmp	r2, #1
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038a8:	460a      	mov	r2, r1
        if (hspi->TxXferCount > 1U)
 80038aa:	d9e9      	bls.n	8003880 <HAL_SPI_Transmit+0x1b0>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ac:	f832 1b02 	ldrh.w	r1, [r2], #2
 80038b0:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 80038b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b4:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80038b6:	3b02      	subs	r3, #2
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80038bc:	e7e9      	b.n	8003892 <HAL_SPI_Transmit+0x1c2>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038be:	780a      	ldrb	r2, [r1, #0]
 80038c0:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80038c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 80038c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80038c6:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 80038c8:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 80038ca:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 80038cc:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80038ce:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80038d0:	e7b6      	b.n	8003840 <HAL_SPI_Transmit+0x170>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d2:	f7fd fb55 	bl	8000f80 <HAL_GetTick>
 80038d6:	1b80      	subs	r0, r0, r6
 80038d8:	42a8      	cmp	r0, r5
 80038da:	d389      	bcc.n	80037f0 <HAL_SPI_Transmit+0x120>
          errorcode = HAL_TIMEOUT;
 80038dc:	2003      	movs	r0, #3
 80038de:	e70e      	b.n	80036fe <HAL_SPI_Transmit+0x2e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e0:	f7fd fb4e 	bl	8000f80 <HAL_GetTick>
 80038e4:	1b80      	subs	r0, r0, r6
 80038e6:	42a8      	cmp	r0, r5
 80038e8:	d2f8      	bcs.n	80038dc <HAL_SPI_Transmit+0x20c>
 80038ea:	e7d2      	b.n	8003892 <HAL_SPI_Transmit+0x1c2>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038ec:	f898 2000 	ldrb.w	r2, [r8]
 80038f0:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80038f2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 80038f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80038f6:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 80038f8:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 80038fa:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 80038fc:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80038fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003900:	e79c      	b.n	800383c <HAL_SPI_Transmit+0x16c>
 8003902:	bf00      	nop

08003904 <HAL_SPI_Receive>:
{
 8003904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003908:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800390a:	6840      	ldr	r0, [r0, #4]
{
 800390c:	461d      	mov	r5, r3
 800390e:	4688      	mov	r8, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003910:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
{
 8003914:	4617      	mov	r7, r2
 8003916:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800391a:	d016      	beq.n	800394a <HAL_SPI_Receive+0x46>
  __HAL_LOCK(hspi);
 800391c:	2b01      	cmp	r3, #1
 800391e:	f000 80ae 	beq.w	8003a7e <HAL_SPI_Receive+0x17a>
 8003922:	2301      	movs	r3, #1
 8003924:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003928:	f7fd fb2a 	bl	8000f80 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800392c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8003930:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003932:	2b01      	cmp	r3, #1
 8003934:	f000 80a6 	beq.w	8003a84 <HAL_SPI_Receive+0x180>
    errorcode = HAL_BUSY;
 8003938:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800393a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800393c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800393e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003942:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800394a:	68a2      	ldr	r2, [r4, #8]
 800394c:	2a00      	cmp	r2, #0
 800394e:	d1e5      	bne.n	800391c <HAL_SPI_Receive+0x18>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003950:	2204      	movs	r2, #4
  __HAL_LOCK(hspi);
 8003952:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003954:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_LOCK(hspi);
 8003958:	f000 8091 	beq.w	8003a7e <HAL_SPI_Receive+0x17a>
 800395c:	2301      	movs	r3, #1
 800395e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8003962:	f7fd fb0d 	bl	8000f80 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003966:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800396a:	4606      	mov	r6, r0
  tmp_mode            = hspi->Init.Mode;
 800396c:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 800396e:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003970:	2b01      	cmp	r3, #1
 8003972:	d007      	beq.n	8003984 <HAL_SPI_Receive+0x80>
 8003974:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003978:	d1de      	bne.n	8003938 <HAL_SPI_Receive+0x34>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800397a:	68a1      	ldr	r1, [r4, #8]
 800397c:	2900      	cmp	r1, #0
 800397e:	d1db      	bne.n	8003938 <HAL_SPI_Receive+0x34>
 8003980:	2b04      	cmp	r3, #4
 8003982:	d1d9      	bne.n	8003938 <HAL_SPI_Receive+0x34>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003984:	f1b8 0f00 	cmp.w	r8, #0
 8003988:	f000 80ca 	beq.w	8003b20 <HAL_SPI_Receive+0x21c>
 800398c:	2f00      	cmp	r7, #0
 800398e:	f000 80c7 	beq.w	8003b20 <HAL_SPI_Receive+0x21c>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003992:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003996:	2b04      	cmp	r3, #4
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Receive+0x9c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800399a:	2305      	movs	r3, #5
 800399c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 80039a0:	f1a7 0101 	sub.w	r1, r7, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039a4:	2300      	movs	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039a6:	68e0      	ldr	r0, [r4, #12]
 80039a8:	fab1 f181 	clz	r1, r1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ac:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039ae:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
 80039b2:	0949      	lsrs	r1, r1, #5
  hspi->RxXferCount = Size;
 80039b4:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80039b8:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
 80039bc:	429a      	cmp	r2, r3
 80039be:	bf14      	ite	ne
 80039c0:	460a      	movne	r2, r1
 80039c2:	2201      	moveq	r2, #1
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039c4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->TxXferCount = Size;
 80039c8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80039ca:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80039ce:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxISR       = NULL;
 80039d0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 80039d4:	6823      	ldr	r3, [r4, #0]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039d6:	6859      	ldr	r1, [r3, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039d8:	d802      	bhi.n	80039e0 <HAL_SPI_Receive+0xdc>
 80039da:	2f01      	cmp	r7, #1
 80039dc:	f240 815d 	bls.w	8003c9a <HAL_SPI_Receive+0x396>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039e0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 80039e4:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	0649      	lsls	r1, r1, #25
 80039ea:	d403      	bmi.n	80039f4 <HAL_SPI_Receive+0xf0>
    __HAL_SPI_ENABLE(hspi);
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80039f2:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80039f8:	f240 8156 	bls.w	8003ca8 <HAL_SPI_Receive+0x3a4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039fc:	b142      	cbz	r2, 8003a10 <HAL_SPI_Receive+0x10c>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039fe:	4641      	mov	r1, r8
 8003a00:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003a04:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003a06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a08:	63a1      	str	r1, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003a10:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a12:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	b92b      	cbnz	r3, 8003a24 <HAL_SPI_Receive+0x120>
 8003a18:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 819f 	beq.w	8003d62 <HAL_SPI_Receive+0x45e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	0791      	lsls	r1, r2, #30
 8003a2a:	d50d      	bpl.n	8003a48 <HAL_SPI_Receive+0x144>
 8003a2c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	b152      	cbz	r2, 8003a48 <HAL_SPI_Receive+0x144>
 8003a32:	b14f      	cbz	r7, 8003a48 <HAL_SPI_Receive+0x144>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8003a36:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a38:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003a3c:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8003a3e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a40:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003a42:	3a01      	subs	r2, #1
 8003a44:	b292      	uxth	r2, r2
 8003a46:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a48:	689a      	ldr	r2, [r3, #8]
 8003a4a:	07d2      	lsls	r2, r2, #31
 8003a4c:	d50f      	bpl.n	8003a6e <HAL_SPI_Receive+0x16a>
 8003a4e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003a52:	b292      	uxth	r2, r2
 8003a54:	b15a      	cbz	r2, 8003a6e <HAL_SPI_Receive+0x16a>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a56:	68db      	ldr	r3, [r3, #12]
        txallowed = 1U;
 8003a58:	2701      	movs	r7, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a5a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a5c:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8003a60:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a64:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a6e:	f7fd fa87 	bl	8000f80 <HAL_GetTick>
 8003a72:	1b80      	subs	r0, r0, r6
 8003a74:	4285      	cmp	r5, r0
 8003a76:	d8cc      	bhi.n	8003a12 <HAL_SPI_Receive+0x10e>
 8003a78:	1c68      	adds	r0, r5, #1
 8003a7a:	d0ca      	beq.n	8003a12 <HAL_SPI_Receive+0x10e>
 8003a7c:	e0b6      	b.n	8003bec <HAL_SPI_Receive+0x2e8>
  __HAL_LOCK(hspi);
 8003a7e:	2002      	movs	r0, #2
}
 8003a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8003a84:	f1b8 0f00 	cmp.w	r8, #0
 8003a88:	d04a      	beq.n	8003b20 <HAL_SPI_Receive+0x21c>
 8003a8a:	fab7 f287 	clz	r2, r7
 8003a8e:	0952      	lsrs	r2, r2, #5
 8003a90:	2a00      	cmp	r2, #0
 8003a92:	d145      	bne.n	8003b20 <HAL_SPI_Receive+0x21c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a94:	2304      	movs	r3, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a96:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a98:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a9a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003aa2:	6823      	ldr	r3, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa4:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->TxXferSize  = 0U;
 8003aa6:	87a2      	strh	r2, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003aa8:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003aac:	87e2      	strh	r2, [r4, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003aae:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003ab2:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->TxISR       = NULL;
 8003ab6:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	bf8c      	ite	hi
 8003abe:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ac2:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
 8003ac6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ac8:	68a2      	ldr	r2, [r4, #8]
 8003aca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003ace:	d103      	bne.n	8003ad8 <HAL_SPI_Receive+0x1d4>
    SPI_1LINE_RX(hspi);
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ad6:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	0650      	lsls	r0, r2, #25
 8003adc:	d403      	bmi.n	8003ae6 <HAL_SPI_Receive+0x1e2>
    __HAL_SPI_ENABLE(hspi);
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ae4:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003ae6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003aea:	d81b      	bhi.n	8003b24 <HAL_SPI_Receive+0x220>
 8003aec:	1c6f      	adds	r7, r5, #1
 8003aee:	d00d      	beq.n	8003b0c <HAL_SPI_Receive+0x208>
 8003af0:	e06f      	b.n	8003bd2 <HAL_SPI_Receive+0x2ce>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003af2:	7b1a      	ldrb	r2, [r3, #12]
 8003af4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003af6:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8003af8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003afc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003afe:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b00:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8003b02:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b04:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003b06:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003b0a:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8003b0c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003b10:	b292      	uxth	r2, r2
 8003b12:	b302      	cbz	r2, 8003b56 <HAL_SPI_Receive+0x252>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	07d0      	lsls	r0, r2, #31
 8003b18:	d4eb      	bmi.n	8003af2 <HAL_SPI_Receive+0x1ee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b1a:	f7fd fa31 	bl	8000f80 <HAL_GetTick>
 8003b1e:	e7f4      	b.n	8003b0a <HAL_SPI_Receive+0x206>
    errorcode = HAL_ERROR;
 8003b20:	2001      	movs	r0, #1
 8003b22:	e70a      	b.n	800393a <HAL_SPI_Receive+0x36>
 8003b24:	1c69      	adds	r1, r5, #1
 8003b26:	d12e      	bne.n	8003b86 <HAL_SPI_Receive+0x282>
    while (hspi->RxXferCount > 0U)
 8003b28:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003b2c:	b292      	uxth	r2, r2
 8003b2e:	b192      	cbz	r2, 8003b56 <HAL_SPI_Receive+0x252>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	07d2      	lsls	r2, r2, #31
 8003b34:	d55c      	bpl.n	8003bf0 <HAL_SPI_Receive+0x2ec>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003b3a:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8003b3e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b42:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003b44:	3a01      	subs	r2, #1
 8003b46:	b292      	uxth	r2, r2
 8003b48:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8003b4c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003b50:	b292      	uxth	r2, r2
 8003b52:	2a00      	cmp	r2, #0
 8003b54:	d1ec      	bne.n	8003b30 <HAL_SPI_Receive+0x22c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003b5c:	d074      	beq.n	8003c48 <HAL_SPI_Receive+0x344>
 8003b5e:	1c6f      	adds	r7, r5, #1
 8003b60:	d14a      	bne.n	8003bf8 <HAL_SPI_Receive+0x2f4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	0610      	lsls	r0, r2, #24
 8003b66:	d4fc      	bmi.n	8003b62 <HAL_SPI_Receive+0x25e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b68:	6862      	ldr	r2, [r4, #4]
 8003b6a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003b6e:	d077      	beq.n	8003c60 <HAL_SPI_Receive+0x35c>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b70:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8003b72:	3000      	adds	r0, #0
 8003b74:	bf18      	it	ne
 8003b76:	2001      	movne	r0, #1
error :
 8003b78:	e6df      	b.n	800393a <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7a:	f7fd fa01 	bl	8000f80 <HAL_GetTick>
 8003b7e:	1b80      	subs	r0, r0, r6
 8003b80:	42a8      	cmp	r0, r5
 8003b82:	d233      	bcs.n	8003bec <HAL_SPI_Receive+0x2e8>
 8003b84:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8003b86:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003b8a:	b292      	uxth	r2, r2
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	d0e2      	beq.n	8003b56 <HAL_SPI_Receive+0x252>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	07d2      	lsls	r2, r2, #31
 8003b94:	d5f1      	bpl.n	8003b7a <HAL_SPI_Receive+0x276>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003b9a:	f821 2b02 	strh.w	r2, [r1], #2
        hspi->RxXferCount--;
 8003b9e:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ba2:	6421      	str	r1, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003ba4:	3a01      	subs	r2, #1
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8003bac:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003bb0:	b292      	uxth	r2, r2
 8003bb2:	2a00      	cmp	r2, #0
 8003bb4:	d1ec      	bne.n	8003b90 <HAL_SPI_Receive+0x28c>
 8003bb6:	e7ce      	b.n	8003b56 <HAL_SPI_Receive+0x252>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003bb8:	7b1a      	ldrb	r2, [r3, #12]
 8003bba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003bbc:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 8003bbe:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003bc4:	3b01      	subs	r3, #1
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bc6:	3201      	adds	r2, #1
        hspi->RxXferCount--;
 8003bc8:	b29b      	uxth	r3, r3
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003bca:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003bcc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003bd0:	6823      	ldr	r3, [r4, #0]
    while (hspi->RxXferCount > 0U)
 8003bd2:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	2a00      	cmp	r2, #0
 8003bda:	d0bc      	beq.n	8003b56 <HAL_SPI_Receive+0x252>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	07d1      	lsls	r1, r2, #31
 8003be0:	d4ea      	bmi.n	8003bb8 <HAL_SPI_Receive+0x2b4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003be2:	f7fd f9cd 	bl	8000f80 <HAL_GetTick>
 8003be6:	1b80      	subs	r0, r0, r6
 8003be8:	42a8      	cmp	r0, r5
 8003bea:	d3f1      	bcc.n	8003bd0 <HAL_SPI_Receive+0x2cc>
          errorcode = HAL_TIMEOUT;
 8003bec:	2003      	movs	r0, #3
 8003bee:	e6a4      	b.n	800393a <HAL_SPI_Receive+0x36>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bf0:	f7fd f9c6 	bl	8000f80 <HAL_GetTick>
 8003bf4:	6823      	ldr	r3, [r4, #0]
 8003bf6:	e797      	b.n	8003b28 <HAL_SPI_Receive+0x224>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	0611      	lsls	r1, r2, #24
 8003bfc:	d5b4      	bpl.n	8003b68 <HAL_SPI_Receive+0x264>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003bfe:	f7fd f9bf 	bl	8000f80 <HAL_GetTick>
 8003c02:	1b80      	subs	r0, r0, r6
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c04:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c06:	4285      	cmp	r5, r0
 8003c08:	d8a9      	bhi.n	8003b5e <HAL_SPI_Receive+0x25a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0a:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c0c:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c0e:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c12:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c16:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c18:	f000 80c1 	beq.w	8003d9e <HAL_SPI_Receive+0x49a>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c1e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003c22:	d107      	bne.n	8003c34 <HAL_SPI_Receive+0x330>
          SPI_RESET_CRC(hspi);
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c32:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c3a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003c3c:	f043 0320 	orr.w	r3, r3, #32
 8003c40:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c42:	2320      	movs	r3, #32
 8003c44:	6623      	str	r3, [r4, #96]	; 0x60
 8003c46:	e793      	b.n	8003b70 <HAL_SPI_Receive+0x26c>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c48:	68a2      	ldr	r2, [r4, #8]
 8003c4a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003c4e:	d002      	beq.n	8003c56 <HAL_SPI_Receive+0x352>
 8003c50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003c54:	d183      	bne.n	8003b5e <HAL_SPI_Receive+0x25a>
    __HAL_SPI_DISABLE(hspi);
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	e77e      	b.n	8003b5e <HAL_SPI_Receive+0x25a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c60:	68a2      	ldr	r2, [r4, #8]
 8003c62:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003c66:	d002      	beq.n	8003c6e <HAL_SPI_Receive+0x36a>
 8003c68:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003c6c:	d180      	bne.n	8003b70 <HAL_SPI_Receive+0x26c>
 8003c6e:	1c6a      	adds	r2, r5, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_SPI_Receive+0x372>
 8003c72:	e005      	b.n	8003c80 <HAL_SPI_Receive+0x37c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c74:	7b1a      	ldrb	r2, [r3, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8003c7c:	d1fa      	bne.n	8003c74 <HAL_SPI_Receive+0x370>
 8003c7e:	e777      	b.n	8003b70 <HAL_SPI_Receive+0x26c>
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8003c86:	f43f af73 	beq.w	8003b70 <HAL_SPI_Receive+0x26c>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003c8a:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c8c:	f7fd f978 	bl	8000f80 <HAL_GetTick>
 8003c90:	1b80      	subs	r0, r0, r6
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c92:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003c94:	4285      	cmp	r5, r0
 8003c96:	d8ea      	bhi.n	8003c6e <HAL_SPI_Receive+0x36a>
 8003c98:	e7b7      	b.n	8003c0a <HAL_SPI_Receive+0x306>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c9a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003c9e:	6059      	str	r1, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	064f      	lsls	r7, r1, #25
 8003ca4:	f57f aea2 	bpl.w	80039ec <HAL_SPI_Receive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ca8:	b162      	cbz	r2, 8003cc4 <HAL_SPI_Receive+0x3c0>
      if (hspi->TxXferCount > 1U)
 8003caa:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003cac:	2a01      	cmp	r2, #1
 8003cae:	f240 8083 	bls.w	8003db8 <HAL_SPI_Receive+0x4b4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003cb8:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 8003cba:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbc:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003cbe:	3b02      	subs	r3, #2
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003cc4:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cc6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	b923      	cbnz	r3, 8003cd6 <HAL_SPI_Receive+0x3d2>
 8003ccc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d045      	beq.n	8003d62 <HAL_SPI_Receive+0x45e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	0791      	lsls	r1, r2, #30
 8003cdc:	d503      	bpl.n	8003ce6 <HAL_SPI_Receive+0x3e2>
 8003cde:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	b102      	cbz	r2, 8003ce6 <HAL_SPI_Receive+0x3e2>
 8003ce4:	bb7f      	cbnz	r7, 8003d46 <HAL_SPI_Receive+0x442>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	07d2      	lsls	r2, r2, #31
 8003cea:	d517      	bpl.n	8003d1c <HAL_SPI_Receive+0x418>
 8003cec:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003cf0:	b292      	uxth	r2, r2
 8003cf2:	b19a      	cbz	r2, 8003d1c <HAL_SPI_Receive+0x418>
        if (hspi->RxXferCount > 1U)
 8003cf4:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003cf8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003cfa:	2901      	cmp	r1, #1
 8003cfc:	d916      	bls.n	8003d2c <HAL_SPI_Receive+0x428>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cfe:	68d9      	ldr	r1, [r3, #12]
 8003d00:	f822 1b02 	strh.w	r1, [r2], #2
          hspi->RxXferCount -= 2U;
 8003d04:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d08:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003d0a:	1e8a      	subs	r2, r1, #2
 8003d0c:	b292      	uxth	r2, r2
 8003d0e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003d12:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003d16:	2a01      	cmp	r2, #1
 8003d18:	d92f      	bls.n	8003d7a <HAL_SPI_Receive+0x476>
        txallowed = 1U;
 8003d1a:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d1c:	f7fd f930 	bl	8000f80 <HAL_GetTick>
 8003d20:	1b80      	subs	r0, r0, r6
 8003d22:	4285      	cmp	r5, r0
 8003d24:	d8cf      	bhi.n	8003cc6 <HAL_SPI_Receive+0x3c2>
 8003d26:	1c6b      	adds	r3, r5, #1
 8003d28:	d0cd      	beq.n	8003cc6 <HAL_SPI_Receive+0x3c2>
 8003d2a:	e75f      	b.n	8003bec <HAL_SPI_Receive+0x2e8>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d2c:	7b1b      	ldrb	r3, [r3, #12]
        txallowed = 1U;
 8003d2e:	2701      	movs	r7, #1
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d30:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 8003d32:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8003d36:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003d38:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr++;
 8003d3a:	443a      	add	r2, r7
          hspi->RxXferCount--;
 8003d3c:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr++;
 8003d3e:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003d40:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003d44:	e7ea      	b.n	8003d1c <HAL_SPI_Receive+0x418>
        if (hspi->TxXferCount > 1U)
 8003d46:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003d48:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003d4a:	2901      	cmp	r1, #1
 8003d4c:	d91b      	bls.n	8003d86 <HAL_SPI_Receive+0x482>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d4e:	f832 1b02 	ldrh.w	r1, [r2], #2
        txallowed = 0U;
 8003d52:	2700      	movs	r7, #0
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d54:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 8003d56:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d58:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d5a:	1e8a      	subs	r2, r1, #2
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8003d60:	e7c1      	b.n	8003ce6 <HAL_SPI_Receive+0x3e2>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d62:	4632      	mov	r2, r6
 8003d64:	4629      	mov	r1, r5
 8003d66:	4620      	mov	r0, r4
 8003d68:	f7ff fbec 	bl	8003544 <SPI_EndRxTxTransaction>
 8003d6c:	2800      	cmp	r0, #0
 8003d6e:	f43f ade4 	beq.w	800393a <HAL_SPI_Receive+0x36>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d72:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8003d74:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d76:	6623      	str	r3, [r4, #96]	; 0x60
 8003d78:	e5df      	b.n	800393a <HAL_SPI_Receive+0x36>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d7a:	685a      	ldr	r2, [r3, #4]
        txallowed = 1U;
 8003d7c:	2701      	movs	r7, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003d82:	605a      	str	r2, [r3, #4]
 8003d84:	e7ca      	b.n	8003d1c <HAL_SPI_Receive+0x418>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d86:	7812      	ldrb	r2, [r2, #0]
        txallowed = 0U;
 8003d88:	2700      	movs	r7, #0
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d8a:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8003d8c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 8003d8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003d90:	3a01      	subs	r2, #1
 8003d92:	6823      	ldr	r3, [r4, #0]
          hspi->pTxBuffPtr++;
 8003d94:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8003d96:	b292      	uxth	r2, r2
          hspi->pTxBuffPtr++;
 8003d98:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8003d9a:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8003d9c:	e7a3      	b.n	8003ce6 <HAL_SPI_Receive+0x3e2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d9e:	68a2      	ldr	r2, [r4, #8]
 8003da0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003da4:	d003      	beq.n	8003dae <HAL_SPI_Receive+0x4aa>
 8003da6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003daa:	f47f af37 	bne.w	8003c1c <HAL_SPI_Receive+0x318>
          __HAL_SPI_DISABLE(hspi);
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e731      	b.n	8003c1c <HAL_SPI_Receive+0x318>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003db8:	f898 2000 	ldrb.w	r2, [r8]
 8003dbc:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8003dbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8003dc0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003dc2:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8003dc4:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8003dc6:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8003dc8:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003dca:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003dcc:	e77a      	b.n	8003cc4 <HAL_SPI_Receive+0x3c0>
 8003dce:	bf00      	nop

08003dd0 <HAL_SPI_TransmitReceive>:
{
 8003dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(hspi);
 8003dd4:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
{
 8003dd8:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 8003dda:	2c01      	cmp	r4, #1
 8003ddc:	d028      	beq.n	8003e30 <HAL_SPI_TransmitReceive+0x60>
 8003dde:	461e      	mov	r6, r3
 8003de0:	2301      	movs	r3, #1
 8003de2:	4604      	mov	r4, r0
 8003de4:	4690      	mov	r8, r2
 8003de6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 8003dea:	460f      	mov	r7, r1
  tickstart = HAL_GetTick();
 8003dec:	f7fd f8c8 	bl	8000f80 <HAL_GetTick>
 8003df0:	4681      	mov	r9, r0
  tmp_state           = hspi->State;
 8003df2:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 8003df6:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 8003df8:	b2c0      	uxtb	r0, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003dfa:	2801      	cmp	r0, #1
 8003dfc:	d010      	beq.n	8003e20 <HAL_SPI_TransmitReceive+0x50>
 8003dfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e02:	d008      	beq.n	8003e16 <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_BUSY;
 8003e04:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003e06:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8003e08:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e0e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8003e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e16:	68a2      	ldr	r2, [r4, #8]
 8003e18:	2a00      	cmp	r2, #0
 8003e1a:	d1f3      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x34>
 8003e1c:	2804      	cmp	r0, #4
 8003e1e:	d1f1      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x34>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e20:	f1b8 0f00 	cmp.w	r8, #0
 8003e24:	bf18      	it	ne
 8003e26:	2f00      	cmpne	r7, #0
 8003e28:	d000      	beq.n	8003e2c <HAL_SPI_TransmitReceive+0x5c>
 8003e2a:	b926      	cbnz	r6, 8003e36 <HAL_SPI_TransmitReceive+0x66>
    errorcode = HAL_ERROR;
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	e7ea      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x36>
  __HAL_LOCK(hspi);
 8003e30:	2002      	movs	r0, #2
}
 8003e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e36:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8003e3a:	2a04      	cmp	r2, #4
 8003e3c:	d002      	beq.n	8003e44 <HAL_SPI_TransmitReceive+0x74>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e3e:	2205      	movs	r2, #5
 8003e40:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e44:	2200      	movs	r2, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e46:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003e4a:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	bf18      	it	ne
 8003e52:	2e01      	cmpne	r6, #1
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e54:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e56:	63a7      	str	r7, [r4, #56]	; 0x38
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e5e:	2e01      	cmp	r6, #1
  hspi->RxXferCount = Size;
 8003e60:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferSize  = Size;
 8003e64:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e66:	87e6      	strh	r6, [r4, #62]	; 0x3e
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e68:	68e0      	ldr	r0, [r4, #12]
  hspi->TxISR       = NULL;
 8003e6a:	e9c4 2213 	strd	r2, r2, [r4, #76]	; 0x4c
 8003e6e:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e70:	6851      	ldr	r1, [r2, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003e72:	d851      	bhi.n	8003f18 <HAL_SPI_TransmitReceive+0x148>
 8003e74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003e78:	d84e      	bhi.n	8003f18 <HAL_SPI_TransmitReceive+0x148>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003e7a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003e7e:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e80:	6811      	ldr	r1, [r2, #0]
 8003e82:	0649      	lsls	r1, r1, #25
 8003e84:	d44f      	bmi.n	8003f26 <HAL_SPI_TransmitReceive+0x156>
    __HAL_SPI_ENABLE(hspi);
 8003e86:	6811      	ldr	r1, [r2, #0]
 8003e88:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003e8c:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e8e:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8003e92:	d948      	bls.n	8003f26 <HAL_SPI_TransmitReceive+0x156>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e94:	b13b      	cbz	r3, 8003ea6 <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e96:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003e9a:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8003e9c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9e:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003ea6:	2601      	movs	r6, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ea8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	b92b      	cbnz	r3, 8003eba <HAL_SPI_TransmitReceive+0xea>
 8003eae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8092 	beq.w	8003fde <HAL_SPI_TransmitReceive+0x20e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003eba:	6823      	ldr	r3, [r4, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	0792      	lsls	r2, r2, #30
 8003ec0:	d50d      	bpl.n	8003ede <HAL_SPI_TransmitReceive+0x10e>
 8003ec2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003ec4:	b292      	uxth	r2, r2
 8003ec6:	b152      	cbz	r2, 8003ede <HAL_SPI_TransmitReceive+0x10e>
 8003ec8:	b14e      	cbz	r6, 8003ede <HAL_SPI_TransmitReceive+0x10e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
        txallowed = 0U;
 8003ecc:	2600      	movs	r6, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ece:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003ed2:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8003ed4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed6:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003ed8:	3a01      	subs	r2, #1
 8003eda:	b292      	uxth	r2, r2
 8003edc:	87e2      	strh	r2, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	07d7      	lsls	r7, r2, #31
 8003ee2:	d50f      	bpl.n	8003f04 <HAL_SPI_TransmitReceive+0x134>
 8003ee4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003ee8:	b292      	uxth	r2, r2
 8003eea:	b15a      	cbz	r2, 8003f04 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003eec:	68db      	ldr	r3, [r3, #12]
        txallowed = 1U;
 8003eee:	2601      	movs	r6, #1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003ef2:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 8003ef6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003efa:	6422      	str	r2, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f04:	f7fd f83c 	bl	8000f80 <HAL_GetTick>
 8003f08:	eba0 0009 	sub.w	r0, r0, r9
 8003f0c:	4285      	cmp	r5, r0
 8003f0e:	d8cb      	bhi.n	8003ea8 <HAL_SPI_TransmitReceive+0xd8>
 8003f10:	1c68      	adds	r0, r5, #1
 8003f12:	d0c9      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0xd8>
        errorcode = HAL_TIMEOUT;
 8003f14:	2003      	movs	r0, #3
 8003f16:	e776      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x36>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f18:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8003f1c:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1e:	6811      	ldr	r1, [r2, #0]
 8003f20:	064e      	lsls	r6, r1, #25
 8003f22:	d4b4      	bmi.n	8003e8e <HAL_SPI_TransmitReceive+0xbe>
 8003f24:	e7af      	b.n	8003e86 <HAL_SPI_TransmitReceive+0xb6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f26:	b153      	cbz	r3, 8003f3e <HAL_SPI_TransmitReceive+0x16e>
      if (hspi->TxXferCount > 1U)
 8003f28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d975      	bls.n	800401a <HAL_SPI_TransmitReceive+0x24a>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f2e:	f837 3b02 	ldrh.w	r3, [r7], #2
 8003f32:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount -= 2U;
 8003f34:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f36:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003f38:	3b02      	subs	r3, #2
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003f3e:	2601      	movs	r6, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f40:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	b923      	cbnz	r3, 8003f50 <HAL_SPI_TransmitReceive+0x180>
 8003f46:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d046      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x20e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	0791      	lsls	r1, r2, #30
 8003f56:	d503      	bpl.n	8003f60 <HAL_SPI_TransmitReceive+0x190>
 8003f58:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003f5a:	b292      	uxth	r2, r2
 8003f5c:	b102      	cbz	r2, 8003f60 <HAL_SPI_TransmitReceive+0x190>
 8003f5e:	bb86      	cbnz	r6, 8003fc2 <HAL_SPI_TransmitReceive+0x1f2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	07d2      	lsls	r2, r2, #31
 8003f64:	d517      	bpl.n	8003f96 <HAL_SPI_TransmitReceive+0x1c6>
 8003f66:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003f6a:	b292      	uxth	r2, r2
 8003f6c:	b19a      	cbz	r2, 8003f96 <HAL_SPI_TransmitReceive+0x1c6>
        if (hspi->RxXferCount > 1U)
 8003f6e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003f72:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003f74:	2901      	cmp	r1, #1
 8003f76:	d917      	bls.n	8003fa8 <HAL_SPI_TransmitReceive+0x1d8>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f78:	68d9      	ldr	r1, [r3, #12]
 8003f7a:	f822 1b02 	strh.w	r1, [r2], #2
          hspi->RxXferCount -= 2U;
 8003f7e:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f82:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003f84:	1e8a      	subs	r2, r1, #2
 8003f86:	b292      	uxth	r2, r2
 8003f88:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003f8c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003f90:	2a01      	cmp	r2, #1
 8003f92:	d930      	bls.n	8003ff6 <HAL_SPI_TransmitReceive+0x226>
        txallowed = 1U;
 8003f94:	2601      	movs	r6, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f96:	f7fc fff3 	bl	8000f80 <HAL_GetTick>
 8003f9a:	eba0 0009 	sub.w	r0, r0, r9
 8003f9e:	4285      	cmp	r5, r0
 8003fa0:	d8ce      	bhi.n	8003f40 <HAL_SPI_TransmitReceive+0x170>
 8003fa2:	1c6b      	adds	r3, r5, #1
 8003fa4:	d0cc      	beq.n	8003f40 <HAL_SPI_TransmitReceive+0x170>
 8003fa6:	e7b5      	b.n	8003f14 <HAL_SPI_TransmitReceive+0x144>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fa8:	7b1b      	ldrb	r3, [r3, #12]
        txallowed = 1U;
 8003faa:	2601      	movs	r6, #1
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003fac:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 8003fae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
          hspi->pRxBuffPtr++;
 8003fb2:	6c22      	ldr	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003fb4:	3b01      	subs	r3, #1
          hspi->pRxBuffPtr++;
 8003fb6:	4432      	add	r2, r6
          hspi->RxXferCount--;
 8003fb8:	b29b      	uxth	r3, r3
          hspi->pRxBuffPtr++;
 8003fba:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8003fbc:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003fc0:	e7e9      	b.n	8003f96 <HAL_SPI_TransmitReceive+0x1c6>
        if (hspi->TxXferCount > 1U)
 8003fc2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8003fc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fc6:	2901      	cmp	r1, #1
 8003fc8:	d91b      	bls.n	8004002 <HAL_SPI_TransmitReceive+0x232>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fca:	f832 1b02 	ldrh.w	r1, [r2], #2
        txallowed = 0U;
 8003fce:	2600      	movs	r6, #0
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fd0:	60d9      	str	r1, [r3, #12]
          hspi->TxXferCount -= 2U;
 8003fd2:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd4:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003fd6:	1e8a      	subs	r2, r1, #2
 8003fd8:	b292      	uxth	r2, r2
 8003fda:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8003fdc:	e7c0      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x190>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fde:	464a      	mov	r2, r9
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	4620      	mov	r0, r4
 8003fe4:	f7ff faae 	bl	8003544 <SPI_EndRxTxTransaction>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f43f af0c 	beq.w	8003e06 <HAL_SPI_TransmitReceive+0x36>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fee:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8003ff0:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff2:	6623      	str	r3, [r4, #96]	; 0x60
 8003ff4:	e707      	b.n	8003e06 <HAL_SPI_TransmitReceive+0x36>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ff6:	685a      	ldr	r2, [r3, #4]
        txallowed = 1U;
 8003ff8:	2601      	movs	r6, #1
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ffa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	e7c9      	b.n	8003f96 <HAL_SPI_TransmitReceive+0x1c6>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004002:	7812      	ldrb	r2, [r2, #0]
        txallowed = 0U;
 8004004:	2600      	movs	r6, #0
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004006:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8004008:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800400a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800400c:	3a01      	subs	r2, #1
 800400e:	6823      	ldr	r3, [r4, #0]
          hspi->pTxBuffPtr++;
 8004010:	3101      	adds	r1, #1
          hspi->TxXferCount--;
 8004012:	b292      	uxth	r2, r2
          hspi->pTxBuffPtr++;
 8004014:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8004016:	87e2      	strh	r2, [r4, #62]	; 0x3e
 8004018:	e7a2      	b.n	8003f60 <HAL_SPI_TransmitReceive+0x190>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800401a:	783b      	ldrb	r3, [r7, #0]
 800401c:	7313      	strb	r3, [r2, #12]
        hspi->TxXferCount--;
 800401e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr++;
 8004020:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004022:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr++;
 8004024:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004026:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004028:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800402a:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800402c:	e787      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x16e>
 800402e:	bf00      	nop

08004030 <HAL_SPI_TransmitReceive_DMA>:
{
 8004030:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hspi);
 8004032:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8004036:	2c01      	cmp	r4, #1
 8004038:	d070      	beq.n	800411c <HAL_SPI_TransmitReceive_DMA+0xec>
 800403a:	4604      	mov	r4, r0
  tmp_state           = hspi->State;
 800403c:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
  __HAL_LOCK(hspi);
 8004040:	2501      	movs	r5, #1
  tmp_state           = hspi->State;
 8004042:	b2c0      	uxtb	r0, r0
  __HAL_LOCK(hspi);
 8004044:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004048:	42a8      	cmp	r0, r5
 800404a:	d00d      	beq.n	8004068 <HAL_SPI_TransmitReceive_DMA+0x38>
 800404c:	6865      	ldr	r5, [r4, #4]
 800404e:	f5b5 7f82 	cmp.w	r5, #260	; 0x104
 8004052:	d004      	beq.n	800405e <HAL_SPI_TransmitReceive_DMA+0x2e>
    errorcode = HAL_BUSY;
 8004054:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8004056:	2300      	movs	r3, #0
 8004058:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800405c:	bd70      	pop	{r4, r5, r6, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800405e:	68a5      	ldr	r5, [r4, #8]
 8004060:	2d00      	cmp	r5, #0
 8004062:	d1f7      	bne.n	8004054 <HAL_SPI_TransmitReceive_DMA+0x24>
 8004064:	2804      	cmp	r0, #4
 8004066:	d1f5      	bne.n	8004054 <HAL_SPI_TransmitReceive_DMA+0x24>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004068:	2b00      	cmp	r3, #0
 800406a:	bf18      	it	ne
 800406c:	2a00      	cmpne	r2, #0
 800406e:	d053      	beq.n	8004118 <HAL_SPI_TransmitReceive_DMA+0xe8>
 8004070:	2900      	cmp	r1, #0
 8004072:	d051      	beq.n	8004118 <HAL_SPI_TransmitReceive_DMA+0xe8>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004074:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8004078:	2804      	cmp	r0, #4
 800407a:	d002      	beq.n	8004082 <HAL_SPI_TransmitReceive_DMA+0x52>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800407c:	2005      	movs	r0, #5
 800407e:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004082:	2500      	movs	r5, #0
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004084:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004086:	63a1      	str	r1, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004088:	6625      	str	r5, [r4, #96]	; 0x60
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800408a:	68e6      	ldr	r6, [r4, #12]
  hspi->TxXferCount = Size;
 800408c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxXferCount = Size;
 800408e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004092:	f5b6 6fe0 	cmp.w	r6, #1792	; 0x700
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004096:	6841      	ldr	r1, [r0, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004098:	6422      	str	r2, [r4, #64]	; 0x40
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800409a:	f421 41c0 	bic.w	r1, r1, #24576	; 0x6000
  hspi->TxXferSize  = Size;
 800409e:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferSize  = Size;
 80040a0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 80040a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
  hspi->TxISR       = NULL;
 80040a6:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80040aa:	6041      	str	r1, [r0, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040ac:	d838      	bhi.n	8004120 <HAL_SPI_TransmitReceive_DMA+0xf0>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ae:	6d65      	ldr	r5, [r4, #84]	; 0x54
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b0:	6841      	ldr	r1, [r0, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040b2:	69ad      	ldr	r5, [r5, #24]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b4:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040b8:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040bc:	6041      	str	r1, [r0, #4]
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040be:	d076      	beq.n	80041ae <HAL_SPI_TransmitReceive_DMA+0x17e>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040c0:	6993      	ldr	r3, [r2, #24]
 80040c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040c6:	d05f      	beq.n	8004188 <HAL_SPI_TransmitReceive_DMA+0x158>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80040c8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80040cc:	2b04      	cmp	r3, #4
 80040ce:	d02c      	beq.n	800412a <HAL_SPI_TransmitReceive_DMA+0xfa>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80040d0:	f244 3155 	movw	r1, #17237	; 0x4355
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80040d4:	f244 4389 	movw	r3, #17545	; 0x4489
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80040d8:	f6c0 0100 	movt	r1, #2048	; 0x800
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80040dc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80040e0:	e9c2 310f 	strd	r3, r1, [r2, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040e4:	f244 3565 	movw	r5, #17253	; 0x4365
  hspi->hdmarx->XferAbortCallback = NULL;
 80040e8:	2600      	movs	r6, #0
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80040ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80040ee:	f100 010c 	add.w	r1, r0, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040f2:	f6c0 0500 	movt	r5, #2048	; 0x800
  hspi->hdmarx->XferAbortCallback = NULL;
 80040f6:	6516      	str	r6, [r2, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80040f8:	4610      	mov	r0, r2
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040fa:	64d5      	str	r5, [r2, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80040fc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040fe:	f7fd fae3 	bl	80016c8 <HAL_DMA_Start_IT>
 8004102:	4601      	mov	r1, r0
 8004104:	b1e0      	cbz	r0, 8004140 <HAL_SPI_TransmitReceive_DMA+0x110>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004106:	6e23      	ldr	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004108:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800410a:	f043 0310 	orr.w	r3, r3, #16
    errorcode = HAL_ERROR;
 800410e:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004110:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 8004112:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    goto error;
 8004116:	e79e      	b.n	8004056 <HAL_SPI_TransmitReceive_DMA+0x26>
    errorcode = HAL_ERROR;
 8004118:	2001      	movs	r0, #1
 800411a:	e79c      	b.n	8004056 <HAL_SPI_TransmitReceive_DMA+0x26>
  __HAL_LOCK(hspi);
 800411c:	2002      	movs	r0, #2
}
 800411e:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004120:	6843      	ldr	r3, [r0, #4]
 8004122:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004126:	6043      	str	r3, [r0, #4]
 8004128:	e7ce      	b.n	80040c8 <HAL_SPI_TransmitReceive_DMA+0x98>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800412a:	f244 3145 	movw	r1, #17221	; 0x4345
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800412e:	f244 3389 	movw	r3, #17289	; 0x4389
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004132:	f6c0 0100 	movt	r1, #2048	; 0x800
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004136:	f6c0 0300 	movt	r3, #2048	; 0x800
 800413a:	e9c2 310f 	strd	r3, r1, [r2, #60]	; 0x3c
 800413e:	e7d1      	b.n	80040e4 <HAL_SPI_TransmitReceive_DMA+0xb4>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004140:	6823      	ldr	r3, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004142:	6d65      	ldr	r5, [r4, #84]	; 0x54
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004144:	685e      	ldr	r6, [r3, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004146:	f103 020c 	add.w	r2, r3, #12
 800414a:	4628      	mov	r0, r5
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800414c:	f046 0601 	orr.w	r6, r6, #1
 8004150:	605e      	str	r6, [r3, #4]
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8004152:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004154:	e9c5 110f 	strd	r1, r1, [r5, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004158:	e9c5 1113 	strd	r1, r1, [r5, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800415c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800415e:	f7fd fab3 	bl	80016c8 <HAL_DMA_Start_IT>
 8004162:	2800      	cmp	r0, #0
 8004164:	d1cf      	bne.n	8004106 <HAL_SPI_TransmitReceive_DMA+0xd6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004166:	6823      	ldr	r3, [r4, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	0652      	lsls	r2, r2, #25
 800416c:	d403      	bmi.n	8004176 <HAL_SPI_TransmitReceive_DMA+0x146>
    __HAL_SPI_ENABLE(hspi);
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004174:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	f042 0220 	orr.w	r2, r2, #32
 800417c:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	f042 0202 	orr.w	r2, r2, #2
 8004184:	605a      	str	r2, [r3, #4]
 8004186:	e766      	b.n	8004056 <HAL_SPI_TransmitReceive_DMA+0x26>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004188:	6843      	ldr	r3, [r0, #4]
 800418a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800418e:	6043      	str	r3, [r0, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004190:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8004194:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004198:	6843      	ldr	r3, [r0, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800419a:	d113      	bne.n	80041c4 <HAL_SPI_TransmitReceive_DMA+0x194>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800419c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041a0:	6043      	str	r3, [r0, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80041a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80041a6:	085b      	lsrs	r3, r3, #1
 80041a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80041ac:	e78c      	b.n	80040c8 <HAL_SPI_TransmitReceive_DMA+0x98>
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80041ae:	f013 0f01 	tst.w	r3, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041b2:	6843      	ldr	r3, [r0, #4]
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80041b4:	d110      	bne.n	80041d8 <HAL_SPI_TransmitReceive_DMA+0x1a8>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041ba:	6043      	str	r3, [r0, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80041bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041be:	085b      	lsrs	r3, r3, #1
 80041c0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80041c2:	e77d      	b.n	80040c0 <HAL_SPI_TransmitReceive_DMA+0x90>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80041c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041c8:	6043      	str	r3, [r0, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80041ca:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	3301      	adds	r3, #1
 80041d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80041d6:	e777      	b.n	80040c8 <HAL_SPI_TransmitReceive_DMA+0x98>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80041d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041dc:	6043      	str	r3, [r0, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80041de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	3301      	adds	r3, #1
 80041e4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80041e6:	e76b      	b.n	80040c0 <HAL_SPI_TransmitReceive_DMA+0x90>

080041e8 <HAL_SPI_Receive_DMA>:
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80041e8:	6883      	ldr	r3, [r0, #8]
{
 80041ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041ee:	4604      	mov	r4, r0
 80041f0:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80041f2:	b91b      	cbnz	r3, 80041fc <HAL_SPI_Receive_DMA+0x14>
 80041f4:	6846      	ldr	r6, [r0, #4]
 80041f6:	f5b6 7f82 	cmp.w	r6, #260	; 0x104
 80041fa:	d05b      	beq.n	80042b4 <HAL_SPI_Receive_DMA+0xcc>
  __HAL_LOCK(hspi);
 80041fc:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
 8004200:	2901      	cmp	r1, #1
 8004202:	d062      	beq.n	80042ca <HAL_SPI_Receive_DMA+0xe2>
 8004204:	2001      	movs	r0, #1
  if (hspi->State != HAL_SPI_STATE_READY)
 8004206:	f894 105d 	ldrb.w	r1, [r4, #93]	; 0x5d
 800420a:	4281      	cmp	r1, r0
  __HAL_LOCK(hspi);
 800420c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8004210:	d005      	beq.n	800421e <HAL_SPI_Receive_DMA+0x36>
    errorcode = HAL_BUSY;
 8004212:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 8004214:	2300      	movs	r3, #0
 8004216:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800421a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800421e:	2d00      	cmp	r5, #0
 8004220:	d051      	beq.n	80042c6 <HAL_SPI_Receive_DMA+0xde>
 8004222:	fab2 f082 	clz	r0, r2
 8004226:	0940      	lsrs	r0, r0, #5
 8004228:	2800      	cmp	r0, #0
 800422a:	d14c      	bne.n	80042c6 <HAL_SPI_Receive_DMA+0xde>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800422c:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800422e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004232:	6425      	str	r5, [r4, #64]	; 0x40
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004234:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = Size;
 8004238:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800423c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->TxXferSize  = 0U;
 800423e:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004240:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8004244:	6821      	ldr	r1, [r4, #0]
  hspi->TxXferCount = 0U;
 8004246:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004248:	e9c4 0013 	strd	r0, r0, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424c:	d103      	bne.n	8004256 <HAL_SPI_Receive_DMA+0x6e>
    SPI_1LINE_RX(hspi);
 800424e:	680b      	ldr	r3, [r1, #0]
 8004250:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004254:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004256:	684a      	ldr	r2, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004258:	68e0      	ldr	r0, [r4, #12]
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800425a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800425e:	6da3      	ldr	r3, [r4, #88]	; 0x58
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004260:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004264:	604a      	str	r2, [r1, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004266:	684a      	ldr	r2, [r1, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004268:	d943      	bls.n	80042f2 <HAL_SPI_Receive_DMA+0x10a>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800426a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800426e:	604a      	str	r2, [r1, #4]
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004270:	f244 3745 	movw	r7, #17221	; 0x4345
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004274:	f244 3689 	movw	r6, #17289	; 0x4389
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004278:	f244 3065 	movw	r0, #17253	; 0x4365
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800427c:	462a      	mov	r2, r5
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800427e:	f6c0 0700 	movt	r7, #2048	; 0x800
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004282:	f6c0 0600 	movt	r6, #2048	; 0x800
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004286:	f6c0 0000 	movt	r0, #2048	; 0x800
  hspi->hdmarx->XferAbortCallback = NULL;
 800428a:	2500      	movs	r5, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800428c:	641f      	str	r7, [r3, #64]	; 0x40
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800428e:	310c      	adds	r1, #12
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004290:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004292:	4618      	mov	r0, r3
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004294:	63de      	str	r6, [r3, #60]	; 0x3c
  hspi->hdmarx->XferAbortCallback = NULL;
 8004296:	651d      	str	r5, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004298:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800429c:	f7fd fa14 	bl	80016c8 <HAL_DMA_Start_IT>
 80042a0:	b1b0      	cbz	r0, 80042d0 <HAL_SPI_Receive_DMA+0xe8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80042a4:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042a6:	f043 0310 	orr.w	r3, r3, #16
    errorcode = HAL_ERROR;
 80042aa:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042ac:	6623      	str	r3, [r4, #96]	; 0x60
    hspi->State = HAL_SPI_STATE_READY;
 80042ae:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
    goto error;
 80042b2:	e7af      	b.n	8004214 <HAL_SPI_Receive_DMA+0x2c>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042b4:	2604      	movs	r6, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80042b6:	4613      	mov	r3, r2
 80042b8:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80042ba:	f880 605d 	strb.w	r6, [r0, #93]	; 0x5d
}
 80042be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 80042c2:	f7ff beb5 	b.w	8004030 <HAL_SPI_TransmitReceive_DMA>
    errorcode = HAL_ERROR;
 80042c6:	2001      	movs	r0, #1
 80042c8:	e7a4      	b.n	8004214 <HAL_SPI_Receive_DMA+0x2c>
  __HAL_LOCK(hspi);
 80042ca:	2002      	movs	r0, #2
}
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	0652      	lsls	r2, r2, #25
 80042d6:	d403      	bmi.n	80042e0 <HAL_SPI_Receive_DMA+0xf8>
    __HAL_SPI_ENABLE(hspi);
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042de:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	f042 0220 	orr.w	r2, r2, #32
 80042e6:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	605a      	str	r2, [r3, #4]
 80042f0:	e790      	b.n	8004214 <HAL_SPI_Receive_DMA+0x2c>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042f2:	6998      	ldr	r0, [r3, #24]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042f8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042fc:	604a      	str	r2, [r1, #4]
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042fe:	d1b7      	bne.n	8004270 <HAL_SPI_Receive_DMA+0x88>
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004300:	684a      	ldr	r2, [r1, #4]
 8004302:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004306:	604a      	str	r2, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004308:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800430c:	f012 0f01 	tst.w	r2, #1
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004310:	684a      	ldr	r2, [r1, #4]
      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004312:	d108      	bne.n	8004326 <HAL_SPI_Receive_DMA+0x13e>
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004314:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004318:	604a      	str	r2, [r1, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800431a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800431e:	0852      	lsrs	r2, r2, #1
 8004320:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8004324:	e7a4      	b.n	8004270 <HAL_SPI_Receive_DMA+0x88>
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800432a:	604a      	str	r2, [r1, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800432c:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8004330:	0852      	lsrs	r2, r2, #1
 8004332:	3201      	adds	r2, #1
 8004334:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 8004338:	e79a      	b.n	8004270 <HAL_SPI_Receive_DMA+0x88>
 800433a:	bf00      	nop

0800433c <HAL_SPI_TxRxCpltCallback>:
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop

08004340 <HAL_SPI_RxHalfCpltCallback>:
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop

08004344 <SPI_DMAHalfReceiveCplt>:
{
 8004344:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004346:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004348:	f7ff fffa 	bl	8004340 <HAL_SPI_RxHalfCpltCallback>
}
 800434c:	bd08      	pop	{r3, pc}
 800434e:	bf00      	nop

08004350 <HAL_SPI_TxRxHalfCpltCallback>:
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop

08004354 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8004354:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004356:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004358:	f7ff fffa 	bl	8004350 <HAL_SPI_TxRxHalfCpltCallback>
}
 800435c:	bd08      	pop	{r3, pc}
 800435e:	bf00      	nop

08004360 <HAL_SPI_ErrorCallback>:
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop

08004364 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004364:	6b83      	ldr	r3, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004366:	6819      	ldr	r1, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 8004368:	4618      	mov	r0, r3
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800436a:	684a      	ldr	r2, [r1, #4]
 800436c:	f022 0203 	bic.w	r2, r2, #3
{
 8004370:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004372:	604a      	str	r2, [r1, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8004374:	2401      	movs	r4, #1
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004376:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004378:	f042 0210 	orr.w	r2, r2, #16
 800437c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800437e:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  HAL_SPI_ErrorCallback(hspi);
 8004382:	f7ff ffed 	bl	8004360 <HAL_SPI_ErrorCallback>
}
 8004386:	bd10      	pop	{r4, pc}

08004388 <SPI_DMAReceiveCplt>:
{
 8004388:	b570      	push	{r4, r5, r6, lr}
 800438a:	4606      	mov	r6, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800438c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800438e:	f7fc fdf7 	bl	8000f80 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004392:	6833      	ldr	r3, [r6, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	05d9      	lsls	r1, r3, #23
 8004398:	d42e      	bmi.n	80043f8 <SPI_DMAReceiveCplt+0x70>
 800439a:	4605      	mov	r5, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800439c:	e9d4 3100 	ldrd	r3, r1, [r4]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043a0:	685a      	ldr	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80043a6:	f022 0220 	bic.w	r2, r2, #32
 80043aa:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	f022 0203 	bic.w	r2, r2, #3
 80043b2:	605a      	str	r2, [r3, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043b4:	d111      	bne.n	80043da <SPI_DMAReceiveCplt+0x52>
 80043b6:	68a2      	ldr	r2, [r4, #8]
 80043b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80043bc:	d002      	beq.n	80043c4 <SPI_DMAReceiveCplt+0x3c>
 80043be:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80043c2:	d10a      	bne.n	80043da <SPI_DMAReceiveCplt+0x52>
    __HAL_SPI_DISABLE(hspi);
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	e005      	b.n	80043da <SPI_DMAReceiveCplt+0x52>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043ce:	f7fc fdd7 	bl	8000f80 <HAL_GetTick>
 80043d2:	1b40      	subs	r0, r0, r5
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043d4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043d6:	2863      	cmp	r0, #99	; 0x63
 80043d8:	d824      	bhi.n	8004424 <SPI_DMAReceiveCplt+0x9c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	0612      	lsls	r2, r2, #24
 80043de:	d4f6      	bmi.n	80043ce <SPI_DMAReceiveCplt+0x46>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043e0:	6862      	ldr	r2, [r4, #4]
 80043e2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80043e6:	d00b      	beq.n	8004400 <SPI_DMAReceiveCplt+0x78>
    hspi->State = HAL_SPI_STATE_READY;
 80043e8:	2301      	movs	r3, #1
    hspi->RxXferCount = 0U;
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80043f0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043f4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80043f6:	bb73      	cbnz	r3, 8004456 <SPI_DMAReceiveCplt+0xce>
  HAL_SPI_RxCpltCallback(hspi);
 80043f8:	4620      	mov	r0, r4
 80043fa:	f004 fbd5 	bl	8008ba8 <HAL_SPI_RxCpltCallback>
}
 80043fe:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004400:	68a2      	ldr	r2, [r4, #8]
 8004402:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004406:	d002      	beq.n	800440e <SPI_DMAReceiveCplt+0x86>
 8004408:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800440c:	d1ec      	bne.n	80043e8 <SPI_DMAReceiveCplt+0x60>
  while ((hspi->Instance->SR & Fifo) != State)
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8004414:	d0e8      	beq.n	80043e8 <SPI_DMAReceiveCplt+0x60>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004416:	7b1b      	ldrb	r3, [r3, #12]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004418:	f7fc fdb2 	bl	8000f80 <HAL_GetTick>
 800441c:	1b40      	subs	r0, r0, r5
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800441e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004420:	2863      	cmp	r0, #99	; 0x63
 8004422:	d9f4      	bls.n	800440e <SPI_DMAReceiveCplt+0x86>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004424:	6861      	ldr	r1, [r4, #4]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004426:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004428:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800442c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004430:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004432:	d01d      	beq.n	8004470 <SPI_DMAReceiveCplt+0xe8>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004434:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004436:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800443a:	d010      	beq.n	800445e <SPI_DMAReceiveCplt+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800443c:	2301      	movs	r3, #1
        __HAL_UNLOCK(hspi);
 800443e:	2200      	movs	r2, #0
        hspi->State = HAL_SPI_STATE_READY;
 8004440:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004444:	6e23      	ldr	r3, [r4, #96]	; 0x60
        __HAL_UNLOCK(hspi);
 8004446:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800444a:	f043 0320 	orr.w	r3, r3, #32
 800444e:	6623      	str	r3, [r4, #96]	; 0x60
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004450:	2320      	movs	r3, #32
 8004452:	6623      	str	r3, [r4, #96]	; 0x60
 8004454:	e7c8      	b.n	80043e8 <SPI_DMAReceiveCplt+0x60>
      HAL_SPI_ErrorCallback(hspi);
 8004456:	4620      	mov	r0, r4
 8004458:	f7ff ff82 	bl	8004360 <HAL_SPI_ErrorCallback>
}
 800445c:	bd70      	pop	{r4, r5, r6, pc}
          SPI_RESET_CRC(hspi);
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e7e5      	b.n	800443c <SPI_DMAReceiveCplt+0xb4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004470:	68a2      	ldr	r2, [r4, #8]
 8004472:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004476:	d002      	beq.n	800447e <SPI_DMAReceiveCplt+0xf6>
 8004478:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800447c:	d1da      	bne.n	8004434 <SPI_DMAReceiveCplt+0xac>
          __HAL_SPI_DISABLE(hspi);
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	e7d5      	b.n	8004434 <SPI_DMAReceiveCplt+0xac>

08004488 <SPI_DMATransmitReceiveCplt>:
{
 8004488:	b538      	push	{r3, r4, r5, lr}
 800448a:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800448c:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 800448e:	f7fc fd77 	bl	8000f80 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004492:	682b      	ldr	r3, [r5, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	05db      	lsls	r3, r3, #23
 8004498:	d41b      	bmi.n	80044d2 <SPI_DMATransmitReceiveCplt+0x4a>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800449a:	6822      	ldr	r2, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800449c:	4601      	mov	r1, r0
 800449e:	4620      	mov	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80044a0:	6853      	ldr	r3, [r2, #4]
 80044a2:	f023 0320 	bic.w	r3, r3, #32
 80044a6:	6053      	str	r3, [r2, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80044a8:	f7fe fffa 	bl	80034a0 <SPI_EndRxTxTransaction.constprop.10>
 80044ac:	b118      	cbz	r0, 80044b6 <SPI_DMATransmitReceiveCplt+0x2e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ae:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044b0:	f043 0320 	orr.w	r3, r3, #32
 80044b4:	6623      	str	r3, [r4, #96]	; 0x60
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044b6:	6821      	ldr	r1, [r4, #0]
    hspi->TxXferCount = 0U;
 80044b8:	2200      	movs	r2, #0
    hspi->State = HAL_SPI_STATE_READY;
 80044ba:	2001      	movs	r0, #1
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80044bc:	684b      	ldr	r3, [r1, #4]
 80044be:	f023 0303 	bic.w	r3, r3, #3
 80044c2:	604b      	str	r3, [r1, #4]
    hspi->TxXferCount = 0U;
 80044c4:	87e2      	strh	r2, [r4, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80044c6:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80044ca:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80044d0:	b91b      	cbnz	r3, 80044da <SPI_DMATransmitReceiveCplt+0x52>
  HAL_SPI_TxRxCpltCallback(hspi);
 80044d2:	4620      	mov	r0, r4
 80044d4:	f7ff ff32 	bl	800433c <HAL_SPI_TxRxCpltCallback>
}
 80044d8:	bd38      	pop	{r3, r4, r5, pc}
      HAL_SPI_ErrorCallback(hspi);
 80044da:	4620      	mov	r0, r4
 80044dc:	f7ff ff40 	bl	8004360 <HAL_SPI_ErrorCallback>
}
 80044e0:	bd38      	pop	{r3, r4, r5, pc}
 80044e2:	bf00      	nop

080044e4 <HAL_SPI_GetState>:
  return hspi->State;
 80044e4:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop

080044ec <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	2800      	cmp	r0, #0
 80044ee:	d07d      	beq.n	80045ec <HAL_TIM_Base_Init+0x100>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80044f4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044fa:	4604      	mov	r4, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d06d      	beq.n	80045dc <HAL_TIM_Base_Init+0xf0>
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004500:	2100      	movs	r1, #0
 8004502:	f44f 6380 	mov.w	r3, #1024	; 0x400
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004506:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004508:	2002      	movs	r0, #2
 800450a:	f2c4 0301 	movt	r3, #16385	; 0x4001
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800450e:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8004512:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 8004516:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 800451a:	eba2 0603 	sub.w	r6, r2, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800451e:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 8004522:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004524:	fab1 f181 	clz	r1, r1
 8004528:	fab6 f686 	clz	r6, r6
 800452c:	ea4f 1151 	mov.w	r1, r1, lsr #5
 8004530:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8004534:	d039      	beq.n	80045aa <HAL_TIM_Base_Init+0xbe>
 8004536:	bbc1      	cbnz	r1, 80045aa <HAL_TIM_Base_Init+0xbe>
 8004538:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800453c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004540:	4282      	cmp	r2, r0
 8004542:	d032      	beq.n	80045aa <HAL_TIM_Base_Init+0xbe>
 8004544:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004548:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800454c:	4282      	cmp	r2, r0
 800454e:	d02c      	beq.n	80045aa <HAL_TIM_Base_Init+0xbe>
 8004550:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004554:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004558:	4282      	cmp	r2, r0
 800455a:	d049      	beq.n	80045f0 <HAL_TIM_Base_Init+0x104>
 800455c:	2e00      	cmp	r6, #0
 800455e:	d147      	bne.n	80045f0 <HAL_TIM_Base_Init+0x104>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004560:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004564:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004568:	4282      	cmp	r2, r0
 800456a:	d022      	beq.n	80045b2 <HAL_TIM_Base_Init+0xc6>
 800456c:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 8004570:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004574:	4282      	cmp	r2, r0
 8004576:	d01c      	beq.n	80045b2 <HAL_TIM_Base_Init+0xc6>
 8004578:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 800457c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004580:	4282      	cmp	r2, r0
 8004582:	d016      	beq.n	80045b2 <HAL_TIM_Base_Init+0xc6>
 8004584:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004588:	f2c4 0000 	movt	r0, #16384	; 0x4000
 800458c:	4282      	cmp	r2, r0
 800458e:	d010      	beq.n	80045b2 <HAL_TIM_Base_Init+0xc6>
 8004590:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
 8004594:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004598:	4282      	cmp	r2, r0
 800459a:	d00a      	beq.n	80045b2 <HAL_TIM_Base_Init+0xc6>
 800459c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80045a0:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80045a4:	4282      	cmp	r2, r0
 80045a6:	d108      	bne.n	80045ba <HAL_TIM_Base_Init+0xce>
 80045a8:	e003      	b.n	80045b2 <HAL_TIM_Base_Init+0xc6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045ae:	68a0      	ldr	r0, [r4, #8]
 80045b0:	4303      	orrs	r3, r0
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045b6:	6920      	ldr	r0, [r4, #16]
 80045b8:	4303      	orrs	r3, r0
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ba:	69a0      	ldr	r0, [r4, #24]
 80045bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c0:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045c2:	4303      	orrs	r3, r0

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045c4:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 80045c6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c8:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80045ca:	6290      	str	r0, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045cc:	b959      	cbnz	r1, 80045e6 <HAL_TIM_Base_Init+0xfa>
 80045ce:	b956      	cbnz	r6, 80045e6 <HAL_TIM_Base_Init+0xfa>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d0:	2301      	movs	r3, #1
  return HAL_OK;
 80045d2:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 80045d4:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 80045d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80045da:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80045dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045e0:	f005 f9ec 	bl	80099bc <HAL_TIM_Base_MspInit>
 80045e4:	e78c      	b.n	8004500 <HAL_TIM_Base_Init+0x14>
    TIMx->RCR = Structure->RepetitionCounter;
 80045e6:	6963      	ldr	r3, [r4, #20]
 80045e8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ea:	e7f1      	b.n	80045d0 <HAL_TIM_Base_Init+0xe4>
    return HAL_ERROR;
 80045ec:	2001      	movs	r0, #1
}
 80045ee:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80045f8:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045fa:	f2c4 0000 	movt	r0, #16384	; 0x4000
    tmpcr1 |= Structure->CounterMode;
 80045fe:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004600:	4282      	cmp	r2, r0
 8004602:	d0d6      	beq.n	80045b2 <HAL_TIM_Base_Init+0xc6>
 8004604:	2e00      	cmp	r6, #0
 8004606:	d1d4      	bne.n	80045b2 <HAL_TIM_Base_Init+0xc6>
 8004608:	e7aa      	b.n	8004560 <HAL_TIM_Base_Init+0x74>
 800460a:	bf00      	nop

0800460c <HAL_TIM_Base_Start>:
{
 800460c:	4602      	mov	r2, r0
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460e:	2307      	movs	r3, #7
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	2002      	movs	r0, #2
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004612:	6811      	ldr	r1, [r2, #0]
 8004614:	f2c0 0301 	movt	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461c:	6888      	ldr	r0, [r1, #8]
 800461e:	4003      	ands	r3, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	2b06      	cmp	r3, #6
 8004622:	d006      	beq.n	8004632 <HAL_TIM_Base_Start+0x26>
 8004624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004628:	d003      	beq.n	8004632 <HAL_TIM_Base_Start+0x26>
    __HAL_TIM_ENABLE(htim);
 800462a:	680b      	ldr	r3, [r1, #0]
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	600b      	str	r3, [r1, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004632:	2301      	movs	r3, #1
}
 8004634:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004636:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
}
 800463a:	4770      	bx	lr

0800463c <HAL_TIM_Base_Stop>:
{
 800463c:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800463e:	2002      	movs	r0, #2
  __HAL_TIM_DISABLE(htim);
 8004640:	f241 1111 	movw	r1, #4369	; 0x1111
 8004644:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004646:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  __HAL_TIM_DISABLE(htim);
 800464a:	6a10      	ldr	r0, [r2, #32]
 800464c:	4208      	tst	r0, r1
 800464e:	d108      	bne.n	8004662 <HAL_TIM_Base_Stop+0x26>
 8004650:	6a10      	ldr	r0, [r2, #32]
 8004652:	f240 4144 	movw	r1, #1092	; 0x444
 8004656:	4208      	tst	r0, r1
 8004658:	d103      	bne.n	8004662 <HAL_TIM_Base_Stop+0x26>
 800465a:	6811      	ldr	r1, [r2, #0]
 800465c:	f021 0101 	bic.w	r1, r1, #1
 8004660:	6011      	str	r1, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004662:	2201      	movs	r2, #1
}
 8004664:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800466a:	4770      	bx	lr

0800466c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800466c:	6802      	ldr	r2, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800466e:	2307      	movs	r3, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004670:	68d1      	ldr	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004672:	f2c0 0301 	movt	r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004676:	f041 0101 	orr.w	r1, r1, #1
 800467a:	60d1      	str	r1, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800467c:	6891      	ldr	r1, [r2, #8]
 800467e:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004680:	2b06      	cmp	r3, #6
 8004682:	d006      	beq.n	8004692 <HAL_TIM_Base_Start_IT+0x26>
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d003      	beq.n	8004692 <HAL_TIM_Base_Start_IT+0x26>
    __HAL_TIM_ENABLE(htim);
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6013      	str	r3, [r2, #0]
}
 8004692:	2000      	movs	r0, #0
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop

08004698 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004698:	2800      	cmp	r0, #0
 800469a:	d07d      	beq.n	8004798 <HAL_TIM_PWM_Init+0x100>
  if (htim->State == HAL_TIM_STATE_RESET)
 800469c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80046a0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80046a6:	4604      	mov	r4, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d06d      	beq.n	8004788 <HAL_TIM_PWM_Init+0xf0>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ac:	2100      	movs	r1, #0
 80046ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b2:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	2002      	movs	r0, #2
 80046b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ba:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80046be:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 80046c6:	eba2 0603 	sub.w	r6, r2, r3
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ca:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
 80046ce:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046d0:	fab1 f181 	clz	r1, r1
 80046d4:	fab6 f686 	clz	r6, r6
 80046d8:	ea4f 1151 	mov.w	r1, r1, lsr #5
 80046dc:	ea4f 1656 	mov.w	r6, r6, lsr #5
 80046e0:	d039      	beq.n	8004756 <HAL_TIM_PWM_Init+0xbe>
 80046e2:	bbc1      	cbnz	r1, 8004756 <HAL_TIM_PWM_Init+0xbe>
 80046e4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80046e8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80046ec:	4282      	cmp	r2, r0
 80046ee:	d032      	beq.n	8004756 <HAL_TIM_PWM_Init+0xbe>
 80046f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80046f4:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80046f8:	4282      	cmp	r2, r0
 80046fa:	d02c      	beq.n	8004756 <HAL_TIM_PWM_Init+0xbe>
 80046fc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004700:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004704:	4282      	cmp	r2, r0
 8004706:	d049      	beq.n	800479c <HAL_TIM_PWM_Init+0x104>
 8004708:	2e00      	cmp	r6, #0
 800470a:	d147      	bne.n	800479c <HAL_TIM_PWM_Init+0x104>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004710:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004714:	4282      	cmp	r2, r0
 8004716:	d022      	beq.n	800475e <HAL_TIM_PWM_Init+0xc6>
 8004718:	f44f 4088 	mov.w	r0, #17408	; 0x4400
 800471c:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8004720:	4282      	cmp	r2, r0
 8004722:	d01c      	beq.n	800475e <HAL_TIM_PWM_Init+0xc6>
 8004724:	f44f 4090 	mov.w	r0, #18432	; 0x4800
 8004728:	f2c4 0001 	movt	r0, #16385	; 0x4001
 800472c:	4282      	cmp	r2, r0
 800472e:	d016      	beq.n	800475e <HAL_TIM_PWM_Init+0xc6>
 8004730:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8004734:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004738:	4282      	cmp	r2, r0
 800473a:	d010      	beq.n	800475e <HAL_TIM_PWM_Init+0xc6>
 800473c:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
 8004740:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004744:	4282      	cmp	r2, r0
 8004746:	d00a      	beq.n	800475e <HAL_TIM_PWM_Init+0xc6>
 8004748:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800474c:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8004750:	4282      	cmp	r2, r0
 8004752:	d108      	bne.n	8004766 <HAL_TIM_PWM_Init+0xce>
 8004754:	e003      	b.n	800475e <HAL_TIM_PWM_Init+0xc6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800475a:	68a0      	ldr	r0, [r4, #8]
 800475c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800475e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004762:	6920      	ldr	r0, [r4, #16]
 8004764:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004766:	69a0      	ldr	r0, [r4, #24]
 8004768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800476c:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800476e:	4303      	orrs	r3, r0
  TIMx->PSC = Structure->Prescaler;
 8004770:	6860      	ldr	r0, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004772:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004774:	62d5      	str	r5, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004776:	6290      	str	r0, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004778:	b959      	cbnz	r1, 8004792 <HAL_TIM_PWM_Init+0xfa>
 800477a:	b956      	cbnz	r6, 8004792 <HAL_TIM_PWM_Init+0xfa>
  TIMx->EGR = TIM_EGR_UG;
 800477c:	2301      	movs	r3, #1
  return HAL_OK;
 800477e:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
 8004780:	6153      	str	r3, [r2, #20]
  htim->State = HAL_TIM_STATE_READY;
 8004782:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004786:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004788:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800478c:	f005 f960 	bl	8009a50 <HAL_TIM_PWM_MspInit>
 8004790:	e78c      	b.n	80046ac <HAL_TIM_PWM_Init+0x14>
    TIMx->RCR = Structure->RepetitionCounter;
 8004792:	6963      	ldr	r3, [r4, #20]
 8004794:	6313      	str	r3, [r2, #48]	; 0x30
 8004796:	e7f1      	b.n	800477c <HAL_TIM_PWM_Init+0xe4>
    return HAL_ERROR;
 8004798:	2001      	movs	r0, #1
}
 800479a:	4770      	bx	lr
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80047a4:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047a6:	f2c4 0000 	movt	r0, #16384	; 0x4000
    tmpcr1 |= Structure->CounterMode;
 80047aa:	432b      	orrs	r3, r5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ac:	4282      	cmp	r2, r0
 80047ae:	d0d6      	beq.n	800475e <HAL_TIM_PWM_Init+0xc6>
 80047b0:	2e00      	cmp	r6, #0
 80047b2:	d1d4      	bne.n	800475e <HAL_TIM_PWM_Init+0xc6>
 80047b4:	e7aa      	b.n	800470c <HAL_TIM_PWM_Init+0x74>
 80047b6:	bf00      	nop

080047b8 <HAL_TIM_PWM_Start>:
 80047b8:	6803      	ldr	r3, [r0, #0]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f001 011f 	and.w	r1, r1, #31
 80047c0:	6a18      	ldr	r0, [r3, #32]
 80047c2:	fa02 f101 	lsl.w	r1, r2, r1
 80047c6:	b410      	push	{r4}
 80047c8:	ea20 0001 	bic.w	r0, r0, r1
 80047cc:	2400      	movs	r4, #0
 80047ce:	6218      	str	r0, [r3, #32]
 80047d0:	f2c4 0401 	movt	r4, #16385	; 0x4001
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	42a3      	cmp	r3, r4
 80047d8:	ea41 0102 	orr.w	r1, r1, r2
 80047dc:	6219      	str	r1, [r3, #32]
 80047de:	d017      	beq.n	8004810 <HAL_TIM_PWM_Start+0x58>
 80047e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047e4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d011      	beq.n	8004810 <HAL_TIM_PWM_Start+0x58>
 80047ec:	2207      	movs	r2, #7
 80047ee:	6899      	ldr	r1, [r3, #8]
 80047f0:	f2c0 0201 	movt	r2, #1
 80047f4:	400a      	ands	r2, r1
 80047f6:	2a06      	cmp	r2, #6
 80047f8:	d006      	beq.n	8004808 <HAL_TIM_PWM_Start+0x50>
 80047fa:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80047fe:	d003      	beq.n	8004808 <HAL_TIM_PWM_Start+0x50>
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	2000      	movs	r0, #0
 800480a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800480e:	4770      	bx	lr
 8004810:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004812:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004816:	645a      	str	r2, [r3, #68]	; 0x44
 8004818:	e7e8      	b.n	80047ec <HAL_TIM_PWM_Start+0x34>
 800481a:	bf00      	nop

0800481c <HAL_TIM_PWM_ConfigChannel>:
{
 800481c:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 800481e:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8004822:	2801      	cmp	r0, #1
 8004824:	f000 8170 	beq.w	8004b08 <HAL_TIM_PWM_ConfigChannel+0x2ec>
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	2002      	movs	r0, #2
{
 800482a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800482c:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800482e:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004832:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  switch (Channel)
 8004836:	2a14      	cmp	r2, #20
 8004838:	d84c      	bhi.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0xb8>
 800483a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800483e:	0015      	.short	0x0015
 8004840:	004b004b 	.word	0x004b004b
 8004844:	008b004b 	.word	0x008b004b
 8004848:	004b004b 	.word	0x004b004b
 800484c:	00fb004b 	.word	0x00fb004b
 8004850:	004b004b 	.word	0x004b004b
 8004854:	00c3004b 	.word	0x00c3004b
 8004858:	004b004b 	.word	0x004b004b
 800485c:	0130004b 	.word	0x0130004b
 8004860:	004b004b 	.word	0x004b004b
 8004864:	0053004b 	.word	0x0053004b
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004868:	681a      	ldr	r2, [r3, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800486a:	f64f 748c 	movw	r4, #65420	; 0xff8c
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800486e:	2700      	movs	r7, #0
  tmpccer |= OC_Config->OCPolarity;
 8004870:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004874:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004876:	f6cf 74fe 	movt	r4, #65534	; 0xfffe
  tmpccmrx |= OC_Config->OCMode;
 800487a:	f8d1 c000 	ldr.w	ip, [r1]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800487e:	f2c4 0701 	movt	r7, #16385	; 0x4001
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004882:	f025 0501 	bic.w	r5, r5, #1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004886:	42ba      	cmp	r2, r7
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004888:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 800488a:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 800488c:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800488e:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004890:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004894:	ea04 0405 	and.w	r4, r4, r5
  tmpccer |= OC_Config->OCPolarity;
 8004898:	ea40 000e 	orr.w	r0, r0, lr
  tmpccmrx |= OC_Config->OCMode;
 800489c:	ea44 040c 	orr.w	r4, r4, ip
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a0:	f000 8140 	beq.w	8004b24 <HAL_TIM_PWM_ConfigChannel+0x308>
 80048a4:	f44f 6580 	mov.w	r5, #1024	; 0x400
 80048a8:	f2c4 0501 	movt	r5, #16385	; 0x4001
 80048ac:	42aa      	cmp	r2, r5
 80048ae:	f000 8139 	beq.w	8004b24 <HAL_TIM_PWM_ConfigChannel+0x308>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048b2:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80048b4:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80048b6:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80048b8:	6355      	str	r5, [r2, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ba:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048bc:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048be:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048c0:	f040 0008 	orr.w	r0, r0, #8
 80048c4:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80048c6:	6990      	ldr	r0, [r2, #24]
 80048c8:	f020 0004 	bic.w	r0, r0, #4
 80048cc:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048ce:	6991      	ldr	r1, [r2, #24]
 80048d0:	4321      	orrs	r1, r4
 80048d2:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 80048d4:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80048d6:	2101      	movs	r1, #1
  return HAL_OK;
 80048d8:	4610      	mov	r0, r2
  htim->State = HAL_TIM_STATE_READY;
 80048da:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80048de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80048e4:	681a      	ldr	r2, [r3, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048e6:	f648 70ff 	movw	r0, #36863	; 0x8fff
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ea:	2600      	movs	r6, #0
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048ec:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048f0:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048f2:	f6cf 60ff 	movt	r0, #65279	; 0xfeff
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048f8:	f2c4 0601 	movt	r6, #16385	; 0x4001
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80048fc:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004900:	42b2      	cmp	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004902:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8004904:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004906:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8004908:	f8d2 e054 	ldr.w	lr, [r2, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800490c:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004910:	ea0e 0000 	and.w	r0, lr, r0
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004914:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800491c:	f000 80f6 	beq.w	8004b0c <HAL_TIM_PWM_ConfigChannel+0x2f0>
 8004920:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004924:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8004928:	42b2      	cmp	r2, r6
 800492a:	f000 80ef 	beq.w	8004b0c <HAL_TIM_PWM_ConfigChannel+0x2f0>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800492e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004930:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004932:	6550      	str	r0, [r2, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004934:	65d6      	str	r6, [r2, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004936:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004938:	6d50      	ldr	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800493a:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800493c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8004940:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004942:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8004944:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8004948:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800494a:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800494c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8004950:	6551      	str	r1, [r2, #84]	; 0x54
      break;
 8004952:	e7bf      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004954:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004956:	f648 44ff 	movw	r4, #36095	; 0x8cff
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800495a:	2700      	movs	r7, #0
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800495c:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004960:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004962:	f6cf 64ff 	movt	r4, #65279	; 0xfeff
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004966:	f8d1 c000 	ldr.w	ip, [r1]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800496a:	f2c4 0701 	movt	r7, #16385	; 0x4001
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	f025 0510 	bic.w	r5, r5, #16
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004972:	42ba      	cmp	r2, r7
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004974:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8004976:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004978:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 800497a:	6995      	ldr	r5, [r2, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800497c:	f020 0020 	bic.w	r0, r0, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004980:	ea04 0405 	and.w	r4, r4, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004984:	ea40 100e 	orr.w	r0, r0, lr, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004988:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800498c:	f000 80de 	beq.w	8004b4c <HAL_TIM_PWM_ConfigChannel+0x330>
 8004990:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004994:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004998:	42aa      	cmp	r2, r5
 800499a:	f000 80d7 	beq.w	8004b4c <HAL_TIM_PWM_ConfigChannel+0x330>
  TIMx->CCR2 = OC_Config->Pulse;
 800499e:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80049a0:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 80049a2:	6194      	str	r4, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80049a4:	6395      	str	r5, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80049a6:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049a8:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049aa:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049ac:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80049b0:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049b2:	6990      	ldr	r0, [r2, #24]
 80049b4:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 80049b8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049ba:	6991      	ldr	r1, [r2, #24]
 80049bc:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 80049c0:	6191      	str	r1, [r2, #24]
      break;
 80049c2:	e787      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c4:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049c6:	f648 40ff 	movw	r0, #36095	; 0x8cff
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ca:	2600      	movs	r6, #0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049cc:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049d0:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049d2:	f6cf 60ff 	movt	r0, #65279	; 0xfeff
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049d6:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049d8:	f2c4 0601 	movt	r6, #16385	; 0x4001
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049dc:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	42b2      	cmp	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049e2:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 80049e4:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80049e6:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80049e8:	f8d2 e01c 	ldr.w	lr, [r2, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80049ec:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049f0:	ea0e 0000 	and.w	r0, lr, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049f4:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049f8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049fc:	f000 80a0 	beq.w	8004b40 <HAL_TIM_PWM_ConfigChannel+0x324>
 8004a00:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004a04:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8004a08:	42b2      	cmp	r2, r6
 8004a0a:	f000 8099 	beq.w	8004b40 <HAL_TIM_PWM_ConfigChannel+0x324>
  TIMx->CCR4 = OC_Config->Pulse;
 8004a0e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a10:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004a12:	61d0      	str	r0, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004a14:	6416      	str	r6, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8004a16:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a18:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a1a:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a1c:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8004a20:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a22:	69d0      	ldr	r0, [r2, #28]
 8004a24:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8004a28:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a2a:	69d1      	ldr	r1, [r2, #28]
 8004a2c:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8004a30:	61d1      	str	r1, [r2, #28]
      break;
 8004a32:	e74f      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a34:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a36:	f64f 748c 	movw	r4, #65420	; 0xff8c
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a3a:	2700      	movs	r7, #0
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3c:	f8d1 e008 	ldr.w	lr, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a40:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a42:	f6cf 74fe 	movt	r4, #65534	; 0xfffe
  tmpccmrx |= OC_Config->OCMode;
 8004a46:	f8d1 c000 	ldr.w	ip, [r1]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a4a:	f2c4 0701 	movt	r7, #16385	; 0x4001
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a4e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a52:	42ba      	cmp	r2, r7
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a54:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8004a56:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004a58:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8004a5a:	69d5      	ldr	r5, [r2, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004a5c:	f420 7000 	bic.w	r0, r0, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a60:	ea04 0405 	and.w	r4, r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a64:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004a68:	ea44 040c 	orr.w	r4, r4, ip
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a6c:	d07d      	beq.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x34e>
 8004a6e:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004a72:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004a76:	42aa      	cmp	r2, r5
 8004a78:	d077      	beq.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x34e>
  TIMx->CCR3 = OC_Config->Pulse;
 8004a7a:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a7c:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004a7e:	61d4      	str	r4, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004a80:	63d5      	str	r5, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004a82:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a84:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a86:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a88:	f040 0008 	orr.w	r0, r0, #8
 8004a8c:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a8e:	69d0      	ldr	r0, [r2, #28]
 8004a90:	f020 0004 	bic.w	r0, r0, #4
 8004a94:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a96:	69d1      	ldr	r1, [r2, #28]
 8004a98:	4321      	orrs	r1, r4
 8004a9a:	61d1      	str	r1, [r2, #28]
      break;
 8004a9c:	e71a      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0xb8>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a9e:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aa0:	f64f 708f 	movw	r0, #65423	; 0xff8f
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa4:	2600      	movs	r6, #0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004aa6:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aaa:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aac:	f6cf 70fe 	movt	r0, #65534	; 0xfffe
  tmpccmrx |= OC_Config->OCMode;
 8004ab0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ab2:	f2c4 0601 	movt	r6, #16385	; 0x4001
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004ab6:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aba:	42b2      	cmp	r2, r6
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004abc:	6215      	str	r5, [r2, #32]
  tmpccer = TIMx->CCER;
 8004abe:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8004ac0:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8004ac2:	f8d2 e054 	ldr.w	lr, [r2, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 8004ac6:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004aca:	ea0e 0000 	and.w	r0, lr, r0
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ace:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8004ad2:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad6:	d01f      	beq.n	8004b18 <HAL_TIM_PWM_ConfigChannel+0x2fc>
 8004ad8:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004adc:	f2c4 0601 	movt	r6, #16385	; 0x4001
 8004ae0:	42b2      	cmp	r2, r6
 8004ae2:	d019      	beq.n	8004b18 <HAL_TIM_PWM_ConfigChannel+0x2fc>
  TIMx->CCR5 = OC_Config->Pulse;
 8004ae4:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ae6:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004ae8:	6550      	str	r0, [r2, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8004aea:	6596      	str	r6, [r2, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8004aec:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004aee:	6d50      	ldr	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004af0:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004af2:	f040 0008 	orr.w	r0, r0, #8
 8004af6:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004af8:	6d50      	ldr	r0, [r2, #84]	; 0x54
 8004afa:	f020 0004 	bic.w	r0, r0, #4
 8004afe:	6550      	str	r0, [r2, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b00:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8004b02:	4321      	orrs	r1, r4
 8004b04:	6551      	str	r1, [r2, #84]	; 0x54
      break;
 8004b06:	e6e5      	b.n	80048d4 <HAL_TIM_PWM_ConfigChannel+0xb8>
  __HAL_LOCK(htim);
 8004b08:	2002      	movs	r0, #2
}
 8004b0a:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b0c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b10:	694e      	ldr	r6, [r1, #20]
 8004b12:	ea45 2586 	orr.w	r5, r5, r6, lsl #10
 8004b16:	e70a      	b.n	800492e <HAL_TIM_PWM_ConfigChannel+0x112>
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b18:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b1c:	694e      	ldr	r6, [r1, #20]
 8004b1e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8004b22:	e7df      	b.n	8004ae4 <HAL_TIM_PWM_ConfigChannel+0x2c8>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b24:	f426 7c40 	bic.w	ip, r6, #768	; 0x300
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b28:	f020 0008 	bic.w	r0, r0, #8
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b2c:	698e      	ldr	r6, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8004b2e:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b30:	694d      	ldr	r5, [r1, #20]
    tmpccer |= OC_Config->OCNPolarity;
 8004b32:	4338      	orrs	r0, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b34:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b36:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b3a:	ea45 060c 	orr.w	r6, r5, ip
 8004b3e:	e6b8      	b.n	80048b2 <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b40:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b44:	694e      	ldr	r6, [r1, #20]
 8004b46:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8004b4a:	e760      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x1f2>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b4c:	f426 6c40 	bic.w	ip, r6, #3072	; 0xc00
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b50:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b54:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b56:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b58:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b5a:	ea40 1007 	orr.w	r0, r0, r7, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b5e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b60:	f020 0040 	bic.w	r0, r0, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b64:	ea4c 0685 	orr.w	r6, ip, r5, lsl #2
 8004b68:	e719      	b.n	800499e <HAL_TIM_PWM_ConfigChannel+0x182>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b6a:	f426 5c40 	bic.w	ip, r6, #12288	; 0x3000
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b6e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b72:	698e      	ldr	r6, [r1, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b74:	68cf      	ldr	r7, [r1, #12]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b76:	694d      	ldr	r5, [r1, #20]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b78:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b7e:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b82:	ea4c 1605 	orr.w	r6, ip, r5, lsl #4
 8004b86:	e778      	b.n	8004a7a <HAL_TIM_PWM_ConfigChannel+0x25e>

08004b88 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004b88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d05d      	beq.n	8004c4c <HAL_TIM_ConfigClockSource+0xc4>
  tmpsmcr = htim->Instance->SMCR;
 8004b90:	6803      	ldr	r3, [r0, #0]
 8004b92:	4602      	mov	r2, r0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b94:	2088      	movs	r0, #136	; 0x88
{
 8004b96:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	2402      	movs	r4, #2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9a:	f6cf 70fe 	movt	r0, #65534	; 0xfffe
  __HAL_LOCK(htim);
 8004b9e:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	f882 403d 	strb.w	r4, [r2, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004ba4:	689c      	ldr	r4, [r3, #8]
  __HAL_LOCK(htim);
 8004ba6:	f882 503c 	strb.w	r5, [r2, #60]	; 0x3c
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004baa:	4020      	ands	r0, r4
  switch (sClockSourceConfig->ClockSource)
 8004bac:	680c      	ldr	r4, [r1, #0]
 8004bae:	2c40      	cmp	r4, #64	; 0x40
  htim->Instance->SMCR = tmpsmcr;
 8004bb0:	6098      	str	r0, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8004bb2:	d076      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8004bb4:	d94c      	bls.n	8004c50 <HAL_TIM_ConfigClockSource+0xc8>
 8004bb6:	2c60      	cmp	r4, #96	; 0x60
 8004bb8:	d02f      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0x92>
 8004bba:	d958      	bls.n	8004c6e <HAL_TIM_ConfigClockSource+0xe6>
 8004bbc:	2c70      	cmp	r4, #112	; 0x70
 8004bbe:	d01b      	beq.n	8004bf8 <HAL_TIM_ConfigClockSource+0x70>
 8004bc0:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 8004bc4:	d10f      	bne.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bc6:	68cc      	ldr	r4, [r1, #12]
 8004bc8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8004bcc:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 8004bd0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd2:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bda:	4301      	orrs	r1, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bdc:	6099      	str	r1, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bde:	6899      	ldr	r1, [r3, #8]
 8004be0:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004be4:	6099      	str	r1, [r3, #8]
  __HAL_UNLOCK(htim);
 8004be6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004be8:	2101      	movs	r1, #1
  return HAL_OK;
 8004bea:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 8004bec:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004bf0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004bf4:	bc70      	pop	{r4, r5, r6}
 8004bf6:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf8:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
 8004bfc:	68cc      	ldr	r4, [r1, #12]
 8004bfe:	ea40 0105 	orr.w	r1, r0, r5
  tmpsmcr = TIMx->SMCR;
 8004c02:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c04:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c08:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c0c:	4301      	orrs	r1, r0
  TIMx->SMCR = tmpsmcr;
 8004c0e:	6099      	str	r1, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004c10:	6899      	ldr	r1, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c12:	f041 0177 	orr.w	r1, r1, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004c16:	6099      	str	r1, [r3, #8]
      break;
 8004c18:	e7e5      	b.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c1a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c1c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c1e:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c22:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c24:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c26:	6998      	ldr	r0, [r3, #24]
  tmpccer = TIMx->CCER;
 8004c28:	6a19      	ldr	r1, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c2a:	f420 4070 	bic.w	r0, r0, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c2e:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c32:	ea40 3006 	orr.w	r0, r0, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c36:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004c3a:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c3c:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004c3e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c40:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c44:	f041 0167 	orr.w	r1, r1, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004c48:	6099      	str	r1, [r3, #8]
 8004c4a:	e7cc      	b.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 8004c4c:	2002      	movs	r0, #2
}
 8004c4e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004c50:	2c10      	cmp	r4, #16
 8004c52:	d004      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xd6>
 8004c54:	d93d      	bls.n	8004cd2 <HAL_TIM_ConfigClockSource+0x14a>
 8004c56:	2c20      	cmp	r4, #32
 8004c58:	d001      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xd6>
 8004c5a:	2c30      	cmp	r4, #48	; 0x30
 8004c5c:	d1c3      	bne.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>
  tmpsmcr = TIMx->SMCR;
 8004c5e:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c60:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c64:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c68:	430c      	orrs	r4, r1
  TIMx->SMCR = tmpsmcr;
 8004c6a:	609c      	str	r4, [r3, #8]
 8004c6c:	e7bb      	b.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8004c6e:	2c50      	cmp	r4, #80	; 0x50
 8004c70:	d1b9      	bne.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8004c72:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c74:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c78:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7c:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c80:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004c82:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c84:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c86:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c88:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c8c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004c90:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c92:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004c94:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c96:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c9a:	f041 0157 	orr.w	r1, r1, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8004c9e:	6099      	str	r1, [r3, #8]
 8004ca0:	e7a1      	b.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>
  tmpccer = TIMx->CCER;
 8004ca2:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ca4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	6848      	ldr	r0, [r1, #4]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca8:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cac:	f024 0401 	bic.w	r4, r4, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb0:	68ce      	ldr	r6, [r1, #12]
  tmpccer |= TIM_ICPolarity;
 8004cb2:	4328      	orrs	r0, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cb4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb6:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cb8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cbc:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004cc0:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cc2:	6218      	str	r0, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8004cc4:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cc6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cca:	f041 0147 	orr.w	r1, r1, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004cce:	6099      	str	r1, [r3, #8]
 8004cd0:	e789      	b.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	d0c3      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0xd6>
 8004cd6:	e786      	b.n	8004be6 <HAL_TIM_ConfigClockSource+0x5e>

08004cd8 <HAL_TIM_PeriodElapsedCallback>:
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop

08004cdc <HAL_TIM_OC_DelayElapsedCallback>:
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <HAL_TIM_IC_CaptureCallback>:
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <HAL_TIM_TriggerCallback>:
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cec:	6803      	ldr	r3, [r0, #0]
 8004cee:	691a      	ldr	r2, [r3, #16]
 8004cf0:	0791      	lsls	r1, r2, #30
{
 8004cf2:	b510      	push	{r4, lr}
 8004cf4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf6:	d502      	bpl.n	8004cfe <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	0792      	lsls	r2, r2, #30
 8004cfc:	d468      	bmi.n	8004dd0 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cfe:	691a      	ldr	r2, [r3, #16]
 8004d00:	0752      	lsls	r2, r2, #29
 8004d02:	d502      	bpl.n	8004d0a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d04:	68da      	ldr	r2, [r3, #12]
 8004d06:	0750      	lsls	r0, r2, #29
 8004d08:	d44f      	bmi.n	8004daa <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d0a:	691a      	ldr	r2, [r3, #16]
 8004d0c:	0711      	lsls	r1, r2, #28
 8004d0e:	d502      	bpl.n	8004d16 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d10:	68da      	ldr	r2, [r3, #12]
 8004d12:	0712      	lsls	r2, r2, #28
 8004d14:	d437      	bmi.n	8004d86 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	06d0      	lsls	r0, r2, #27
 8004d1a:	d502      	bpl.n	8004d22 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	06d1      	lsls	r1, r2, #27
 8004d20:	d41e      	bmi.n	8004d60 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d22:	691a      	ldr	r2, [r3, #16]
 8004d24:	07d2      	lsls	r2, r2, #31
 8004d26:	d502      	bpl.n	8004d2e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	07d0      	lsls	r0, r2, #31
 8004d2c:	d469      	bmi.n	8004e02 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	0611      	lsls	r1, r2, #24
 8004d32:	d502      	bpl.n	8004d3a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	0612      	lsls	r2, r2, #24
 8004d38:	d46b      	bmi.n	8004e12 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	05d0      	lsls	r0, r2, #23
 8004d3e:	d502      	bpl.n	8004d46 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d40:	68da      	ldr	r2, [r3, #12]
 8004d42:	0611      	lsls	r1, r2, #24
 8004d44:	d46d      	bmi.n	8004e22 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	0652      	lsls	r2, r2, #25
 8004d4a:	d502      	bpl.n	8004d52 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d4c:	68da      	ldr	r2, [r3, #12]
 8004d4e:	0650      	lsls	r0, r2, #25
 8004d50:	d46f      	bmi.n	8004e32 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d52:	691a      	ldr	r2, [r3, #16]
 8004d54:	0691      	lsls	r1, r2, #26
 8004d56:	d502      	bpl.n	8004d5e <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d58:	68da      	ldr	r2, [r3, #12]
 8004d5a:	0692      	lsls	r2, r2, #26
 8004d5c:	d449      	bmi.n	8004df2 <HAL_TIM_IRQHandler+0x106>
}
 8004d5e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d60:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d64:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 8004d66:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d68:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d6a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d6c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d6e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004d72:	d16f      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d74:	f7ff ffb2 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	4620      	mov	r0, r4
 8004d7a:	f7ff ffb3 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	2200      	movs	r2, #0
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	7722      	strb	r2, [r4, #28]
 8004d84:	e7cd      	b.n	8004d22 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d86:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d8a:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d8e:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d90:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d92:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d94:	079b      	lsls	r3, r3, #30
 8004d96:	d15a      	bne.n	8004e4e <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d98:	f7ff ffa0 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff ffa1 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	2200      	movs	r2, #0
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	7722      	strb	r2, [r4, #28]
 8004da8:	e7b5      	b.n	8004d16 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004daa:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dae:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8004db0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004db2:	6119      	str	r1, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db4:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004db6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004db8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004dbc:	d144      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	f7ff ff8d 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	f7ff ff8e 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc8:	2200      	movs	r2, #0
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	7722      	strb	r2, [r4, #28]
 8004dce:	e79c      	b.n	8004d0a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd0:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dd4:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004dd6:	6119      	str	r1, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dd8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dda:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ddc:	0799      	lsls	r1, r3, #30
 8004dde:	d130      	bne.n	8004e42 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de0:	f7ff ff7c 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7ff ff7d 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dea:	2200      	movs	r2, #0
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	7722      	strb	r2, [r4, #28]
 8004df0:	e785      	b.n	8004cfe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004df6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004df8:	611a      	str	r2, [r3, #16]
}
 8004dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004dfe:	f000 b85f 	b.w	8004ec0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e02:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e0a:	f7ff ff65 	bl	8004cd8 <HAL_TIM_PeriodElapsedCallback>
 8004e0e:	6823      	ldr	r3, [r4, #0]
 8004e10:	e78d      	b.n	8004d2e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e12:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8004e16:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e18:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004e1a:	f000 f853 	bl	8004ec4 <HAL_TIMEx_BreakCallback>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	e78b      	b.n	8004d3a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e22:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 8004e26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e28:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004e2a:	f000 f84d 	bl	8004ec8 <HAL_TIMEx_Break2Callback>
 8004e2e:	6823      	ldr	r3, [r4, #0]
 8004e30:	e789      	b.n	8004d46 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e32:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8004e36:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e38:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004e3a:	f7ff ff55 	bl	8004ce8 <HAL_TIM_TriggerCallback>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	e787      	b.n	8004d52 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 8004e42:	f7ff ff4d 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004e46:	e7d0      	b.n	8004dea <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e48:	f7ff ff4a 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e7bc      	b.n	8004dc8 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	f7ff ff47 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004e52:	e7a6      	b.n	8004da2 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e54:	f7ff ff44 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004e58:	e791      	b.n	8004d7e <HAL_TIM_IRQHandler+0x92>
 8004e5a:	bf00      	nop

08004e5c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e5c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d029      	beq.n	8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0x5c>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e64:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e66:	2302      	movs	r3, #2
{
 8004e68:	b470      	push	{r4, r5, r6}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e6a:	2500      	movs	r5, #0
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004e70:	6853      	ldr	r3, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e72:	f2c4 0501 	movt	r5, #16385	; 0x4001
  tmpsmcr = htim->Instance->SMCR;
 8004e76:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e78:	42aa      	cmp	r2, r5
 8004e7a:	d018      	beq.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8004e7c:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8004e80:	f2c4 0501 	movt	r5, #16385	; 0x4001
 8004e84:	42aa      	cmp	r2, r5
 8004e86:	d012      	beq.n	8004eae <HAL_TIMEx_MasterConfigSynchronization+0x52>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e88:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8a:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e8e:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e94:	2601      	movs	r6, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e96:	432b      	orrs	r3, r5
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e98:	4321      	orrs	r1, r4

  __HAL_UNLOCK(htim);
 8004e9a:	2500      	movs	r5, #0
  htim->Instance->CR2 = tmpcr2;
 8004e9c:	6053      	str	r3, [r2, #4]
  htim->Instance->SMCR = tmpsmcr;
 8004e9e:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ea4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	bc70      	pop	{r4, r5, r6}
 8004eac:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004eae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eb2:	684d      	ldr	r5, [r1, #4]
 8004eb4:	432b      	orrs	r3, r5
 8004eb6:	e7e7      	b.n	8004e88 <HAL_TIMEx_MasterConfigSynchronization+0x2c>
  __HAL_LOCK(htim);
 8004eb8:	2302      	movs	r3, #2
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop

08004ec0 <HAL_TIMEx_CommutCallback>:
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop

08004ec4 <HAL_TIMEx_BreakCallback>:
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop

08004ec8 <HAL_TIMEx_Break2Callback>:
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop

08004ecc <HAL_UART_TxCpltCallback>:
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop

08004ed0 <HAL_UART_ErrorCallback>:
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop

08004ed4 <HAL_UART_IRQHandler>:
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ed4:	6803      	ldr	r3, [r0, #0]
 8004ed6:	69da      	ldr	r2, [r3, #28]
{
 8004ed8:	b570      	push	{r4, r5, r6, lr}
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == 0U)
 8004eda:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004edc:	681d      	ldr	r5, [r3, #0]
{
 8004ede:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ee0:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 8004ee2:	d04a      	beq.n	8004f7a <HAL_UART_IRQHandler+0xa6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004ee4:	f011 0101 	ands.w	r1, r1, #1
 8004ee8:	d04e      	beq.n	8004f88 <HAL_UART_IRQHandler+0xb4>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004eea:	07d0      	lsls	r0, r2, #31
 8004eec:	d507      	bpl.n	8004efe <HAL_UART_IRQHandler+0x2a>
 8004eee:	05ee      	lsls	r6, r5, #23
 8004ef0:	d505      	bpl.n	8004efe <HAL_UART_IRQHandler+0x2a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	6218      	str	r0, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ef6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004ef8:	f040 0001 	orr.w	r0, r0, #1
 8004efc:	67e0      	str	r0, [r4, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004efe:	0790      	lsls	r0, r2, #30
 8004f00:	d460      	bmi.n	8004fc4 <HAL_UART_IRQHandler+0xf0>

      huart->ErrorCode |= HAL_UART_ERROR_FE;
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f02:	0750      	lsls	r0, r2, #29
 8004f04:	d501      	bpl.n	8004f0a <HAL_UART_IRQHandler+0x36>
 8004f06:	2900      	cmp	r1, #0
 8004f08:	d166      	bne.n	8004fd8 <HAL_UART_IRQHandler+0x104>

      huart->ErrorCode |= HAL_UART_ERROR_NE;
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004f0a:	0716      	lsls	r6, r2, #28
 8004f0c:	d503      	bpl.n	8004f16 <HAL_UART_IRQHandler+0x42>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f0e:	06a8      	lsls	r0, r5, #26
 8004f10:	d469      	bmi.n	8004fe6 <HAL_UART_IRQHandler+0x112>
 8004f12:	2900      	cmp	r1, #0
 8004f14:	d167      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x112>

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f16:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	d034      	beq.n	8004f86 <HAL_UART_IRQHandler+0xb2>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f1c:	0696      	lsls	r6, r2, #26
 8004f1e:	d501      	bpl.n	8004f24 <HAL_UART_IRQHandler+0x50>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f20:	06a8      	lsls	r0, r5, #26
 8004f22:	d46b      	bmi.n	8004ffc <HAL_UART_IRQHandler+0x128>
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004f24:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f26:	6899      	ldr	r1, [r3, #8]
 8004f28:	0649      	lsls	r1, r1, #25
 8004f2a:	d402      	bmi.n	8004f32 <HAL_UART_IRQHandler+0x5e>
 8004f2c:	f015 0508 	ands.w	r5, r5, #8
 8004f30:	d06b      	beq.n	800500a <HAL_UART_IRQHandler+0x136>
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f32:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f34:	2020      	movs	r0, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f36:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f38:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004f3c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	609a      	str	r2, [r3, #8]
  huart->RxState = HAL_UART_STATE_READY;
 8004f46:	67a0      	str	r0, [r4, #120]	; 0x78
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	689a      	ldr	r2, [r3, #8]
  huart->RxISR = NULL;
 8004f4a:	6621      	str	r1, [r4, #96]	; 0x60
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4c:	0652      	lsls	r2, r2, #25
 8004f4e:	d551      	bpl.n	8004ff4 <HAL_UART_IRQHandler+0x120>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f50:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004f52:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8004f5a:	2900      	cmp	r1, #0
 8004f5c:	d04a      	beq.n	8004ff4 <HAL_UART_IRQHandler+0x120>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f5e:	f245 0315 	movw	r3, #20501	; 0x5015
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f62:	4608      	mov	r0, r1
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f64:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004f68:	650b      	str	r3, [r1, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f6a:	f7fc fbf3 	bl	8001754 <HAL_DMA_Abort_IT>
 8004f6e:	b150      	cbz	r0, 8004f86 <HAL_UART_IRQHandler+0xb2>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f70:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
}
 8004f72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f76:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004f78:	4718      	bx	r3
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f7a:	0691      	lsls	r1, r2, #26
 8004f7c:	d507      	bpl.n	8004f8e <HAL_UART_IRQHandler+0xba>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f7e:	06ae      	lsls	r6, r5, #26
 8004f80:	d505      	bpl.n	8004f8e <HAL_UART_IRQHandler+0xba>
      if (huart->RxISR != NULL)
 8004f82:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8004f84:	b9db      	cbnz	r3, 8004fbe <HAL_UART_IRQHandler+0xea>
}
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8004f88:	f415 7f90 	tst.w	r5, #288	; 0x120
 8004f8c:	d1ad      	bne.n	8004eea <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004f8e:	0616      	lsls	r6, r2, #24
 8004f90:	d40f      	bmi.n	8004fb2 <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f92:	0651      	lsls	r1, r2, #25
 8004f94:	d5f7      	bpl.n	8004f86 <HAL_UART_IRQHandler+0xb2>
 8004f96:	066a      	lsls	r2, r5, #25
 8004f98:	d5f5      	bpl.n	8004f86 <HAL_UART_IRQHandler+0xb2>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f9a:	681a      	ldr	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	2520      	movs	r5, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f9e:	2100      	movs	r1, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa0:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004fa8:	6765      	str	r5, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8004faa:	6661      	str	r1, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8004fac:	f7ff ff8e 	bl	8004ecc <HAL_UART_TxCpltCallback>
}
 8004fb0:	bd70      	pop	{r4, r5, r6, pc}
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004fb2:	0628      	lsls	r0, r5, #24
 8004fb4:	d5ed      	bpl.n	8004f92 <HAL_UART_IRQHandler+0xbe>
    if (huart->TxISR != NULL)
 8004fb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0e4      	beq.n	8004f86 <HAL_UART_IRQHandler+0xb2>
      huart->TxISR(huart);
 8004fbc:	4620      	mov	r0, r4
}
 8004fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 8004fc2:	4718      	bx	r3
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fc4:	2900      	cmp	r1, #0
 8004fc6:	d0a0      	beq.n	8004f0a <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fc8:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fca:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004fcc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fce:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004fd0:	f040 0004 	orr.w	r0, r0, #4
 8004fd4:	67e0      	str	r0, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fd6:	d598      	bpl.n	8004f0a <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fd8:	2004      	movs	r0, #4
 8004fda:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fdc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8004fde:	f040 0002 	orr.w	r0, r0, #2
 8004fe2:	67e0      	str	r0, [r4, #124]	; 0x7c
 8004fe4:	e791      	b.n	8004f0a <HAL_UART_IRQHandler+0x36>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe6:	2108      	movs	r1, #8
 8004fe8:	6219      	str	r1, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fea:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004fec:	f041 0108 	orr.w	r1, r1, #8
 8004ff0:	67e1      	str	r1, [r4, #124]	; 0x7c
 8004ff2:	e790      	b.n	8004f16 <HAL_UART_IRQHandler+0x42>
            HAL_UART_ErrorCallback(huart);
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7ff ff6b 	bl	8004ed0 <HAL_UART_ErrorCallback>
}
 8004ffa:	bd70      	pop	{r4, r5, r6, pc}
        if (huart->RxISR != NULL)
 8004ffc:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004ffe:	2a00      	cmp	r2, #0
 8005000:	d090      	beq.n	8004f24 <HAL_UART_IRQHandler+0x50>
          huart->RxISR(huart);
 8005002:	4620      	mov	r0, r4
 8005004:	4790      	blx	r2
 8005006:	6823      	ldr	r3, [r4, #0]
 8005008:	e78c      	b.n	8004f24 <HAL_UART_IRQHandler+0x50>
        HAL_UART_ErrorCallback(huart);
 800500a:	4620      	mov	r0, r4
 800500c:	f7ff ff60 	bl	8004ed0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005010:	67e5      	str	r5, [r4, #124]	; 0x7c
}
 8005012:	bd70      	pop	{r4, r5, r6, pc}

08005014 <UART_DMAAbortOnError>:
{
 8005014:	b508      	push	{r3, lr}
  huart->RxXferCount = 0U;
 8005016:	2200      	movs	r2, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005018:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 800501a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  HAL_UART_ErrorCallback(huart);
 800501e:	4618      	mov	r0, r3
  huart->TxXferCount = 0U;
 8005020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8005024:	f7ff ff54 	bl	8004ed0 <HAL_UART_ErrorCallback>
}
 8005028:	bd08      	pop	{r3, pc}
 800502a:	bf00      	nop

0800502c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800502c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800502e:	07da      	lsls	r2, r3, #31
{
 8005030:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005032:	d506      	bpl.n	8005042 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005034:	6801      	ldr	r1, [r0, #0]
 8005036:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005038:	684a      	ldr	r2, [r1, #4]
 800503a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800503e:	4322      	orrs	r2, r4
 8005040:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005042:	079c      	lsls	r4, r3, #30
 8005044:	d506      	bpl.n	8005054 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005046:	6801      	ldr	r1, [r0, #0]
 8005048:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800504a:	684a      	ldr	r2, [r1, #4]
 800504c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005050:	4322      	orrs	r2, r4
 8005052:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	0759      	lsls	r1, r3, #29
 8005056:	d506      	bpl.n	8005066 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005058:	6801      	ldr	r1, [r0, #0]
 800505a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800505c:	684a      	ldr	r2, [r1, #4]
 800505e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005062:	4322      	orrs	r2, r4
 8005064:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005066:	071a      	lsls	r2, r3, #28
 8005068:	d506      	bpl.n	8005078 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800506a:	6801      	ldr	r1, [r0, #0]
 800506c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800506e:	684a      	ldr	r2, [r1, #4]
 8005070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005074:	4322      	orrs	r2, r4
 8005076:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005078:	06dc      	lsls	r4, r3, #27
 800507a:	d506      	bpl.n	800508a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800507c:	6801      	ldr	r1, [r0, #0]
 800507e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005080:	688a      	ldr	r2, [r1, #8]
 8005082:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005086:	4322      	orrs	r2, r4
 8005088:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800508a:	0699      	lsls	r1, r3, #26
 800508c:	d506      	bpl.n	800509c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800508e:	6801      	ldr	r1, [r0, #0]
 8005090:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005092:	688a      	ldr	r2, [r1, #8]
 8005094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005098:	4322      	orrs	r2, r4
 800509a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800509c:	065a      	lsls	r2, r3, #25
 800509e:	d50a      	bpl.n	80050b6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a0:	6801      	ldr	r1, [r0, #0]
 80050a2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80050a4:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050a6:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050aa:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80050ae:	ea42 0204 	orr.w	r2, r2, r4
 80050b2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b4:	d00b      	beq.n	80050ce <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050b6:	061b      	lsls	r3, r3, #24
 80050b8:	d506      	bpl.n	80050c8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ba:	6802      	ldr	r2, [r0, #0]
 80050bc:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80050be:	6853      	ldr	r3, [r2, #4]
 80050c0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80050c4:	430b      	orrs	r3, r1
 80050c6:	6053      	str	r3, [r2, #4]
}
 80050c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050cc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050ce:	684a      	ldr	r2, [r1, #4]
 80050d0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80050d2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80050d6:	4322      	orrs	r2, r4
 80050d8:	604a      	str	r2, [r1, #4]
 80050da:	e7ec      	b.n	80050b6 <UART_AdvFeatureConfig+0x8a>

080050dc <HAL_UART_Init>:
  if (huart == NULL)
 80050dc:	2800      	cmp	r0, #0
 80050de:	d06e      	beq.n	80051be <HAL_UART_Init+0xe2>
{
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80050e4:	4604      	mov	r4, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d064      	beq.n	80051b4 <HAL_UART_Init+0xd8>
  __HAL_UART_DISABLE(huart);
 80050ea:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80050ec:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050ee:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050f0:	f646 15f3 	movw	r5, #27123	; 0x69f3
  huart->gState = HAL_UART_STATE_BUSY;
 80050f4:	6761      	str	r1, [r4, #116]	; 0x74
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_UART_DISABLE(huart);
 80050fa:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050fc:	f6ce 75ff 	movt	r5, #61439	; 0xefff
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005100:	68a2      	ldr	r2, [r4, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005102:	f2c4 0001 	movt	r0, #16385	; 0x4001
  __HAL_UART_DISABLE(huart);
 8005106:	f021 0101 	bic.w	r1, r1, #1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800510a:	68e7      	ldr	r7, [r4, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800510c:	4332      	orrs	r2, r6
 800510e:	6966      	ldr	r6, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8005110:	6019      	str	r1, [r3, #0]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005112:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005114:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005116:	ea42 0206 	orr.w	r2, r2, r6
 800511a:	69e6      	ldr	r6, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800511c:	ea05 0501 	and.w	r5, r5, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005120:	69a1      	ldr	r1, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005122:	ea42 0206 	orr.w	r2, r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005126:	ea42 0205 	orr.w	r2, r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 800512a:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800512c:	601a      	str	r2, [r3, #0]
  tmpreg |= huart->Init.OneBitSampling;
 800512e:	ea41 0205 	orr.w	r2, r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005132:	6859      	ldr	r1, [r3, #4]
 8005134:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005138:	ea41 0107 	orr.w	r1, r1, r7
 800513c:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800513e:	6899      	ldr	r1, [r3, #8]
 8005140:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8005144:	ea42 0201 	orr.w	r2, r2, r1
 8005148:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800514a:	d03a      	beq.n	80051c2 <HAL_UART_Init+0xe6>
 800514c:	f44f 4288 	mov.w	r2, #17408	; 0x4400
 8005150:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005154:	4293      	cmp	r3, r2
 8005156:	d05b      	beq.n	8005210 <HAL_UART_Init+0x134>
 8005158:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 800515c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005160:	4293      	cmp	r3, r2
 8005162:	f000 80f1 	beq.w	8005348 <HAL_UART_Init+0x26c>
 8005166:	f44f 4298 	mov.w	r2, #19456	; 0x4c00
 800516a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800516e:	4293      	cmp	r3, r2
 8005170:	d05c      	beq.n	800522c <HAL_UART_Init+0x150>
 8005172:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
 8005176:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800517a:	4293      	cmp	r3, r2
 800517c:	f000 80ff 	beq.w	800537e <HAL_UART_Init+0x2a2>
 8005180:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8005184:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005188:	4293      	cmp	r3, r2
 800518a:	f000 8173 	beq.w	8005474 <HAL_UART_Init+0x398>
 800518e:	f44f 42f0 	mov.w	r2, #30720	; 0x7800
 8005192:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8005196:	4293      	cmp	r3, r2
 8005198:	f000 8181 	beq.w	800549e <HAL_UART_Init+0x3c2>
 800519c:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
 80051a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80051a4:	4293      	cmp	r3, r2
 80051a6:	f000 8150 	beq.w	800544a <HAL_UART_Init+0x36e>
  huart->RxISR = NULL;
 80051aa:	2300      	movs	r3, #0
    return HAL_ERROR;
 80051ac:	2001      	movs	r0, #1
  huart->TxISR = NULL;
 80051ae:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
}
 80051b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80051b4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80051b8:	f004 fca2 	bl	8009b00 <HAL_UART_MspInit>
 80051bc:	e795      	b.n	80050ea <HAL_UART_Init+0xe>
    return HAL_ERROR;
 80051be:	2001      	movs	r0, #1
}
 80051c0:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80051c6:	f24a 6254 	movw	r2, #42580	; 0xa654
 80051ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80051ce:	f6c0 0200 	movt	r2, #2048	; 0x800
 80051d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d6:	f003 0303 	and.w	r3, r3, #3
 80051da:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051dc:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80051e0:	d037      	beq.n	8005252 <HAL_UART_Init+0x176>
    switch (clocksource)
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d8e1      	bhi.n	80051aa <HAL_UART_Init+0xce>
 80051e6:	a201      	add	r2, pc, #4	; (adr r2, 80051ec <HAL_UART_Init+0x110>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005337 	.word	0x08005337
 80051f0:	0800528d 	.word	0x0800528d
 80051f4:	08005369 	.word	0x08005369
 80051f8:	080051ab 	.word	0x080051ab
 80051fc:	0800539b 	.word	0x0800539b
 8005200:	080051ab 	.word	0x080051ab
 8005204:	080051ab 	.word	0x080051ab
 8005208:	080051ab 	.word	0x080051ab
 800520c:	080053ad 	.word	0x080053ad
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005210:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005214:	f24a 6258 	movw	r2, #42584	; 0xa658
 8005218:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800521c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005224:	f003 030c 	and.w	r3, r3, #12
 8005228:	5cd3      	ldrb	r3, [r2, r3]
 800522a:	e7d7      	b.n	80051dc <HAL_UART_Init+0x100>
 800522c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005230:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800523c:	2b40      	cmp	r3, #64	; 0x40
 800523e:	f000 80a9 	beq.w	8005394 <HAL_UART_Init+0x2b8>
 8005242:	d971      	bls.n	8005328 <HAL_UART_Init+0x24c>
 8005244:	2b80      	cmp	r3, #128	; 0x80
 8005246:	f000 808c 	beq.w	8005362 <HAL_UART_Init+0x286>
 800524a:	2bc0      	cmp	r3, #192	; 0xc0
 800524c:	f000 80c3 	beq.w	80053d6 <HAL_UART_Init+0x2fa>
 8005250:	e7ab      	b.n	80051aa <HAL_UART_Init+0xce>
    switch (clocksource)
 8005252:	2b08      	cmp	r3, #8
 8005254:	d8a9      	bhi.n	80051aa <HAL_UART_Init+0xce>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <HAL_UART_Init+0x180>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	08005445 	.word	0x08005445
 8005260:	08005415 	.word	0x08005415
 8005264:	0800542f 	.word	0x0800542f
 8005268:	080051ab 	.word	0x080051ab
 800526c:	08005429 	.word	0x08005429
 8005270:	080051ab 	.word	0x080051ab
 8005274:	080051ab 	.word	0x080051ab
 8005278:	080051ab 	.word	0x080051ab
 800527c:	080053dd 	.word	0x080053dd
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005280:	2b00      	cmp	r3, #0
 8005282:	d192      	bne.n	80051aa <HAL_UART_Init+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005284:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005288:	f000 80c4 	beq.w	8005414 <HAL_UART_Init+0x338>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800528c:	f7fd f8d0 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
 8005290:	6863      	ldr	r3, [r4, #4]
 8005292:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8005296:	fbb2 f2f3 	udiv	r2, r2, r3
 800529a:	b292      	uxth	r2, r2
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529c:	f1a2 0110 	sub.w	r1, r2, #16
 80052a0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80052a4:	4299      	cmp	r1, r3
 80052a6:	d880      	bhi.n	80051aa <HAL_UART_Init+0xce>
      huart->Instance->BRR = usartdiv;
 80052a8:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 80052aa:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 80052ac:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 80052ae:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052b4:	2a00      	cmp	r2, #0
 80052b6:	f040 8081 	bne.w	80053bc <HAL_UART_Init+0x2e0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ba:	685a      	ldr	r2, [r3, #4]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	2100      	movs	r1, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c4:	689a      	ldr	r2, [r3, #8]
 80052c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d4:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80052d6:	f7fb fe53 	bl	8000f80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052da:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80052dc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	0712      	lsls	r2, r2, #28
 80052e2:	d407      	bmi.n	80052f4 <HAL_UART_Init+0x218>
  huart->gState = HAL_UART_STATE_READY;
 80052e4:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 80052e6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	6762      	str	r2, [r4, #116]	; 0x74
  return HAL_OK;
 80052ea:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80052ec:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80052ee:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 80052f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052f4:	69dd      	ldr	r5, [r3, #28]
 80052f6:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80052fa:	d1f3      	bne.n	80052e4 <HAL_UART_Init+0x208>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052fc:	f7fb fe40 	bl	8000f80 <HAL_GetTick>
 8005300:	1b80      	subs	r0, r0, r6
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005302:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005304:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 8005308:	d3f4      	bcc.n	80052f4 <HAL_UART_Init+0x218>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800530a:	681a      	ldr	r2, [r3, #0]
        huart->gState = HAL_UART_STATE_READY;
 800530c:	2120      	movs	r1, #32
      return HAL_TIMEOUT;
 800530e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005310:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005314:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	f022 0201 	bic.w	r2, r2, #1
 800531c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 800531e:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8005320:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8005324:	67a1      	str	r1, [r4, #120]	; 0x78
}
 8005326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005328:	2b00      	cmp	r3, #0
 800532a:	f47f af3e 	bne.w	80051aa <HAL_UART_Init+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800532e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005332:	f000 8087 	beq.w	8005444 <HAL_UART_Init+0x368>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005336:	f7fd f867 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 800533a:	6863      	ldr	r3, [r4, #4]
 800533c:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 8005340:	fbb2 f2f3 	udiv	r2, r2, r3
 8005344:	b292      	uxth	r2, r2
 8005346:	e7a9      	b.n	800529c <HAL_UART_Init+0x1c0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005348:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800534c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005354:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005358:	2b10      	cmp	r3, #16
 800535a:	d01b      	beq.n	8005394 <HAL_UART_Init+0x2b8>
 800535c:	d9e4      	bls.n	8005328 <HAL_UART_Init+0x24c>
 800535e:	2b20      	cmp	r3, #32
 8005360:	d155      	bne.n	800540e <HAL_UART_Init+0x332>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005362:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005366:	d062      	beq.n	800542e <HAL_UART_Init+0x352>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005368:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800536c:	6861      	ldr	r1, [r4, #4]
 800536e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8005372:	eb03 0251 	add.w	r2, r3, r1, lsr #1
 8005376:	fbb2 f2f1 	udiv	r2, r2, r1
 800537a:	b292      	uxth	r2, r2
 800537c:	e78e      	b.n	800529c <HAL_UART_Init+0x1c0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800537e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005392:	d118      	bne.n	80053c6 <HAL_UART_Init+0x2ea>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005394:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8005398:	d046      	beq.n	8005428 <HAL_UART_Init+0x34c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800539a:	f7fc fff5 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800539e:	6863      	ldr	r3, [r4, #4]
 80053a0:	eb00 0253 	add.w	r2, r0, r3, lsr #1
 80053a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053a8:	b292      	uxth	r2, r2
 80053aa:	e777      	b.n	800529c <HAL_UART_Init+0x1c0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80053ac:	6863      	ldr	r3, [r4, #4]
 80053ae:	085a      	lsrs	r2, r3, #1
 80053b0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80053b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80053b8:	b292      	uxth	r2, r2
 80053ba:	e76f      	b.n	800529c <HAL_UART_Init+0x1c0>
    UART_AdvFeatureConfig(huart);
 80053bc:	4620      	mov	r0, r4
 80053be:	f7ff fe35 	bl	800502c <UART_AdvFeatureConfig>
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	e779      	b.n	80052ba <HAL_UART_Init+0x1de>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053c6:	d9af      	bls.n	8005328 <HAL_UART_Init+0x24c>
 80053c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053cc:	d0c9      	beq.n	8005362 <HAL_UART_Init+0x286>
 80053ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d2:	f47f aeea 	bne.w	80051aa <HAL_UART_Init+0xce>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d6:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 80053da:	d1e7      	bne.n	80053ac <HAL_UART_Init+0x2d0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80053dc:	6862      	ldr	r2, [r4, #4]
 80053de:	0853      	lsrs	r3, r2, #1
 80053e0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80053e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053e8:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ea:	f1a3 0110 	sub.w	r1, r3, #16
 80053ee:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80053f2:	4291      	cmp	r1, r2
 80053f4:	f63f aed9 	bhi.w	80051aa <HAL_UART_Init+0xce>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053f8:	f023 010f 	bic.w	r1, r3, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053fc:	f3c3 0242 	ubfx	r2, r3, #1, #3
  huart->RxISR = NULL;
 8005400:	2000      	movs	r0, #0
      huart->Instance->BRR = brrtemp;
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	430a      	orrs	r2, r1
 8005406:	60da      	str	r2, [r3, #12]
  huart->TxISR = NULL;
 8005408:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 800540c:	e751      	b.n	80052b2 <HAL_UART_Init+0x1d6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800540e:	2b30      	cmp	r3, #48	; 0x30
 8005410:	d0e1      	beq.n	80053d6 <HAL_UART_Init+0x2fa>
 8005412:	e6ca      	b.n	80051aa <HAL_UART_Init+0xce>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8005414:	f7fd f80c 	bl	8002430 <HAL_RCC_GetPCLK2Freq>
 8005418:	6862      	ldr	r2, [r4, #4]
 800541a:	0853      	lsrs	r3, r2, #1
 800541c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8005420:	fbb3 f3f2 	udiv	r3, r3, r2
 8005424:	b29b      	uxth	r3, r3
 8005426:	e7e0      	b.n	80053ea <HAL_UART_Init+0x30e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8005428:	f7fc ffae 	bl	8002388 <HAL_RCC_GetSysClockFreq>
 800542c:	e7f4      	b.n	8005418 <HAL_UART_Init+0x33c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800542e:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8005432:	6862      	ldr	r2, [r4, #4]
 8005434:	f2c0 13e8 	movt	r3, #488	; 0x1e8
 8005438:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800543c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005440:	b29b      	uxth	r3, r3
 8005442:	e7d2      	b.n	80053ea <HAL_UART_Init+0x30e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8005444:	f7fc ffe0 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8005448:	e7e6      	b.n	8005418 <HAL_UART_Init+0x33c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800544a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800544e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005456:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800545a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800545e:	d099      	beq.n	8005394 <HAL_UART_Init+0x2b8>
 8005460:	f67f af62 	bls.w	8005328 <HAL_UART_Init+0x24c>
 8005464:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005468:	f43f af7b 	beq.w	8005362 <HAL_UART_Init+0x286>
 800546c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005470:	d0b1      	beq.n	80053d6 <HAL_UART_Init+0x2fa>
 8005472:	e69a      	b.n	80051aa <HAL_UART_Init+0xce>
 8005474:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8005478:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005488:	d084      	beq.n	8005394 <HAL_UART_Init+0x2b8>
 800548a:	f67f aef9 	bls.w	8005280 <HAL_UART_Init+0x1a4>
 800548e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005492:	f43f af66 	beq.w	8005362 <HAL_UART_Init+0x286>
 8005496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800549a:	d09c      	beq.n	80053d6 <HAL_UART_Init+0x2fa>
 800549c:	e685      	b.n	80051aa <HAL_UART_Init+0xce>
 800549e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80054a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80054ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b2:	f43f af6f 	beq.w	8005394 <HAL_UART_Init+0x2b8>
 80054b6:	f67f af37 	bls.w	8005328 <HAL_UART_Init+0x24c>
 80054ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054be:	f43f af50 	beq.w	8005362 <HAL_UART_Init+0x286>
 80054c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80054c6:	d086      	beq.n	80053d6 <HAL_UART_Init+0x2fa>
 80054c8:	e66f      	b.n	80051aa <HAL_UART_Init+0xce>
 80054ca:	bf00      	nop

080054cc <SDMMC_GetCmdResp1.part.2>:
  * @brief  Checks for error conditions for R1 response.
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
 80054cc:	b410      	push	{r4}
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80054ce:	f100 0214 	add.w	r2, r0, #20
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
 80054d2:	b083      	sub	sp, #12
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80054d4:	f240 54ff 	movw	r4, #1535	; 0x5ff
  __IO uint32_t tmp = 0;
 80054d8:	2100      	movs	r1, #0
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80054da:	f24e 0308 	movw	r3, #57352	; 0xe008
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 80054de:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 80054e0:	9101      	str	r1, [sp, #4]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80054e2:	f6cf 53ff 	movt	r3, #65023	; 0xfdff
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 80054e6:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 80054e8:	9a01      	ldr	r2, [sp, #4]
 80054ea:	6812      	ldr	r2, [r2, #0]
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80054ec:	4013      	ands	r3, r2
 80054ee:	b34b      	cbz	r3, 8005544 <SDMMC_GetCmdResp1.part.2+0x78>
  {
    return SDMMC_ERROR_NONE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80054f0:	428a      	cmp	r2, r1
 80054f2:	db2c      	blt.n	800554e <SDMMC_GetCmdResp1.part.2+0x82>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80054f4:	0053      	lsls	r3, r2, #1
 80054f6:	d433      	bmi.n	8005560 <SDMMC_GetCmdResp1.part.2+0x94>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80054f8:	0094      	lsls	r4, r2, #2
 80054fa:	d436      	bmi.n	800556a <SDMMC_GetCmdResp1.part.2+0x9e>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80054fc:	00d1      	lsls	r1, r2, #3
 80054fe:	d42c      	bmi.n	800555a <SDMMC_GetCmdResp1.part.2+0x8e>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005500:	0113      	lsls	r3, r2, #4
 8005502:	d437      	bmi.n	8005574 <SDMMC_GetCmdResp1.part.2+0xa8>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005504:	0154      	lsls	r4, r2, #5
 8005506:	d438      	bmi.n	800557a <SDMMC_GetCmdResp1.part.2+0xae>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005508:	01d1      	lsls	r1, r2, #7
 800550a:	d430      	bmi.n	800556e <SDMMC_GetCmdResp1.part.2+0xa2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800550c:	0213      	lsls	r3, r2, #8
 800550e:	d437      	bmi.n	8005580 <SDMMC_GetCmdResp1.part.2+0xb4>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005510:	0254      	lsls	r4, r2, #9
 8005512:	d438      	bmi.n	8005586 <SDMMC_GetCmdResp1.part.2+0xba>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005514:	0291      	lsls	r1, r2, #10
 8005516:	d439      	bmi.n	800558c <SDMMC_GetCmdResp1.part.2+0xc0>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005518:	02d3      	lsls	r3, r2, #11
 800551a:	d43a      	bmi.n	8005592 <SDMMC_GetCmdResp1.part.2+0xc6>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800551c:	0354      	lsls	r4, r2, #13
 800551e:	d43b      	bmi.n	8005598 <SDMMC_GetCmdResp1.part.2+0xcc>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005520:	0391      	lsls	r1, r2, #14
 8005522:	d43c      	bmi.n	800559e <SDMMC_GetCmdResp1.part.2+0xd2>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005524:	03d3      	lsls	r3, r2, #15
 8005526:	d43d      	bmi.n	80055a4 <SDMMC_GetCmdResp1.part.2+0xd8>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005528:	0414      	lsls	r4, r2, #16
 800552a:	d43e      	bmi.n	80055aa <SDMMC_GetCmdResp1.part.2+0xde>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800552c:	0451      	lsls	r1, r2, #17
 800552e:	d43f      	bmi.n	80055b0 <SDMMC_GetCmdResp1.part.2+0xe4>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005530:	0493      	lsls	r3, r2, #18
 8005532:	d440      	bmi.n	80055b6 <SDMMC_GetCmdResp1.part.2+0xea>
  {
    return SDMMC_ERROR_ERASE_RESET;
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005534:	f012 0f08 	tst.w	r2, #8
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005538:	bf14      	ite	ne
 800553a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800553e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005542:	e000      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_NONE;
 8005544:	4618      	mov	r0, r3
  }
}
 8005546:	b003      	add	sp, #12
 8005548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800554c:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800554e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
}
 8005552:	b003      	add	sp, #12
 8005554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005558:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800555a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800555e:	e7f2      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005560:	2040      	movs	r0, #64	; 0x40
}
 8005562:	b003      	add	sp, #12
 8005564:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005568:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800556a:	2080      	movs	r0, #128	; 0x80
 800556c:	e7eb      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800556e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005572:	e7e8      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005574:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005578:	e7e5      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800557a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800557e:	e7e2      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005580:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005584:	e7df      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005586:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800558a:	e7dc      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800558c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005590:	e7d9      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_CC_ERR;
 8005592:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005596:	e7d6      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005598:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800559c:	e7d3      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800559e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80055a2:	e7d0      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80055a4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80055a8:	e7cd      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80055aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80055ae:	e7ca      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80055b0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80055b4:	e7c7      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>
    return SDMMC_ERROR_ERASE_RESET;
 80055b6:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80055ba:	e7c4      	b.n	8005546 <SDMMC_GetCmdResp1.part.2+0x7a>

080055bc <SDMMC_Init>:
{
 80055bc:	b084      	sub	sp, #16
 80055be:	b470      	push	{r4, r5, r6}
 80055c0:	ae04      	add	r6, sp, #16
             Init.ClockPowerSave      |\
 80055c2:	9c07      	ldr	r4, [sp, #28]
{
 80055c4:	4605      	mov	r5, r0
}
 80055c6:	2000      	movs	r0, #0
{
 80055c8:	e886 000e 	stmia.w	r6, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           |\
 80055cc:	460b      	mov	r3, r1
 80055ce:	9905      	ldr	r1, [sp, #20]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055d0:	f44f 4201 	mov.w	r2, #33024	; 0x8100
  tmpreg |= (Init.ClockEdge           |\
 80055d4:	430b      	orrs	r3, r1
             Init.ClockBypass         |\
 80055d6:	9906      	ldr	r1, [sp, #24]
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055d8:	f6cf 72ff 	movt	r2, #65535	; 0xffff
             Init.ClockBypass         |\
 80055dc:	430b      	orrs	r3, r1
             Init.BusWide             |\
 80055de:	9908      	ldr	r1, [sp, #32]
             Init.ClockPowerSave      |\
 80055e0:	4323      	orrs	r3, r4
             Init.HardwareFlowControl |\
 80055e2:	9c09      	ldr	r4, [sp, #36]	; 0x24
             Init.BusWide             |\
 80055e4:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055e6:	6869      	ldr	r1, [r5, #4]
             Init.HardwareFlowControl |\
 80055e8:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80055ea:	400a      	ands	r2, r1
 80055ec:	4313      	orrs	r3, r2
 80055ee:	606b      	str	r3, [r5, #4]
}
 80055f0:	bc70      	pop	{r4, r5, r6}
 80055f2:	b004      	add	sp, #16
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop

080055f8 <SDMMC_ReadFIFO>:
  return (SDMMCx->FIFO);
 80055f8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop

08005600 <SDMMC_WriteFIFO>:
{ 
 8005600:	4603      	mov	r3, r0
  SDMMCx->FIFO = *pWriteData;
 8005602:	680a      	ldr	r2, [r1, #0]
}
 8005604:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 8005606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800560a:	4770      	bx	lr

0800560c <SDMMC_PowerState_ON>:
{  
 800560c:	4603      	mov	r3, r0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800560e:	2203      	movs	r2, #3
}
 8005610:	2000      	movs	r0, #0
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8005612:	601a      	str	r2, [r3, #0]
}
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop

08005618 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8005618:	6800      	ldr	r0, [r0, #0]
}
 800561a:	f000 0003 	and.w	r0, r0, #3
 800561e:	4770      	bx	lr

08005620 <SDMMC_GetResponse>:
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005620:	3014      	adds	r0, #20
{
 8005622:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0;
 8005624:	2300      	movs	r3, #0
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005626:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8005628:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800562a:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	6818      	ldr	r0, [r3, #0]
}  
 8005630:	b002      	add	sp, #8
 8005632:	4770      	bx	lr

08005634 <SDMMC_ConfigData>:
{
 8005634:	b430      	push	{r4, r5}
 8005636:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005638:	680c      	ldr	r4, [r1, #0]
}
 800563a:	2000      	movs	r0, #0
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800563c:	e9d1 3502 	ldrd	r3, r5, [r1, #8]
 8005640:	432b      	orrs	r3, r5
  SDMMCx->DLEN = Data->DataLength;
 8005642:	684d      	ldr	r5, [r1, #4]
  SDMMCx->DTIMER = Data->DataTimeOut;
 8005644:	6254      	str	r4, [r2, #36]	; 0x24
                       Data->TransferDir   |\
 8005646:	690c      	ldr	r4, [r1, #16]
  SDMMCx->DLEN = Data->DataLength;
 8005648:	6295      	str	r5, [r2, #40]	; 0x28
                       Data->TransferDir   |\
 800564a:	4323      	orrs	r3, r4
                       Data->TransferMode  |\
 800564c:	694d      	ldr	r5, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800564e:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
                       Data->TransferMode  |\
 8005650:	432b      	orrs	r3, r5
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005652:	f024 01f7 	bic.w	r1, r4, #247	; 0xf7
 8005656:	430b      	orrs	r3, r1
}
 8005658:	bc30      	pop	{r4, r5}
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800565a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop

08005660 <SDMMC_CmdBlockLength>:
{
 8005660:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005662:	f240 040c 	movw	r4, #12
 8005666:	f644 55d3 	movw	r5, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800566a:	f44f 4270 	mov.w	r2, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 800566e:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005670:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005674:	f2c1 0562 	movt	r5, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005678:	f6cf 72ff 	movt	r2, #65535	; 0xffff
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800567c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005680:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005682:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005684:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005688:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800568a:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800568c:	f442 628a 	orr.w	r2, r2, #1104	; 0x450
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005690:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005694:	60c2      	str	r2, [r0, #12]
 8005696:	e003      	b.n	80056a0 <SDMMC_CmdBlockLength+0x40>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005698:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800569a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800569e:	d106      	bne.n	80056ae <SDMMC_CmdBlockLength+0x4e>
    if (count-- == 0)
 80056a0:	f113 33ff 	adds.w	r3, r3, #4294967295
 80056a4:	d2f8      	bcs.n	8005698 <SDMMC_CmdBlockLength+0x38>
      return SDMMC_ERROR_TIMEOUT;
 80056a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80056aa:	bc30      	pop	{r4, r5}
 80056ac:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80056ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056b0:	075a      	lsls	r2, r3, #29
 80056b2:	d40e      	bmi.n	80056d2 <SDMMC_CmdBlockLength+0x72>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80056b4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056b6:	07db      	lsls	r3, r3, #31
 80056b8:	d406      	bmi.n	80056c8 <SDMMC_CmdBlockLength+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 80056ba:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b10      	cmp	r3, #16
 80056c0:	d00c      	beq.n	80056dc <SDMMC_CmdBlockLength+0x7c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056c2:	2001      	movs	r0, #1
}
 80056c4:	bc30      	pop	{r4, r5}
 80056c6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80056c8:	2301      	movs	r3, #1
}
 80056ca:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80056cc:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80056ce:	4618      	mov	r0, r3
}
 80056d0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80056d2:	2304      	movs	r3, #4
}
 80056d4:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80056d6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80056d8:	4618      	mov	r0, r3
}
 80056da:	4770      	bx	lr
 80056dc:	bc30      	pop	{r4, r5}
 80056de:	f7ff bef5 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>
 80056e2:	bf00      	nop

080056e4 <SDMMC_CmdReadSingleBlock>:
{
 80056e4:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80056e6:	f240 050c 	movw	r5, #12
 80056ea:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80056ee:	f44f 4470 	mov.w	r4, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 80056f2:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80056f4:	f2c2 0500 	movt	r5, #8192	; 0x2000
 80056f8:	f2c1 0362 	movt	r3, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80056fc:	f6cf 74ff 	movt	r4, #65535	; 0xffff
 8005700:	f240 4151 	movw	r1, #1105	; 0x451
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005704:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005706:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005708:	fba3 3202 	umull	r3, r2, r3, r2
 800570c:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005710:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005712:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005714:	4321      	orrs	r1, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005716:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800571a:	60c1      	str	r1, [r0, #12]
 800571c:	e003      	b.n	8005726 <SDMMC_CmdReadSingleBlock+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800571e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005720:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005724:	d106      	bne.n	8005734 <SDMMC_CmdReadSingleBlock+0x50>
    if (count-- == 0)
 8005726:	f113 33ff 	adds.w	r3, r3, #4294967295
 800572a:	d2f8      	bcs.n	800571e <SDMMC_CmdReadSingleBlock+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 800572c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005730:	bc30      	pop	{r4, r5}
 8005732:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005734:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005736:	075a      	lsls	r2, r3, #29
 8005738:	d40e      	bmi.n	8005758 <SDMMC_CmdReadSingleBlock+0x74>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800573a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800573c:	07db      	lsls	r3, r3, #31
 800573e:	d406      	bmi.n	800574e <SDMMC_CmdReadSingleBlock+0x6a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8005740:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b11      	cmp	r3, #17
 8005746:	d00c      	beq.n	8005762 <SDMMC_CmdReadSingleBlock+0x7e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005748:	2001      	movs	r0, #1
}
 800574a:	bc30      	pop	{r4, r5}
 800574c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800574e:	2301      	movs	r3, #1
}
 8005750:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005752:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005754:	4618      	mov	r0, r3
}
 8005756:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005758:	2304      	movs	r3, #4
}
 800575a:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800575c:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800575e:	4618      	mov	r0, r3
}
 8005760:	4770      	bx	lr
 8005762:	bc30      	pop	{r4, r5}
 8005764:	f7ff beb2 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>

08005768 <SDMMC_CmdReadMultiBlock>:
{
 8005768:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800576a:	f240 050c 	movw	r5, #12
 800576e:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005772:	f44f 4470 	mov.w	r4, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 8005776:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005778:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800577c:	f2c1 0362 	movt	r3, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005780:	f6cf 74ff 	movt	r4, #65535	; 0xffff
 8005784:	f240 4152 	movw	r1, #1106	; 0x452
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005788:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800578a:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800578c:	fba3 3202 	umull	r3, r2, r3, r2
 8005790:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005794:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005796:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005798:	4321      	orrs	r1, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800579a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800579e:	60c1      	str	r1, [r0, #12]
 80057a0:	e003      	b.n	80057aa <SDMMC_CmdReadMultiBlock+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80057a2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80057a4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80057a8:	d106      	bne.n	80057b8 <SDMMC_CmdReadMultiBlock+0x50>
    if (count-- == 0)
 80057aa:	f113 33ff 	adds.w	r3, r3, #4294967295
 80057ae:	d2f8      	bcs.n	80057a2 <SDMMC_CmdReadMultiBlock+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 80057b0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80057b4:	bc30      	pop	{r4, r5}
 80057b6:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80057b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057ba:	075a      	lsls	r2, r3, #29
 80057bc:	d40e      	bmi.n	80057dc <SDMMC_CmdReadMultiBlock+0x74>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80057be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80057c0:	07db      	lsls	r3, r3, #31
 80057c2:	d406      	bmi.n	80057d2 <SDMMC_CmdReadMultiBlock+0x6a>
  return (uint8_t)(SDMMCx->RESPCMD);
 80057c4:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b12      	cmp	r3, #18
 80057ca:	d00c      	beq.n	80057e6 <SDMMC_CmdReadMultiBlock+0x7e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057cc:	2001      	movs	r0, #1
}
 80057ce:	bc30      	pop	{r4, r5}
 80057d0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80057d2:	2301      	movs	r3, #1
}
 80057d4:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80057d6:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057d8:	4618      	mov	r0, r3
}
 80057da:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057dc:	2304      	movs	r3, #4
}
 80057de:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80057e0:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057e2:	4618      	mov	r0, r3
}
 80057e4:	4770      	bx	lr
 80057e6:	bc30      	pop	{r4, r5}
 80057e8:	f7ff be70 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>

080057ec <SDMMC_CmdWriteSingleBlock>:
{
 80057ec:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80057ee:	f240 040c 	movw	r4, #12
 80057f2:	f644 55d3 	movw	r5, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80057f6:	f44f 4270 	mov.w	r2, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 80057fa:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80057fc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005800:	f2c1 0562 	movt	r5, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005804:	f6cf 72ff 	movt	r2, #65535	; 0xffff
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005808:	f241 3388 	movw	r3, #5000	; 0x1388
 800580c:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800580e:	68c4      	ldr	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005810:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005814:	4022      	ands	r2, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005816:	0a49      	lsrs	r1, r1, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005818:	f442 628b 	orr.w	r2, r2, #1112	; 0x458
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800581c:	fb03 f301 	mul.w	r3, r3, r1
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005820:	60c2      	str	r2, [r0, #12]
 8005822:	e003      	b.n	800582c <SDMMC_CmdWriteSingleBlock+0x40>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005824:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005826:	f012 0f45 	tst.w	r2, #69	; 0x45
 800582a:	d106      	bne.n	800583a <SDMMC_CmdWriteSingleBlock+0x4e>
    if (count-- == 0)
 800582c:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005830:	d2f8      	bcs.n	8005824 <SDMMC_CmdWriteSingleBlock+0x38>
      return SDMMC_ERROR_TIMEOUT;
 8005832:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005836:	bc30      	pop	{r4, r5}
 8005838:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800583a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800583c:	075a      	lsls	r2, r3, #29
 800583e:	d40e      	bmi.n	800585e <SDMMC_CmdWriteSingleBlock+0x72>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005840:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005842:	07db      	lsls	r3, r3, #31
 8005844:	d406      	bmi.n	8005854 <SDMMC_CmdWriteSingleBlock+0x68>
  return (uint8_t)(SDMMCx->RESPCMD);
 8005846:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b18      	cmp	r3, #24
 800584c:	d00c      	beq.n	8005868 <SDMMC_CmdWriteSingleBlock+0x7c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800584e:	2001      	movs	r0, #1
}
 8005850:	bc30      	pop	{r4, r5}
 8005852:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005854:	2301      	movs	r3, #1
}
 8005856:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005858:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800585a:	4618      	mov	r0, r3
}
 800585c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800585e:	2304      	movs	r3, #4
}
 8005860:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005862:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005864:	4618      	mov	r0, r3
}
 8005866:	4770      	bx	lr
 8005868:	bc30      	pop	{r4, r5}
 800586a:	f7ff be2f 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>
 800586e:	bf00      	nop

08005870 <SDMMC_CmdWriteMultiBlock>:
{
 8005870:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005872:	f240 050c 	movw	r5, #12
 8005876:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800587a:	f44f 4470 	mov.w	r4, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 800587e:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005880:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005884:	f2c1 0362 	movt	r3, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005888:	f6cf 74ff 	movt	r4, #65535	; 0xffff
 800588c:	f240 4159 	movw	r1, #1113	; 0x459
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005890:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005892:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005894:	fba3 3202 	umull	r3, r2, r3, r2
 8005898:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800589c:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800589e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058a0:	4321      	orrs	r1, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80058a2:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80058a6:	60c1      	str	r1, [r0, #12]
 80058a8:	e003      	b.n	80058b2 <SDMMC_CmdWriteMultiBlock+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80058aa:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80058ac:	f012 0f45 	tst.w	r2, #69	; 0x45
 80058b0:	d106      	bne.n	80058c0 <SDMMC_CmdWriteMultiBlock+0x50>
    if (count-- == 0)
 80058b2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80058b6:	d2f8      	bcs.n	80058aa <SDMMC_CmdWriteMultiBlock+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 80058b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80058bc:	bc30      	pop	{r4, r5}
 80058be:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80058c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80058c2:	075a      	lsls	r2, r3, #29
 80058c4:	d40e      	bmi.n	80058e4 <SDMMC_CmdWriteMultiBlock+0x74>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80058c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80058c8:	07db      	lsls	r3, r3, #31
 80058ca:	d406      	bmi.n	80058da <SDMMC_CmdWriteMultiBlock+0x6a>
  return (uint8_t)(SDMMCx->RESPCMD);
 80058cc:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b19      	cmp	r3, #25
 80058d2:	d00c      	beq.n	80058ee <SDMMC_CmdWriteMultiBlock+0x7e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058d4:	2001      	movs	r0, #1
}
 80058d6:	bc30      	pop	{r4, r5}
 80058d8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058da:	2301      	movs	r3, #1
}
 80058dc:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80058de:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058e0:	4618      	mov	r0, r3
}
 80058e2:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80058e4:	2304      	movs	r3, #4
}
 80058e6:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80058e8:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058ea:	4618      	mov	r0, r3
}
 80058ec:	4770      	bx	lr
 80058ee:	bc30      	pop	{r4, r5}
 80058f0:	f7ff bdec 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>

080058f4 <SDMMC_CmdStopTransfer>:
{
 80058f4:	b470      	push	{r4, r5, r6}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80058f6:	f240 040c 	movw	r4, #12
 80058fa:	f644 55d3 	movw	r5, #19923	; 0x4dd3
  SDMMCx->ARG = Command->Argument;
 80058fe:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005900:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005904:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005908:	f2c1 0562 	movt	r5, #4194	; 0x1062
  SDMMCx->ARG = Command->Argument;
 800590c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800590e:	f6cf 71ff 	movt	r1, #65535	; 0xffff
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	f44f 4361 	mov.w	r3, #57600	; 0xe100
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005918:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800591a:	fba5 4202 	umull	r4, r2, r5, r2
 800591e:	f2c0 53f5 	movt	r3, #1525	; 0x5f5
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005922:	f240 444c 	movw	r4, #1100	; 0x44c
 8005926:	4031      	ands	r1, r6
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005928:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800592a:	430c      	orrs	r4, r1
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800592c:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005930:	60c4      	str	r4, [r0, #12]
    if (count-- == 0)
 8005932:	b18b      	cbz	r3, 8005958 <SDMMC_CmdStopTransfer+0x64>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005934:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005936:	3b01      	subs	r3, #1
 8005938:	f012 0f45 	tst.w	r2, #69	; 0x45
 800593c:	d0f9      	beq.n	8005932 <SDMMC_CmdStopTransfer+0x3e>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800593e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005940:	075a      	lsls	r2, r3, #29
 8005942:	d412      	bmi.n	800596a <SDMMC_CmdStopTransfer+0x76>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005944:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005946:	07db      	lsls	r3, r3, #31
 8005948:	d40a      	bmi.n	8005960 <SDMMC_CmdStopTransfer+0x6c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800594a:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b0c      	cmp	r3, #12
 8005950:	d010      	beq.n	8005974 <SDMMC_CmdStopTransfer+0x80>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005952:	2001      	movs	r0, #1
}
 8005954:	bc70      	pop	{r4, r5, r6}
 8005956:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8005958:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800595c:	bc70      	pop	{r4, r5, r6}
 800595e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005960:	2301      	movs	r3, #1
}
 8005962:	bc70      	pop	{r4, r5, r6}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005964:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005966:	4618      	mov	r0, r3
}
 8005968:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800596a:	2304      	movs	r3, #4
}
 800596c:	bc70      	pop	{r4, r5, r6}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800596e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005970:	4618      	mov	r0, r3
}
 8005972:	4770      	bx	lr
 8005974:	bc70      	pop	{r4, r5, r6}
 8005976:	f7ff bda9 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>
 800597a:	bf00      	nop

0800597c <SDMMC_CmdSelDesel>:
{
 800597c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800597e:	f240 040c 	movw	r4, #12
 8005982:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005986:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 800598a:	6082      	str	r2, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800598c:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005990:	f2c1 0362 	movt	r3, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005994:	68c5      	ldr	r5, [r0, #12]
 8005996:	f6cf 71ff 	movt	r1, #65535	; 0xffff
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800599a:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800599c:	f240 4447 	movw	r4, #1095	; 0x447
 80059a0:	4029      	ands	r1, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80059a2:	fba3 3202 	umull	r3, r2, r3, r2
 80059a6:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059aa:	430c      	orrs	r4, r1
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80059ac:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80059ae:	60c4      	str	r4, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 80059b0:	fb03 f302 	mul.w	r3, r3, r2
 80059b4:	e003      	b.n	80059be <SDMMC_CmdSelDesel+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80059b6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80059b8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80059bc:	d106      	bne.n	80059cc <SDMMC_CmdSelDesel+0x50>
    if (count-- == 0)
 80059be:	f113 33ff 	adds.w	r3, r3, #4294967295
 80059c2:	d2f8      	bcs.n	80059b6 <SDMMC_CmdSelDesel+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 80059c4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80059c8:	bc30      	pop	{r4, r5}
 80059ca:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80059cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059ce:	075a      	lsls	r2, r3, #29
 80059d0:	d40e      	bmi.n	80059f0 <SDMMC_CmdSelDesel+0x74>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80059d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80059d4:	07db      	lsls	r3, r3, #31
 80059d6:	d406      	bmi.n	80059e6 <SDMMC_CmdSelDesel+0x6a>
  return (uint8_t)(SDMMCx->RESPCMD);
 80059d8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b07      	cmp	r3, #7
 80059de:	d00c      	beq.n	80059fa <SDMMC_CmdSelDesel+0x7e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059e0:	2001      	movs	r0, #1
}
 80059e2:	bc30      	pop	{r4, r5}
 80059e4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059e6:	2301      	movs	r3, #1
}
 80059e8:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80059ea:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ec:	4618      	mov	r0, r3
}
 80059ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059f0:	2304      	movs	r3, #4
}
 80059f2:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80059f4:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059f6:	4618      	mov	r0, r3
}
 80059f8:	4770      	bx	lr
 80059fa:	bc30      	pop	{r4, r5}
 80059fc:	f7ff bd66 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>

08005a00 <SDMMC_CmdGoIdleState>:
{
 8005a00:	b430      	push	{r4, r5}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a02:	f240 040c 	movw	r4, #12
{
 8005a06:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8005a08:	2300      	movs	r3, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a0a:	f644 55d3 	movw	r5, #19923	; 0x4dd3
 8005a0e:	f2c2 0400 	movt	r4, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a12:	f44f 4270 	mov.w	r2, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 8005a16:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a18:	f2c1 0562 	movt	r5, #4194	; 0x1062
 8005a1c:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a1e:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 8005a22:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a24:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a28:	fba5 5000 	umull	r5, r0, r5, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a2c:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a2e:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a34:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a38:	60ca      	str	r2, [r1, #12]
 8005a3a:	e002      	b.n	8005a42 <SDMMC_CmdGoIdleState+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8005a3c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005a3e:	0612      	lsls	r2, r2, #24
 8005a40:	d406      	bmi.n	8005a50 <SDMMC_CmdGoIdleState+0x50>
    if (count-- == 0)
 8005a42:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005a46:	d2f9      	bcs.n	8005a3c <SDMMC_CmdGoIdleState+0x3c>
      return SDMMC_ERROR_TIMEOUT;
 8005a48:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005a4c:	bc30      	pop	{r4, r5}
 8005a4e:	4770      	bx	lr
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005a50:	f240 53ff 	movw	r3, #1535	; 0x5ff
  return SDMMC_ERROR_NONE;
 8005a54:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005a56:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005a58:	bc30      	pop	{r4, r5}
 8005a5a:	4770      	bx	lr

08005a5c <SDMMC_CmdOperCond>:
{
 8005a5c:	b430      	push	{r4, r5}
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a5e:	f240 040c 	movw	r4, #12
{
 8005a62:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8005a64:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a68:	f644 55d3 	movw	r5, #19923	; 0x4dd3
 8005a6c:	f2c2 0400 	movt	r4, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a70:	f44f 4270 	mov.w	r2, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 8005a74:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a76:	f2c1 0562 	movt	r5, #4194	; 0x1062
 8005a7a:	6820      	ldr	r0, [r4, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a7c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 8005a80:	68cc      	ldr	r4, [r1, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a82:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a86:	fba5 5000 	umull	r5, r0, r5, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a8a:	4022      	ands	r2, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a8c:	0a40      	lsrs	r0, r0, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a8e:	f442 6289 	orr.w	r2, r2, #1096	; 0x448
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005a92:	fb03 f300 	mul.w	r3, r3, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005a96:	60ca      	str	r2, [r1, #12]
 8005a98:	e003      	b.n	8005aa2 <SDMMC_CmdOperCond+0x46>
    if (count-- == 0)
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005a9a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005a9c:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005aa0:	d106      	bne.n	8005ab0 <SDMMC_CmdOperCond+0x54>
    if (count-- == 0)
 8005aa2:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005aa6:	d2f8      	bcs.n	8005a9a <SDMMC_CmdOperCond+0x3e>
      return SDMMC_ERROR_TIMEOUT;
 8005aa8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005aac:	bc30      	pop	{r4, r5}
 8005aae:	4770      	bx	lr

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ab0:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005ab2:	f010 0004 	ands.w	r0, r0, #4
 8005ab6:	d10a      	bne.n	8005ace <SDMMC_CmdOperCond+0x72>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005ab8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005aba:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005abe:	d003      	beq.n	8005ac8 <SDMMC_CmdOperCond+0x6c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005ac0:	2340      	movs	r3, #64	; 0x40
 8005ac2:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005ac4:	bc30      	pop	{r4, r5}
 8005ac6:	4770      	bx	lr
  }
  
  return SDMMC_ERROR_NONE;
 8005ac8:	4618      	mov	r0, r3
}
 8005aca:	bc30      	pop	{r4, r5}
 8005acc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005ace:	2340      	movs	r3, #64	; 0x40
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ad0:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005ad2:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005ad4:	bc30      	pop	{r4, r5}
 8005ad6:	4770      	bx	lr

08005ad8 <SDMMC_CmdAppCommand>:
{
 8005ad8:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005ada:	f240 050c 	movw	r5, #12
 8005ade:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ae2:	f44f 4470 	mov.w	r4, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 8005ae6:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005ae8:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005aec:	f2c1 0362 	movt	r3, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005af0:	f6cf 74ff 	movt	r4, #65535	; 0xffff
 8005af4:	f240 4177 	movw	r1, #1143	; 0x477
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005af8:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005afa:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005afc:	fba3 3202 	umull	r3, r2, r3, r2
 8005b00:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b04:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005b06:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b08:	4321      	orrs	r1, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005b0a:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b0e:	60c1      	str	r1, [r0, #12]
 8005b10:	e003      	b.n	8005b1a <SDMMC_CmdAppCommand+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005b12:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005b14:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005b18:	d106      	bne.n	8005b28 <SDMMC_CmdAppCommand+0x50>
    if (count-- == 0)
 8005b1a:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005b1e:	d2f8      	bcs.n	8005b12 <SDMMC_CmdAppCommand+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8005b20:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005b24:	bc30      	pop	{r4, r5}
 8005b26:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005b28:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b2a:	075a      	lsls	r2, r3, #29
 8005b2c:	d40e      	bmi.n	8005b4c <SDMMC_CmdAppCommand+0x74>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005b2e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005b30:	07db      	lsls	r3, r3, #31
 8005b32:	d406      	bmi.n	8005b42 <SDMMC_CmdAppCommand+0x6a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8005b34:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b37      	cmp	r3, #55	; 0x37
 8005b3a:	d00c      	beq.n	8005b56 <SDMMC_CmdAppCommand+0x7e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b3c:	2001      	movs	r0, #1
}
 8005b3e:	bc30      	pop	{r4, r5}
 8005b40:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b42:	2301      	movs	r3, #1
}
 8005b44:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005b46:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b48:	4618      	mov	r0, r3
}
 8005b4a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b4c:	2304      	movs	r3, #4
}
 8005b4e:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005b50:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b52:	4618      	mov	r0, r3
}
 8005b54:	4770      	bx	lr
 8005b56:	bc30      	pop	{r4, r5}
 8005b58:	f7ff bcb8 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>

08005b5c <SDMMC_CmdAppOperCommand>:
{
 8005b5c:	b470      	push	{r4, r5, r6}
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005b5e:	2500      	movs	r5, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b60:	f240 060c 	movw	r6, #12
{
 8005b64:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b66:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005b6a:	f2c8 0510 	movt	r5, #32784	; 0x8010
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b6e:	f2c2 0600 	movt	r6, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b72:	f44f 4070 	mov.w	r0, #61440	; 0xf000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b76:	f2c1 0362 	movt	r3, #4194	; 0x1062
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 8005b7a:	430d      	orrs	r5, r1
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b7c:	6832      	ldr	r2, [r6, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b7e:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005b82:	f240 4169 	movw	r1, #1129	; 0x469
  SDMMCx->ARG = Command->Argument;
 8005b86:	60a5      	str	r5, [r4, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b88:	68e5      	ldr	r5, [r4, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b8a:	fba3 3202 	umull	r3, r2, r3, r2
 8005b8e:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b92:	4028      	ands	r0, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b94:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b96:	4301      	orrs	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005b98:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005b9c:	60e1      	str	r1, [r4, #12]
 8005b9e:	e003      	b.n	8005ba8 <SDMMC_CmdAppOperCommand+0x4c>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005ba0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005ba2:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005ba6:	d106      	bne.n	8005bb6 <SDMMC_CmdAppOperCommand+0x5a>
    if (count-- == 0)
 8005ba8:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005bac:	d2f8      	bcs.n	8005ba0 <SDMMC_CmdAppOperCommand+0x44>
      return SDMMC_ERROR_TIMEOUT;
 8005bae:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005bb2:	bc70      	pop	{r4, r5, r6}
 8005bb4:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005bb6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005bb8:	f010 0004 	ands.w	r0, r0, #4
 8005bbc:	d104      	bne.n	8005bc8 <SDMMC_CmdAppOperCommand+0x6c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005bbe:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005bc2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005bc4:	bc70      	pop	{r4, r5, r6}
 8005bc6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005bc8:	2004      	movs	r0, #4
 8005bca:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005bcc:	bc70      	pop	{r4, r5, r6}
 8005bce:	4770      	bx	lr

08005bd0 <SDMMC_CmdSendCID>:
{
 8005bd0:	b430      	push	{r4, r5}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005bd2:	f240 040c 	movw	r4, #12
{
 8005bd6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8005bd8:	2200      	movs	r2, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005bda:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 8005bde:	f2c2 0400 	movt	r4, #8192	; 0x2000
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005be2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 8005be6:	608a      	str	r2, [r1, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005be8:	f2c1 0362 	movt	r3, #4194	; 0x1062
 8005bec:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005bee:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 8005bf2:	68cd      	ldr	r5, [r1, #12]
 8005bf4:	f240 44c2 	movw	r4, #1218	; 0x4c2
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005bf8:	fba3 3202 	umull	r3, r2, r3, r2
 8005bfc:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c00:	4028      	ands	r0, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c02:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c04:	4304      	orrs	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c06:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c0a:	60cc      	str	r4, [r1, #12]
 8005c0c:	e003      	b.n	8005c16 <SDMMC_CmdSendCID+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005c0e:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8005c10:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005c14:	d106      	bne.n	8005c24 <SDMMC_CmdSendCID+0x54>
    if (count-- == 0)
 8005c16:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005c1a:	d2f8      	bcs.n	8005c0e <SDMMC_CmdSendCID+0x3e>
      return SDMMC_ERROR_TIMEOUT;
 8005c1c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005c20:	bc30      	pop	{r4, r5}
 8005c22:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c24:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005c26:	075b      	lsls	r3, r3, #29
 8005c28:	d40c      	bmi.n	8005c44 <SDMMC_CmdSendCID+0x74>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005c2a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8005c2c:	f010 0001 	ands.w	r0, r0, #1
 8005c30:	d104      	bne.n	8005c3c <SDMMC_CmdSendCID+0x6c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005c32:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005c36:	638b      	str	r3, [r1, #56]	; 0x38
}
 8005c38:	bc30      	pop	{r4, r5}
 8005c3a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	6388      	str	r0, [r1, #56]	; 0x38
}
 8005c40:	bc30      	pop	{r4, r5}
 8005c42:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005c44:	2004      	movs	r0, #4
 8005c46:	6388      	str	r0, [r1, #56]	; 0x38
}
 8005c48:	bc30      	pop	{r4, r5}
 8005c4a:	4770      	bx	lr

08005c4c <SDMMC_CmdSendCSD>:
{
 8005c4c:	b430      	push	{r4, r5}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c4e:	f240 050c 	movw	r5, #12
{
 8005c52:	4604      	mov	r4, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c54:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c58:	f44f 4070 	mov.w	r0, #61440	; 0xf000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c5c:	f2c2 0500 	movt	r5, #8192	; 0x2000
  SDMMCx->ARG = Command->Argument;
 8005c60:	60a1      	str	r1, [r4, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c62:	f2c1 0362 	movt	r3, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c66:	f6cf 70ff 	movt	r0, #65535	; 0xffff
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c6a:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c6c:	f240 41c9 	movw	r1, #1225	; 0x4c9
 8005c70:	68e5      	ldr	r5, [r4, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c72:	fba3 3202 	umull	r3, r2, r3, r2
 8005c76:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c7a:	4028      	ands	r0, r5
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c7c:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c7e:	4301      	orrs	r1, r0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005c80:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005c84:	60e1      	str	r1, [r4, #12]
 8005c86:	e003      	b.n	8005c90 <SDMMC_CmdSendCSD+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005c88:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005c8a:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005c8e:	d106      	bne.n	8005c9e <SDMMC_CmdSendCSD+0x52>
    if (count-- == 0)
 8005c90:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005c94:	d2f8      	bcs.n	8005c88 <SDMMC_CmdSendCSD+0x3c>
      return SDMMC_ERROR_TIMEOUT;
 8005c96:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005c9a:	bc30      	pop	{r4, r5}
 8005c9c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005c9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ca0:	075b      	lsls	r3, r3, #29
 8005ca2:	d40c      	bmi.n	8005cbe <SDMMC_CmdSendCSD+0x72>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005ca4:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005ca6:	f010 0001 	ands.w	r0, r0, #1
 8005caa:	d104      	bne.n	8005cb6 <SDMMC_CmdSendCSD+0x6a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005cac:	f240 53ff 	movw	r3, #1535	; 0x5ff
 8005cb0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005cb2:	bc30      	pop	{r4, r5}
 8005cb4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005cb6:	2001      	movs	r0, #1
 8005cb8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005cba:	bc30      	pop	{r4, r5}
 8005cbc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005cbe:	2004      	movs	r0, #4
 8005cc0:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8005cc2:	bc30      	pop	{r4, r5}
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop

08005cc8 <SDMMC_CmdSetRelAdd>:
{
 8005cc8:	b470      	push	{r4, r5, r6}
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cca:	f240 050c 	movw	r5, #12
  SDMMCx->ARG = Command->Argument;
 8005cce:	2300      	movs	r3, #0
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cd0:	f644 52d3 	movw	r2, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005cd4:	f44f 4470 	mov.w	r4, #61440	; 0xf000
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cd8:	f2c2 0500 	movt	r5, #8192	; 0x2000
  SDMMCx->ARG = Command->Argument;
 8005cdc:	6083      	str	r3, [r0, #8]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cde:	f2c1 0262 	movt	r2, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ce2:	68c6      	ldr	r6, [r0, #12]
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005ce4:	682b      	ldr	r3, [r5, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005ce6:	f6cf 74ff 	movt	r4, #65535	; 0xffff
 8005cea:	f240 4543 	movw	r5, #1091	; 0x443
{
 8005cee:	b083      	sub	sp, #12
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cf0:	fba2 3203 	umull	r3, r2, r2, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005cf4:	4034      	ands	r4, r6
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cf6:	f241 3388 	movw	r3, #5000	; 0x1388
 8005cfa:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005cfc:	4325      	orrs	r5, r4
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8005cfe:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d02:	60c5      	str	r5, [r0, #12]
 8005d04:	e003      	b.n	8005d0e <SDMMC_CmdSetRelAdd+0x46>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005d06:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005d08:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005d0c:	d107      	bne.n	8005d1e <SDMMC_CmdSetRelAdd+0x56>
    if (count-- == 0)
 8005d0e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005d12:	d2f8      	bcs.n	8005d06 <SDMMC_CmdSetRelAdd+0x3e>
      return SDMMC_ERROR_TIMEOUT;
 8005d14:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005d18:	b003      	add	sp, #12
 8005d1a:	bc70      	pop	{r4, r5, r6}
 8005d1c:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005d1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005d20:	075c      	lsls	r4, r3, #29
 8005d22:	d411      	bmi.n	8005d48 <SDMMC_CmdSetRelAdd+0x80>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005d24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005d26:	f013 0301 	ands.w	r3, r3, #1
 8005d2a:	d107      	bne.n	8005d3c <SDMMC_CmdSetRelAdd+0x74>
  return (uint8_t)(SDMMCx->RESPCMD);
 8005d2c:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	2a03      	cmp	r2, #3
 8005d32:	d00f      	beq.n	8005d54 <SDMMC_CmdSetRelAdd+0x8c>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d34:	2001      	movs	r0, #1
}
 8005d36:	b003      	add	sp, #12
 8005d38:	bc70      	pop	{r4, r5, r6}
 8005d3a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d40:	4618      	mov	r0, r3
}
 8005d42:	b003      	add	sp, #12
 8005d44:	bc70      	pop	{r4, r5, r6}
 8005d46:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005d48:	2304      	movs	r3, #4
 8005d4a:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d4c:	4618      	mov	r0, r3
}
 8005d4e:	b003      	add	sp, #12
 8005d50:	bc70      	pop	{r4, r5, r6}
 8005d52:	4770      	bx	lr
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005d54:	f100 0214 	add.w	r2, r0, #20
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 8005d58:	f240 54ff 	movw	r4, #1535	; 0x5ff
 8005d5c:	6384      	str	r4, [r0, #56]	; 0x38
  __IO uint32_t tmp = 0;
 8005d5e:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8005d60:	9201      	str	r2, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005d66:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 8005d6a:	d009      	beq.n	8005d80 <SDMMC_CmdSetRelAdd+0xb8>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005d6c:	045a      	lsls	r2, r3, #17
 8005d6e:	d40a      	bmi.n	8005d86 <SDMMC_CmdSetRelAdd+0xbe>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005d70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005d74:	bf14      	ite	ne
 8005d76:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8005d7a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 8005d7e:	e7cb      	b.n	8005d18 <SDMMC_CmdSetRelAdd+0x50>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	800b      	strh	r3, [r1, #0]
 8005d84:	e7c8      	b.n	8005d18 <SDMMC_CmdSetRelAdd+0x50>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005d86:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005d8a:	e7c5      	b.n	8005d18 <SDMMC_CmdSetRelAdd+0x50>

08005d8c <SDMMC_CmdSendStatus>:
{
 8005d8c:	b430      	push	{r4, r5}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005d8e:	f240 050c 	movw	r5, #12
 8005d92:	f644 53d3 	movw	r3, #19923	; 0x4dd3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005d96:	f44f 4470 	mov.w	r4, #61440	; 0xf000
  SDMMCx->ARG = Command->Argument;
 8005d9a:	6081      	str	r1, [r0, #8]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005d9c:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005da0:	f2c1 0362 	movt	r3, #4194	; 0x1062
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005da4:	f6cf 74ff 	movt	r4, #65535	; 0xffff
 8005da8:	f240 414d 	movw	r1, #1101	; 0x44d
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005dac:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dae:	68c5      	ldr	r5, [r0, #12]
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005db0:	fba3 3202 	umull	r3, r2, r3, r2
 8005db4:	f241 3388 	movw	r3, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005db8:	402c      	ands	r4, r5
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005dba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dbc:	4321      	orrs	r1, r4
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8005dbe:	fb03 f302 	mul.w	r3, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005dc2:	60c1      	str	r1, [r0, #12]
 8005dc4:	e003      	b.n	8005dce <SDMMC_CmdSendStatus+0x42>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8005dc6:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8005dc8:	f012 0f45 	tst.w	r2, #69	; 0x45
 8005dcc:	d106      	bne.n	8005ddc <SDMMC_CmdSendStatus+0x50>
    if (count-- == 0)
 8005dce:	f113 33ff 	adds.w	r3, r3, #4294967295
 8005dd2:	d2f8      	bcs.n	8005dc6 <SDMMC_CmdSendStatus+0x3a>
      return SDMMC_ERROR_TIMEOUT;
 8005dd4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8005dd8:	bc30      	pop	{r4, r5}
 8005dda:	4770      	bx	lr
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005ddc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005dde:	075a      	lsls	r2, r3, #29
 8005de0:	d40e      	bmi.n	8005e00 <SDMMC_CmdSendStatus+0x74>
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005de2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005de4:	07db      	lsls	r3, r3, #31
 8005de6:	d406      	bmi.n	8005df6 <SDMMC_CmdSendStatus+0x6a>
  return (uint8_t)(SDMMCx->RESPCMD);
 8005de8:	6903      	ldr	r3, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b0d      	cmp	r3, #13
 8005dee:	d00c      	beq.n	8005e0a <SDMMC_CmdSendStatus+0x7e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005df0:	2001      	movs	r0, #1
}
 8005df2:	bc30      	pop	{r4, r5}
 8005df4:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005df6:	2301      	movs	r3, #1
}
 8005df8:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005dfa:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005dfc:	4618      	mov	r0, r3
}
 8005dfe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e00:	2304      	movs	r3, #4
}
 8005e02:	bc30      	pop	{r4, r5}
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005e04:	6383      	str	r3, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005e06:	4618      	mov	r0, r3
}
 8005e08:	4770      	bx	lr
 8005e0a:	bc30      	pop	{r4, r5}
 8005e0c:	f7ff bb5e 	b.w	80054cc <SDMMC_GetCmdResp1.part.2>

08005e10 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8005e10:	f640 0374 	movw	r3, #2164	; 0x874
 8005e14:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e18:	7a5a      	ldrb	r2, [r3, #9]
 8005e1a:	b10a      	cbz	r2, 8005e20 <FATFS_LinkDriver+0x10>
  uint8_t ret = 1;
 8005e1c:	2001      	movs	r0, #1
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8005e1e:	4770      	bx	lr
{
 8005e20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e22:	f002 04ff 	and.w	r4, r2, #255	; 0xff
    disk.is_initialized[disk.nbr] = 0;
 8005e26:	f893 e009 	ldrb.w	lr, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8005e2a:	7a5e      	ldrb	r6, [r3, #9]
    path[1] = ':';
 8005e2c:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    disk.lun[disk.nbr] = lun;
 8005e30:	7a5d      	ldrb	r5, [r3, #9]
    path[2] = '/';
 8005e32:	272f      	movs	r7, #47	; 0x2f
    DiskNum = disk.nbr++;
 8005e34:	7a5a      	ldrb	r2, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8005e36:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    disk.lun[disk.nbr] = lun;
 8005e3a:	441d      	add	r5, r3
    disk.is_initialized[disk.nbr] = 0;
 8005e3c:	f803 400e 	strb.w	r4, [r3, lr]
    DiskNum = disk.nbr++;
 8005e40:	b2d2      	uxtb	r2, r2
    disk.drv[disk.nbr] = drv;
 8005e42:	6070      	str	r0, [r6, #4]
    disk.lun[disk.nbr] = lun;
 8005e44:	722c      	strb	r4, [r5, #8]
    DiskNum = disk.nbr++;
 8005e46:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8005e48:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8005e4a:	b2c0      	uxtb	r0, r0
 8005e4c:	7258      	strb	r0, [r3, #9]
    path[3] = 0;
 8005e4e:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 8005e50:	700a      	strb	r2, [r1, #0]
    path[3] = 0;
 8005e52:	70cc      	strb	r4, [r1, #3]
    path[1] = ':';
 8005e54:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 8005e58:	708f      	strb	r7, [r1, #2]
}
 8005e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e5c <_ZN16FLIGHTCONTROLLER16FlightcontrollerC1Ev>:

namespace FLIGHTCONTROLLER {

	volatile double Flightcontroller::looptime = 0;

	Flightcontroller::Flightcontroller() {
 8005e5c:	f24a 6370 	movw	r3, #42608	; 0xa670
 8005e60:	2200      	movs	r2, #0
 8005e62:	f643 4178 	movw	r1, #15480	; 0x3c78
 8005e66:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005e6a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e70:	4604      	mov	r4, r0
 8005e72:	4616      	mov	r6, r2
 8005e74:	b083      	sub	sp, #12
 8005e76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e7a:	f840 3b04 	str.w	r3, [r0], #4
 8005e7e:	2310      	movs	r3, #16
 8005e80:	f000 fe86 	bl	8006b90 <_ZN6SENSOR8ICM20689C1ER19__SPI_HandleTypeDefP12GPIO_TypeDefh>
 8005e84:	f643 31b4 	movw	r1, #15284	; 0x3bb4
 8005e88:	4637      	mov	r7, r6

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8005e8a:	f642 1230 	movw	r2, #10544	; 0x2930
 8005e8e:	f2c2 0100 	movt	r1, #8192	; 0x2000
      { _M_string_length = __length; }
 8005e92:	f642 1c2c 	movw	ip, #10540	; 0x292c
 8005e96:	f04f 0e01 	mov.w	lr, #1
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
 8005e9a:	4422      	add	r2, r4
	: allocator_type(__a), _M_p(__dat) { }
 8005e9c:	f642 1028 	movw	r0, #10536	; 0x2928
 8005ea0:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
 8005ea4:	f8c4 60a0 	str.w	r6, [r4, #160]	; 0xa0
      { _M_string_length = __length; }
 8005ea8:	2520      	movs	r5, #32
 8005eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eae:	e9c4 6629 	strd	r6, r6, [r4, #164]	; 0xa4
 8005eb2:	e9c4 671c 	strd	r6, r7, [r4, #112]	; 0x70
 8005eb6:	e9c4 671e 	strd	r6, r7, [r4, #120]	; 0x78
 8005eba:	e9c4 6720 	strd	r6, r7, [r4, #128]	; 0x80
 8005ebe:	e9c4 6722 	strd	r6, r7, [r4, #136]	; 0x88
 8005ec2:	e9c4 6724 	strd	r6, r7, [r4, #144]	; 0x90
 8005ec6:	e9c4 6726 	strd	r6, r7, [r4, #152]	; 0x98
 8005eca:	e9c4 672c 	strd	r6, r7, [r4, #176]	; 0xb0
 8005ece:	e9c4 672e 	strd	r6, r7, [r4, #184]	; 0xb8
 8005ed2:	e9c4 6730 	strd	r6, r7, [r4, #192]	; 0xc0
 8005ed6:	e9c4 6732 	strd	r6, r7, [r4, #200]	; 0xc8
 8005eda:	e9c4 6734 	strd	r6, r7, [r4, #208]	; 0xd0
 8005ede:	e9c4 6736 	strd	r6, r7, [r4, #216]	; 0xd8
 8005ee2:	e9c4 6738 	strd	r6, r7, [r4, #224]	; 0xe0
 8005ee6:	e9c4 673a 	strd	r6, r7, [r4, #232]	; 0xe8
 8005eea:	e9c4 673c 	strd	r6, r7, [r4, #240]	; 0xf0
 8005eee:	e9c4 673e 	strd	r6, r7, [r4, #248]	; 0xf8
 8005ef2:	e9c4 6740 	strd	r6, r7, [r4, #256]	; 0x100
 8005ef6:	e9c4 6742 	strd	r6, r7, [r4, #264]	; 0x108
 8005efa:	e9c4 6744 	strd	r6, r7, [r4, #272]	; 0x110
 8005efe:	e9c4 6746 	strd	r6, r7, [r4, #280]	; 0x118
 8005f02:	e9c4 6748 	strd	r6, r7, [r4, #288]	; 0x120
 8005f06:	e9c4 674a 	strd	r6, r7, [r4, #296]	; 0x128
 8005f0a:	e9c4 674c 	strd	r6, r7, [r4, #304]	; 0x130
 8005f0e:	e9c4 674e 	strd	r6, r7, [r4, #312]	; 0x138
 8005f12:	e9c4 6750 	strd	r6, r7, [r4, #320]	; 0x140
 8005f16:	e9c4 6752 	strd	r6, r7, [r4, #328]	; 0x148
 8005f1a:	e9c4 6754 	strd	r6, r7, [r4, #336]	; 0x150
 8005f1e:	e9c4 6756 	strd	r6, r7, [r4, #344]	; 0x158
 8005f22:	e9c4 6758 	strd	r6, r7, [r4, #352]	; 0x160
 8005f26:	e9c4 675a 	strd	r6, r7, [r4, #360]	; 0x168
 8005f2a:	e9c4 675c 	strd	r6, r7, [r4, #368]	; 0x170
 8005f2e:	e9c4 675e 	strd	r6, r7, [r4, #376]	; 0x178
 8005f32:	e9c4 6760 	strd	r6, r7, [r4, #384]	; 0x180
 8005f36:	e9c4 6762 	strd	r6, r7, [r4, #392]	; 0x188
 8005f3a:	e9c4 6764 	strd	r6, r7, [r4, #400]	; 0x190
 8005f3e:	e9c4 6766 	strd	r6, r7, [r4, #408]	; 0x198
 8005f42:	e9c4 6768 	strd	r6, r7, [r4, #416]	; 0x1a0
 8005f46:	e9c4 676a 	strd	r6, r7, [r4, #424]	; 0x1a8
 8005f4a:	e9c4 676c 	strd	r6, r7, [r4, #432]	; 0x1b0
 8005f4e:	e9c4 676e 	strd	r6, r7, [r4, #440]	; 0x1b8
 8005f52:	e9c4 6770 	strd	r6, r7, [r4, #448]	; 0x1c0
 8005f56:	e9c4 6772 	strd	r6, r7, [r4, #456]	; 0x1c8
 8005f5a:	f8c4 6200 	str.w	r6, [r4, #512]	; 0x200
 8005f5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f62:	9101      	str	r1, [sp, #4]
 8005f64:	f642 1130 	movw	r1, #10544	; 0x2930
 8005f68:	f8c4 6204 	str.w	r6, [r4, #516]	; 0x204
 8005f6c:	f8c4 620c 	str.w	r6, [r4, #524]	; 0x20c
	: allocator_type(__a), _M_p(__dat) { }
 8005f70:	5022      	str	r2, [r4, r0]
 8005f72:	220c      	movs	r2, #12
      { _M_string_length = __length; }
 8005f74:	f844 e00c 	str.w	lr, [r4, ip]
 8005f78:	f642 10c8 	movw	r0, #10696	; 0x29c8
 8005f7c:	5265      	strh	r5, [r4, r1]
 8005f7e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005f82:	9200      	str	r2, [sp, #0]
 8005f84:	4420      	add	r0, r4
 8005f86:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8005f8a:	2206      	movs	r2, #6
 8005f8c:	e9c4 6784 	strd	r6, r7, [r4, #528]	; 0x210
 8005f90:	f001 f998 	bl	80072c4 <_ZN4RF24C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>
 8005f94:	f642 2004 	movw	r0, #10756	; 0x2a04
 8005f98:	f24a 514c 	movw	r1, #42316	; 0xa54c
 8005f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa0:	4420      	add	r0, r4
 8005fa2:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005fa6:	f004 f8e7 	bl	800a178 <memcpy>
		// TODO Auto-generated constructor stub

	}
 8005faa:	4620      	mov	r0, r4
 8005fac:	b003      	add	sp, #12
 8005fae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fb0 <_ZN16FLIGHTCONTROLLER16Flightcontroller4InitEv>:
		HAL_TIM_Base_Stop(&htim6);
	}

	void Flightcontroller::InitCounter(){
		//start DWT counter also when not in Debug mode to count clock ticks
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8005fb0:	f64e 52f0 	movw	r2, #60912	; 0xedf0
		DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 8005fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fb8:	f64c 6c55 	movw	ip, #52821	; 0xce55
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8005fbc:	f2ce 0200 	movt	r2, #57344	; 0xe000
		DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 8005fc0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005fc4:	f2cc 5cac 	movt	ip, #50604	; 0xc5ac
	void Flightcontroller::Init(){
 8005fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8005fcc:	68d6      	ldr	r6, [r2, #12]
		DWT->CYCCNT = 0;								//https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ 12.10.19 01:30
 8005fce:	2400      	movs	r4, #0
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005fd0:	f643 65bc 	movw	r5, #16060	; 0x3ebc
	void Flightcontroller::Init(){
 8005fd4:	b082      	sub	sp, #8
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8005fd6:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
	void Flightcontroller::Init(){
 8005fda:	4607      	mov	r7, r0
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005fdc:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005fe0:	4621      	mov	r1, r4
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8005fe2:	60d6      	str	r6, [r2, #12]
		DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 8005fe4:	f8c3 cfb0 	str.w	ip, [r3, #4016]	; 0xfb0
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005fe8:	4628      	mov	r0, r5
		DWT->CYCCNT = 0;								//https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ 12.10.19 01:30
 8005fea:	605c      	str	r4, [r3, #4]
		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8005ff4:	f7fe fbe0 	bl	80047b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8005ff8:	2104      	movs	r1, #4
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f7fe fbdc 	bl	80047b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8006000:	2108      	movs	r1, #8
 8006002:	4628      	mov	r0, r5
 8006004:	f7fe fbd8 	bl	80047b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8006008:	210c      	movs	r1, #12
 800600a:	4628      	mov	r0, r5
 800600c:	f7fe fbd4 	bl	80047b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006010:	f643 603c 	movw	r0, #15932	; 0x3e3c
 8006014:	4621      	mov	r1, r4
 8006016:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800601a:	f7fe fbcd 	bl	80047b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800601e:	f643 603c 	movw	r0, #15932	; 0x3e3c
 8006022:	2104      	movs	r1, #4
 8006024:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006028:	f7fe fbc6 	bl	80047b8 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800602c:	f643 603c 	movw	r0, #15932	; 0x3e3c
 8006030:	2108      	movs	r1, #8
 8006032:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006036:	f7fe fbbf 	bl	80047b8 <HAL_TIM_PWM_Start>
		HAL_TIM_Base_Start(&htim6);														//start Timer 6 for dac tickspeed
 800603a:	f643 607c 	movw	r0, #15996	; 0x3e7c
 800603e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006042:	f7fe fae3 	bl	800460c <HAL_TIM_Base_Start>
		HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_2, (uint32_t *)sine, 256, DAC_ALIGN_8B_R);	//start DAC DMA read from sine array in circular mode
 8006046:	2108      	movs	r1, #8
 8006048:	f642 2204 	movw	r2, #10756	; 0x2a04
 800604c:	f243 409c 	movw	r0, #13468	; 0x349c
 8006050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006054:	9100      	str	r1, [sp, #0]
 8006056:	443a      	add	r2, r7
 8006058:	2110      	movs	r1, #16
 800605a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800605e:	f7fb f9af 	bl	80013c0 <HAL_DAC_Start_DMA>
		HAL_Delay(1000);
 8006062:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006066:	f7fa ff91 	bl	8000f8c <HAL_Delay>
		HAL_TIM_Base_Stop(&htim6);
 800606a:	f643 607c 	movw	r0, #15996	; 0x3e7c
 800606e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8006072:	f7fe fae3 	bl	800463c <HAL_TIM_Base_Stop>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,motorSpeed[3]);
	}

	void Flightcontroller::InitUSBOSD(){
		//Set UART to USB or OSD Mode
		if(HAL_GPIO_ReadPin(USBOSD_GPIO_Port, USBOSD_Pin) == GPIO_PIN_RESET){
 8006076:	4620      	mov	r0, r4
 8006078:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800607c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006080:	f7fb fd76 	bl	8001b70 <HAL_GPIO_ReadPin>
 8006084:	2800      	cmp	r0, #0
 8006086:	d044      	beq.n	8006112 <_ZN16FLIGHTCONTROLLER16Flightcontroller4InitEv+0x162>
			osdusb = USB_MODE;
			MotorCalibration();
			HAL_GPIO_WritePin(MOD0_LED_GPIO_Port, MOD0_LED_Pin, GPIO_PIN_SET);
		}else{
			osdusb = OSD_MODE;
			HAL_GPIO_WritePin(MOD1_LED_GPIO_Port, MOD1_LED_Pin, GPIO_PIN_SET);
 8006088:	f44f 6080 	mov.w	r0, #1024	; 0x400
			osdusb = OSD_MODE;
 800608c:	f887 4068 	strb.w	r4, [r7, #104]	; 0x68
			HAL_GPIO_WritePin(MOD1_LED_GPIO_Port, MOD1_LED_Pin, GPIO_PIN_SET);
 8006090:	2201      	movs	r2, #1
 8006092:	2102      	movs	r1, #2
 8006094:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8006098:	f7fb fd70 	bl	8001b7c <HAL_GPIO_WritePin>
		radio.begin();
 800609c:	f642 14c8 	movw	r4, #10696	; 0x29c8
 80060a0:	19e0      	adds	r0, r4, r7
 80060a2:	f001 f965 	bl	8007370 <_ZN4RF245beginEv>
		radio.setPayloadSize(32);
 80060a6:	19e0      	adds	r0, r4, r7
 80060a8:	2120      	movs	r1, #32
 80060aa:	f001 f95b 	bl	8007364 <_ZN4RF2414setPayloadSizeEh>
		radio.setChannel(125);
 80060ae:	19e0      	adds	r0, r4, r7
 80060b0:	217d      	movs	r1, #125	; 0x7d
 80060b2:	f001 f92b 	bl	800730c <_ZN4RF2410setChannelEh>
		radio.setDataRate(RF24_250KBPS);
 80060b6:	2102      	movs	r1, #2
 80060b8:	19e0      	adds	r0, r4, r7
 80060ba:	f002 f8f1 	bl	80082a0 <_ZN4RF2411setDataRateE15rf24_datarate_e>
		radio.setPALevel(RF24_PA_MAX);
 80060be:	19e0      	adds	r0, r4, r7
 80060c0:	2103      	movs	r1, #3
 80060c2:	f002 f895 	bl	80081f0 <_ZN4RF2410setPALevelEh>
		radio.setAutoAck(true);
 80060c6:	2101      	movs	r1, #1
 80060c8:	19e0      	adds	r0, r4, r7
 80060ca:	f002 f84b 	bl	8008164 <_ZN4RF2410setAutoAckEb>
		radio.enableDynamicPayloads();
 80060ce:	19e0      	adds	r0, r4, r7
 80060d0:	f001 fefc 	bl	8007ecc <_ZN4RF2421enableDynamicPayloadsEv>
		radio.enableAckPayload();
 80060d4:	19e0      	adds	r0, r4, r7
 80060d6:	f001 ff89 	bl	8007fec <_ZN4RF2416enableAckPayloadEv>
		radio.openReadingPipe(1, pipe);
 80060da:	f24f 02e2 	movw	r2, #61666	; 0xf0e2
 80060de:	19e0      	adds	r0, r4, r7
 80060e0:	2101      	movs	r1, #1
 80060e2:	f6ce 02f0 	movt	r2, #59632	; 0xe8f0
 80060e6:	23e8      	movs	r3, #232	; 0xe8
 80060e8:	f001 fe0c 	bl	8007d04 <_ZN4RF2415openReadingPipeEhy>
		radio.startListening();
 80060ec:	19e0      	adds	r0, r4, r7
 80060ee:	f001 fbff 	bl	80078f0 <_ZN4RF2414startListeningEv>
		if(!imu.initICM()){
 80060f2:	1d38      	adds	r0, r7, #4
 80060f4:	f000 fd6a 	bl	8006bcc <_ZN6SENSOR8ICM206897initICMEv>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d14e      	bne.n	800619a <_ZN16FLIGHTCONTROLLER16Flightcontroller4InitEv+0x1ea>
				HAL_GPIO_TogglePin(INIT_OK_GPIO_Port, INIT_OK_Pin);
 80060fc:	2400      	movs	r4, #0
 80060fe:	f2c4 0402 	movt	r4, #16386	; 0x4002
 8006102:	4620      	mov	r0, r4
 8006104:	2180      	movs	r1, #128	; 0x80
 8006106:	f7fb fd3d 	bl	8001b84 <HAL_GPIO_TogglePin>
				HAL_Delay(100);
 800610a:	2064      	movs	r0, #100	; 0x64
 800610c:	f7fa ff3e 	bl	8000f8c <HAL_Delay>
 8006110:	e7f7      	b.n	8006102 <_ZN16FLIGHTCONTROLLER16Flightcontroller4InitEv+0x152>

		}
	}

	void Flightcontroller::MotorCalibration(){
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,2048);
 8006112:	f44f 6600 	mov.w	r6, #2048	; 0x800
 8006116:	682b      	ldr	r3, [r5, #0]
			osdusb = USB_MODE;
 8006118:	f04f 0801 	mov.w	r8, #1
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,2048);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,2048);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,2048);

		HAL_Delay(5000);
 800611c:	f241 3088 	movw	r0, #5000	; 0x1388

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1024);
 8006120:	f44f 6480 	mov.w	r4, #1024	; 0x400
			osdusb = USB_MODE;
 8006124:	f887 8068 	strb.w	r8, [r7, #104]	; 0x68
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,2048);
 8006128:	635e      	str	r6, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,2048);
 800612a:	639e      	str	r6, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,2048);
 800612c:	63de      	str	r6, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,2048);
 800612e:	641e      	str	r6, [r3, #64]	; 0x40
		HAL_Delay(5000);
 8006130:	f7fa ff2c 	bl	8000f8c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1024);
 8006134:	682b      	ldr	r3, [r5, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1024);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1024);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1024);

		HAL_Delay(5000);
 8006136:	f241 3088 	movw	r0, #5000	; 0x1388
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1024);
 800613a:	635c      	str	r4, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1024);
 800613c:	639c      	str	r4, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1024);
 800613e:	63dc      	str	r4, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1024);
 8006140:	641c      	str	r4, [r3, #64]	; 0x40
		HAL_Delay(5000);
 8006142:	f7fa ff23 	bl	8000f8c <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,2048);
 8006146:	682b      	ldr	r3, [r5, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,2048);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,2048);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,2048);

		HAL_Delay(5000);
 8006148:	f241 3088 	movw	r0, #5000	; 0x1388
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,2048);
 800614c:	635e      	str	r6, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,2048);
 800614e:	639e      	str	r6, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,2048);
 8006150:	63de      	str	r6, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,2048);
 8006152:	641e      	str	r6, [r3, #64]	; 0x40
		HAL_Delay(5000);
 8006154:	f7fa ff1a 	bl	8000f8c <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1024);
 8006158:	682b      	ldr	r3, [r5, #0]
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1024);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1024);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1024);

		HAL_Delay(10000);
 800615a:	f242 7010 	movw	r0, #10000	; 0x2710
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1024);
 800615e:	635c      	str	r4, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1024);
 8006160:	639c      	str	r4, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1024);
 8006162:	63dc      	str	r4, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1024);
 8006164:	641c      	str	r4, [r3, #64]	; 0x40
		HAL_Delay(10000);
 8006166:	f7fa ff11 	bl	8000f8c <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1124);
 800616a:	682b      	ldr	r3, [r5, #0]
 800616c:	f240 4164 	movw	r1, #1124	; 0x464
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1124);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1124);
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1124);

		HAL_Delay(2000);
 8006170:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1124);
 8006174:	6359      	str	r1, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1124);
 8006176:	6399      	str	r1, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1124);
 8006178:	63d9      	str	r1, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1124);
 800617a:	6419      	str	r1, [r3, #64]	; 0x40
		HAL_Delay(2000);
 800617c:	f7fa ff06 	bl	8000f8c <HAL_Delay>

		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1024);
 8006180:	682b      	ldr	r3, [r5, #0]
			HAL_GPIO_WritePin(MOD0_LED_GPIO_Port, MOD0_LED_Pin, GPIO_PIN_SET);
 8006182:	4630      	mov	r0, r6
 8006184:	4642      	mov	r2, r8
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,1024);
 8006186:	635c      	str	r4, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(MOD0_LED_GPIO_Port, MOD0_LED_Pin, GPIO_PIN_SET);
 8006188:	2110      	movs	r1, #16
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,1024);
 800618a:	639c      	str	r4, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(MOD0_LED_GPIO_Port, MOD0_LED_Pin, GPIO_PIN_SET);
 800618c:	f2c4 0002 	movt	r0, #16386	; 0x4002
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,1024);
 8006190:	63dc      	str	r4, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,1024);
 8006192:	641c      	str	r4, [r3, #64]	; 0x40
			HAL_GPIO_WritePin(MOD0_LED_GPIO_Port, MOD0_LED_Pin, GPIO_PIN_SET);
 8006194:	f7fb fcf2 	bl	8001b7c <HAL_GPIO_WritePin>
 8006198:	e780      	b.n	800609c <_ZN16FLIGHTCONTROLLER16Flightcontroller4InitEv+0xec>
		HAL_TIM_Base_Start_IT(&htim4); //start IMU trigger
 800619a:	f643 50fc 	movw	r0, #15868	; 0x3dfc
 800619e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80061a2:	f7fe fa63 	bl	800466c <HAL_TIM_Base_Start_IT>
		HAL_Delay(1000);
 80061a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061aa:	f7fa feef 	bl	8000f8c <HAL_Delay>
		HAL_GPIO_WritePin(INIT_OK_GPIO_Port, INIT_OK_Pin, GPIO_PIN_SET);
 80061ae:	2000      	movs	r0, #0
 80061b0:	2201      	movs	r2, #1
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
	}
 80061b8:	b002      	add	sp, #8
 80061ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		HAL_GPIO_WritePin(INIT_OK_GPIO_Port, INIT_OK_Pin, GPIO_PIN_SET);
 80061be:	f7fb bcdd 	b.w	8001b7c <HAL_GPIO_WritePin>
 80061c2:	bf00      	nop

080061c4 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv>:
		if (recvData.throttle < 100){
 80061c4:	f642 13b2 	movw	r3, #10674	; 0x29b2
	void Flightcontroller::SetMotorSpeed(){
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	4604      	mov	r4, r0
		if (recvData.throttle < 100){
 80061ce:	5ac0      	ldrh	r0, [r0, r3]
	void Flightcontroller::SetMotorSpeed(){
 80061d0:	b087      	sub	sp, #28
		if (recvData.throttle < 100){
 80061d2:	2863      	cmp	r0, #99	; 0x63
 80061d4:	d85b      	bhi.n	800628e <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0xca>
				motorSpeed[i] = 1024;
 80061d6:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 80061da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
 80061de:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
			if (motorSpeed[i] > 2048){
 80061e2:	f8b4 2200 	ldrh.w	r2, [r4, #512]	; 0x200
 80061e6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80061ea:	d841      	bhi.n	8006270 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0xac>
			else if(motorSpeed[i] < 1024){
 80061ec:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80061f0:	f0c0 80b5 	bcc.w	800635e <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x19a>
			if (motorSpeed[i] > 2048){
 80061f4:	f8b4 3202 	ldrh.w	r3, [r4, #514]	; 0x202
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061fc:	d842      	bhi.n	8006284 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0xc0>
			else if(motorSpeed[i] < 1024){
 80061fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006202:	f0c0 80a7 	bcc.w	8006354 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x190>
			if (motorSpeed[i] > 2048){
 8006206:	f8b4 3204 	ldrh.w	r3, [r4, #516]	; 0x204
 800620a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800620e:	d81e      	bhi.n	800624e <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x8a>
			else if(motorSpeed[i] < 1024){
 8006210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006214:	f0c0 8099 	bcc.w	800634a <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x186>
			if (motorSpeed[i] > 2048){
 8006218:	f8b4 3206 	ldrh.w	r3, [r4, #518]	; 0x206
 800621c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006220:	d91e      	bls.n	8006260 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x9c>
				motorSpeed[i] = 2048;
 8006222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006226:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,motorSpeed[0]);
 800622a:	f643 63bc 	movw	r3, #16060	; 0x3ebc
 800622e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2,motorSpeed[1]);
 8006236:	f8b4 2202 	ldrh.w	r2, [r4, #514]	; 0x202
 800623a:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_3,motorSpeed[2]);
 800623c:	f8b4 2204 	ldrh.w	r2, [r4, #516]	; 0x204
 8006240:	63da      	str	r2, [r3, #60]	; 0x3c
		__HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_4,motorSpeed[3]);
 8006242:	f8b4 2206 	ldrh.w	r2, [r4, #518]	; 0x206
 8006246:	641a      	str	r2, [r3, #64]	; 0x40
	}
 8006248:	b007      	add	sp, #28
 800624a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				motorSpeed[i] = 2048;
 800624e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006252:	f8a4 3204 	strh.w	r3, [r4, #516]	; 0x204
			if (motorSpeed[i] > 2048){
 8006256:	f8b4 3206 	ldrh.w	r3, [r4, #518]	; 0x206
 800625a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800625e:	d8e0      	bhi.n	8006222 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x5e>
			else if(motorSpeed[i] < 1024){
 8006260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006264:	d2e1      	bcs.n	800622a <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x66>
				motorSpeed[i] = 1024;
 8006266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800626a:	f8a4 3206 	strh.w	r3, [r4, #518]	; 0x206
 800626e:	e7dc      	b.n	800622a <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x66>
				motorSpeed[i] = 2048;
 8006270:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006274:	461a      	mov	r2, r3
 8006276:	f8a4 3200 	strh.w	r3, [r4, #512]	; 0x200
			if (motorSpeed[i] > 2048){
 800627a:	f8b4 3202 	ldrh.w	r3, [r4, #514]	; 0x202
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006282:	d9bc      	bls.n	80061fe <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x3a>
				motorSpeed[i] = 2048;
 8006284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006288:	f8a4 3202 	strh.w	r3, [r4, #514]	; 0x202
 800628c:	e7bb      	b.n	8006206 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x42>
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 800628e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8006292:	f04f 0a00 	mov.w	sl, #0
 8006296:	f7fa f915 	bl	80004c4 <__aeabi_i2d>
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 800629a:	4655      	mov	r5, sl
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 800629c:	e9d4 677c 	ldrd	r6, r7, [r4, #496]	; 0x1f0
 80062a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062a4:	4632      	mov	r2, r6
 80062a6:	463b      	mov	r3, r7
 80062a8:	f7f9 ffc0 	bl	800022c <__adddf3>
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 80062ac:	4632      	mov	r2, r6
 80062ae:	463b      	mov	r3, r7
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 80062b0:	ed94 7b74 	vldr	d7, [r4, #464]	; 0x1d0
 80062b4:	e9d4 897e 	ldrd	r8, r9, [r4, #504]	; 0x1f8
 80062b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 80062bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 80062c0:	ed8d 7b00 	vstr	d7, [sp]
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 80062c4:	f7f9 ffb0 	bl	8000228 <__aeabi_dsub>
 80062c8:	4606      	mov	r6, r0
 80062ca:	460f      	mov	r7, r1
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 80062cc:	4640      	mov	r0, r8
 80062ce:	4649      	mov	r1, r9
 80062d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062d4:	f7f9 ffaa 	bl	800022c <__adddf3>
 80062d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062dc:	f7f9 ffa6 	bl	800022c <__adddf3>
 80062e0:	f7fa fbf4 	bl	8000acc <__aeabi_d2uiz>
			motorSpeed[1] = (1024 + recvData.throttle) + pid_TA[1] - pid_TA[2] - pid_AM[0];
 80062e4:	4642      	mov	r2, r8
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 80062e6:	f360 0a0f 	bfi	sl, r0, #0, #16
			motorSpeed[1] = (1024 + recvData.throttle) + pid_TA[1] - pid_TA[2] - pid_AM[0];
 80062ea:	464b      	mov	r3, r9
 80062ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f0:	f7f9 ff9a 	bl	8000228 <__aeabi_dsub>
 80062f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062f8:	f7f9 ff96 	bl	8000228 <__aeabi_dsub>
 80062fc:	f7fa fbe6 	bl	8000acc <__aeabi_d2uiz>
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 8006300:	f360 4a1f 	bfi	sl, r0, #16, #16
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 8006304:	4642      	mov	r2, r8
 8006306:	464b      	mov	r3, r9
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 8006308:	f8c4 a200 	str.w	sl, [r4, #512]	; 0x200
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 800630c:	e9dd ab00 	ldrd	sl, fp, [sp]
 8006310:	4650      	mov	r0, sl
 8006312:	4659      	mov	r1, fp
 8006314:	f7f9 ff88 	bl	8000228 <__aeabi_dsub>
 8006318:	4632      	mov	r2, r6
 800631a:	463b      	mov	r3, r7
 800631c:	f7f9 ff86 	bl	800022c <__adddf3>
 8006320:	f7fa fbd4 	bl	8000acc <__aeabi_d2uiz>
			motorSpeed[3] = (1024 + recvData.throttle) - pid_TA[1] + pid_TA[2] - pid_AM[0];
 8006324:	4652      	mov	r2, sl
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 8006326:	f360 050f 	bfi	r5, r0, #0, #16
			motorSpeed[3] = (1024 + recvData.throttle) - pid_TA[1] + pid_TA[2] - pid_AM[0];
 800632a:	465b      	mov	r3, fp
 800632c:	4640      	mov	r0, r8
 800632e:	4649      	mov	r1, r9
 8006330:	f7f9 ff7a 	bl	8000228 <__aeabi_dsub>
 8006334:	4632      	mov	r2, r6
 8006336:	463b      	mov	r3, r7
 8006338:	f7f9 ff78 	bl	800022c <__adddf3>
 800633c:	f7fa fbc6 	bl	8000acc <__aeabi_d2uiz>
			motorSpeed[2] = (1024 + recvData.throttle) - pid_TA[1] - pid_TA[2] + pid_AM[0];
 8006340:	f360 451f 	bfi	r5, r0, #16, #16
			motorSpeed[0] = (1024 + recvData.throttle) + pid_TA[1] + pid_TA[2] + pid_AM[0];
 8006344:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
 8006348:	e74b      	b.n	80061e2 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x1e>
				motorSpeed[i] = 1024;
 800634a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634e:	f8a4 3204 	strh.w	r3, [r4, #516]	; 0x204
 8006352:	e761      	b.n	8006218 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x54>
 8006354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006358:	f8a4 3202 	strh.w	r3, [r4, #514]	; 0x202
 800635c:	e753      	b.n	8006206 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x42>
 800635e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006362:	f8a4 2200 	strh.w	r2, [r4, #512]	; 0x200
 8006366:	e745      	b.n	80061f4 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv+0x30>

08006368 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv>:
		double start = DWT->CYCCNT; //read value from counter register
 8006368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	void Flightcontroller::Loop(){
 800636c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		elapsedTime += looptime;
 8006370:	f640 0b80 	movw	fp, #2176	; 0x880
		double start = DWT->CYCCNT; //read value from counter register
 8006374:	f2ce 0300 	movt	r3, #57344	; 0xe000
	void Flightcontroller::Loop(){
 8006378:	4682      	mov	sl, r0
 800637a:	b0a3      	sub	sp, #140	; 0x8c
		elapsedTime += looptime;
 800637c:	f2c2 0b00 	movt	fp, #8192	; 0x2000
		double start = DWT->CYCCNT; //read value from counter register
 8006380:	6858      	ldr	r0, [r3, #4]
 8006382:	f7fa f88f 	bl	80004a4 <__aeabi_ui2d>
		elapsedTime += looptime;
 8006386:	e9db 2300 	ldrd	r2, r3, [fp]
		double start = DWT->CYCCNT; //read value from counter register
 800638a:	e9cd 0120 	strd	r0, r1, [sp, #128]	; 0x80
		elapsedTime += looptime;
 800638e:	e9da 0184 	ldrd	r0, r1, [sl, #528]	; 0x210
 8006392:	f7f9 ff4b 	bl	800022c <__adddf3>
 8006396:	e9ca 0184 	strd	r0, r1, [sl, #528]	; 0x210
		imu.lptime = looptime;
 800639a:	e9db 0100 	ldrd	r0, r1, [fp]
 800639e:	f7fa fbb5 	bl	8000b0c <__aeabi_d2f>
 80063a2:	4603      	mov	r3, r0
		imu.calculateICM();
 80063a4:	f10a 0004 	add.w	r0, sl, #4
		imu.lptime = looptime;
 80063a8:	f8ca 3048 	str.w	r3, [sl, #72]	; 0x48
		imu.calculateICM();
 80063ac:	f000 fd3c 	bl	8006e28 <_ZN6SENSOR8ICM2068912calculateICMEv>
		if(recvData.throttle < 100){
 80063b0:	f642 13b2 	movw	r3, #10674	; 0x29b2
 80063b4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 80063b8:	2b63      	cmp	r3, #99	; 0x63
 80063ba:	f240 8328 	bls.w	8006a0e <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x6a6>
		  previousError[i] = error[i];
 80063be:	4652      	mov	r2, sl
		error[0] = imu.f_ypr[2] - recvData.yaw;
 80063c0:	f642 16ac 	movw	r6, #10668	; 0x29ac
 80063c4:	ed9a 7a0b 	vldr	s14, [sl, #44]	; 0x2c
 80063c8:	f852 0f70 	ldr.w	r0, [r2, #112]!
 80063cc:	eb0a 0406 	add.w	r4, sl, r6
 80063d0:	6851      	ldr	r1, [r2, #4]
 80063d2:	6895      	ldr	r5, [r2, #8]
 80063d4:	68d7      	ldr	r7, [r2, #12]
 80063d6:	f8ca 5090 	str.w	r5, [sl, #144]	; 0x90
		if(radio.available()){
 80063da:	f642 15c8 	movw	r5, #10696	; 0x29c8
 80063de:	f8ca 0088 	str.w	r0, [sl, #136]	; 0x88
 80063e2:	f8ca 108c 	str.w	r1, [sl, #140]	; 0x8c
 80063e6:	4455      	add	r5, sl
 80063e8:	f8ca 7094 	str.w	r7, [sl, #148]	; 0x94
 80063ec:	6910      	ldr	r0, [r2, #16]
 80063ee:	6951      	ldr	r1, [r2, #20]
 80063f0:	f8ca 0098 	str.w	r0, [sl, #152]	; 0x98
 80063f4:	f8ca 109c 	str.w	r1, [sl, #156]	; 0x9c
		error[0] = imu.f_ypr[2] - recvData.yaw;
 80063f8:	f93a 3006 	ldrsh.w	r3, [sl, r6]
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006408:	ee17 0a90 	vmov	r0, s15
 800640c:	f7fa f86c 	bl	80004e8 <__aeabi_f2d>
		error[1] = recvData.pitch - imu.t_ypr[1] ;
 8006410:	f642 13ae 	movw	r3, #10670	; 0x29ae
 8006414:	ed9a 7a07 	vldr	s14, [sl, #28]
 8006418:	f93a 3003 	ldrsh.w	r3, [sl, r3]
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		error[0] = imu.f_ypr[2] - recvData.yaw;
 8006424:	e9ca 011c 	strd	r0, r1, [sl, #112]	; 0x70
		error[1] = recvData.pitch - imu.t_ypr[1] ;
 8006428:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800642c:	ee17 0a90 	vmov	r0, s15
 8006430:	f7fa f85a 	bl	80004e8 <__aeabi_f2d>
		error[2] = recvData.roll - imu.t_ypr[0];
 8006434:	f642 13b0 	movw	r3, #10672	; 0x29b0
 8006438:	ed9a 7a06 	vldr	s14, [sl, #24]
 800643c:	f93a 3003 	ldrsh.w	r3, [sl, r3]
 8006440:	ee07 3a90 	vmov	s15, r3
 8006444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		error[1] = recvData.pitch - imu.t_ypr[1] ;
 8006448:	e9ca 011e 	strd	r0, r1, [sl, #120]	; 0x78
		error[2] = recvData.roll - imu.t_ypr[0];
 800644c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006450:	ee17 0a90 	vmov	r0, s15
 8006454:	f7fa f848 	bl	80004e8 <__aeabi_f2d>
 8006458:	e9ca 0120 	strd	r0, r1, [sl, #128]	; 0x80
		if(radio.available()){
 800645c:	4628      	mov	r0, r5
 800645e:	f001 fba5 	bl	8007bac <_ZN4RF249availableEv>
 8006462:	b160      	cbz	r0, 800647e <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x116>
			radio.read(&recvData,sizeof(RadioData));
 8006464:	4621      	mov	r1, r4
 8006466:	221c      	movs	r2, #28
 8006468:	4628      	mov	r0, r5
 800646a:	f001 fbc7 	bl	8007bfc <_ZN4RF244readEPvh>
			radio.writeAckPayload(1,&ackData,sizeof(AckData));
 800646e:	f642 1290 	movw	r2, #10640	; 0x2990
 8006472:	4628      	mov	r0, r5
 8006474:	231c      	movs	r3, #28
 8006476:	4452      	add	r2, sl
 8006478:	2101      	movs	r1, #1
 800647a:	f001 fe47 	bl	800810c <_ZN4RF2415writeAckPayloadEhPKvh>
			if(pid_AM[i] > MAX_CORRECTION){
 800647e:	f44f 4940 	mov.w	r9, #49152	; 0xc000
 8006482:	f04f 0800 	mov.w	r8, #0
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 8006486:	ed9a 7b1c 	vldr	d7, [sl, #112]	; 0x70
 800648a:	e9da 232c 	ldrd	r2, r3, [sl, #176]	; 0xb0
			if(pid_AM[i] > MAX_CORRECTION){
 800648e:	f2c4 0982 	movt	r9, #16514	; 0x4082
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 8006492:	ee17 0a10 	vmov	r0, s14
 8006496:	ec55 4b17 	vmov	r4, r5, d7
 800649a:	4629      	mov	r1, r5
 800649c:	ed8d 7b00 	vstr	d7, [sp]
 80064a0:	f7fa f87a 	bl	8000598 <__aeabi_dmul>
 80064a4:	4606      	mov	r6, r0
 80064a6:	460f      	mov	r7, r1
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 80064a8:	4620      	mov	r0, r4
 80064aa:	4629      	mov	r1, r5
 80064ac:	e9cd 4500 	strd	r4, r5, [sp]
 80064b0:	e9db 4500 	ldrd	r4, r5, [fp]
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 80064b4:	e9ca 6750 	strd	r6, r7, [sl, #320]	; 0x140
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 80064b8:	e9da 2332 	ldrd	r2, r3, [sl, #200]	; 0xc8
 80064bc:	f7fa f86c 	bl	8000598 <__aeabi_dmul>
 80064c0:	4622      	mov	r2, r4
 80064c2:	462b      	mov	r3, r5
 80064c4:	f7fa f868 	bl	8000598 <__aeabi_dmul>
 80064c8:	e9da 2356 	ldrd	r2, r3, [sl, #344]	; 0x158
 80064cc:	f7f9 feae 	bl	800022c <__adddf3>
 80064d0:	4604      	mov	r4, r0
 80064d2:	460d      	mov	r5, r1
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80064d4:	ed9b 7b00 	vldr	d7, [fp]
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 80064d8:	e9ca 4556 	strd	r4, r5, [sl, #344]	; 0x158
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80064dc:	e9da 2322 	ldrd	r2, r3, [sl, #136]	; 0x88
 80064e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064e4:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 80064e8:	f7f9 fe9e 	bl	8000228 <__aeabi_dsub>
 80064ec:	e9da 2338 	ldrd	r2, r3, [sl, #224]	; 0xe0
 80064f0:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 80064f4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80064f8:	f7fa f84e 	bl	8000598 <__aeabi_dmul>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8006504:	f7fa f848 	bl	8000598 <__aeabi_dmul>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 800650c:	4620      	mov	r0, r4
 800650e:	4629      	mov	r1, r5
			if(pid_AM[i] > MAX_CORRECTION){
 8006510:	4644      	mov	r4, r8
 8006512:	464d      	mov	r5, r9
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 8006514:	e9ca 235c 	strd	r2, r3, [sl, #368]	; 0x170
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 8006518:	f7f9 fe88 	bl	800022c <__adddf3>
 800651c:	4632      	mov	r2, r6
 800651e:	463b      	mov	r3, r7
 8006520:	f7f9 fe84 	bl	800022c <__adddf3>
			if(pid_AM[i] > MAX_CORRECTION){
 8006524:	4642      	mov	r2, r8
 8006526:	464b      	mov	r3, r9
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
			if(pid_AM[i] > MAX_CORRECTION){
 800652c:	f7fa fac4 	bl	8000ab8 <__aeabi_dcmpgt>
 8006530:	b988      	cbnz	r0, 8006556 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x1ee>
			}else if(pid_AM[i] < -MAX_CORRECTION){
 8006532:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006536:	f8cd 8010 	str.w	r8, [sp, #16]
 800653a:	4630      	mov	r0, r6
 800653c:	4639      	mov	r1, r7
 800653e:	f2cc 0382 	movt	r3, #49282	; 0xc082
 8006542:	9305      	str	r3, [sp, #20]
 8006544:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006548:	4622      	mov	r2, r4
 800654a:	462b      	mov	r3, r5
 800654c:	f7fa fa96 	bl	8000a7c <__aeabi_dcmplt>
 8006550:	2800      	cmp	r0, #0
 8006552:	f000 8259 	beq.w	8006a08 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x6a0>
				pid_AM[i] = MAX_CORRECTION;
 8006556:	e9ca 4574 	strd	r4, r5, [sl, #464]	; 0x1d0
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 800655a:	ed9a 7b1e 	vldr	d7, [sl, #120]	; 0x78
			if(pid_AM[i] > MAX_CORRECTION){
 800655e:	2100      	movs	r1, #0
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 8006560:	ec55 4b17 	vmov	r4, r5, d7
 8006564:	ee17 0a10 	vmov	r0, s14
			if(pid_AM[i] > MAX_CORRECTION){
 8006568:	9106      	str	r1, [sp, #24]
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 800656a:	4629      	mov	r1, r5
 800656c:	e9da 232e 	ldrd	r2, r3, [sl, #184]	; 0xb8
 8006570:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006574:	f7fa f810 	bl	8000598 <__aeabi_dmul>
 8006578:	4606      	mov	r6, r0
 800657a:	460f      	mov	r7, r1
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006584:	e9db 4500 	ldrd	r4, r5, [fp]
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 8006588:	e9ca 6752 	strd	r6, r7, [sl, #328]	; 0x148
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 800658c:	e9da 2334 	ldrd	r2, r3, [sl, #208]	; 0xd0
 8006590:	f7fa f802 	bl	8000598 <__aeabi_dmul>
 8006594:	4622      	mov	r2, r4
 8006596:	462b      	mov	r3, r5
 8006598:	f7f9 fffe 	bl	8000598 <__aeabi_dmul>
			if(pid_AM[i] > MAX_CORRECTION){
 800659c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80065a0:	9307      	str	r3, [sp, #28]
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 80065a2:	e9da 2358 	ldrd	r2, r3, [sl, #352]	; 0x160
 80065a6:	f7f9 fe41 	bl	800022c <__adddf3>
 80065aa:	4680      	mov	r8, r0
 80065ac:	4689      	mov	r9, r1
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80065ae:	ed9b 7b00 	vldr	d7, [fp]
 80065b2:	e9da 2324 	ldrd	r2, r3, [sl, #144]	; 0x90
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 80065b6:	e9ca 8958 	strd	r8, r9, [sl, #352]	; 0x160
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80065ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065be:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 80065c2:	f7f9 fe31 	bl	8000228 <__aeabi_dsub>
 80065c6:	4604      	mov	r4, r0
 80065c8:	460d      	mov	r5, r1
 80065ca:	e9da 233a 	ldrd	r2, r3, [sl, #232]	; 0xe8
 80065ce:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80065d2:	f7f9 ffe1 	bl	8000598 <__aeabi_dmul>
 80065d6:	4602      	mov	r2, r0
 80065d8:	4620      	mov	r0, r4
			if(pid_AM[i] > MAX_CORRECTION){
 80065da:	9c07      	ldr	r4, [sp, #28]
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80065dc:	460b      	mov	r3, r1
 80065de:	4629      	mov	r1, r5
			if(pid_AM[i] > MAX_CORRECTION){
 80065e0:	f2c4 0482 	movt	r4, #16514	; 0x4082
 80065e4:	9407      	str	r4, [sp, #28]
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80065e6:	f7f9 ffd7 	bl	8000598 <__aeabi_dmul>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 80065ee:	4640      	mov	r0, r8
 80065f0:	4649      	mov	r1, r9
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80065f2:	e9ca 235e 	strd	r2, r3, [sl, #376]	; 0x178
			if(pid_AM[i] > MAX_CORRECTION){
 80065f6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 80065fa:	f7f9 fe17 	bl	800022c <__adddf3>
 80065fe:	4632      	mov	r2, r6
 8006600:	463b      	mov	r3, r7
 8006602:	f7f9 fe13 	bl	800022c <__adddf3>
			if(pid_AM[i] > MAX_CORRECTION){
 8006606:	4622      	mov	r2, r4
 8006608:	462b      	mov	r3, r5
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 800660a:	4606      	mov	r6, r0
 800660c:	460f      	mov	r7, r1
			if(pid_AM[i] > MAX_CORRECTION){
 800660e:	f7fa fa53 	bl	8000ab8 <__aeabi_dcmpgt>
 8006612:	2800      	cmp	r0, #0
 8006614:	f000 81e0 	beq.w	80069d8 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x670>
				pid_AM[i] = MAX_CORRECTION;
 8006618:	e9ca 4576 	strd	r4, r5, [sl, #472]	; 0x1d8
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 800661c:	ed9a 7b20 	vldr	d7, [sl, #128]	; 0x80
			if(pid_AM[i] > MAX_CORRECTION){
 8006620:	2100      	movs	r1, #0
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 8006622:	ec55 4b17 	vmov	r4, r5, d7
 8006626:	ee17 0a10 	vmov	r0, s14
			if(pid_AM[i] > MAX_CORRECTION){
 800662a:	910e      	str	r1, [sp, #56]	; 0x38
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 800662c:	4629      	mov	r1, r5
 800662e:	e9da 2330 	ldrd	r2, r3, [sl, #192]	; 0xc0
 8006632:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006636:	f7f9 ffaf 	bl	8000598 <__aeabi_dmul>
 800663a:	4680      	mov	r8, r0
 800663c:	4689      	mov	r9, r1
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 800663e:	4620      	mov	r0, r4
 8006640:	4629      	mov	r1, r5
 8006642:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006646:	e9db 4500 	ldrd	r4, r5, [fp]
 800664a:	e9da 2336 	ldrd	r2, r3, [sl, #216]	; 0xd8
			pid_AM_P[i] = error[i] * pidGain_AM_P[i];
 800664e:	e9ca 8954 	strd	r8, r9, [sl, #336]	; 0x150
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 8006652:	f7f9 ffa1 	bl	8000598 <__aeabi_dmul>
 8006656:	4622      	mov	r2, r4
 8006658:	462b      	mov	r3, r5
 800665a:	f7f9 ff9d 	bl	8000598 <__aeabi_dmul>
			if(pid_AM[i] > MAX_CORRECTION){
 800665e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006662:	930f      	str	r3, [sp, #60]	; 0x3c
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 8006664:	e9da 235a 	ldrd	r2, r3, [sl, #360]	; 0x168
 8006668:	f7f9 fde0 	bl	800022c <__adddf3>
 800666c:	4604      	mov	r4, r0
 800666e:	460d      	mov	r5, r1
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 8006670:	e9da 233c 	ldrd	r2, r3, [sl, #240]	; 0xf0
			pid_AM_I[i] += error[i] * pidGain_AM_I[i] * looptime;
 8006674:	e9ca 455a 	strd	r4, r5, [sl, #360]	; 0x168
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 8006678:	e9db 0100 	ldrd	r0, r1, [fp]
 800667c:	f7f9 ff8c 	bl	8000598 <__aeabi_dmul>
 8006680:	4606      	mov	r6, r0
 8006682:	460f      	mov	r7, r1
 8006684:	e9da 2326 	ldrd	r2, r3, [sl, #152]	; 0x98
 8006688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800668c:	f7f9 fdcc 	bl	8000228 <__aeabi_dsub>
 8006690:	4602      	mov	r2, r0
 8006692:	4630      	mov	r0, r6
			if(pid_AM[i] > MAX_CORRECTION){
 8006694:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 8006696:	460b      	mov	r3, r1
 8006698:	4639      	mov	r1, r7
			if(pid_AM[i] > MAX_CORRECTION){
 800669a:	f2c4 0682 	movt	r6, #16514	; 0x4082
 800669e:	960f      	str	r6, [sp, #60]	; 0x3c
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80066a0:	f7f9 ff7a 	bl	8000598 <__aeabi_dmul>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 80066a8:	4620      	mov	r0, r4
 80066aa:	4629      	mov	r1, r5
			pid_AM_D[i] = pidGain_AM_D[i] * ((error[i] - previousError[i]) * looptime);
 80066ac:	e9ca 2360 	strd	r2, r3, [sl, #384]	; 0x180
			if(pid_AM[i] > MAX_CORRECTION){
 80066b0:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 80066b4:	f7f9 fdba 	bl	800022c <__adddf3>
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	f7f9 fdb6 	bl	800022c <__adddf3>
			if(pid_AM[i] > MAX_CORRECTION){
 80066c0:	4622      	mov	r2, r4
 80066c2:	462b      	mov	r3, r5
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 80066c4:	4606      	mov	r6, r0
 80066c6:	460f      	mov	r7, r1
			if(pid_AM[i] > MAX_CORRECTION){
 80066c8:	f7fa f9f6 	bl	8000ab8 <__aeabi_dcmpgt>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	f000 816e 	beq.w	80069ae <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x646>
				pid_AM[i] = -MAX_CORRECTION;
 80066d2:	e9ca 4578 	strd	r4, r5, [sl, #480]	; 0x1e0
			pid_TA_P[i] = error[i] * pidGain_TA_P[i];
 80066d6:	e9dd 8900 	ldrd	r8, r9, [sp]
 80066da:	e9da 233e 	ldrd	r2, r3, [sl, #248]	; 0xf8
 80066de:	4640      	mov	r0, r8
 80066e0:	4649      	mov	r1, r9
 80066e2:	f7f9 ff59 	bl	8000598 <__aeabi_dmul>
 80066e6:	4606      	mov	r6, r0
 80066e8:	460f      	mov	r7, r1
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	e9db 4500 	ldrd	r4, r5, [fp]
			pid_TA_P[i] = error[i] * pidGain_TA_P[i];
 80066f2:	e9ca 6762 	strd	r6, r7, [sl, #392]	; 0x188
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80066f6:	e9da 2344 	ldrd	r2, r3, [sl, #272]	; 0x110
 80066fa:	e9cd 8900 	strd	r8, r9, [sp]
 80066fe:	f7f9 ff4b 	bl	8000598 <__aeabi_dmul>
 8006702:	4622      	mov	r2, r4
 8006704:	462b      	mov	r3, r5
			if(pid_TA[i] > MAX_CORRECTION){
 8006706:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 800670a:	f7f9 ff45 	bl	8000598 <__aeabi_dmul>
			if(pid_TA[i] > MAX_CORRECTION){
 800670e:	2300      	movs	r3, #0
 8006710:	9308      	str	r3, [sp, #32]
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 8006712:	e9da 2368 	ldrd	r2, r3, [sl, #416]	; 0x1a0
 8006716:	f7f9 fd89 	bl	800022c <__adddf3>
 800671a:	4680      	mov	r8, r0
 800671c:	4689      	mov	r9, r1
			if(pid_TA[i] > MAX_CORRECTION){
 800671e:	9409      	str	r4, [sp, #36]	; 0x24
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 8006720:	ed9b 7b00 	vldr	d7, [fp]
 8006724:	e9da 2322 	ldrd	r2, r3, [sl, #136]	; 0x88
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 8006728:	e9ca 8968 	strd	r8, r9, [sl, #416]	; 0x1a0
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 800672c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006730:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006734:	f7f9 fd78 	bl	8000228 <__aeabi_dsub>
 8006738:	4604      	mov	r4, r0
 800673a:	460d      	mov	r5, r1
 800673c:	e9da 234a 	ldrd	r2, r3, [sl, #296]	; 0x128
 8006740:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006744:	f7f9 ff28 	bl	8000598 <__aeabi_dmul>
 8006748:	4602      	mov	r2, r0
 800674a:	4620      	mov	r0, r4
			if(pid_TA[i] > MAX_CORRECTION){
 800674c:	9c09      	ldr	r4, [sp, #36]	; 0x24
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 800674e:	460b      	mov	r3, r1
 8006750:	4629      	mov	r1, r5
			if(pid_TA[i] > MAX_CORRECTION){
 8006752:	f2c4 0482 	movt	r4, #16514	; 0x4082
 8006756:	9409      	str	r4, [sp, #36]	; 0x24
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 8006758:	f7f9 ff1e 	bl	8000598 <__aeabi_dmul>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 8006764:	e9ca 236e 	strd	r2, r3, [sl, #440]	; 0x1b8
			if(pid_TA[i] > MAX_CORRECTION){
 8006768:	e9dd 4508 	ldrd	r4, r5, [sp, #32]
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 800676c:	f7f9 fd5e 	bl	800022c <__adddf3>
 8006770:	4632      	mov	r2, r6
 8006772:	463b      	mov	r3, r7
 8006774:	f7f9 fd5a 	bl	800022c <__adddf3>
			if(pid_TA[i] > MAX_CORRECTION){
 8006778:	4622      	mov	r2, r4
 800677a:	462b      	mov	r3, r5
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
			if(pid_TA[i] > MAX_CORRECTION){
 8006780:	f7fa f99a 	bl	8000ab8 <__aeabi_dcmpgt>
 8006784:	b988      	cbnz	r0, 80067aa <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x442>
			}else if(pid_TA[i] < -MAX_CORRECTION){
 8006786:	2300      	movs	r3, #0
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	9314      	str	r3, [sp, #80]	; 0x50
 800678e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006792:	f2cc 0382 	movt	r3, #49282	; 0xc082
 8006796:	9315      	str	r3, [sp, #84]	; 0x54
 8006798:	e9dd 4514 	ldrd	r4, r5, [sp, #80]	; 0x50
 800679c:	4622      	mov	r2, r4
 800679e:	462b      	mov	r3, r5
 80067a0:	f7fa f96c 	bl	8000a7c <__aeabi_dcmplt>
 80067a4:	2800      	cmp	r0, #0
 80067a6:	f000 812c 	beq.w	8006a02 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x69a>
				pid_TA[i] = MAX_CORRECTION;
 80067aa:	e9ca 457a 	strd	r4, r5, [sl, #488]	; 0x1e8
			pid_TA_P[i] = error[i] * pidGain_TA_P[i];
 80067ae:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80067b2:	e9da 2340 	ldrd	r2, r3, [sl, #256]	; 0x100
 80067b6:	4640      	mov	r0, r8
 80067b8:	4649      	mov	r1, r9
 80067ba:	f7f9 feed 	bl	8000598 <__aeabi_dmul>
 80067be:	4606      	mov	r6, r0
 80067c0:	460f      	mov	r7, r1
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	e9db 4500 	ldrd	r4, r5, [fp]
			pid_TA_P[i] = error[i] * pidGain_TA_P[i];
 80067ca:	e9ca 6764 	strd	r6, r7, [sl, #400]	; 0x190
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80067ce:	e9da 2346 	ldrd	r2, r3, [sl, #280]	; 0x118
 80067d2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80067d6:	f7f9 fedf 	bl	8000598 <__aeabi_dmul>
 80067da:	4622      	mov	r2, r4
 80067dc:	462b      	mov	r3, r5
			if(pid_TA[i] > MAX_CORRECTION){
 80067de:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80067e2:	f7f9 fed9 	bl	8000598 <__aeabi_dmul>
			if(pid_TA[i] > MAX_CORRECTION){
 80067e6:	2300      	movs	r3, #0
 80067e8:	930c      	str	r3, [sp, #48]	; 0x30
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80067ea:	e9da 236a 	ldrd	r2, r3, [sl, #424]	; 0x1a8
 80067ee:	f7f9 fd1d 	bl	800022c <__adddf3>
 80067f2:	4680      	mov	r8, r0
 80067f4:	4689      	mov	r9, r1
			if(pid_TA[i] > MAX_CORRECTION){
 80067f6:	940d      	str	r4, [sp, #52]	; 0x34
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 80067f8:	ed9b 7b00 	vldr	d7, [fp]
 80067fc:	e9da 2324 	ldrd	r2, r3, [sl, #144]	; 0x90
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 8006800:	e9ca 896a 	strd	r8, r9, [sl, #424]	; 0x1a8
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 8006804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006808:	ed8d 7b00 	vstr	d7, [sp]
 800680c:	f7f9 fd0c 	bl	8000228 <__aeabi_dsub>
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	e9da 234c 	ldrd	r2, r3, [sl, #304]	; 0x130
 8006818:	e9dd 0100 	ldrd	r0, r1, [sp]
 800681c:	f7f9 febc 	bl	8000598 <__aeabi_dmul>
 8006820:	4602      	mov	r2, r0
 8006822:	4620      	mov	r0, r4
			if(pid_TA[i] > MAX_CORRECTION){
 8006824:	9c0d      	ldr	r4, [sp, #52]	; 0x34
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 8006826:	460b      	mov	r3, r1
 8006828:	4629      	mov	r1, r5
			if(pid_TA[i] > MAX_CORRECTION){
 800682a:	f2c4 0482 	movt	r4, #16514	; 0x4082
 800682e:	940d      	str	r4, [sp, #52]	; 0x34
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 8006830:	f7f9 feb2 	bl	8000598 <__aeabi_dmul>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 8006838:	4640      	mov	r0, r8
 800683a:	4649      	mov	r1, r9
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 800683c:	e9ca 2370 	strd	r2, r3, [sl, #448]	; 0x1c0
			if(pid_TA[i] > MAX_CORRECTION){
 8006840:	e9dd 450c 	ldrd	r4, r5, [sp, #48]	; 0x30
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 8006844:	f7f9 fcf2 	bl	800022c <__adddf3>
 8006848:	4632      	mov	r2, r6
 800684a:	463b      	mov	r3, r7
 800684c:	f7f9 fcee 	bl	800022c <__adddf3>
			if(pid_TA[i] > MAX_CORRECTION){
 8006850:	4622      	mov	r2, r4
 8006852:	462b      	mov	r3, r5
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 8006854:	4606      	mov	r6, r0
 8006856:	460f      	mov	r7, r1
			if(pid_TA[i] > MAX_CORRECTION){
 8006858:	f7fa f92e 	bl	8000ab8 <__aeabi_dcmpgt>
 800685c:	2800      	cmp	r0, #0
 800685e:	f000 8091 	beq.w	8006984 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x61c>
				pid_TA[i] = MAX_CORRECTION;
 8006862:	e9ca 457c 	strd	r4, r5, [sl, #496]	; 0x1f0
			pid_TA_P[i] = error[i] * pidGain_TA_P[i];
 8006866:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 800686a:	e9da 2342 	ldrd	r2, r3, [sl, #264]	; 0x108
 800686e:	4630      	mov	r0, r6
 8006870:	4639      	mov	r1, r7
 8006872:	f7f9 fe91 	bl	8000598 <__aeabi_dmul>
 8006876:	4680      	mov	r8, r0
 8006878:	4689      	mov	r9, r1
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 800687a:	4630      	mov	r0, r6
 800687c:	4639      	mov	r1, r7
 800687e:	e9db 4500 	ldrd	r4, r5, [fp]
 8006882:	e9da 2348 	ldrd	r2, r3, [sl, #288]	; 0x120
			pid_TA_P[i] = error[i] * pidGain_TA_P[i];
 8006886:	e9ca 8966 	strd	r8, r9, [sl, #408]	; 0x198
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 800688a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800688e:	f7f9 fe83 	bl	8000598 <__aeabi_dmul>
 8006892:	4622      	mov	r2, r4
 8006894:	462b      	mov	r3, r5
			if(pid_TA[i] > MAX_CORRECTION){
 8006896:	f44f 4640 	mov.w	r6, #49152	; 0xc000
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 800689a:	f7f9 fe7d 	bl	8000598 <__aeabi_dmul>
			if(pid_TA[i] > MAX_CORRECTION){
 800689e:	2300      	movs	r3, #0
 80068a0:	930a      	str	r3, [sp, #40]	; 0x28
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80068a2:	e9da 236c 	ldrd	r2, r3, [sl, #432]	; 0x1b0
 80068a6:	f7f9 fcc1 	bl	800022c <__adddf3>
 80068aa:	4604      	mov	r4, r0
 80068ac:	460d      	mov	r5, r1
			if(pid_TA[i] > MAX_CORRECTION){
 80068ae:	960b      	str	r6, [sp, #44]	; 0x2c
			pid_TA_I[i] += error[i] * pidGain_TA_I[i] * looptime;
 80068b0:	e9ca 456c 	strd	r4, r5, [sl, #432]	; 0x1b0
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 80068b4:	e9da 234e 	ldrd	r2, r3, [sl, #312]	; 0x138
 80068b8:	e9db 0100 	ldrd	r0, r1, [fp]
 80068bc:	f7f9 fe6c 	bl	8000598 <__aeabi_dmul>
 80068c0:	4606      	mov	r6, r0
 80068c2:	460f      	mov	r7, r1
 80068c4:	e9da 2326 	ldrd	r2, r3, [sl, #152]	; 0x98
 80068c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068cc:	f7f9 fcac 	bl	8000228 <__aeabi_dsub>
 80068d0:	4602      	mov	r2, r0
 80068d2:	4630      	mov	r0, r6
			if(pid_TA[i] > MAX_CORRECTION){
 80068d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 80068d6:	460b      	mov	r3, r1
 80068d8:	4639      	mov	r1, r7
			if(pid_TA[i] > MAX_CORRECTION){
 80068da:	f2c4 0682 	movt	r6, #16514	; 0x4082
 80068de:	960b      	str	r6, [sp, #44]	; 0x2c
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 80068e0:	f7f9 fe5a 	bl	8000598 <__aeabi_dmul>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 80068e8:	4620      	mov	r0, r4
 80068ea:	4629      	mov	r1, r5
			pid_TA_D[i] = pidGain_TA_D[i] * ((error[i] - previousError[i]) * looptime);
 80068ec:	e9ca 2372 	strd	r2, r3, [sl, #456]	; 0x1c8
			if(pid_TA[i] > MAX_CORRECTION){
 80068f0:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 80068f4:	f7f9 fc9a 	bl	800022c <__adddf3>
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	f7f9 fc96 	bl	800022c <__adddf3>
			if(pid_TA[i] > MAX_CORRECTION){
 8006900:	4622      	mov	r2, r4
 8006902:	462b      	mov	r3, r5
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 8006904:	4606      	mov	r6, r0
 8006906:	460f      	mov	r7, r1
			if(pid_TA[i] > MAX_CORRECTION){
 8006908:	f7fa f8d6 	bl	8000ab8 <__aeabi_dcmpgt>
 800690c:	b330      	cbz	r0, 800695c <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x5f4>
				pid_TA[i] = -MAX_CORRECTION;
 800690e:	e9ca 457e 	strd	r4, r5, [sl, #504]	; 0x1f8
		looptime = (stop - start)/216000000.0;
 8006912:	f24d 732c 	movw	r3, #55084	; 0xd72c
		SetMotorSpeed();
 8006916:	4650      	mov	r0, sl
		looptime = (stop - start)/216000000.0;
 8006918:	9302      	str	r3, [sp, #8]
		SetMotorSpeed();
 800691a:	f7ff fc53 	bl	80061c4 <_ZN16FLIGHTCONTROLLER16Flightcontroller13SetMotorSpeedEv>
		looptime = (stop - start)/216000000.0;
 800691e:	9a02      	ldr	r2, [sp, #8]
		double stop = DWT->CYCCNT;
 8006920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		looptime = (stop - start)/216000000.0;
 8006924:	f2ce 4265 	movt	r2, #58469	; 0xe465
		double stop = DWT->CYCCNT;
 8006928:	f2ce 0300 	movt	r3, #57344	; 0xe000
		looptime = (stop - start)/216000000.0;
 800692c:	9202      	str	r2, [sp, #8]
 800692e:	f24e 2254 	movw	r2, #57940	; 0xe254
		double stop = DWT->CYCCNT;
 8006932:	6858      	ldr	r0, [r3, #4]
		looptime = (stop - start)/216000000.0;
 8006934:	4613      	mov	r3, r2
 8006936:	9203      	str	r2, [sp, #12]
 8006938:	f6c3 6333 	movt	r3, #15923	; 0x3e33
 800693c:	9303      	str	r3, [sp, #12]
		double stop = DWT->CYCCNT;
 800693e:	f7f9 fdb1 	bl	80004a4 <__aeabi_ui2d>
		looptime = (stop - start)/216000000.0;
 8006942:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 8006946:	f7f9 fc6f 	bl	8000228 <__aeabi_dsub>
 800694a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800694e:	f7f9 fe23 	bl	8000598 <__aeabi_dmul>
 8006952:	e9cb 0100 	strd	r0, r1, [fp]
	}
 8006956:	b023      	add	sp, #140	; 0x8c
 8006958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}else if(pid_TA[i] < -MAX_CORRECTION){
 800695c:	2300      	movs	r3, #0
 800695e:	4630      	mov	r0, r6
 8006960:	4639      	mov	r1, r7
 8006962:	9310      	str	r3, [sp, #64]	; 0x40
 8006964:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006968:	f2cc 0382 	movt	r3, #49282	; 0xc082
 800696c:	9311      	str	r3, [sp, #68]	; 0x44
 800696e:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8006972:	4622      	mov	r2, r4
 8006974:	462b      	mov	r3, r5
 8006976:	f7fa f881 	bl	8000a7c <__aeabi_dcmplt>
 800697a:	2800      	cmp	r0, #0
 800697c:	d1c7      	bne.n	800690e <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x5a6>
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 800697e:	e9ca 677e 	strd	r6, r7, [sl, #504]	; 0x1f8
 8006982:	e7c6      	b.n	8006912 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x5aa>
			}else if(pid_TA[i] < -MAX_CORRECTION){
 8006984:	2300      	movs	r3, #0
 8006986:	4630      	mov	r0, r6
 8006988:	4639      	mov	r1, r7
 800698a:	9312      	str	r3, [sp, #72]	; 0x48
 800698c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006990:	f2cc 0382 	movt	r3, #49282	; 0xc082
 8006994:	9313      	str	r3, [sp, #76]	; 0x4c
 8006996:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 800699a:	4622      	mov	r2, r4
 800699c:	462b      	mov	r3, r5
 800699e:	f7fa f86d 	bl	8000a7c <__aeabi_dcmplt>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f47f af5d 	bne.w	8006862 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x4fa>
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 80069a8:	e9ca 677c 	strd	r6, r7, [sl, #496]	; 0x1f0
 80069ac:	e75b      	b.n	8006866 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x4fe>
			}else if(pid_AM[i] < -MAX_CORRECTION){
 80069ae:	2300      	movs	r3, #0
 80069b0:	4630      	mov	r0, r6
 80069b2:	4639      	mov	r1, r7
 80069b4:	9316      	str	r3, [sp, #88]	; 0x58
 80069b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80069ba:	f2cc 0382 	movt	r3, #49282	; 0xc082
 80069be:	9317      	str	r3, [sp, #92]	; 0x5c
 80069c0:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
 80069c4:	4622      	mov	r2, r4
 80069c6:	462b      	mov	r3, r5
 80069c8:	f7fa f858 	bl	8000a7c <__aeabi_dcmplt>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	f47f ae80 	bne.w	80066d2 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x36a>
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 80069d2:	e9ca 6778 	strd	r6, r7, [sl, #480]	; 0x1e0
 80069d6:	e67e      	b.n	80066d6 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x36e>
			}else if(pid_AM[i] < -MAX_CORRECTION){
 80069d8:	2300      	movs	r3, #0
 80069da:	4630      	mov	r0, r6
 80069dc:	4639      	mov	r1, r7
 80069de:	9318      	str	r3, [sp, #96]	; 0x60
 80069e0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80069e4:	f2cc 0382 	movt	r3, #49282	; 0xc082
 80069e8:	9319      	str	r3, [sp, #100]	; 0x64
 80069ea:	e9dd 4518 	ldrd	r4, r5, [sp, #96]	; 0x60
 80069ee:	4622      	mov	r2, r4
 80069f0:	462b      	mov	r3, r5
 80069f2:	f7fa f843 	bl	8000a7c <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f47f ae0e 	bne.w	8006618 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x2b0>
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 80069fc:	e9ca 6776 	strd	r6, r7, [sl, #472]	; 0x1d8
 8006a00:	e60c      	b.n	800661c <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x2b4>
			pid_TA[i] = pid_TA_P[i] + pid_TA_I[i] + pid_TA_D[i];
 8006a02:	e9ca 677a 	strd	r6, r7, [sl, #488]	; 0x1e8
 8006a06:	e6d2      	b.n	80067ae <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x446>
			pid_AM[i] = pid_AM_P[i] + pid_AM_I[i] + pid_AM_D[i];
 8006a08:	e9ca 6774 	strd	r6, r7, [sl, #464]	; 0x1d0
 8006a0c:	e5a5      	b.n	800655a <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x1f2>
			pidGain_AM_P[0] = recvData.y_P/100.0;
 8006a0e:	f241 447b 	movw	r4, #5243	; 0x147b
 8006a12:	f642 13ba 	movw	r3, #10682	; 0x29ba
 8006a16:	f647 25e1 	movw	r5, #31457	; 0x7ae1
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006a1a:	4622      	mov	r2, r4
			pidGain_AM_P[0] = recvData.y_P/100.0;
 8006a1c:	f83a 0003 	ldrh.w	r0, [sl, r3]
			pidGain_AM_I[0] = recvData.y_I/100.0;
 8006a20:	4626      	mov	r6, r4
 8006a22:	462f      	mov	r7, r5
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006a24:	4613      	mov	r3, r2
			pidGain_AM_P[0] = recvData.y_P/100.0;
 8006a26:	f2c4 74ae 	movt	r4, #18350	; 0x47ae
 8006a2a:	f6c3 7584 	movt	r5, #16260	; 0x3f84
			pidGain_AM_I[0] = recvData.y_I/100.0;
 8006a2e:	f2c4 76ae 	movt	r6, #18350	; 0x47ae
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006a32:	f2c4 73ae 	movt	r3, #18350	; 0x47ae
			pidGain_AM_I[0] = recvData.y_I/100.0;
 8006a36:	f6c3 7784 	movt	r7, #16260	; 0x3f84
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006a3a:	9300      	str	r3, [sp, #0]
			pidGain_AM_P[0] = recvData.y_P/100.0;
 8006a3c:	f7f9 fd42 	bl	80004c4 <__aeabi_i2d>
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006a40:	f647 23e1 	movw	r3, #31457	; 0x7ae1
			pidGain_AM_P[0] = recvData.y_P/100.0;
 8006a44:	4622      	mov	r2, r4
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006a46:	f6c3 7384 	movt	r3, #16260	; 0x3f84
 8006a4a:	9301      	str	r3, [sp, #4]
			pidGain_TA_I[1] = recvData.rp_I/100.0;
 8006a4c:	f241 437b 	movw	r3, #5243	; 0x147b
			pidGain_TA_P[1] = recvData.rp_P/100.0;
 8006a50:	f2c4 73ae 	movt	r3, #18350	; 0x47ae
 8006a54:	931a      	str	r3, [sp, #104]	; 0x68
			pidGain_TA_I[1] = recvData.rp_I/100.0;
 8006a56:	f241 437b 	movw	r3, #5243	; 0x147b
 8006a5a:	f2c4 73ae 	movt	r3, #18350	; 0x47ae
 8006a5e:	931c      	str	r3, [sp, #112]	; 0x70
			pidGain_TA_D[1] = recvData.rp_D/100.0;
 8006a60:	f241 437b 	movw	r3, #5243	; 0x147b
 8006a64:	f2c4 73ae 	movt	r3, #18350	; 0x47ae
 8006a68:	931e      	str	r3, [sp, #120]	; 0x78
			pidGain_TA_P[1] = recvData.rp_P/100.0;
 8006a6a:	f647 23e1 	movw	r3, #31457	; 0x7ae1
 8006a6e:	f6c3 7384 	movt	r3, #16260	; 0x3f84
 8006a72:	931b      	str	r3, [sp, #108]	; 0x6c
			pidGain_TA_I[1] = recvData.rp_I/100.0;
 8006a74:	f647 23e1 	movw	r3, #31457	; 0x7ae1
 8006a78:	f6c3 7384 	movt	r3, #16260	; 0x3f84
 8006a7c:	931d      	str	r3, [sp, #116]	; 0x74
			pidGain_TA_D[1] = recvData.rp_D/100.0;
 8006a7e:	f647 23e1 	movw	r3, #31457	; 0x7ae1
 8006a82:	f6c3 7384 	movt	r3, #16260	; 0x3f84
 8006a86:	931f      	str	r3, [sp, #124]	; 0x7c
			pidGain_AM_P[0] = recvData.y_P/100.0;
 8006a88:	462b      	mov	r3, r5
 8006a8a:	f7f9 fd85 	bl	8000598 <__aeabi_dmul>
			pidGain_AM_I[0] = recvData.y_I/100.0;
 8006a8e:	f642 13bc 	movw	r3, #10684	; 0x29bc
			pidGain_AM_P[0] = recvData.y_P/100.0;
 8006a92:	e9ca 012c 	strd	r0, r1, [sl, #176]	; 0xb0
			pidGain_AM_I[0] = recvData.y_I/100.0;
 8006a96:	f83a 0003 	ldrh.w	r0, [sl, r3]
 8006a9a:	f7f9 fd13 	bl	80004c4 <__aeabi_i2d>
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	f7f9 fd79 	bl	8000598 <__aeabi_dmul>
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006aa6:	f642 13be 	movw	r3, #10686	; 0x29be
			pidGain_AM_I[0] = recvData.y_I/100.0;
 8006aaa:	e9ca 0132 	strd	r0, r1, [sl, #200]	; 0xc8
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006aae:	f83a 0003 	ldrh.w	r0, [sl, r3]
 8006ab2:	f7f9 fd07 	bl	80004c4 <__aeabi_i2d>
 8006ab6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006aba:	f7f9 fd6d 	bl	8000598 <__aeabi_dmul>
			pidGain_TA_P[1] = recvData.rp_P/100.0;
 8006abe:	f642 13b4 	movw	r3, #10676	; 0x29b4
			pidGain_AM_D[0] = recvData.y_D/100.0;
 8006ac2:	e9ca 0138 	strd	r0, r1, [sl, #224]	; 0xe0
			pidGain_TA_P[1] = recvData.rp_P/100.0;
 8006ac6:	f83a 0003 	ldrh.w	r0, [sl, r3]
 8006aca:	f7f9 fcfb 	bl	80004c4 <__aeabi_i2d>
 8006ace:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006ad2:	f7f9 fd61 	bl	8000598 <__aeabi_dmul>
			pidGain_TA_I[1] = recvData.rp_I/100.0;
 8006ad6:	f642 13b6 	movw	r3, #10678	; 0x29b6
			pidGain_TA_P[1] = recvData.rp_P/100.0;
 8006ada:	4606      	mov	r6, r0
 8006adc:	460f      	mov	r7, r1
 8006ade:	e9ca 6740 	strd	r6, r7, [sl, #256]	; 0x100
			pidGain_TA_I[1] = recvData.rp_I/100.0;
 8006ae2:	f83a 0003 	ldrh.w	r0, [sl, r3]
 8006ae6:	f7f9 fced 	bl	80004c4 <__aeabi_i2d>
 8006aea:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 8006aee:	f7f9 fd53 	bl	8000598 <__aeabi_dmul>
			pidGain_TA_D[1] = recvData.rp_D/100.0;
 8006af2:	f642 13b8 	movw	r3, #10680	; 0x29b8
			pidGain_TA_I[1] = recvData.rp_I/100.0;
 8006af6:	4604      	mov	r4, r0
 8006af8:	460d      	mov	r5, r1
 8006afa:	e9ca 4546 	strd	r4, r5, [sl, #280]	; 0x118
			pidGain_TA_D[1] = recvData.rp_D/100.0;
 8006afe:	f83a 0003 	ldrh.w	r0, [sl, r3]
 8006b02:	f7f9 fcdf 	bl	80004c4 <__aeabi_i2d>
 8006b06:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 8006b0a:	f7f9 fd45 	bl	8000598 <__aeabi_dmul>
			pidGain_TA_P[2] = recvData.rp_P/100.0;
 8006b0e:	e9ca 6742 	strd	r6, r7, [sl, #264]	; 0x108
			pidGain_TA_I[2] = recvData.rp_I/100.0;
 8006b12:	e9ca 4548 	strd	r4, r5, [sl, #288]	; 0x120
			pidGain_TA_D[1] = recvData.rp_D/100.0;
 8006b16:	e9ca 014c 	strd	r0, r1, [sl, #304]	; 0x130
			pidGain_TA_D[2] = recvData.rp_D/100.0;
 8006b1a:	e9ca 014e 	strd	r0, r1, [sl, #312]	; 0x138
 8006b1e:	e44e      	b.n	80063be <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv+0x56>

08006b20 <_ZN16FLIGHTCONTROLLER16FlightcontrollerD1Ev>:
	Flightcontroller::~Flightcontroller() {
 8006b20:	b510      	push	{r4, lr}
 8006b22:	4604      	mov	r4, r0
	traits_type::assign(_M_data()[__n], _CharT());
      }

      bool
      _M_is_local() const
      { return _M_data() == _M_local_data(); }
 8006b24:	f642 1128 	movw	r1, #10536	; 0x2928
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8006b28:	f642 1330 	movw	r3, #10544	; 0x2930
 8006b2c:	f24a 6270 	movw	r2, #42608	; 0xa670
      { return _M_data() == _M_local_data(); }
 8006b30:	5840      	ldr	r0, [r0, r1]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8006b32:	4423      	add	r3, r4
 8006b34:	f6c0 0200 	movt	r2, #2048	; 0x800
      _M_create(size_type&, size_type);

      void
      _M_dispose()
      {
	if (!_M_is_local())
 8006b38:	4298      	cmp	r0, r3
 8006b3a:	6022      	str	r2, [r4, #0]
 8006b3c:	d001      	beq.n	8006b42 <_ZN16FLIGHTCONTROLLER16FlightcontrollerD1Ev+0x22>
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8006b3e:	f003 f8af 	bl	8009ca0 <_ZdlPv>
 8006b42:	1d20      	adds	r0, r4, #4
 8006b44:	f000 f81c 	bl	8006b80 <_ZN6SENSOR8ICM20689D1Ev>
	}
 8006b48:	4620      	mov	r0, r4
 8006b4a:	bd10      	pop	{r4, pc}

08006b4c <_ZN16FLIGHTCONTROLLER16FlightcontrollerD0Ev>:
	Flightcontroller::~Flightcontroller() {
 8006b4c:	b510      	push	{r4, lr}
 8006b4e:	4604      	mov	r4, r0
      { return _M_data() == _M_local_data(); }
 8006b50:	f642 1128 	movw	r1, #10536	; 0x2928
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8006b54:	f642 1330 	movw	r3, #10544	; 0x2930
 8006b58:	f24a 6270 	movw	r2, #42608	; 0xa670
      { return _M_data() == _M_local_data(); }
 8006b5c:	5840      	ldr	r0, [r0, r1]
	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
 8006b5e:	4423      	add	r3, r4
 8006b60:	f6c0 0200 	movt	r2, #2048	; 0x800
	if (!_M_is_local())
 8006b64:	4298      	cmp	r0, r3
 8006b66:	6022      	str	r2, [r4, #0]
 8006b68:	d001      	beq.n	8006b6e <_ZN16FLIGHTCONTROLLER16FlightcontrollerD0Ev+0x22>
 8006b6a:	f003 f899 	bl	8009ca0 <_ZdlPv>
 8006b6e:	1d20      	adds	r0, r4, #4
 8006b70:	f000 f806 	bl	8006b80 <_ZN6SENSOR8ICM20689D1Ev>
	}
 8006b74:	4620      	mov	r0, r4
 8006b76:	f003 f893 	bl	8009ca0 <_ZdlPv>
 8006b7a:	4620      	mov	r0, r4
 8006b7c:	bd10      	pop	{r4, pc}
 8006b7e:	bf00      	nop

08006b80 <_ZN6SENSOR8ICM20689D1Ev>:

	}

	ICM20689::~ICM20689() {
		// TODO Auto-generated destructor stub
	}
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop

08006b84 <_ZN6SENSOR8ICM20689D0Ev>:
	ICM20689::~ICM20689() {
 8006b84:	b510      	push	{r4, lr}
 8006b86:	4604      	mov	r4, r0
	}
 8006b88:	f003 f88a 	bl	8009ca0 <_ZdlPv>
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	bd10      	pop	{r4, pc}

08006b90 <_ZN6SENSOR8ICM20689C1ER19__SPI_HandleTypeDefP12GPIO_TypeDefh>:
	ICM20689::ICM20689(SPI_HandleTypeDef&hspi , GPIO_TypeDef *GPIOx, uint8_t pin) :
 8006b90:	b4f0      	push	{r4, r5, r6, r7}
			spi(hspi), GPIOx(GPIOx), pin(pin) {
 8006b92:	f24a 6780 	movw	r7, #42624	; 0xa680
 8006b96:	2500      	movs	r5, #0
	ICM20689::ICM20689(SPI_HandleTypeDef&hspi , GPIO_TypeDef *GPIOx, uint8_t pin) :
 8006b98:	4604      	mov	r4, r0
			spi(hspi), GPIOx(GPIOx), pin(pin) {
 8006b9a:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8006b9e:	f6c0 0700 	movt	r7, #2048	; 0x800
 8006ba2:	6085      	str	r5, [r0, #8]
 8006ba4:	6145      	str	r5, [r0, #20]
 8006ba6:	60c5      	str	r5, [r0, #12]
 8006ba8:	6185      	str	r5, [r0, #24]
 8006baa:	6105      	str	r5, [r0, #16]
 8006bac:	61c5      	str	r5, [r0, #28]
 8006bae:	62c5      	str	r5, [r0, #44]	; 0x2c
 8006bb0:	6205      	str	r5, [r0, #32]
 8006bb2:	6305      	str	r5, [r0, #48]	; 0x30
 8006bb4:	6245      	str	r5, [r0, #36]	; 0x24
 8006bb6:	6285      	str	r5, [r0, #40]	; 0x28
 8006bb8:	6345      	str	r5, [r0, #52]	; 0x34
 8006bba:	6385      	str	r5, [r0, #56]	; 0x38
 8006bbc:	63c5      	str	r5, [r0, #60]	; 0x3c
 8006bbe:	6405      	str	r5, [r0, #64]	; 0x40
 8006bc0:	6007      	str	r7, [r0, #0]
 8006bc2:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
 8006bc6:	7125      	strb	r5, [r4, #4]
	}
 8006bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8006bca:	4770      	bx	lr

08006bcc <_ZN6SENSOR8ICM206897initICMEv>:

	bool ICM20689::initICM(){
 8006bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bce:	b083      	sub	sp, #12
	}

	void ICM20689::writeRegister(uint8_t reg, uint8_t value, uint8_t delay){
		uint8_t tmp[2];

		tmp[0] = reg;
 8006bd0:	f244 036b 	movw	r3, #16491	; 0x406b
	bool ICM20689::initICM(){
 8006bd4:	4604      	mov	r4, r0
		tmp[1] = value;

		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006bd6:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
		tmp[0] = reg;
 8006bda:	ae02      	add	r6, sp, #8
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
		tmp[0] = reg;
 8006be0:	f826 3d04 	strh.w	r3, [r6, #-4]!
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006be4:	f7fa ffca 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006be8:	4631      	mov	r1, r6
 8006bea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bec:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf0:	2202      	movs	r2, #2
 8006bf2:	f7fc fd6d 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006bf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bf8:	f7fd fc74 	bl	80044e4 <HAL_SPI_GetState>
 8006bfc:	2801      	cmp	r0, #1
 8006bfe:	d1fa      	bne.n	8006bf6 <_ZN6SENSOR8ICM206897initICMEv+0x2a>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006c00:	4602      	mov	r2, r0
 8006c02:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006c06:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006c08:	f7fa ffb8 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(delay);
 8006c0c:	2064      	movs	r0, #100	; 0x64
 8006c0e:	f7fa f9bd 	bl	8000f8c <HAL_Delay>
		tmp[0] = reg;
 8006c12:	f241 036a 	movw	r3, #4202	; 0x106a
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006c16:	2200      	movs	r2, #0
 8006c18:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006c1c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg;
 8006c1e:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006c22:	f7fa ffab 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006c26:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2a:	2202      	movs	r2, #2
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c30:	f7fc fd4e 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006c34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c36:	f7fd fc55 	bl	80044e4 <HAL_SPI_GetState>
 8006c3a:	2801      	cmp	r0, #1
 8006c3c:	d1fa      	bne.n	8006c34 <_ZN6SENSOR8ICM206897initICMEv+0x68>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006c3e:	4602      	mov	r2, r0
 8006c40:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006c44:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006c46:	f7fa ff99 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006c4a:	200a      	movs	r0, #10
 8006c4c:	f7fa f99e 	bl	8000f8c <HAL_Delay>
		tmp[0] = reg;
 8006c50:	236b      	movs	r3, #107	; 0x6b
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006c52:	2200      	movs	r2, #0
 8006c54:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006c58:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg;
 8006c5a:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006c5e:	f7fa ff8d 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295
 8006c66:	2202      	movs	r2, #2
 8006c68:	4631      	mov	r1, r6
 8006c6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c6c:	f7fc fd30 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006c70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c72:	f7fd fc37 	bl	80044e4 <HAL_SPI_GetState>
 8006c76:	2801      	cmp	r0, #1
 8006c78:	4605      	mov	r5, r0
 8006c7a:	d1f9      	bne.n	8006c70 <_ZN6SENSOR8ICM206897initICMEv+0xa4>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006c82:	6de0      	ldr	r0, [r4, #92]	; 0x5c
	}

	uint8_t ICM20689::readRegister(uint8_t reg){
		uint8_t tmp[1];

		tmp[0] = reg|0x80;
 8006c84:	af02      	add	r7, sp, #8
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006c86:	f7fa ff79 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006c8a:	200a      	movs	r0, #10
 8006c8c:	f7fa f97e 	bl	8000f8c <HAL_Delay>
		tmp[0] = reg|0x80;
 8006c90:	23f5      	movs	r3, #245	; 0xf5
		uint8_t ret[1] ;
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006c92:	2200      	movs	r2, #0
 8006c94:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006c98:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg|0x80;
 8006c9a:	f807 3d08 	strb.w	r3, [r7, #-8]!
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006c9e:	f7fa ff6d 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi,(uint8_t *)tmp, 1, HAL_MAX_DELAY);
 8006ca2:	4639      	mov	r1, r7
 8006ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca8:	462a      	mov	r2, r5
 8006caa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cac:	f7fc fd10 	bl	80036d0 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&spi, (uint8_t *)ret, 1, HAL_MAX_DELAY);
 8006cb0:	462a      	mov	r2, r5
 8006cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cba:	f7fc fe23 	bl	8003904 <HAL_SPI_Receive>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006cbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cc0:	f7fd fc10 	bl	80044e4 <HAL_SPI_GetState>
 8006cc4:	2801      	cmp	r0, #1
 8006cc6:	d1fa      	bne.n	8006cbe <_ZN6SENSOR8ICM206897initICMEv+0xf2>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006cc8:	4602      	mov	r2, r0
 8006cca:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006cce:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006cd0:	f7fa ff54 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006cd4:	200a      	movs	r0, #10
 8006cd6:	f7fa f959 	bl	8000f8c <HAL_Delay>

		return ret[0];
 8006cda:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if(readRegister(WHO_AM_I) != 0x98){
 8006cde:	2b98      	cmp	r3, #152	; 0x98
 8006ce0:	d002      	beq.n	8006ce8 <_ZN6SENSOR8ICM206897initICMEv+0x11c>
			return false;
 8006ce2:	2000      	movs	r0, #0
	}
 8006ce4:	b003      	add	sp, #12
 8006ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		tmp[0] = reg;
 8006ce8:	f240 231a 	movw	r3, #538	; 0x21a
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006cec:	2200      	movs	r2, #0
 8006cee:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006cf2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg;
 8006cf4:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006cf8:	f7fa ff40 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006d00:	2202      	movs	r2, #2
 8006d02:	4631      	mov	r1, r6
 8006d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d06:	f7fc fce3 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006d0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d0c:	f7fd fbea 	bl	80044e4 <HAL_SPI_GetState>
 8006d10:	2801      	cmp	r0, #1
 8006d12:	d1fa      	bne.n	8006d0a <_ZN6SENSOR8ICM206897initICMEv+0x13e>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006d14:	4602      	mov	r2, r0
 8006d16:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006d1a:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006d1c:	f7fa ff2e 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006d20:	200a      	movs	r0, #10
 8006d22:	f7fa f933 	bl	8000f8c <HAL_Delay>
		tmp[0] = reg;
 8006d26:	f640 031b 	movw	r3, #2075	; 0x81b
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006d30:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg;
 8006d32:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006d36:	f7fa ff21 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d3e:	2202      	movs	r2, #2
 8006d40:	4631      	mov	r1, r6
 8006d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d44:	f7fc fcc4 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006d48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d4a:	f7fd fbcb 	bl	80044e4 <HAL_SPI_GetState>
 8006d4e:	2801      	cmp	r0, #1
 8006d50:	d1fa      	bne.n	8006d48 <_ZN6SENSOR8ICM206897initICMEv+0x17c>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006d52:	4602      	mov	r2, r0
 8006d54:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006d58:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006d5a:	f7fa ff0f 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006d5e:	200a      	movs	r0, #10
 8006d60:	f7fa f914 	bl	8000f8c <HAL_Delay>
		tmp[0] = reg;
 8006d64:	f241 031c 	movw	r3, #4124	; 0x101c
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006d6e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg;
 8006d70:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006d74:	f7fa ff02 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006d78:	f04f 33ff 	mov.w	r3, #4294967295
 8006d7c:	2202      	movs	r2, #2
 8006d7e:	4631      	mov	r1, r6
 8006d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d82:	f7fc fca5 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d88:	f7fd fbac 	bl	80044e4 <HAL_SPI_GetState>
 8006d8c:	2801      	cmp	r0, #1
 8006d8e:	d1fa      	bne.n	8006d86 <_ZN6SENSOR8ICM206897initICMEv+0x1ba>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006d90:	4602      	mov	r2, r0
 8006d92:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006d96:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006d98:	f7fa fef0 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006d9c:	200a      	movs	r0, #10
 8006d9e:	f7fa f8f5 	bl	8000f8c <HAL_Delay>
		tmp[0] = reg;
 8006da2:	f240 231d 	movw	r3, #541	; 0x21d
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006da6:	2200      	movs	r2, #0
 8006da8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006dac:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg;
 8006dae:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006db2:	f7fa fee3 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006db6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dba:	2202      	movs	r2, #2
 8006dbc:	4631      	mov	r1, r6
 8006dbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc0:	f7fc fc86 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dc6:	f7fd fb8d 	bl	80044e4 <HAL_SPI_GetState>
 8006dca:	2801      	cmp	r0, #1
 8006dcc:	d1fa      	bne.n	8006dc4 <_ZN6SENSOR8ICM206897initICMEv+0x1f8>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006dce:	4602      	mov	r2, r0
 8006dd0:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006dd4:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006dd6:	f7fa fed1 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006dda:	200a      	movs	r0, #10
 8006ddc:	f7fa f8d6 	bl	8000f8c <HAL_Delay>
		tmp[0] = reg;
 8006de0:	2319      	movs	r3, #25
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006de2:	2200      	movs	r2, #0
 8006de4:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006de8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
		tmp[0] = reg;
 8006dea:	f8ad 3004 	strh.w	r3, [sp, #4]
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_RESET);
 8006dee:	f7fa fec5 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&spi, tmp, 2, HAL_MAX_DELAY);
 8006df2:	4631      	mov	r1, r6
 8006df4:	f04f 33ff 	mov.w	r3, #4294967295
 8006df8:	2202      	movs	r2, #2
 8006dfa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006dfc:	f7fc fc68 	bl	80036d0 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(&spi) != HAL_SPI_STATE_READY);
 8006e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e02:	f7fd fb6f 	bl	80044e4 <HAL_SPI_GetState>
 8006e06:	2801      	cmp	r0, #1
 8006e08:	4605      	mov	r5, r0
 8006e0a:	d1f9      	bne.n	8006e00 <_ZN6SENSOR8ICM206897initICMEv+0x234>
		HAL_GPIO_WritePin(GPIOx, pin, GPIO_PIN_SET);
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 8006e12:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8006e14:	f7fa feb2 	bl	8001b7c <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8006e18:	200a      	movs	r0, #10
 8006e1a:	f7fa f8b7 	bl	8000f8c <HAL_Delay>
		return true;
 8006e1e:	4628      	mov	r0, r5
		initOK = true;
 8006e20:	7125      	strb	r5, [r4, #4]
	}
 8006e22:	b003      	add	sp, #12
 8006e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e26:	bf00      	nop

08006e28 <_ZN6SENSOR8ICM2068912calculateICMEv>:
		  fullvec = fastsqrt(accel[0]*accel[0] + accel[1]*accel[1] + accel[2]*accel[2]); //calculate full vector with Pythagoras' theorem
 8006e28:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
 8006e2c:	ed90 6a0b 	vldr	s12, [r0, #44]	; 0x2c
 8006e30:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8006e34:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8006e38:	edd0 6a0d 	vldr	s13, [r0, #52]	; 0x34
 8006e3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e40:	ed90 7a0d 	vldr	s14, [r0, #52]	; 0x34
	void ICM20689::calculateICM(){
 8006e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		  fullvec = fastsqrt(accel[0]*accel[0] + accel[1]*accel[1] + accel[2]*accel[2]); //calculate full vector with Pythagoras' theorem
 8006e48:	eee5 7a86 	vfma.f32	s15, s11, s12
	void ICM20689::calculateICM(){
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	ed2d 8b0a 	vpush	{d8-d12}
 8006e52:	b09d      	sub	sp, #116	; 0x74
		  fullvec = fastsqrt(accel[0]*accel[0] + accel[1]*accel[1] + accel[2]*accel[2]); //calculate full vector with Pythagoras' theorem
 8006e54:	eee6 7a87 	vfma.f32	s15, s13, s14
		i  += 127 << 23;
 8006e58:	ee17 3a90 	vmov	r3, s15
 8006e5c:	f103 537e 	add.w	r3, r3, #1065353216	; 0x3f800000
		return *(float*) &i;
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	ee08 3a10 	vmov	s16, r3
		  if(fullvec == 0) {
 8006e66:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6e:	f040 8227 	bne.w	80072c0 <_ZN6SENSOR8ICM2068912calculateICMEv+0x498>
			  fullvec = 1;
 8006e72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006e76:	eeb0 8a67 	vmov.f32	s16, s15
 8006e7a:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006e7e:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8006e82:	f04f 0800 	mov.w	r8, #0
		  acangle[0] = fastasin(accel[0]/fullvec) * -57.29577951;	//calculate acceleration sin-1(angle/fullvec)
 8006e86:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8006e8a:	f242 3672 	movw	r6, #9074	; 0x2372
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006e8e:	f6c3 63aa 	movt	r3, #16042	; 0x3eaa
 8006e92:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
		  acangle[0] = fastasin(accel[0]/fullvec) * -57.29577951;	//calculate acceleration sin-1(angle/fullvec)
 8006e96:	ee87 9a88 	vdiv.f32	s18, s15, s16
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006e9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006e9e:	ee0a 3a10 	vmov	s20, r3
 8006ea2:	4643      	mov	r3, r8
 8006ea4:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006ea8:	46c1      	mov	r9, r8
 8006eaa:	f6c3 73d8 	movt	r3, #16344	; 0x3fd8
 8006eae:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8006eb2:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006eb6:	f6c3 79e0 	movt	r9, #16352	; 0x3fe0
 8006eba:	930d      	str	r3, [sp, #52]	; 0x34
 8006ebc:	4643      	mov	r3, r8
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8006ebe:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
		  acangle[0] = fastasin(accel[0]/fullvec) * -57.29577951;	//calculate acceleration sin-1(angle/fullvec)
 8006ec2:	f24a 57dc 	movw	r7, #42460	; 0xa5dc
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006ec6:	f6c3 73d4 	movt	r3, #16340	; 0x3fd4
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8006eca:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8006ece:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
		  acangle[0] = fastasin(accel[0]/fullvec) * -57.29577951;	//calculate acceleration sin-1(angle/fullvec)
 8006ed2:	f6c1 265d 	movt	r6, #6749	; 0x1a5d
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ed8:	4643      	mov	r3, r8
		  acangle[0] = fastasin(accel[0]/fullvec) * -57.29577951;	//calculate acceleration sin-1(angle/fullvec)
 8006eda:	f2cc 074c 	movt	r7, #49228	; 0xc04c
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006ede:	f244 3a2d 	movw	sl, #17197	; 0x432d
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006ee2:	f6c3 73e0 	movt	r3, #16352	; 0x3fe0
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006ee6:	f243 6be2 	movw	fp, #14050	; 0x36e2
 8006eea:	f6ce 3a1c 	movt	sl, #60188	; 0xeb1c
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006eee:	9311      	str	r3, [sp, #68]	; 0x44
 8006ef0:	4643      	mov	r3, r8
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006ef2:	f6c3 7b3a 	movt	fp, #16186	; 0x3f3a
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006ef6:	f6c3 73d8 	movt	r3, #16344	; 0x3fd8
 8006efa:	ee69 aa09 	vmul.f32	s21, s18, s18
 8006efe:	9313      	str	r3, [sp, #76]	; 0x4c
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8006f00:	4643      	mov	r3, r8
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006f02:	f6c3 73d4 	movt	r3, #16340	; 0x3fd4
 8006f06:	ee69 8a2a 	vmul.f32	s17, s18, s21
 8006f0a:	9315      	str	r3, [sp, #84]	; 0x54
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 8006f0c:	f242 3372 	movw	r3, #9074	; 0x2372
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006f10:	ee68 7a8a 	vmul.f32	s15, s17, s20
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 8006f14:	f6c1 235d 	movt	r3, #6749	; 0x1a5d
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006f18:	ee6a 8aa8 	vmul.f32	s17, s21, s17
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 8006f1c:	9300      	str	r3, [sp, #0]
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8006f1e:	4643      	mov	r3, r8
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006f20:	ee17 0a90 	vmov	r0, s15
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8006f24:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8006f28:	9317      	str	r3, [sp, #92]	; 0x5c
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 8006f2a:	f24a 53dc 	movw	r3, #42460	; 0xa5dc
 8006f2e:	f2c4 034c 	movt	r3, #16460	; 0x404c
 8006f32:	9301      	str	r3, [sp, #4]
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8006f34:	4643      	mov	r3, r8
 8006f36:	f2c4 0314 	movt	r3, #16404	; 0x4014
 8006f3a:	9319      	str	r3, [sp, #100]	; 0x64
 8006f3c:	4643      	mov	r3, r8
 8006f3e:	f6c3 73f0 	movt	r3, #16368	; 0x3ff0
 8006f42:	931b      	str	r3, [sp, #108]	; 0x6c
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 8006f44:	f64e 5306 	movw	r3, #60678	; 0xed06
 8006f48:	f6ca 2391 	movt	r3, #43665	; 0xaa91
 8006f4c:	9302      	str	r3, [sp, #8]
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 8006f4e:	f649 4378 	movw	r3, #40056	; 0x9c78
 8006f52:	9306      	str	r3, [sp, #24]
		  t_ypr[1] += t_ypr[0] * fastsin(ypr[2] * 0.017453293 * lptime);
 8006f54:	f64e 5306 	movw	r3, #60678	; 0xed06
 8006f58:	f6ca 2391 	movt	r3, #43665	; 0xaa91
 8006f5c:	9304      	str	r3, [sp, #16]
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 8006f5e:	f244 332d 	movw	r3, #17197	; 0x432d
 8006f62:	9308      	str	r3, [sp, #32]
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 8006f64:	f64d 7346 	movw	r3, #57158	; 0xdf46
 8006f68:	9303      	str	r3, [sp, #12]
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006f6a:	f7f9 fabd 	bl	80004e8 <__aeabi_f2d>
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 8006f6e:	9b03      	ldr	r3, [sp, #12]
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006f70:	4642      	mov	r2, r8
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 8006f72:	f6c3 7391 	movt	r3, #16273	; 0x3f91
 8006f76:	9303      	str	r3, [sp, #12]
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	f2c2 33a2 	movt	r3, #9122	; 0x23a2
 8006f7e:	9306      	str	r3, [sp, #24]
 8006f80:	9b08      	ldr	r3, [sp, #32]
 8006f82:	f6ce 331c 	movt	r3, #60188	; 0xeb1c
 8006f86:	9308      	str	r3, [sp, #32]
		  t_ypr[1] += t_ypr[0] * fastsin(ypr[2] * 0.017453293 * lptime);
 8006f88:	f64d 7346 	movw	r3, #57158	; 0xdf46
 8006f8c:	f6c3 7391 	movt	r3, #16273	; 0x3f91
 8006f90:	9305      	str	r3, [sp, #20]
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006f92:	f649 4378 	movw	r3, #40056	; 0x9c78
 8006f96:	f2c2 33a2 	movt	r3, #9122	; 0x23a2
 8006f9a:	930a      	str	r3, [sp, #40]	; 0x28
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 8006f9c:	f64f 43b9 	movw	r3, #64697	; 0xfcb9
 8006fa0:	f6c3 73ef 	movt	r3, #16367	; 0x3fef
 8006fa4:	9307      	str	r3, [sp, #28]
 8006fa6:	f243 63e2 	movw	r3, #14050	; 0x36e2
 8006faa:	f6c3 733a 	movt	r3, #16186	; 0x3f3a
 8006fae:	9309      	str	r3, [sp, #36]	; 0x24
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006fb0:	f64f 43b9 	movw	r3, #64697	; 0xfcb9
 8006fb4:	930b      	str	r3, [sp, #44]	; 0x2c
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	f7f9 faee 	bl	8000598 <__aeabi_dmul>
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	4689      	mov	r9, r1
 8006fc0:	ee19 0a10 	vmov	r0, s18
 8006fc4:	f7f9 fa90 	bl	80004e8 <__aeabi_f2d>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 f92c 	bl	800022c <__adddf3>
 8006fd4:	f64c 43cd 	movw	r3, #52429	; 0xcccd
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006fd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006fda:	4680      	mov	r8, r0
 8006fdc:	f6c3 634c 	movt	r3, #15948	; 0x3e4c
 8006fe0:	4689      	mov	r9, r1
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006fe2:	f6c3 72ef 	movt	r2, #16367	; 0x3fef
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006fe6:	ee09 3a90 	vmov	s19, r3
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 8006fea:	920b      	str	r2, [sp, #44]	; 0x2c
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8006fec:	ee68 7aa9 	vmul.f32	s15, s17, s19
 8006ff0:	ee17 0a90 	vmov	r0, s15
 8006ff4:	f7f9 fa78 	bl	80004e8 <__aeabi_f2d>
 8006ff8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006ffc:	f7f9 facc 	bl	8000598 <__aeabi_dmul>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4640      	mov	r0, r8
 8007006:	4649      	mov	r1, r9
 8007008:	f7f9 f910 	bl	800022c <__adddf3>
 800700c:	f644 1325 	movw	r3, #18725	; 0x4925
 8007010:	4680      	mov	r8, r0
 8007012:	4689      	mov	r9, r1
 8007014:	f6c3 6312 	movt	r3, #15890	; 0x3e12
 8007018:	ee09 3a10 	vmov	s18, r3
 800701c:	ee6a aa89 	vmul.f32	s21, s21, s18
 8007020:	ee6a 7aa8 	vmul.f32	s15, s21, s17
 8007024:	ee17 0a90 	vmov	r0, s15
 8007028:	f7f9 fa5e 	bl	80004e8 <__aeabi_f2d>
 800702c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007030:	f7f9 fab2 	bl	8000598 <__aeabi_dmul>
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	4640      	mov	r0, r8
 800703a:	4649      	mov	r1, r9
 800703c:	f7f9 f8f6 	bl	800022c <__adddf3>
 8007040:	f7f9 fd64 	bl	8000b0c <__aeabi_d2f>
		  acangle[0] = fastasin(accel[0]/fullvec) * -57.29577951;	//calculate acceleration sin-1(angle/fullvec)
 8007044:	f7f9 fa50 	bl	80004e8 <__aeabi_f2d>
 8007048:	4632      	mov	r2, r6
 800704a:	463b      	mov	r3, r7
 800704c:	f7f9 faa4 	bl	8000598 <__aeabi_dmul>
 8007050:	f7f9 fd5c 	bl	8000b0c <__aeabi_d2f>
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 8007054:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
		  acangle[0] = fastasin(accel[0]/fullvec) * -57.29577951;	//calculate acceleration sin-1(angle/fullvec)
 8007058:	4605      	mov	r5, r0
 800705a:	64e0      	str	r0, [r4, #76]	; 0x4c
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 800705c:	eec7 aa88 	vdiv.f32	s21, s15, s16
		return x+(0.5)*((x*x*x)/3)+(0.375)*((x*x*x*x*x)/5)+(0.3125)*((x*x*x*x*x*x*x)/7);
 8007060:	ee6a 8aaa 	vmul.f32	s17, s21, s21
 8007064:	ee2a 8aa8 	vmul.f32	s16, s21, s17
 8007068:	ee68 7a0a 	vmul.f32	s15, s16, s20
 800706c:	ee28 8a88 	vmul.f32	s16, s17, s16
 8007070:	ee68 8a89 	vmul.f32	s17, s17, s18
 8007074:	ee17 0a90 	vmov	r0, s15
 8007078:	f7f9 fa36 	bl	80004e8 <__aeabi_f2d>
 800707c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007080:	f7f9 fa8a 	bl	8000598 <__aeabi_dmul>
 8007084:	4606      	mov	r6, r0
 8007086:	460f      	mov	r7, r1
 8007088:	ee1a 0a90 	vmov	r0, s21
 800708c:	f7f9 fa2c 	bl	80004e8 <__aeabi_f2d>
 8007090:	4602      	mov	r2, r0
 8007092:	460b      	mov	r3, r1
 8007094:	4630      	mov	r0, r6
 8007096:	4639      	mov	r1, r7
 8007098:	f7f9 f8c8 	bl	800022c <__adddf3>
 800709c:	ee68 7a29 	vmul.f32	s15, s16, s19
 80070a0:	4606      	mov	r6, r0
 80070a2:	460f      	mov	r7, r1
 80070a4:	ee17 0a90 	vmov	r0, s15
 80070a8:	f7f9 fa1e 	bl	80004e8 <__aeabi_f2d>
 80070ac:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80070b0:	f7f9 fa72 	bl	8000598 <__aeabi_dmul>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	4630      	mov	r0, r6
 80070ba:	4639      	mov	r1, r7
 80070bc:	f7f9 f8b6 	bl	800022c <__adddf3>
 80070c0:	ee68 7a88 	vmul.f32	s15, s17, s16
 80070c4:	4606      	mov	r6, r0
 80070c6:	460f      	mov	r7, r1
 80070c8:	ee17 0a90 	vmov	r0, s15
 80070cc:	f7f9 fa0c 	bl	80004e8 <__aeabi_f2d>
 80070d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80070d4:	f7f9 fa60 	bl	8000598 <__aeabi_dmul>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4630      	mov	r0, r6
 80070de:	4639      	mov	r1, r7
 80070e0:	f7f9 f8a4 	bl	800022c <__adddf3>
 80070e4:	f7f9 fd12 	bl	8000b0c <__aeabi_d2f>
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 80070e8:	f7f9 f9fe 	bl	80004e8 <__aeabi_f2d>
 80070ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070f0:	f7f9 fa52 	bl	8000598 <__aeabi_dmul>
 80070f4:	f7f9 fd0a 	bl	8000b0c <__aeabi_d2f>
		  t_ypr[0] += ypr[0]*lptime;
 80070f8:	edd4 5a02 	vldr	s11, [r4, #8]
		  t_ypr[2] += ypr[2]*lptime;
 80070fc:	edd4 7a07 	vldr	s15, [r4, #28]
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 8007100:	4606      	mov	r6, r0
		  t_ypr[0] += ypr[0]*lptime;
 8007102:	ed94 6a11 	vldr	s12, [r4, #68]	; 0x44
		  t_ypr[1] += ypr[1]*lptime;
 8007106:	edd4 6a03 	vldr	s13, [r4, #12]
 800710a:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
		  t_ypr[2] += ypr[2]*lptime;
 800710e:	edd4 4a04 	vldr	s9, [r4, #16]
 8007112:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
		  t_ypr[0] += ypr[0]*lptime;
 8007116:	edd4 8a05 	vldr	s17, [r4, #20]
		  t_ypr[2] += ypr[2]*lptime;
 800711a:	eee4 7a85 	vfma.f32	s15, s9, s10
		  t_ypr[1] += ypr[1]*lptime;
 800711e:	edd4 aa06 	vldr	s21, [r4, #24]
		  acangle[1] = fastasin(accel[1]/fullvec) * 57.29577951;
 8007122:	6520      	str	r0, [r4, #80]	; 0x50
		  t_ypr[0] += ypr[0]*lptime;
 8007124:	eee5 8a86 	vfma.f32	s17, s11, s12
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8007128:	6c60      	ldr	r0, [r4, #68]	; 0x44
		  t_ypr[1] += ypr[1]*lptime;
 800712a:	eee6 aa87 	vfma.f32	s21, s13, s14
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 800712e:	6c67      	ldr	r7, [r4, #68]	; 0x44
		  t_ypr[2] += ypr[2]*lptime;
 8007130:	edc4 7a07 	vstr	s15, [r4, #28]
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8007134:	f7f9 f9d8 	bl	80004e8 <__aeabi_f2d>
 8007138:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800713c:	f7f9 fa2c 	bl	8000598 <__aeabi_dmul>
 8007140:	4680      	mov	r8, r0
 8007142:	4638      	mov	r0, r7
 8007144:	4689      	mov	r9, r1
 8007146:	f7f9 f9cf 	bl	80004e8 <__aeabi_f2d>
 800714a:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800714e:	f7f9 fa23 	bl	8000598 <__aeabi_dmul>
 8007152:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007156:	f7f9 f869 	bl	800022c <__adddf3>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4640      	mov	r0, r8
 8007160:	4649      	mov	r1, r9
 8007162:	f7f9 fb43 	bl	80007ec <__aeabi_ddiv>
 8007166:	f7f9 fcd1 	bl	8000b0c <__aeabi_d2f>
		  f_ypr[2] = f_ypr[2] - (alpha2 * (f_ypr[2] - ypr[2]));
 800716a:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800716e:	ed94 7a04 	vldr	s14, [r4, #16]
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 8007172:	ee06 0a90 	vmov	s13, r0
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 8007176:	6920      	ldr	r0, [r4, #16]
		  f_ypr[2] = f_ypr[2] - (alpha2 * (f_ypr[2] - ypr[2]));
 8007178:	ee37 7a67 	vsub.f32	s14, s14, s15
		  alpha2 = (DLPF_FREQ_YAW * lptime) / (1 + DLPF_FREQ_YAW * lptime);
 800717c:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 8007180:	6c67      	ldr	r7, [r4, #68]	; 0x44
		  f_ypr[2] = f_ypr[2] - (alpha2 * (f_ypr[2] - ypr[2]));
 8007182:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007186:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 800718a:	f7f9 f9ad 	bl	80004e8 <__aeabi_f2d>
 800718e:	4680      	mov	r8, r0
 8007190:	4689      	mov	r9, r1
 8007192:	4638      	mov	r0, r7
 8007194:	f7f9 f9a8 	bl	80004e8 <__aeabi_f2d>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	4640      	mov	r0, r8
 800719e:	4649      	mov	r1, r9
 80071a0:	f7f9 f9fa 	bl	8000598 <__aeabi_dmul>
 80071a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071a8:	f7f9 f9f6 	bl	8000598 <__aeabi_dmul>
 80071ac:	f7f9 fcae 	bl	8000b0c <__aeabi_d2f>
 80071b0:	ee06 0a90 	vmov	s13, r0
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 80071b4:	f648 0389 	movw	r3, #34953	; 0x8889
 80071b8:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 80071bc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80071c0:	f640 5101 	movw	r1, #3329	; 0xd01
 80071c4:	f6c3 4308 	movt	r3, #15368	; 0x3c08
 80071c8:	f6c3 622a 	movt	r2, #15914	; 0x3e2a
 80071cc:	f6c3 1150 	movt	r1, #14672	; 0x3950
		  t_ypr[1] += t_ypr[0] * fastsin(ypr[2] * 0.017453293 * lptime);
 80071d0:	6920      	ldr	r0, [r4, #16]
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 80071d2:	ee66 5a87 	vmul.f32	s11, s13, s14
 80071d6:	ee08 3a10 	vmov	s16, r3
 80071da:	ee09 2a90 	vmov	s19, r2
 80071de:	ee0a 1a10 	vmov	s20, r1
		  t_ypr[1] += t_ypr[0] * fastsin(ypr[2] * 0.017453293 * lptime);
 80071e2:	6c67      	ldr	r7, [r4, #68]	; 0x44
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 80071e4:	ee25 6a87 	vmul.f32	s12, s11, s14
 80071e8:	ee27 7a0a 	vmul.f32	s14, s14, s20
 80071ec:	ee66 7a08 	vmul.f32	s15, s12, s16
 80071f0:	eee5 7ae9 	vfms.f32	s15, s11, s19
 80071f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f8:	eee6 7a47 	vfms.f32	s15, s12, s14
		  t_ypr[0] -= t_ypr[1] * fastsin(ypr[2] * 0.017453293 * lptime);
 80071fc:	eeea 8ae7 	vfms.f32	s17, s21, s15
		  t_ypr[1] += t_ypr[0] * fastsin(ypr[2] * 0.017453293 * lptime);
 8007200:	f7f9 f972 	bl	80004e8 <__aeabi_f2d>
 8007204:	4680      	mov	r8, r0
 8007206:	4689      	mov	r9, r1
 8007208:	4638      	mov	r0, r7
 800720a:	f7f9 f96d 	bl	80004e8 <__aeabi_f2d>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	4640      	mov	r0, r8
 8007214:	4649      	mov	r1, r9
 8007216:	f7f9 f9bf 	bl	8000598 <__aeabi_dmul>
 800721a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800721e:	f7f9 f9bb 	bl	8000598 <__aeabi_dmul>
 8007222:	f7f9 fc73 	bl	8000b0c <__aeabi_d2f>
 8007226:	ee0b 0a10 	vmov	s22, r0
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 800722a:	ee18 0a90 	vmov	r0, s17
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 800722e:	ee2b 9a0b 	vmul.f32	s18, s22, s22
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 8007232:	f7f9 f959 	bl	80004e8 <__aeabi_f2d>
 8007236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 800723a:	ee2b ca09 	vmul.f32	s24, s22, s18
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 800723e:	f7f9 f9ab 	bl	8000598 <__aeabi_dmul>
 8007242:	4680      	mov	r8, r0
 8007244:	4689      	mov	r9, r1
 8007246:	4630      	mov	r0, r6
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 8007248:	ee6c ba09 	vmul.f32	s23, s24, s18
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 800724c:	f7f9 f94c 	bl	80004e8 <__aeabi_f2d>
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 8007250:	ee29 9a0a 	vmul.f32	s18, s18, s20
 8007254:	ee2b 8a88 	vmul.f32	s16, s23, s16
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 8007258:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 800725c:	eeac 8a69 	vfms.f32	s16, s24, s19
		  t_ypr[0] = t_ypr[0] * 0.9996 + acangle[1] * 0.0004;	// angle is mixed up
 8007260:	f7f9 f99a 	bl	8000598 <__aeabi_dmul>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4640      	mov	r0, r8
 800726a:	4649      	mov	r1, r9
 800726c:	f7f8 ffde 	bl	800022c <__adddf3>
 8007270:	f7f9 fc4c 	bl	8000b0c <__aeabi_d2f>
 8007274:	6160      	str	r0, [r4, #20]
		return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 8007276:	ee38 8a0b 	vadd.f32	s16, s16, s22
 800727a:	eeab 8ac9 	vfms.f32	s16, s23, s18
		  t_ypr[1] = t_ypr[1] * 0.9996 + acangle[0] * 0.0004;
 800727e:	eee8 aa88 	vfma.f32	s21, s17, s16
 8007282:	ee1a 0a90 	vmov	r0, s21
 8007286:	f7f9 f92f 	bl	80004e8 <__aeabi_f2d>
 800728a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800728e:	f7f9 f983 	bl	8000598 <__aeabi_dmul>
 8007292:	4606      	mov	r6, r0
 8007294:	460f      	mov	r7, r1
 8007296:	4628      	mov	r0, r5
 8007298:	f7f9 f926 	bl	80004e8 <__aeabi_f2d>
 800729c:	4652      	mov	r2, sl
 800729e:	465b      	mov	r3, fp
 80072a0:	f7f9 f97a 	bl	8000598 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f8 ffbe 	bl	800022c <__adddf3>
 80072b0:	f7f9 fc2c 	bl	8000b0c <__aeabi_d2f>
 80072b4:	61a0      	str	r0, [r4, #24]
	}
 80072b6:	b01d      	add	sp, #116	; 0x74
 80072b8:	ecbd 8b0a 	vpop	{d8-d12}
 80072bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		  fullvec = fastsqrt(accel[0]*accel[0] + accel[1]*accel[1] + accel[2]*accel[2]); //calculate full vector with Pythagoras' theorem
 80072c0:	6563      	str	r3, [r4, #84]	; 0x54
 80072c2:	e5dc      	b.n	8006e7e <_ZN6SENSOR8ICM2068912calculateICMEv+0x56>

080072c4 <_ZN4RF24C1EP12GPIO_TypeDeftS1_tP19__SPI_HandleTypeDef>:
	pipe0_reading_address[0] = 0;
	r_bit_ce = s_bit_ce + 16;
	r_bit_csn = s_bit_csn + 16;
}
#else
RF24::RF24(GPIO_TypeDef * GPIOce, uint16_t s_bit_ce, GPIO_TypeDef * GPIOcsn, uint16_t s_bit_csn, SPI_HandleTypeDef * _hspix) :
 80072c4:	b4f0      	push	{r4, r5, r6, r7}
 80072c6:	f8bd 5010 	ldrh.w	r5, [sp, #16]
		GPIOce(GPIOce), s_bit_ce(s_bit_ce), GPIOcsn(GPIOcsn), s_bit_csn(s_bit_csn), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(5)  //,pipe0_reading_addressHAL_MAX_DELAY
 80072ca:	b2d2      	uxtb	r2, r2
 80072cc:	6181      	str	r1, [r0, #24]
 80072ce:	2720      	movs	r7, #32
 80072d0:	b2ed      	uxtb	r5, r5
RF24::RF24(GPIO_TypeDef * GPIOce, uint16_t s_bit_ce, GPIO_TypeDef * GPIOcsn, uint16_t s_bit_csn, SPI_HandleTypeDef * _hspix) :
 80072d2:	9e05      	ldr	r6, [sp, #20]
{
	pipe0_reading_address[0] = 0;
	r_bit_ce = s_bit_ce + 16;
 80072d4:	f102 0c10 	add.w	ip, r2, #16
		GPIOce(GPIOce), s_bit_ce(s_bit_ce), GPIOcsn(GPIOcsn), s_bit_csn(s_bit_csn), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(5)  //,pipe0_reading_addressHAL_MAX_DELAY
 80072d8:	7702      	strb	r2, [r0, #28]
	r_bit_csn = s_bit_csn + 16;
 80072da:	f105 0110 	add.w	r1, r5, #16
		GPIOce(GPIOce), s_bit_ce(s_bit_ce), GPIOcsn(GPIOcsn), s_bit_csn(s_bit_csn), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(5)  //,pipe0_reading_addressHAL_MAX_DELAY
 80072de:	2200      	movs	r2, #0
 80072e0:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
	r_bit_csn = s_bit_csn + 16;
 80072e4:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
		GPIOce(GPIOce), s_bit_ce(s_bit_ce), GPIOcsn(GPIOcsn), s_bit_csn(s_bit_csn), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(5)  //,pipe0_reading_addressHAL_MAX_DELAY
 80072e8:	2105      	movs	r1, #5
 80072ea:	6106      	str	r6, [r0, #16]
 80072ec:	f880 7028 	strb.w	r7, [r0, #40]	; 0x28
	r_bit_ce = s_bit_ce + 16;
 80072f0:	f880 c025 	strb.w	ip, [r0, #37]	; 0x25
		GPIOce(GPIOce), s_bit_ce(s_bit_ce), GPIOcsn(GPIOcsn), s_bit_csn(s_bit_csn), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(5)  //,pipe0_reading_addressHAL_MAX_DELAY
 80072f4:	6203      	str	r3, [r0, #32]
 80072f6:	f880 2027 	strb.w	r2, [r0, #39]	; 0x27
 80072fa:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
	pipe0_reading_address[0] = 0;
 80072fe:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
		GPIOce(GPIOce), s_bit_ce(s_bit_ce), GPIOcsn(GPIOcsn), s_bit_csn(s_bit_csn), hspix(_hspix), p_variant(false), payload_size(32), dynamic_payloads_enabled(false), addr_width(5), csDelay(5)  //,pipe0_reading_addressHAL_MAX_DELAY
 8007302:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
 8007306:	6381      	str	r1, [r0, #56]	; 0x38
}
 8007308:	bcf0      	pop	{r4, r5, r6, r7}
 800730a:	4770      	bx	lr

0800730c <_ZN4RF2410setChannelEh>:


/****************************************************************************/

void RF24::setChannel(uint8_t channel)
{
 800730c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const uint8_t max_channel = 125;
	write_register(RF_CH, rf24_min(channel, max_channel));
 800730e:	297d      	cmp	r1, #125	; 0x7d
{
 8007310:	4605      	mov	r5, r0
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007312:	f04f 0401 	mov.w	r4, #1
 8007316:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
 800731a:	b085      	sub	sp, #20
	write_register(RF_CH, rf24_min(channel, max_channel));
 800731c:	bf28      	it	cs
 800731e:	217d      	movcs	r1, #125	; 0x7d
	beginTransaction();
 8007320:	6a2f      	ldr	r7, [r5, #32]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007322:	f04f 36ff 	mov.w	r6, #4294967295
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007326:	fa04 f000 	lsl.w	r0, r4, r0
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 800732a:	2225      	movs	r2, #37	; 0x25
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800732c:	4623      	mov	r3, r4
 800732e:	f88d 100d 	strb.w	r1, [sp, #13]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007332:	61b8      	str	r0, [r7, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007334:	f10d 010f 	add.w	r1, sp, #15
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007338:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800733c:	f10d 020e 	add.w	r2, sp, #14
 8007340:	6928      	ldr	r0, [r5, #16]
 8007342:	9600      	str	r6, [sp, #0]
 8007344:	f7fc fd44 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007348:	4633      	mov	r3, r6
 800734a:	4622      	mov	r2, r4
 800734c:	6928      	ldr	r0, [r5, #16]
 800734e:	f10d 010d 	add.w	r1, sp, #13
 8007352:	f7fc f9bd 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007356:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800735a:	6a2b      	ldr	r3, [r5, #32]
 800735c:	4094      	lsls	r4, r2
 800735e:	619c      	str	r4, [r3, #24]
}
 8007360:	b005      	add	sp, #20
 8007362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007364 <_ZN4RF2414setPayloadSizeEh>:
}
/****************************************************************************/

void RF24::setPayloadSize(uint8_t size)
{
	payload_size = rf24_min(size, 32);
 8007364:	2920      	cmp	r1, #32
 8007366:	bf28      	it	cs
 8007368:	2120      	movcs	r1, #32
 800736a:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
}
 800736e:	4770      	bx	lr

08007370 <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
 8007370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007374:	4604      	mov	r4, r0
		GPIOce->BSRR = 1 << r_bit_ce;
 8007376:	2501      	movs	r5, #1
{
 8007378:	b086      	sub	sp, #24
	// This is actually only required following power up but some settling time also appears to
	// be required after resets too. For full coverage, we'll always assume the worst.
	// Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
	// Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
	// WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
	HAL_Delay(5);
 800737a:	2005      	movs	r0, #5
		GPIOce->BSRR = 1 << r_bit_ce;
 800737c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007380:	f04f 36ff 	mov.w	r6, #4294967295
		GPIOce->BSRR = 1 << r_bit_ce;
 8007384:	69a2      	ldr	r2, [r4, #24]
 8007386:	270c      	movs	r7, #12
 8007388:	fa05 f303 	lsl.w	r3, r5, r3
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 800738c:	f04f 0806 	mov.w	r8, #6
	{
		// Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
		// Making it '10'.
		setup |= _BV(RF_DR_LOW);
#if !defined(F_CPU) || F_CPU > 20000000
		txDelay = 450;
 8007390:	f44f 79e1 	mov.w	r9, #450	; 0x1c2
		GPIOce->BSRR = 1 << r_bit_ce;
 8007394:	6193      	str	r3, [r2, #24]
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007396:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800739a:	6a22      	ldr	r2, [r4, #32]
 800739c:	fa05 f303 	lsl.w	r3, r5, r3
 80073a0:	6193      	str	r3, [r2, #24]
	HAL_Delay(5);
 80073a2:	f7f9 fdf3 	bl	8000f8c <HAL_Delay>
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80073a6:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	beginTransaction();
 80073aa:	6a21      	ldr	r1, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80073ac:	2320      	movs	r3, #32
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80073ae:	fa05 f202 	lsl.w	r2, r5, r2
 80073b2:	f88d 700b 	strb.w	r7, [sp, #11]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80073b6:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80073ba:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80073bc:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80073be:	f10d 0216 	add.w	r2, sp, #22
 80073c2:	6920      	ldr	r0, [r4, #16]
 80073c4:	f10d 0117 	add.w	r1, sp, #23
 80073c8:	9600      	str	r6, [sp, #0]
 80073ca:	f7fc fd01 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80073ce:	4633      	mov	r3, r6
 80073d0:	462a      	mov	r2, r5
 80073d2:	f10d 010b 	add.w	r1, sp, #11
 80073d6:	6920      	ldr	r0, [r4, #16]
 80073d8:	f7fc f97a 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80073dc:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80073e0:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80073e2:	f04f 0e24 	mov.w	lr, #36	; 0x24
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80073e6:	fa05 f101 	lsl.w	r1, r5, r1
 80073ea:	f04f 0c5f 	mov.w	ip, #95	; 0x5f
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80073ee:	462b      	mov	r3, r5
 80073f0:	f10d 0216 	add.w	r2, sp, #22
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80073f4:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80073f6:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80073fa:	f894 7026 	ldrb.w	r7, [r4, #38]	; 0x26
	beginTransaction();
 80073fe:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007400:	fa05 f707 	lsl.w	r7, r5, r7
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007404:	f88d e017 	strb.w	lr, [sp, #23]
 8007408:	f88d c00a 	strb.w	ip, [sp, #10]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800740c:	6187      	str	r7, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800740e:	6920      	ldr	r0, [r4, #16]
 8007410:	9600      	str	r6, [sp, #0]
 8007412:	f7fc fcdd 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007416:	4633      	mov	r3, r6
 8007418:	462a      	mov	r2, r5
 800741a:	f10d 010a 	add.w	r1, sp, #10
 800741e:	6920      	ldr	r0, [r4, #16]
 8007420:	f7fc f956 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007424:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
 8007428:	6a20      	ldr	r0, [r4, #32]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800742a:	4633      	mov	r3, r6
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800742c:	fa05 f707 	lsl.w	r7, r5, r7
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007430:	462a      	mov	r2, r5
 8007432:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007436:	6187      	str	r7, [r0, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007438:	f894 7026 	ldrb.w	r7, [r4, #38]	; 0x26
	beginTransaction();
 800743c:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800743e:	fa05 f707 	lsl.w	r7, r5, r7
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007442:	f88d 8017 	strb.w	r8, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007446:	6187      	str	r7, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007448:	6920      	ldr	r0, [r4, #16]
 800744a:	f7fc f941 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 800744e:	4633      	mov	r3, r6
 8007450:	462a      	mov	r2, r5
 8007452:	f10d 0116 	add.w	r1, sp, #22
 8007456:	6920      	ldr	r0, [r4, #16]
 8007458:	f7fc fa54 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800745c:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8007460:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007462:	f04f 0e26 	mov.w	lr, #38	; 0x26
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007466:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800746a:	462b      	mov	r3, r5
 800746c:	f10d 0216 	add.w	r2, sp, #22
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007470:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007472:	f10d 0117 	add.w	r1, sp, #23
	return result;
 8007476:	f89d 7016 	ldrb.w	r7, [sp, #22]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800747a:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 800747e:	f007 07d7 	and.w	r7, r7, #215	; 0xd7
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007482:	6a20      	ldr	r0, [r4, #32]
 8007484:	fa05 fc0c 	lsl.w	ip, r5, ip
		txDelay = 450;
 8007488:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
		setup |= _BV(RF_DR_LOW);
 800748c:	f047 0920 	orr.w	r9, r7, #32
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007490:	f88d e017 	strb.w	lr, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007494:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007498:	6920      	ldr	r0, [r4, #16]
 800749a:	9600      	str	r6, [sp, #0]
 800749c:	f88d 900c 	strb.w	r9, [sp, #12]
 80074a0:	f7fc fc96 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80074a4:	4633      	mov	r3, r6
 80074a6:	462a      	mov	r2, r5
 80074a8:	a903      	add	r1, sp, #12
 80074aa:	6920      	ldr	r0, [r4, #16]
 80074ac:	f7fc f910 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80074b0:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 80074b4:	6a27      	ldr	r7, [r4, #32]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80074b6:	4633      	mov	r3, r6
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80074b8:	fa05 f00c 	lsl.w	r0, r5, ip
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80074bc:	462a      	mov	r2, r5
 80074be:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80074c2:	61b8      	str	r0, [r7, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80074c4:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 80074c8:	6a27      	ldr	r7, [r4, #32]
 80074ca:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80074ce:	f88d 8017 	strb.w	r8, [sp, #23]
 80074d2:	f04f 0800 	mov.w	r8, #0
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80074d6:	61b8      	str	r0, [r7, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80074d8:	6920      	ldr	r0, [r4, #16]
 80074da:	f7fc f8f9 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 80074de:	4633      	mov	r3, r6
 80074e0:	462a      	mov	r2, r5
 80074e2:	f10d 0116 	add.w	r1, sp, #22
 80074e6:	6920      	ldr	r0, [r4, #16]
 80074e8:	f7fc fa0c 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80074ec:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80074f0:	6a22      	ldr	r2, [r4, #32]
 80074f2:	fa05 f303 	lsl.w	r3, r5, r3
 80074f6:	6193      	str	r3, [r2, #24]
	return result;
 80074f8:	f89d 3016 	ldrb.w	r3, [sp, #22]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80074fc:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
		}
	}
	write_register(RF_SETUP, setup);

	// Verify our result
	if (read_register(RF_SETUP) == setup)
 8007500:	4599      	cmp	r9, r3
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007502:	f04f 33ff 	mov.w	r3, #4294967295
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007506:	f04f 0906 	mov.w	r9, #6
	beginTransaction();
 800750a:	6a20      	ldr	r0, [r4, #32]
		p_variant = true;
 800750c:	bf08      	it	eq
 800750e:	f884 5027 	strbeq.w	r5, [r4, #39]	; 0x27
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007512:	2501      	movs	r5, #1
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007514:	461e      	mov	r6, r3
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007516:	f88d 9017 	strb.w	r9, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800751a:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800751e:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007520:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007522:	f10d 0117 	add.w	r1, sp, #23
 8007526:	6920      	ldr	r0, [r4, #16]
 8007528:	f7fc f8d2 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 800752c:	462a      	mov	r2, r5
 800752e:	4633      	mov	r3, r6
 8007530:	f10d 0116 	add.w	r1, sp, #22
 8007534:	6920      	ldr	r0, [r4, #16]
 8007536:	f7fc f9e5 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800753a:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 800753e:	6a20      	ldr	r0, [r4, #32]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007540:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007542:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007546:	4633      	mov	r3, r6
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007548:	6181      	str	r1, [r0, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800754a:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	beginTransaction();
 800754e:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007550:	fa05 f101 	lsl.w	r1, r5, r1
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007554:	f88d 9017 	strb.w	r9, [sp, #23]
	return result;
 8007558:	f89d a016 	ldrb.w	sl, [sp, #22]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800755c:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800755e:	f10d 0117 	add.w	r1, sp, #23
 8007562:	6920      	ldr	r0, [r4, #16]
 8007564:	f7fc f8b4 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007568:	462a      	mov	r2, r5
 800756a:	4633      	mov	r3, r6
 800756c:	f10d 0116 	add.w	r1, sp, #22
 8007570:	6920      	ldr	r0, [r4, #16]
 8007572:	f7fc f9c7 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007576:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800757a:	6a22      	ldr	r2, [r4, #32]
	txDelay = 250;
 800757c:	21fa      	movs	r1, #250	; 0xfa
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800757e:	fa05 f303 	lsl.w	r3, r5, r3
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007582:	2026      	movs	r0, #38	; 0x26
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007584:	6193      	str	r3, [r2, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007586:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	return result;
 800758a:	f89d c016 	ldrb.w	ip, [sp, #22]
	beginTransaction();
 800758e:	6a22      	ldr	r2, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007590:	fa05 f303 	lsl.w	r3, r5, r3
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 8007594:	f02c 0c28 	bic.w	ip, ip, #40	; 0x28
	txDelay = 250;
 8007598:	6361      	str	r1, [r4, #52]	; 0x34
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 800759a:	f88d 0017 	strb.w	r0, [sp, #23]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800759e:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80075a2:	6193      	str	r3, [r2, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80075a4:	462b      	mov	r3, r5
 80075a6:	6920      	ldr	r0, [r4, #16]
 80075a8:	f10d 0216 	add.w	r2, sp, #22
 80075ac:	9600      	str	r6, [sp, #0]
 80075ae:	f88d c014 	strb.w	ip, [sp, #20]
 80075b2:	f7fc fc0d 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80075b6:	4633      	mov	r3, r6
 80075b8:	462a      	mov	r2, r5
 80075ba:	a905      	add	r1, sp, #20
 80075bc:	6920      	ldr	r0, [r4, #16]
 80075be:	f7fc f887 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80075c2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80075c6:	6a20      	ldr	r0, [r4, #32]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80075c8:	4633      	mov	r3, r6
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80075ca:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80075ce:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80075d0:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80075d2:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80075d6:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 80075da:	6a27      	ldr	r7, [r4, #32]
 80075dc:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80075e0:	f88d 9017 	strb.w	r9, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80075e4:	61b8      	str	r0, [r7, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80075e6:	6920      	ldr	r0, [r4, #16]
 80075e8:	f7fc f872 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 80075ec:	4633      	mov	r3, r6
 80075ee:	462a      	mov	r2, r5
 80075f0:	f10d 0116 	add.w	r1, sp, #22
 80075f4:	6920      	ldr	r0, [r4, #16]
 80075f6:	f7fc f985 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80075fa:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 80075fe:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = ACTIVATE;
 8007600:	f04f 0e50 	mov.w	lr, #80	; 0x50
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007604:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007608:	4633      	mov	r3, r6
 800760a:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800760c:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800760e:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007612:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 8007616:	6a27      	ldr	r7, [r4, #32]
 8007618:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = ACTIVATE;
 800761c:	f88d e017 	strb.w	lr, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007620:	61b8      	str	r0, [r7, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007622:	6920      	ldr	r0, [r4, #16]
 8007624:	f7fc f854 	bl	80036d0 <HAL_SPI_Transmit>
	temp = 0x73;
 8007628:	f04f 0c73 	mov.w	ip, #115	; 0x73
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800762c:	4633      	mov	r3, r6
 800762e:	462a      	mov	r2, r5
 8007630:	f10d 0117 	add.w	r1, sp, #23
 8007634:	6920      	ldr	r0, [r4, #16]
	temp = 0x73;
 8007636:	f88d c017 	strb.w	ip, [sp, #23]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800763a:	f7fc f849 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800763e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007642:	f04f 0e3d 	mov.w	lr, #61	; 0x3d
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007646:	6a20      	ldr	r0, [r4, #32]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007648:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800764a:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800764e:	f10d 0216 	add.w	r2, sp, #22
 8007652:	f88d 8013 	strb.w	r8, [sp, #19]
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007656:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007658:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800765c:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 8007660:	6a27      	ldr	r7, [r4, #32]
 8007662:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007666:	f88d e017 	strb.w	lr, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800766a:	61b8      	str	r0, [r7, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800766c:	6920      	ldr	r0, [r4, #16]
 800766e:	9600      	str	r6, [sp, #0]
 8007670:	f7fc fbae 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007674:	4633      	mov	r3, r6
 8007676:	462a      	mov	r2, r5
 8007678:	f10d 0113 	add.w	r1, sp, #19
 800767c:	6920      	ldr	r0, [r4, #16]
 800767e:	f7fc f827 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007682:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8007686:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007688:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800768c:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007690:	462b      	mov	r3, r5
 8007692:	f10d 0216 	add.w	r2, sp, #22
 8007696:	f88d 8012 	strb.w	r8, [sp, #18]
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800769a:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800769c:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80076a0:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 80076a4:	6a27      	ldr	r7, [r4, #32]
 80076a6:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80076aa:	f88d e017 	strb.w	lr, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80076ae:	61b8      	str	r0, [r7, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80076b0:	6920      	ldr	r0, [r4, #16]
 80076b2:	9600      	str	r6, [sp, #0]
 80076b4:	f7fc fb8c 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80076b8:	4633      	mov	r3, r6
 80076ba:	462a      	mov	r2, r5
 80076bc:	f10d 0112 	add.w	r1, sp, #18
 80076c0:	6920      	ldr	r0, [r4, #16]
 80076c2:	f7fc f805 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80076c6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80076ca:	6a21      	ldr	r1, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80076cc:	f04f 0e27 	mov.w	lr, #39	; 0x27
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80076d0:	fa05 f202 	lsl.w	r2, r5, r2
 80076d4:	f04f 0c70 	mov.w	ip, #112	; 0x70
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80076d8:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80076da:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80076dc:	f10d 0216 	add.w	r2, sp, #22
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80076e0:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	beginTransaction();
 80076e4:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80076e6:	fa05 f101 	lsl.w	r1, r5, r1
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80076ea:	f88d e017 	strb.w	lr, [sp, #23]
	dynamic_payloads_enabled = false;
 80076ee:	f884 8029 	strb.w	r8, [r4, #41]	; 0x29
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80076f2:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80076f4:	f10d 0117 	add.w	r1, sp, #23
 80076f8:	6920      	ldr	r0, [r4, #16]
 80076fa:	9600      	str	r6, [sp, #0]
 80076fc:	f88d c011 	strb.w	ip, [sp, #17]
 8007700:	f7fc fb66 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007704:	4633      	mov	r3, r6
 8007706:	462a      	mov	r2, r5
 8007708:	f10d 0111 	add.w	r1, sp, #17
 800770c:	6920      	ldr	r0, [r4, #16]
 800770e:	f7fb ffdf 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007712:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007716:	6a21      	ldr	r1, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007718:	f04f 0e25 	mov.w	lr, #37	; 0x25
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800771c:	fa05 f202 	lsl.w	r2, r5, r2
 8007720:	f04f 0c4c 	mov.w	ip, #76	; 0x4c
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007724:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007726:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007728:	f10d 0216 	add.w	r2, sp, #22
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800772c:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	beginTransaction();
 8007730:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007732:	fa05 f101 	lsl.w	r1, r5, r1
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007736:	f88d e017 	strb.w	lr, [sp, #23]
 800773a:	f88d c010 	strb.w	ip, [sp, #16]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800773e:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007740:	f10d 0117 	add.w	r1, sp, #23
 8007744:	6920      	ldr	r0, [r4, #16]
 8007746:	9600      	str	r6, [sp, #0]
 8007748:	f7fc fb42 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 800774c:	4633      	mov	r3, r6
 800774e:	462a      	mov	r2, r5
 8007750:	a904      	add	r1, sp, #16
 8007752:	6920      	ldr	r0, [r4, #16]
 8007754:	f7fb ffbc 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007758:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800775c:	6a20      	ldr	r0, [r4, #32]
 800775e:	f04f 0ee2 	mov.w	lr, #226	; 0xe2
 8007762:	fa05 f202 	lsl.w	r2, r5, r2
 8007766:	a906      	add	r1, sp, #24
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8007768:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800776a:	6182      	str	r2, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 800776c:	f10d 0217 	add.w	r2, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007770:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 8007774:	6a27      	ldr	r7, [r4, #32]
 8007776:	fa05 f00c 	lsl.w	r0, r5, ip
 800777a:	f801 ed09 	strb.w	lr, [r1, #-9]!
 800777e:	61b8      	str	r0, [r7, #24]
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8007780:	6920      	ldr	r0, [r4, #16]
 8007782:	9600      	str	r6, [sp, #0]
 8007784:	f7fc fb24 	bl	8003dd0 <HAL_SPI_TransmitReceive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007788:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800778c:	6a20      	ldr	r0, [r4, #32]
 800778e:	f04f 0ee1 	mov.w	lr, #225	; 0xe1
 8007792:	fa05 f202 	lsl.w	r2, r5, r2
 8007796:	a906      	add	r1, sp, #24
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8007798:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800779a:	6182      	str	r2, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 800779c:	f10d 0217 	add.w	r2, sp, #23
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80077a0:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 80077a4:	6a27      	ldr	r7, [r4, #32]
 80077a6:	fa05 f00c 	lsl.w	r0, r5, ip
 80077aa:	f801 ed0a 	strb.w	lr, [r1, #-10]!
 80077ae:	61b8      	str	r0, [r7, #24]
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 80077b0:	6920      	ldr	r0, [r4, #16]
 80077b2:	9600      	str	r6, [sp, #0]
 80077b4:	f7fc fb0c 	bl	8003dd0 <HAL_SPI_TransmitReceive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80077b8:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 80077bc:	6a27      	ldr	r7, [r4, #32]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80077be:	4633      	mov	r3, r6
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80077c0:	fa05 f00c 	lsl.w	r0, r5, ip
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80077c4:	462a      	mov	r2, r5
 80077c6:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80077ca:	61b8      	str	r0, [r7, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80077cc:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 80077d0:	6a27      	ldr	r7, [r4, #32]
 80077d2:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80077d6:	f88d 8017 	strb.w	r8, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80077da:	61b8      	str	r0, [r7, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80077dc:	6920      	ldr	r0, [r4, #16]
 80077de:	f7fb ff77 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 80077e2:	4633      	mov	r3, r6
 80077e4:	462a      	mov	r2, r5
 80077e6:	f10d 0116 	add.w	r1, sp, #22
 80077ea:	6920      	ldr	r0, [r4, #16]
 80077ec:	f7fc f88a 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80077f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80077f4:	6a22      	ldr	r2, [r4, #32]
 80077f6:	fa05 f303 	lsl.w	r3, r5, r3
 80077fa:	6193      	str	r3, [r2, #24]
	return result;
 80077fc:	f89d 3016 	ldrb.w	r3, [sp, #22]
	if (!(cfg & _BV(PWR_UP)))
 8007800:	079a      	lsls	r2, r3, #30
 8007802:	d425      	bmi.n	8007850 <_ZN4RF245beginEv+0x4e0>
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007804:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007808:	f04f 0c20 	mov.w	ip, #32
	beginTransaction();
 800780c:	6a21      	ldr	r1, [r4, #32]
		write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
 800780e:	f043 0202 	orr.w	r2, r3, #2
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007812:	fa05 f000 	lsl.w	r0, r5, r0
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007816:	f88d c017 	strb.w	ip, [sp, #23]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800781a:	462b      	mov	r3, r5
 800781c:	f88d 2015 	strb.w	r2, [sp, #21]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007820:	6188      	str	r0, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007822:	f10d 0216 	add.w	r2, sp, #22
 8007826:	6920      	ldr	r0, [r4, #16]
 8007828:	f10d 0117 	add.w	r1, sp, #23
 800782c:	9600      	str	r6, [sp, #0]
 800782e:	f7fc facf 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007832:	462a      	mov	r2, r5
 8007834:	4633      	mov	r3, r6
 8007836:	f10d 0115 	add.w	r1, sp, #21
 800783a:	6920      	ldr	r0, [r4, #16]
 800783c:	f7fb ff48 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007840:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007844:	6a23      	ldr	r3, [r4, #32]
		HAL_Delay(5);
 8007846:	2005      	movs	r0, #5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007848:	4095      	lsls	r5, r2
 800784a:	619d      	str	r5, [r3, #24]
		HAL_Delay(5);
 800784c:	f7f9 fb9e 	bl	8000f8c <HAL_Delay>
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007850:	2300      	movs	r3, #0
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007852:	2501      	movs	r5, #1
 8007854:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007858:	f88d 3017 	strb.w	r3, [sp, #23]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800785c:	f04f 33ff 	mov.w	r3, #4294967295
	beginTransaction();
 8007860:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007862:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007866:	4698      	mov	r8, r3
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007868:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800786a:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800786c:	f10d 0117 	add.w	r1, sp, #23
 8007870:	6920      	ldr	r0, [r4, #16]
 8007872:	f7fb ff2d 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007876:	462a      	mov	r2, r5
 8007878:	4643      	mov	r3, r8
 800787a:	f10d 0116 	add.w	r1, sp, #22
 800787e:	6920      	ldr	r0, [r4, #16]
 8007880:	f7fc f840 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007884:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007888:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 800788a:	f04f 0e20 	mov.w	lr, #32
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800788e:	fa05 f303 	lsl.w	r3, r5, r3
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007892:	f10d 0216 	add.w	r2, sp, #22
 8007896:	f10d 0117 	add.w	r1, sp, #23
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800789a:	6183      	str	r3, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800789c:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800789e:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
	return result;
 80078a2:	f89d 6016 	ldrb.w	r6, [sp, #22]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80078a6:	fa05 f00c 	lsl.w	r0, r5, ip
 80078aa:	6a27      	ldr	r7, [r4, #32]
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
 80078ac:	f026 0601 	bic.w	r6, r6, #1
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80078b0:	f88d e017 	strb.w	lr, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80078b4:	61b8      	str	r0, [r7, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80078b6:	6920      	ldr	r0, [r4, #16]
 80078b8:	f8cd 8000 	str.w	r8, [sp]
 80078bc:	f88d 600d 	strb.w	r6, [sp, #13]
 80078c0:	f7fc fa86 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80078c4:	4643      	mov	r3, r8
 80078c6:	462a      	mov	r2, r5
 80078c8:	f10d 010d 	add.w	r1, sp, #13
 80078cc:	6920      	ldr	r0, [r4, #16]
 80078ce:	f7fb feff 	bl	80036d0 <HAL_SPI_Transmit>
	return (setup != 0 && setup != 0xff);
 80078d2:	eb0a 0008 	add.w	r0, sl, r8
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80078d6:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	return (setup != 0 && setup != 0xff);
 80078da:	b2c0      	uxtb	r0, r0
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80078dc:	6a23      	ldr	r3, [r4, #32]
 80078de:	4095      	lsls	r5, r2
}
 80078e0:	28fd      	cmp	r0, #253	; 0xfd
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80078e2:	619d      	str	r5, [r3, #24]
}
 80078e4:	bf8c      	ite	hi
 80078e6:	2000      	movhi	r0, #0
 80078e8:	2001      	movls	r0, #1
 80078ea:	b006      	add	sp, #24
 80078ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080078f0 <_ZN4RF2414startListeningEv>:
{
 80078f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	b084      	sub	sp, #16
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80078f8:	2501      	movs	r5, #1
 80078fa:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80078fe:	2300      	movs	r3, #0
 8007900:	ae04      	add	r6, sp, #16
	beginTransaction();
 8007902:	6a27      	ldr	r7, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007904:	fa05 f000 	lsl.w	r0, r5, r0
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007908:	f806 3d01 	strb.w	r3, [r6, #-1]!
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800790c:	462a      	mov	r2, r5
 800790e:	f04f 33ff 	mov.w	r3, #4294967295
 8007912:	4631      	mov	r1, r6
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007914:	61b8      	str	r0, [r7, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007916:	6920      	ldr	r0, [r4, #16]
 8007918:	f7fb feda 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 800791c:	462a      	mov	r2, r5
 800791e:	f04f 33ff 	mov.w	r3, #4294967295
 8007922:	6920      	ldr	r0, [r4, #16]
 8007924:	f10d 010e 	add.w	r1, sp, #14
 8007928:	f7fb ffec 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800792c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007930:	6a22      	ldr	r2, [r4, #32]
 8007932:	fa05 f303 	lsl.w	r3, r5, r3
 8007936:	6193      	str	r3, [r2, #24]
	return result;
 8007938:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (!(cfg & _BV(PWR_UP)))
 800793c:	079a      	lsls	r2, r3, #30
 800793e:	d425      	bmi.n	800798c <_ZN4RF2414startListeningEv+0x9c>
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007940:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007944:	2020      	movs	r0, #32
	beginTransaction();
 8007946:	6a21      	ldr	r1, [r4, #32]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007948:	f04f 38ff 	mov.w	r8, #4294967295
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800794c:	fa05 f202 	lsl.w	r2, r5, r2
		write_register(NRF_CONFIG, cfg | _BV(PWR_UP));
 8007950:	f043 0702 	orr.w	r7, r3, #2
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007954:	f88d 000f 	strb.w	r0, [sp, #15]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007958:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800795a:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800795c:	f10d 020e 	add.w	r2, sp, #14
 8007960:	6920      	ldr	r0, [r4, #16]
 8007962:	4631      	mov	r1, r6
 8007964:	f8cd 8000 	str.w	r8, [sp]
 8007968:	f88d 700c 	strb.w	r7, [sp, #12]
 800796c:	f7fc fa30 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007970:	462a      	mov	r2, r5
 8007972:	4643      	mov	r3, r8
 8007974:	a903      	add	r1, sp, #12
 8007976:	6920      	ldr	r0, [r4, #16]
 8007978:	f7fb feaa 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800797c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007980:	6a23      	ldr	r3, [r4, #32]
		HAL_Delay(5);
 8007982:	2005      	movs	r0, #5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007984:	4095      	lsls	r5, r2
 8007986:	619d      	str	r5, [r3, #24]
		HAL_Delay(5);
 8007988:	f7f9 fb00 	bl	8000f8c <HAL_Delay>
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 800798c:	2300      	movs	r3, #0
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800798e:	2501      	movs	r5, #1
 8007990:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007994:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
	beginTransaction();
 800799c:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800799e:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80079a2:	461f      	mov	r7, r3
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80079a4:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80079a6:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80079a8:	4631      	mov	r1, r6
 80079aa:	6920      	ldr	r0, [r4, #16]
 80079ac:	f7fb fe90 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 80079b0:	462a      	mov	r2, r5
 80079b2:	463b      	mov	r3, r7
 80079b4:	f10d 010e 	add.w	r1, sp, #14
 80079b8:	6920      	ldr	r0, [r4, #16]
 80079ba:	f7fb ffa3 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80079be:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80079c2:	6a21      	ldr	r1, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80079c4:	f04f 0e20 	mov.w	lr, #32
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80079c8:	fa05 f202 	lsl.w	r2, r5, r2
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80079cc:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80079ce:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80079d0:	f10d 020e 	add.w	r2, sp, #14
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80079d4:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
	return result;
 80079d8:	f89d c00e 	ldrb.w	ip, [sp, #14]
	beginTransaction();
 80079dc:	6a21      	ldr	r1, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80079de:	fa05 f000 	lsl.w	r0, r5, r0
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) | _BV(PRIM_RX));
 80079e2:	ea4c 0c05 	orr.w	ip, ip, r5
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80079e6:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80079ea:	6188      	str	r0, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80079ec:	4631      	mov	r1, r6
 80079ee:	6920      	ldr	r0, [r4, #16]
 80079f0:	9700      	str	r7, [sp, #0]
 80079f2:	f88d c00b 	strb.w	ip, [sp, #11]
 80079f6:	f7fc f9eb 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80079fa:	463b      	mov	r3, r7
 80079fc:	462a      	mov	r2, r5
 80079fe:	f10d 010b 	add.w	r1, sp, #11
 8007a02:	6920      	ldr	r0, [r4, #16]
 8007a04:	f7fb fe64 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007a08:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007a0c:	6a21      	ldr	r1, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007a0e:	f04f 0e27 	mov.w	lr, #39	; 0x27
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007a12:	fa05 f202 	lsl.w	r2, r5, r2
 8007a16:	f04f 0c70 	mov.w	ip, #112	; 0x70
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007a1a:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007a1c:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007a1e:	f10d 020e 	add.w	r2, sp, #14
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007a22:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	beginTransaction();
 8007a26:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007a28:	fa05 f101 	lsl.w	r1, r5, r1
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007a2c:	f88d e00f 	strb.w	lr, [sp, #15]
 8007a30:	f88d c00a 	strb.w	ip, [sp, #10]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007a34:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007a36:	4631      	mov	r1, r6
 8007a38:	6920      	ldr	r0, [r4, #16]
 8007a3a:	9700      	str	r7, [sp, #0]
 8007a3c:	f7fc f9c8 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007a40:	463b      	mov	r3, r7
 8007a42:	462a      	mov	r2, r5
 8007a44:	f10d 010a 	add.w	r1, sp, #10
 8007a48:	6920      	ldr	r0, [r4, #16]
 8007a4a:	f7fb fe41 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007a4e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007a52:	6a22      	ldr	r2, [r4, #32]
 8007a54:	fa05 f303 	lsl.w	r3, r5, r3
 8007a58:	6193      	str	r3, [r2, #24]
		GPIOce->BSRR = 1 << s_bit_ce;
 8007a5a:	7f23      	ldrb	r3, [r4, #28]
 8007a5c:	69a2      	ldr	r2, [r4, #24]
 8007a5e:	fa05 f303 	lsl.w	r3, r5, r3
 8007a62:	6193      	str	r3, [r2, #24]
	if (pipe0_reading_address[0] > 0)
 8007a64:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d05c      	beq.n	8007b26 <_ZN4RF2414startListeningEv+0x236>
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007a6c:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007a70:	222a      	movs	r2, #42	; 0x2a
	beginTransaction();
 8007a72:	6a20      	ldr	r0, [r4, #32]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007a74:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007a76:	fa05 f101 	lsl.w	r1, r5, r1
		write_register(RX_ADDR_P0, pipe0_reading_address, addr_width);
 8007a7a:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007a7e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007a82:	f10d 020e 	add.w	r2, sp, #14
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007a86:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007a88:	4631      	mov	r1, r6
 8007a8a:	6920      	ldr	r0, [r4, #16]
 8007a8c:	9700      	str	r7, [sp, #0]
 8007a8e:	f7fc f99f 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, (uint8_t *) buf, len, HAL_MAX_DELAY);
 8007a92:	463b      	mov	r3, r7
 8007a94:	4642      	mov	r2, r8
 8007a96:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8007a9a:	6920      	ldr	r0, [r4, #16]
 8007a9c:	f7fb fe18 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007aa0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007aa4:	6a22      	ldr	r2, [r4, #32]
 8007aa6:	409d      	lsls	r5, r3
 8007aa8:	6195      	str	r5, [r2, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007aaa:	2501      	movs	r5, #1
 8007aac:	f894 1026 	ldrb.w	r1, [r4, #38]	; 0x26
	beginTransaction();
 8007ab0:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007ab2:	231d      	movs	r3, #29
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007ab4:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007ab8:	462a      	mov	r2, r5
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007aba:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007abe:	f04f 33ff 	mov.w	r3, #4294967295
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007ac2:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	6920      	ldr	r0, [r4, #16]
 8007ac8:	f7fb fe02 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007acc:	462a      	mov	r2, r5
 8007ace:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad2:	f10d 010e 	add.w	r1, sp, #14
 8007ad6:	6920      	ldr	r0, [r4, #16]
 8007ad8:	f7fb ff14 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007adc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007ae0:	6a22      	ldr	r2, [r4, #32]
 8007ae2:	fa05 f303 	lsl.w	r3, r5, r3
 8007ae6:	6193      	str	r3, [r2, #24]
	return result;
 8007ae8:	f89d 300e 	ldrb.w	r3, [sp, #14]
	if (read_register(FEATURE) & _BV(EN_ACK_PAY))
 8007aec:	079b      	lsls	r3, r3, #30
 8007aee:	d517      	bpl.n	8007b20 <_ZN4RF2414startListeningEv+0x230>
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007af0:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8007af4:	4632      	mov	r2, r6
	beginTransaction();
 8007af6:	6a20      	ldr	r0, [r4, #32]
 8007af8:	21e1      	movs	r1, #225	; 0xe1
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007afa:	fa05 f303 	lsl.w	r3, r5, r3
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8007afe:	f04f 36ff 	mov.w	r6, #4294967295
 8007b02:	f88d 100e 	strb.w	r1, [sp, #14]
 8007b06:	f10d 010e 	add.w	r1, sp, #14
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b0a:	6183      	str	r3, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &cmd, &status, 1, HAL_MAX_DELAY);
 8007b0c:	462b      	mov	r3, r5
 8007b0e:	6920      	ldr	r0, [r4, #16]
 8007b10:	9600      	str	r6, [sp, #0]
 8007b12:	f7fc f95d 	bl	8003dd0 <HAL_SPI_TransmitReceive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007b16:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007b1a:	6a23      	ldr	r3, [r4, #32]
 8007b1c:	4095      	lsls	r5, r2
 8007b1e:	619d      	str	r5, [r3, #24]
}
 8007b20:	b004      	add	sp, #16
 8007b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b26:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007b2a:	2202      	movs	r2, #2
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b2c:	6a20      	ldr	r0, [r4, #32]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007b2e:	463b      	mov	r3, r7
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b30:	fa05 fc0c 	lsl.w	ip, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007b34:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007b38:	4631      	mov	r1, r6
 8007b3a:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b3c:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007b40:	6920      	ldr	r0, [r4, #16]
 8007b42:	f7fb fdc5 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007b46:	462a      	mov	r2, r5
 8007b48:	463b      	mov	r3, r7
 8007b4a:	f10d 010e 	add.w	r1, sp, #14
 8007b4e:	6920      	ldr	r0, [r4, #16]
 8007b50:	f7fb fed8 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007b54:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007b58:	6a21      	ldr	r1, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007b5a:	f04f 0e22 	mov.w	lr, #34	; 0x22
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007b5e:	fa05 f202 	lsl.w	r2, r5, r2
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007b62:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007b64:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007b66:	f10d 020e 	add.w	r2, sp, #14
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b6a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
	return result;
 8007b6e:	f89d c00e 	ldrb.w	ip, [sp, #14]
	beginTransaction();
 8007b72:	6a21      	ldr	r1, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b74:	fa05 f000 	lsl.w	r0, r5, r0
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~_BV(pgm_read_byte(&child_pipe_enable[pipe])));
 8007b78:	f02c 0c01 	bic.w	ip, ip, #1
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007b7c:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007b80:	6188      	str	r0, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007b82:	4631      	mov	r1, r6
 8007b84:	6920      	ldr	r0, [r4, #16]
 8007b86:	9700      	str	r7, [sp, #0]
 8007b88:	f88d c00d 	strb.w	ip, [sp, #13]
 8007b8c:	f7fc f920 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007b90:	462a      	mov	r2, r5
 8007b92:	463b      	mov	r3, r7
 8007b94:	f10d 010d 	add.w	r1, sp, #13
 8007b98:	6920      	ldr	r0, [r4, #16]
 8007b9a:	f7fb fd99 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007b9e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007ba2:	6a23      	ldr	r3, [r4, #32]
 8007ba4:	4095      	lsls	r5, r2
 8007ba6:	619d      	str	r5, [r3, #24]
 8007ba8:	e77f      	b.n	8007aaa <_ZN4RF2414startListeningEv+0x1ba>
 8007baa:	bf00      	nop

08007bac <_ZN4RF249availableEv>:
{
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b082      	sub	sp, #8
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007bb2:	2401      	movs	r4, #1
 8007bb4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007bb8:	a902      	add	r1, sp, #8
	beginTransaction();
 8007bba:	6a2e      	ldr	r6, [r5, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007bbc:	fa04 f000 	lsl.w	r0, r4, r0
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007bc0:	2317      	movs	r3, #23
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007bc2:	4622      	mov	r2, r4
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007bc4:	f801 3d01 	strb.w	r3, [r1, #-1]!
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007bc8:	f04f 33ff 	mov.w	r3, #4294967295
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007bcc:	61b0      	str	r0, [r6, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007bce:	6928      	ldr	r0, [r5, #16]
 8007bd0:	f7fb fd7e 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007bd4:	4622      	mov	r2, r4
 8007bd6:	6928      	ldr	r0, [r5, #16]
 8007bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bdc:	f10d 0106 	add.w	r1, sp, #6
 8007be0:	f7fb fe90 	bl	8003904 <HAL_SPI_Receive>
	return result;
 8007be4:	f89d 0006 	ldrb.w	r0, [sp, #6]
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007be8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
	if (!(read_register(FIFO_STATUS) & _BV(RX_EMPTY)))
 8007bec:	43c0      	mvns	r0, r0
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007bee:	409c      	lsls	r4, r3
 8007bf0:	6a2b      	ldr	r3, [r5, #32]
}
 8007bf2:	f000 0001 	and.w	r0, r0, #1
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007bf6:	619c      	str	r4, [r3, #24]
}
 8007bf8:	b002      	add	sp, #8
 8007bfa:	bd70      	pop	{r4, r5, r6, pc}

08007bfc <_ZN4RF244readEPvh>:
{
 8007bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (data_len > payload_size)
 8007c00:	f890 7028 	ldrb.w	r7, [r0, #40]	; 0x28
{
 8007c04:	4605      	mov	r5, r0
 8007c06:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8007c0a:	f04f 0901 	mov.w	r9, #1
 8007c0e:	42ba      	cmp	r2, r7
 8007c10:	b085      	sub	sp, #20
	uint8_t temp = R_RX_PAYLOAD;
 8007c12:	f04f 0661 	mov.w	r6, #97	; 0x61
{
 8007c16:	460c      	mov	r4, r1
 8007c18:	bf28      	it	cs
 8007c1a:	463a      	movcs	r2, r7
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8007c1c:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
 8007c20:	fa09 f303 	lsl.w	r3, r9, r3
 8007c24:	6a29      	ldr	r1, [r5, #32]
	uint8_t temp = R_RX_PAYLOAD;
 8007c26:	f88d 600f 	strb.w	r6, [sp, #15]
 8007c2a:	fa1f fa82 	uxth.w	sl, r2
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007c2e:	618b      	str	r3, [r1, #24]
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d152      	bne.n	8007cda <_ZN4RF244readEPvh+0xde>
 8007c34:	1abf      	subs	r7, r7, r2
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007c36:	f04f 3bff 	mov.w	fp, #4294967295
 8007c3a:	f10d 080e 	add.w	r8, sp, #14
 8007c3e:	f10d 060f 	add.w	r6, sp, #15
	uint8_t blank_len = dynamic_payloads_enabled ? 0 : payload_size - data_len;
 8007c42:	b2ff      	uxtb	r7, r7
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007c44:	6928      	ldr	r0, [r5, #16]
 8007c46:	4642      	mov	r2, r8
 8007c48:	4631      	mov	r1, r6
 8007c4a:	464b      	mov	r3, r9
 8007c4c:	f8cd b000 	str.w	fp, [sp]
 8007c50:	f7fc f8be 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(hspix, current, data_len, HAL_MAX_DELAY);
 8007c54:	4621      	mov	r1, r4
	while (blank_len--)
 8007c56:	eb07 040b 	add.w	r4, r7, fp
	HAL_SPI_Receive(hspix, current, data_len, HAL_MAX_DELAY);
 8007c5a:	465b      	mov	r3, fp
 8007c5c:	4652      	mov	r2, sl
 8007c5e:	6928      	ldr	r0, [r5, #16]
 8007c60:	f7fb fe50 	bl	8003904 <HAL_SPI_Receive>
	temp = HIGH;
 8007c64:	f88d 900f 	strb.w	r9, [sp, #15]
	while (blank_len--)
 8007c68:	b2e4      	uxtb	r4, r4
 8007c6a:	b157      	cbz	r7, 8007c82 <_ZN4RF244readEPvh+0x86>
 8007c6c:	3c01      	subs	r4, #1
		HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c72:	2201      	movs	r2, #1
 8007c74:	4631      	mov	r1, r6
	while (blank_len--)
 8007c76:	b2e4      	uxtb	r4, r4
		HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007c78:	6928      	ldr	r0, [r5, #16]
 8007c7a:	f7fb fd29 	bl	80036d0 <HAL_SPI_Transmit>
	while (blank_len--)
 8007c7e:	2cff      	cmp	r4, #255	; 0xff
 8007c80:	d1f4      	bne.n	8007c6c <_ZN4RF244readEPvh+0x70>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007c82:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8007c86:	2401      	movs	r4, #1
 8007c88:	6a28      	ldr	r0, [r5, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007c8a:	f04f 0c27 	mov.w	ip, #39	; 0x27
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007c8e:	fa04 f303 	lsl.w	r3, r4, r3
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007c92:	f04f 37ff 	mov.w	r7, #4294967295
 8007c96:	4631      	mov	r1, r6
 8007c98:	4642      	mov	r2, r8
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007c9a:	6183      	str	r3, [r0, #24]
 8007c9c:	2370      	movs	r3, #112	; 0x70
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007c9e:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
	beginTransaction();
 8007ca2:	6a2e      	ldr	r6, [r5, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007ca4:	fa04 f000 	lsl.w	r0, r4, r0
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007ca8:	f88d c00f 	strb.w	ip, [sp, #15]
 8007cac:	f88d 300d 	strb.w	r3, [sp, #13]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007cb0:	4623      	mov	r3, r4
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007cb2:	61b0      	str	r0, [r6, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007cb4:	6928      	ldr	r0, [r5, #16]
 8007cb6:	9700      	str	r7, [sp, #0]
 8007cb8:	f7fc f88a 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	f10d 010d 	add.w	r1, sp, #13
 8007cc4:	6928      	ldr	r0, [r5, #16]
 8007cc6:	f7fb fd03 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007cca:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 8007cce:	6a2b      	ldr	r3, [r5, #32]
 8007cd0:	4094      	lsls	r4, r2
 8007cd2:	619c      	str	r4, [r3, #24]
}
 8007cd4:	b005      	add	sp, #20
 8007cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007cda:	f04f 37ff 	mov.w	r7, #4294967295
 8007cde:	f10d 080e 	add.w	r8, sp, #14
 8007ce2:	f10d 060f 	add.w	r6, sp, #15
 8007ce6:	6928      	ldr	r0, [r5, #16]
 8007ce8:	464b      	mov	r3, r9
 8007cea:	4642      	mov	r2, r8
 8007cec:	4631      	mov	r1, r6
 8007cee:	9700      	str	r7, [sp, #0]
 8007cf0:	f7fc f86e 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Receive(hspix, current, data_len, HAL_MAX_DELAY);
 8007cf4:	463b      	mov	r3, r7
 8007cf6:	4652      	mov	r2, sl
 8007cf8:	4621      	mov	r1, r4
 8007cfa:	6928      	ldr	r0, [r5, #16]
 8007cfc:	f7fb fe02 	bl	8003904 <HAL_SPI_Receive>
 8007d00:	e7bf      	b.n	8007c82 <_ZN4RF244readEPvh+0x86>
 8007d02:	bf00      	nop

08007d04 <_ZN4RF2415openReadingPipeEhy>:
{
 8007d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	b087      	sub	sp, #28
 8007d0a:	4604      	mov	r4, r0
	if (child == 0)
 8007d0c:	460e      	mov	r6, r1
{
 8007d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (child == 0)
 8007d12:	2900      	cmp	r1, #0
 8007d14:	f000 80aa 	beq.w	8007e6c <_ZN4RF2415openReadingPipeEhy+0x168>
	if (child <= 6)
 8007d18:	2906      	cmp	r1, #6
 8007d1a:	d902      	bls.n	8007d22 <_ZN4RF2415openReadingPipeEhy+0x1e>
}
 8007d1c:	b007      	add	sp, #28
 8007d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d22:	f24a 6388 	movw	r3, #42632	; 0xa688
 8007d26:	2501      	movs	r5, #1
 8007d28:	f890 c026 	ldrb.w	ip, [r0, #38]	; 0x26
 8007d2c:	f6c0 0300 	movt	r3, #2048	; 0x800
		if (child < 2)
 8007d30:	42ae      	cmp	r6, r5
 8007d32:	6a00      	ldr	r0, [r0, #32]
 8007d34:	fa05 f10c 	lsl.w	r1, r5, ip
 8007d38:	5d9a      	ldrb	r2, [r3, r6]
 8007d3a:	f002 021f 	and.w	r2, r2, #31
 8007d3e:	f042 0220 	orr.w	r2, r2, #32
 8007d42:	f000 80c1 	beq.w	8007ec8 <_ZN4RF2415openReadingPipeEhy+0x1c4>
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007d46:	f04f 37ff 	mov.w	r7, #4294967295
 8007d4a:	f10d 0916 	add.w	r9, sp, #22
 8007d4e:	f10d 0817 	add.w	r8, sp, #23
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007d52:	f88d 2017 	strb.w	r2, [sp, #23]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007d56:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007d58:	6181      	str	r1, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007d5a:	464a      	mov	r2, r9
 8007d5c:	6920      	ldr	r0, [r4, #16]
 8007d5e:	4641      	mov	r1, r8
 8007d60:	9700      	str	r7, [sp, #0]
 8007d62:	f7fc f835 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, (uint8_t *) buf, len, HAL_MAX_DELAY);
 8007d66:	463b      	mov	r3, r7
 8007d68:	462a      	mov	r2, r5
 8007d6a:	a902      	add	r1, sp, #8
 8007d6c:	6920      	ldr	r0, [r4, #16]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007d6e:	f04f 37ff 	mov.w	r7, #4294967295
	HAL_SPI_Transmit(hspix, (uint8_t *) buf, len, HAL_MAX_DELAY);
 8007d72:	f7fb fcad 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007d76:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007d7a:	6a23      	ldr	r3, [r4, #32]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007d7c:	4641      	mov	r1, r8
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007d7e:	4095      	lsls	r5, r2
 8007d80:	619d      	str	r5, [r3, #24]
		write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
 8007d82:	f24a 6398 	movw	r3, #42648	; 0xa698
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007d86:	2501      	movs	r5, #1
 8007d88:	f894 e026 	ldrb.w	lr, [r4, #38]	; 0x26
		write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
 8007d8c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007d90:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007d94:	fa05 fe0e 	lsl.w	lr, r5, lr
 8007d98:	6a20      	ldr	r0, [r4, #32]
		write_register(pgm_read_byte(&child_payload_size[child]), payload_size);
 8007d9a:	f813 c006 	ldrb.w	ip, [r3, r6]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007d9e:	462b      	mov	r3, r5
 8007da0:	f88d 2015 	strb.w	r2, [sp, #21]
 8007da4:	464a      	mov	r2, r9
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007da6:	f00c 0c1f 	and.w	ip, ip, #31
 8007daa:	f04c 0c20 	orr.w	ip, ip, #32
 8007dae:	f88d c017 	strb.w	ip, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007db2:	f8c0 e018 	str.w	lr, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007db6:	6920      	ldr	r0, [r4, #16]
 8007db8:	9700      	str	r7, [sp, #0]
 8007dba:	f7fc f809 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007dbe:	463b      	mov	r3, r7
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	f10d 0115 	add.w	r1, sp, #21
 8007dc6:	6920      	ldr	r0, [r4, #16]
 8007dc8:	f7fb fc82 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007dcc:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8007dd0:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007dd2:	f04f 0e02 	mov.w	lr, #2
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007dd6:	fa05 f101 	lsl.w	r1, r5, r1
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007dda:	463b      	mov	r3, r7
 8007ddc:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007dde:	6181      	str	r1, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007de0:	4641      	mov	r1, r8
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007de2:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 8007de6:	6a20      	ldr	r0, [r4, #32]
 8007de8:	fa05 fc0c 	lsl.w	ip, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007dec:	f88d e017 	strb.w	lr, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007df0:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007df4:	6920      	ldr	r0, [r4, #16]
 8007df6:	f7fb fc6b 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	462a      	mov	r2, r5
 8007dfe:	4649      	mov	r1, r9
 8007e00:	6920      	ldr	r0, [r4, #16]
 8007e02:	f7fb fd7f 	bl	8003904 <HAL_SPI_Receive>
		write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
 8007e06:	f24a 6390 	movw	r3, #42640	; 0xa690
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007e0a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007e0e:	f04f 0e22 	mov.w	lr, #34	; 0x22
		write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
 8007e12:	f6c0 0300 	movt	r3, #2048	; 0x800
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007e16:	6a21      	ldr	r1, [r4, #32]
 8007e18:	fa05 f000 	lsl.w	r0, r5, r0
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007e1c:	464a      	mov	r2, r9
		write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
 8007e1e:	5d9e      	ldrb	r6, [r3, r6]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007e20:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007e22:	6188      	str	r0, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007e24:	4641      	mov	r1, r8
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007e26:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
		write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
 8007e2a:	fa05 f606 	lsl.w	r6, r5, r6
	return result;
 8007e2e:	f89d 8016 	ldrb.w	r8, [sp, #22]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007e32:	fa05 fc0c 	lsl.w	ip, r5, ip
 8007e36:	6a20      	ldr	r0, [r4, #32]
		write_register(EN_RXADDR, read_register(EN_RXADDR) | _BV(pgm_read_byte(&child_pipe_enable[child])));
 8007e38:	ea46 0608 	orr.w	r6, r6, r8
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007e3c:	f88d e017 	strb.w	lr, [sp, #23]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007e40:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007e44:	6920      	ldr	r0, [r4, #16]
 8007e46:	9700      	str	r7, [sp, #0]
 8007e48:	f88d 6014 	strb.w	r6, [sp, #20]
 8007e4c:	f7fb ffc0 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007e50:	463b      	mov	r3, r7
 8007e52:	462a      	mov	r2, r5
 8007e54:	a905      	add	r1, sp, #20
 8007e56:	6920      	ldr	r0, [r4, #16]
 8007e58:	f7fb fc3a 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007e5c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007e60:	6a23      	ldr	r3, [r4, #32]
 8007e62:	4095      	lsls	r5, r2
 8007e64:	619d      	str	r5, [r3, #24]
}
 8007e66:	b007      	add	sp, #28
 8007e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(pipe0_reading_address, &address, addr_width);
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8007e72:	302a      	adds	r0, #42	; 0x2a
 8007e74:	4639      	mov	r1, r7
 8007e76:	f002 f97f 	bl	800a178 <memcpy>
 8007e7a:	f24a 6388 	movw	r3, #42632	; 0xa688
 8007e7e:	6a20      	ldr	r0, [r4, #32]
 8007e80:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007e84:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007e88:	5d99      	ldrb	r1, [r3, r6]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007e8a:	2501      	movs	r5, #1
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007e8c:	f04f 3aff 	mov.w	sl, #4294967295
 8007e90:	f10d 0916 	add.w	r9, sp, #22
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007e94:	f001 011f 	and.w	r1, r1, #31
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007e98:	fa05 fc0c 	lsl.w	ip, r5, ip
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007e9c:	f10d 0817 	add.w	r8, sp, #23
			write_register(pgm_read_byte(&child_pipe[child]), reinterpret_cast< uint8_t*>(&address), addr_width);
 8007ea0:	f894 b02f 	ldrb.w	fp, [r4, #47]	; 0x2f
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007ea4:	f041 0120 	orr.w	r1, r1, #32
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	464a      	mov	r2, r9
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007eac:	f88d 1017 	strb.w	r1, [sp, #23]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007eb0:	4641      	mov	r1, r8
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007eb2:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007eb6:	6920      	ldr	r0, [r4, #16]
 8007eb8:	f8cd a000 	str.w	sl, [sp]
 8007ebc:	f7fb ff88 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, (uint8_t *) buf, len, HAL_MAX_DELAY);
 8007ec0:	4653      	mov	r3, sl
 8007ec2:	465a      	mov	r2, fp
 8007ec4:	4639      	mov	r1, r7
 8007ec6:	e751      	b.n	8007d6c <_ZN4RF2415openReadingPipeEhy+0x68>
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	e7dd      	b.n	8007e88 <_ZN4RF2415openReadingPipeEhy+0x184>

08007ecc <_ZN4RF2421enableDynamicPayloadsEv>:
{
 8007ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ece:	b085      	sub	sp, #20
 8007ed0:	4604      	mov	r4, r0
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007ed2:	2501      	movs	r5, #1
 8007ed4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007ed8:	af04      	add	r7, sp, #16
 8007eda:	231d      	movs	r3, #29
	beginTransaction();
 8007edc:	6a26      	ldr	r6, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007ede:	fa05 f000 	lsl.w	r0, r5, r0
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007ee2:	f807 3d01 	strb.w	r3, [r7, #-1]!
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007ee6:	f04f 33ff 	mov.w	r3, #4294967295
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007eea:	61b0      	str	r0, [r6, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007eec:	462a      	mov	r2, r5
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007eee:	461e      	mov	r6, r3
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	6920      	ldr	r0, [r4, #16]
 8007ef4:	f7fb fbec 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007ef8:	462a      	mov	r2, r5
 8007efa:	f10d 010e 	add.w	r1, sp, #14
 8007efe:	4633      	mov	r3, r6
 8007f00:	6920      	ldr	r0, [r4, #16]
 8007f02:	f7fb fcff 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f06:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007f0a:	6a22      	ldr	r2, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007f0c:	f04f 0e3d 	mov.w	lr, #61	; 0x3d
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f10:	fa05 f303 	lsl.w	r3, r5, r3
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007f14:	4639      	mov	r1, r7
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f16:	6193      	str	r3, [r2, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007f18:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007f1a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
	return result;
 8007f1e:	f89d c00e 	ldrb.w	ip, [sp, #14]
	beginTransaction();
 8007f22:	6a22      	ldr	r2, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007f24:	fa05 f000 	lsl.w	r0, r5, r0
	write_register(FEATURE, read_register(FEATURE) | _BV(EN_DPL));
 8007f28:	f04c 0c04 	orr.w	ip, ip, #4
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007f2c:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007f30:	6190      	str	r0, [r2, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007f32:	f10d 020e 	add.w	r2, sp, #14
 8007f36:	6920      	ldr	r0, [r4, #16]
 8007f38:	9600      	str	r6, [sp, #0]
 8007f3a:	f88d c00d 	strb.w	ip, [sp, #13]
 8007f3e:	f7fb ff47 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007f42:	4633      	mov	r3, r6
 8007f44:	462a      	mov	r2, r5
 8007f46:	f10d 010d 	add.w	r1, sp, #13
 8007f4a:	6920      	ldr	r0, [r4, #16]
 8007f4c:	f7fb fbc0 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f50:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8007f54:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007f56:	f04f 0e1c 	mov.w	lr, #28
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f5a:	fa05 f202 	lsl.w	r2, r5, r2
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4633      	mov	r3, r6
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f62:	6182      	str	r2, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007f64:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007f66:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 8007f6a:	6a20      	ldr	r0, [r4, #32]
 8007f6c:	fa05 fc0c 	lsl.w	ip, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007f70:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007f74:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8007f78:	6920      	ldr	r0, [r4, #16]
 8007f7a:	f7fb fba9 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8007f7e:	4633      	mov	r3, r6
 8007f80:	462a      	mov	r2, r5
 8007f82:	f10d 010e 	add.w	r1, sp, #14
 8007f86:	6920      	ldr	r0, [r4, #16]
 8007f88:	f7fb fcbc 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f8c:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007f90:	4639      	mov	r1, r7
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007f92:	6a27      	ldr	r7, [r4, #32]
 8007f94:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007f98:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007f9c:	f10d 020e 	add.w	r2, sp, #14
 8007fa0:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007fa2:	61b8      	str	r0, [r7, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007fa4:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
	return result;
 8007fa8:	f89d 700e 	ldrb.w	r7, [sp, #14]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007fac:	6a20      	ldr	r0, [r4, #32]
 8007fae:	fa05 fc0c 	lsl.w	ip, r5, ip
	write_register(DYNPD, read_register(DYNPD) | _BV(DPL_P5) | _BV(DPL_P4) | _BV(DPL_P3) | _BV(DPL_P2) | _BV(DPL_P1) | _BV(DPL_P0));
 8007fb2:	f047 073f 	orr.w	r7, r7, #63	; 0x3f
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8007fb6:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007fba:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8007fbe:	6920      	ldr	r0, [r4, #16]
 8007fc0:	9600      	str	r6, [sp, #0]
 8007fc2:	f88d 700c 	strb.w	r7, [sp, #12]
 8007fc6:	f7fb ff03 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8007fca:	4633      	mov	r3, r6
 8007fcc:	462a      	mov	r2, r5
 8007fce:	6920      	ldr	r0, [r4, #16]
 8007fd0:	a903      	add	r1, sp, #12
 8007fd2:	f7fb fb7d 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8007fd6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8007fda:	6a22      	ldr	r2, [r4, #32]
 8007fdc:	fa05 f303 	lsl.w	r3, r5, r3
 8007fe0:	6193      	str	r3, [r2, #24]
	dynamic_payloads_enabled = true;
 8007fe2:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
}
 8007fe6:	b005      	add	sp, #20
 8007fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fea:	bf00      	nop

08007fec <_ZN4RF2416enableAckPayloadEv>:
{
 8007fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	4604      	mov	r4, r0
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007ff2:	2501      	movs	r5, #1
 8007ff4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8007ff8:	af04      	add	r7, sp, #16
 8007ffa:	231d      	movs	r3, #29
	beginTransaction();
 8007ffc:	6a26      	ldr	r6, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8007ffe:	fa05 f000 	lsl.w	r0, r5, r0
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8008002:	f807 3d01 	strb.w	r3, [r7, #-1]!
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008006:	f04f 33ff 	mov.w	r3, #4294967295
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800800a:	61b0      	str	r0, [r6, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800800c:	462a      	mov	r2, r5
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800800e:	461e      	mov	r6, r3
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008010:	4639      	mov	r1, r7
 8008012:	6920      	ldr	r0, [r4, #16]
 8008014:	f7fb fb5c 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 8008018:	462a      	mov	r2, r5
 800801a:	f10d 010e 	add.w	r1, sp, #14
 800801e:	4633      	mov	r3, r6
 8008020:	6920      	ldr	r0, [r4, #16]
 8008022:	f7fb fc6f 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008026:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800802a:	6a22      	ldr	r2, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 800802c:	f04f 0e3d 	mov.w	lr, #61	; 0x3d
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008030:	fa05 f303 	lsl.w	r3, r5, r3
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008034:	4639      	mov	r1, r7
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008036:	6193      	str	r3, [r2, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008038:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800803a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
	return result;
 800803e:	f89d c00e 	ldrb.w	ip, [sp, #14]
	beginTransaction();
 8008042:	6a22      	ldr	r2, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008044:	fa05 f000 	lsl.w	r0, r5, r0
	write_register(FEATURE, read_register(FEATURE) | _BV(EN_ACK_PAY) | _BV(EN_DPL));
 8008048:	f04c 0c06 	orr.w	ip, ip, #6
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 800804c:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008050:	6190      	str	r0, [r2, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008052:	f10d 020e 	add.w	r2, sp, #14
 8008056:	6920      	ldr	r0, [r4, #16]
 8008058:	9600      	str	r6, [sp, #0]
 800805a:	f88d c00d 	strb.w	ip, [sp, #13]
 800805e:	f7fb feb7 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8008062:	4633      	mov	r3, r6
 8008064:	462a      	mov	r2, r5
 8008066:	f10d 010d 	add.w	r1, sp, #13
 800806a:	6920      	ldr	r0, [r4, #16]
 800806c:	f7fb fb30 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008070:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008074:	6a20      	ldr	r0, [r4, #32]
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8008076:	f04f 0e1c 	mov.w	lr, #28
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800807a:	fa05 f202 	lsl.w	r2, r5, r2
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800807e:	4639      	mov	r1, r7
 8008080:	4633      	mov	r3, r6
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008082:	6182      	str	r2, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008084:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008086:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
 800808a:	6a20      	ldr	r0, [r4, #32]
 800808c:	fa05 fc0c 	lsl.w	ip, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8008090:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008094:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008098:	6920      	ldr	r0, [r4, #16]
 800809a:	f7fb fb19 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 800809e:	4633      	mov	r3, r6
 80080a0:	462a      	mov	r2, r5
 80080a2:	f10d 010e 	add.w	r1, sp, #14
 80080a6:	6920      	ldr	r0, [r4, #16]
 80080a8:	f7fb fc2c 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80080ac:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80080b0:	4639      	mov	r1, r7
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80080b2:	6a27      	ldr	r7, [r4, #32]
 80080b4:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80080b8:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80080bc:	f10d 020e 	add.w	r2, sp, #14
 80080c0:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80080c2:	61b8      	str	r0, [r7, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80080c4:	f894 c026 	ldrb.w	ip, [r4, #38]	; 0x26
	return result;
 80080c8:	f89d 700e 	ldrb.w	r7, [sp, #14]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80080cc:	6a20      	ldr	r0, [r4, #32]
 80080ce:	fa05 fc0c 	lsl.w	ip, r5, ip
	write_register(DYNPD, read_register(DYNPD) | _BV(DPL_P1) | _BV(DPL_P0));
 80080d2:	f047 0703 	orr.w	r7, r7, #3
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80080d6:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80080da:	f8c0 c018 	str.w	ip, [r0, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80080de:	6920      	ldr	r0, [r4, #16]
 80080e0:	9600      	str	r6, [sp, #0]
 80080e2:	f88d 700c 	strb.w	r7, [sp, #12]
 80080e6:	f7fb fe73 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80080ea:	4633      	mov	r3, r6
 80080ec:	462a      	mov	r2, r5
 80080ee:	6920      	ldr	r0, [r4, #16]
 80080f0:	a903      	add	r1, sp, #12
 80080f2:	f7fb faed 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80080f6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80080fa:	6a22      	ldr	r2, [r4, #32]
 80080fc:	fa05 f303 	lsl.w	r3, r5, r3
 8008100:	6193      	str	r3, [r2, #24]
	dynamic_payloads_enabled = true;
 8008102:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
}
 8008106:	b005      	add	sp, #20
 8008108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810a:	bf00      	nop

0800810c <_ZN4RF2415writeAckPayloadEhPKvh>:
{
 800810c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008110:	4604      	mov	r4, r0
 8008112:	b083      	sub	sp, #12
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008114:	2501      	movs	r5, #1
 8008116:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
	uint8_t temp = (W_ACK_PAYLOAD | (pipe & 0x07));
 800811a:	f001 0707 	and.w	r7, r1, #7
	beginTransaction();
 800811e:	6a26      	ldr	r6, [r4, #32]
	uint8_t temp = (W_ACK_PAYLOAD | (pipe & 0x07));
 8008120:	a902      	add	r1, sp, #8
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008122:	fa05 f000 	lsl.w	r0, r5, r0
	uint8_t temp = (W_ACK_PAYLOAD | (pipe & 0x07));
 8008126:	f067 0757 	orn	r7, r7, #87	; 0x57
{
 800812a:	4699      	mov	r9, r3
 800812c:	4690      	mov	r8, r2
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800812e:	61b0      	str	r0, [r6, #24]
	uint8_t temp = (W_ACK_PAYLOAD | (pipe & 0x07));
 8008130:	f801 7d01 	strb.w	r7, [r1, #-1]!
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008134:	462a      	mov	r2, r5
 8008136:	f04f 33ff 	mov.w	r3, #4294967295
 800813a:	6920      	ldr	r0, [r4, #16]
 800813c:	f7fb fac8 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, (uint8_t *) current, data_len, HAL_MAX_DELAY);
 8008140:	464a      	mov	r2, r9
 8008142:	4641      	mov	r1, r8
 8008144:	6920      	ldr	r0, [r4, #16]
 8008146:	2a20      	cmp	r2, #32
 8008148:	f04f 33ff 	mov.w	r3, #4294967295
 800814c:	bf28      	it	cs
 800814e:	2220      	movcs	r2, #32
 8008150:	f7fb fbd8 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008154:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008158:	6a23      	ldr	r3, [r4, #32]
 800815a:	4095      	lsls	r5, r2
 800815c:	619d      	str	r5, [r3, #24]
}
 800815e:	b003      	add	sp, #12
 8008160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08008164 <_ZN4RF2410setAutoAckEb>:
{
 8008164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008166:	4604      	mov	r4, r0
 8008168:	2501      	movs	r5, #1
 800816a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 800816e:	b085      	sub	sp, #20
 8008170:	6a26      	ldr	r6, [r4, #32]
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8008172:	2221      	movs	r2, #33	; 0x21
 8008174:	fa05 f000 	lsl.w	r0, r5, r0
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008178:	f04f 37ff 	mov.w	r7, #4294967295
	if (enable)
 800817c:	b9d9      	cbnz	r1, 80081b6 <_ZN4RF2410setAutoAckEb+0x52>
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 800817e:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008182:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008184:	61b0      	str	r0, [r6, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008186:	f10d 020e 	add.w	r2, sp, #14
 800818a:	f88d 100d 	strb.w	r1, [sp, #13]
 800818e:	f10d 010f 	add.w	r1, sp, #15
 8008192:	6920      	ldr	r0, [r4, #16]
 8008194:	9700      	str	r7, [sp, #0]
 8008196:	f7fb fe1b 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 800819a:	463b      	mov	r3, r7
 800819c:	462a      	mov	r2, r5
 800819e:	f10d 010d 	add.w	r1, sp, #13
 80081a2:	6920      	ldr	r0, [r4, #16]
 80081a4:	f7fb fa94 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80081a8:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80081ac:	6a23      	ldr	r3, [r4, #32]
 80081ae:	4095      	lsls	r5, r2
 80081b0:	619d      	str	r5, [r3, #24]
}
 80081b2:	b005      	add	sp, #20
 80081b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081b6:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 80081ba:	f88d 200f 	strb.w	r2, [sp, #15]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80081be:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80081c0:	61b0      	str	r0, [r6, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 80081c2:	f10d 020e 	add.w	r2, sp, #14
 80081c6:	f10d 010f 	add.w	r1, sp, #15
 80081ca:	6920      	ldr	r0, [r4, #16]
 80081cc:	9700      	str	r7, [sp, #0]
 80081ce:	f88d c00c 	strb.w	ip, [sp, #12]
 80081d2:	f7fb fdfd 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 80081d6:	463b      	mov	r3, r7
 80081d8:	462a      	mov	r2, r5
 80081da:	a903      	add	r1, sp, #12
 80081dc:	6920      	ldr	r0, [r4, #16]
 80081de:	f7fb fa77 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80081e2:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80081e6:	6a22      	ldr	r2, [r4, #32]
 80081e8:	409d      	lsls	r5, r3
 80081ea:	6195      	str	r5, [r2, #24]
}
 80081ec:	b005      	add	sp, #20
 80081ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081f0 <_ZN4RF2410setPALevelEh>:
{
 80081f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80081f4:	2601      	movs	r6, #1
{
 80081f6:	b084      	sub	sp, #16
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80081f8:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
{
 80081fc:	4604      	mov	r4, r0
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80081fe:	2206      	movs	r2, #6
	beginTransaction();
 8008200:	6a00      	ldr	r0, [r0, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008202:	fa06 f303 	lsl.w	r3, r6, r3
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 8008206:	af04      	add	r7, sp, #16
{
 8008208:	460d      	mov	r5, r1
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 800820a:	f807 2d01 	strb.w	r2, [r7, #-1]!
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800820e:	4632      	mov	r2, r6
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008210:	6183      	str	r3, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008212:	4639      	mov	r1, r7
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	6920      	ldr	r0, [r4, #16]
 800821a:	f7fb fa59 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 800821e:	4632      	mov	r2, r6
 8008220:	f04f 33ff 	mov.w	r3, #4294967295
 8008224:	6920      	ldr	r0, [r4, #16]
 8008226:	f10d 010e 	add.w	r1, sp, #14
 800822a:	f7fb fb6b 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800822e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008232:	6a23      	ldr	r3, [r4, #32]
	if (level > 3)
 8008234:	2d03      	cmp	r5, #3
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008236:	fa06 f602 	lsl.w	r6, r6, r2
 800823a:	619e      	str	r6, [r3, #24]
	return result;
 800823c:	f89d 200e 	ldrb.w	r2, [sp, #14]
	uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8008240:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
	if (level > 3)
 8008244:	d82a      	bhi.n	800829c <_ZN4RF2410setPALevelEh+0xac>
		level = (level << 1) + 1;	 		// Else set level as requested
 8008246:	006d      	lsls	r5, r5, #1
 8008248:	3501      	adds	r5, #1
 800824a:	f005 05ff 	and.w	r5, r5, #255	; 0xff
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800824e:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8008252:	2601      	movs	r6, #1
	write_register( RF_SETUP, setup |= level);	// Write it to the chip
 8008254:	4315      	orrs	r5, r2
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008256:	f04f 38ff 	mov.w	r8, #4294967295
	beginTransaction();
 800825a:	6a22      	ldr	r2, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800825c:	fa06 f303 	lsl.w	r3, r6, r3
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8008260:	2126      	movs	r1, #38	; 0x26
 8008262:	f88d 500d 	strb.w	r5, [sp, #13]
 8008266:	f88d 100f 	strb.w	r1, [sp, #15]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800826a:	4639      	mov	r1, r7
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800826c:	6193      	str	r3, [r2, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800826e:	f10d 020e 	add.w	r2, sp, #14
 8008272:	6920      	ldr	r0, [r4, #16]
 8008274:	4633      	mov	r3, r6
 8008276:	f8cd 8000 	str.w	r8, [sp]
 800827a:	f7fb fda9 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 800827e:	4643      	mov	r3, r8
 8008280:	4632      	mov	r2, r6
 8008282:	f10d 010d 	add.w	r1, sp, #13
 8008286:	6920      	ldr	r0, [r4, #16]
 8008288:	f7fb fa22 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800828c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8008290:	6a23      	ldr	r3, [r4, #32]
 8008292:	4096      	lsls	r6, r2
 8008294:	619e      	str	r6, [r3, #24]
}
 8008296:	b004      	add	sp, #16
 8008298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		level = (RF24_PA_MAX << 1) + 1;		// +1 to support the SI24R1 chip extra bit
 800829c:	2507      	movs	r5, #7
 800829e:	e7d6      	b.n	800824e <_ZN4RF2410setPALevelEh+0x5e>

080082a0 <_ZN4RF2411setDataRateE15rf24_datarate_e>:
{
 80082a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80082a4:	2501      	movs	r5, #1
{
 80082a6:	b084      	sub	sp, #16
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80082a8:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
{
 80082ac:	4604      	mov	r4, r0
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80082ae:	2206      	movs	r2, #6
	beginTransaction();
 80082b0:	6a00      	ldr	r0, [r0, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80082b2:	fa05 f303 	lsl.w	r3, r5, r3
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80082b6:	af04      	add	r7, sp, #16
{
 80082b8:	4688      	mov	r8, r1
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 80082ba:	f807 2d01 	strb.w	r2, [r7, #-1]!
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80082be:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 80082c0:	6183      	str	r3, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 80082c2:	4639      	mov	r1, r7
 80082c4:	f04f 33ff 	mov.w	r3, #4294967295
 80082c8:	6920      	ldr	r0, [r4, #16]
 80082ca:	f7fb fa01 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 80082ce:	462a      	mov	r2, r5
 80082d0:	f04f 33ff 	mov.w	r3, #4294967295
 80082d4:	6920      	ldr	r0, [r4, #16]
 80082d6:	f10d 010e 	add.w	r1, sp, #14
 80082da:	f7fb fb13 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80082de:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80082e2:	6a23      	ldr	r3, [r4, #32]
	if (speed == RF24_250KBPS)
 80082e4:	f1b8 0f02 	cmp.w	r8, #2
		GPIOcsn->BSRR = 1 << s_bit_csn;
 80082e8:	fa05 f502 	lsl.w	r5, r5, r2
 80082ec:	619d      	str	r5, [r3, #24]
	return result;
 80082ee:	f89d 600e 	ldrb.w	r6, [sp, #14]
	setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH));
 80082f2:	f006 06d7 	and.w	r6, r6, #215	; 0xd7
	if (speed == RF24_250KBPS)
 80082f6:	d052      	beq.n	800839e <_ZN4RF2411setDataRateE15rf24_datarate_e+0xfe>
		if (speed == RF24_2MBPS)
 80082f8:	f1b8 0f01 	cmp.w	r8, #1
 80082fc:	d04a      	beq.n	8008394 <_ZN4RF2411setDataRateE15rf24_datarate_e+0xf4>
	txDelay = 250;
 80082fe:	23fa      	movs	r3, #250	; 0xfa
 8008300:	6363      	str	r3, [r4, #52]	; 0x34
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008302:	2501      	movs	r5, #1
 8008304:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
	beginTransaction();
 8008308:	6a21      	ldr	r1, [r4, #32]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800830a:	f04f 38ff 	mov.w	r8, #4294967295
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800830e:	fa05 f202 	lsl.w	r2, r5, r2
	uint8_t temp = (W_REGISTER | ( REGISTER_MASK & reg));
 8008312:	2326      	movs	r3, #38	; 0x26
 8008314:	f88d 600d 	strb.w	r6, [sp, #13]
 8008318:	f88d 300f 	strb.w	r3, [sp, #15]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 800831c:	462b      	mov	r3, r5
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800831e:	618a      	str	r2, [r1, #24]
	HAL_SPI_TransmitReceive(hspix, &temp, &status, 1, HAL_MAX_DELAY);
 8008320:	f10d 020e 	add.w	r2, sp, #14
 8008324:	6920      	ldr	r0, [r4, #16]
 8008326:	4639      	mov	r1, r7
 8008328:	f8cd 8000 	str.w	r8, [sp]
 800832c:	f7fb fd50 	bl	8003dd0 <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(hspix, &value, 1, HAL_MAX_DELAY);
 8008330:	4643      	mov	r3, r8
 8008332:	462a      	mov	r2, r5
 8008334:	f10d 010d 	add.w	r1, sp, #13
 8008338:	6920      	ldr	r0, [r4, #16]
 800833a:	f7fb f9c9 	bl	80036d0 <HAL_SPI_Transmit>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 800833e:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008342:	4639      	mov	r1, r7
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008344:	6a27      	ldr	r7, [r4, #32]
 8008346:	fa05 f00c 	lsl.w	r0, r5, ip
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 800834a:	f04f 0e06 	mov.w	lr, #6
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 800834e:	4643      	mov	r3, r8
 8008350:	462a      	mov	r2, r5
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008352:	61b8      	str	r0, [r7, #24]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008354:	f894 7026 	ldrb.w	r7, [r4, #38]	; 0x26
	beginTransaction();
 8008358:	6a20      	ldr	r0, [r4, #32]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 800835a:	fa05 f707 	lsl.w	r7, r5, r7
	uint8_t temp = (R_REGISTER | ( REGISTER_MASK & reg));
 800835e:	f88d e00f 	strb.w	lr, [sp, #15]
		GPIOcsn->BSRR = 1 << r_bit_csn;
 8008362:	6187      	str	r7, [r0, #24]
	HAL_SPI_Transmit(hspix, &temp, 1, HAL_MAX_DELAY);
 8008364:	6920      	ldr	r0, [r4, #16]
 8008366:	f7fb f9b3 	bl	80036d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(hspix, &result, 1, HAL_MAX_DELAY);
 800836a:	4643      	mov	r3, r8
 800836c:	462a      	mov	r2, r5
 800836e:	f10d 010e 	add.w	r1, sp, #14
 8008372:	6920      	ldr	r0, [r4, #16]
 8008374:	f7fb fac6 	bl	8003904 <HAL_SPI_Receive>
		GPIOcsn->BSRR = 1 << s_bit_csn;
 8008378:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800837c:	6a23      	ldr	r3, [r4, #32]
 800837e:	4095      	lsls	r5, r2
 8008380:	619d      	str	r5, [r3, #24]
	return result;
 8008382:	f89d 000e 	ldrb.w	r0, [sp, #14]
	{
		result = true;
	}
	return result;
}
 8008386:	1a30      	subs	r0, r6, r0
 8008388:	fab0 f080 	clz	r0, r0
 800838c:	0940      	lsrs	r0, r0, #5
 800838e:	b004      	add	sp, #16
 8008390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			txDelay = 190;
 8008394:	23be      	movs	r3, #190	; 0xbe
			setup |= _BV(RF_DR_HIGH);
 8008396:	f046 0608 	orr.w	r6, r6, #8
			txDelay = 190;
 800839a:	6363      	str	r3, [r4, #52]	; 0x34
 800839c:	e7b1      	b.n	8008302 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x62>
		txDelay = 450;
 800839e:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
		setup |= _BV(RF_DR_LOW);
 80083a2:	f046 0620 	orr.w	r6, r6, #32
		txDelay = 450;
 80083a6:	6363      	str	r3, [r4, #52]	; 0x34
 80083a8:	e7ab      	b.n	8008302 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x62>
 80083aa:	bf00      	nop

080083ac <MX_ADC1_Init>:
{
  ADC_ChannelConfTypeDef sConfig = {0};

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80083ac:	f243 33f4 	movw	r3, #13300	; 0x33f4
 80083b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  ADC_ChannelConfTypeDef sConfig = {0};
 80083b4:	2200      	movs	r2, #0
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 80083b6:	2101      	movs	r1, #1
  hadc1.Instance = ADC1;
 80083b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80083bc:	f2c4 0001 	movt	r0, #16385	; 0x4001
{
 80083c0:	b530      	push	{r4, r5, lr}
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80083c2:	2401      	movs	r4, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80083c4:	f44f 3580 	mov.w	r5, #65536	; 0x10000
{
 80083c8:	b085      	sub	sp, #20
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80083ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80083cc:	f6c0 7400 	movt	r4, #3840	; 0xf00
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80083d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80083d2:	619a      	str	r2, [r3, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80083d4:	629c      	str	r4, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80083d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80083da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80083dc:	60da      	str	r2, [r3, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80083de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  ADC_ChannelConfTypeDef sConfig = {0};
 80083e2:	9200      	str	r2, [sp, #0]
  hadc1.Init.NbrOfConversion = 1;
 80083e4:	61d9      	str	r1, [r3, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80083e6:	6159      	str	r1, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80083e8:	9203      	str	r2, [sp, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80083ea:	e9c3 0500 	strd	r0, r5, [r3]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80083ee:	4618      	mov	r0, r3
  ADC_ChannelConfTypeDef sConfig = {0};
 80083f0:	e9cd 2201 	strd	r2, r2, [sp, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80083f4:	f7f8 fdde 	bl	8000fb4 <HAL_ADC_Init>
 80083f8:	b988      	cbnz	r0, 800841e <MX_ADC1_Init+0x72>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_6;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80083fa:	f243 30f4 	movw	r0, #13300	; 0x33f4
  sConfig.Channel = ADC_CHANNEL_6;
 80083fe:	2406      	movs	r4, #6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008400:	2201      	movs	r2, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8008402:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008404:	4669      	mov	r1, sp
 8008406:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800840a:	9302      	str	r3, [sp, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800840c:	e9cd 4200 	strd	r4, r2, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008410:	f7f8 fe88 	bl	8001124 <HAL_ADC_ConfigChannel>
 8008414:	b108      	cbz	r0, 800841a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8008416:	f000 fd21 	bl	8008e5c <Error_Handler>
  }

}
 800841a:	b005      	add	sp, #20
 800841c:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 800841e:	f000 fd1d 	bl	8008e5c <Error_Handler>
 8008422:	e7ea      	b.n	80083fa <MX_ADC1_Init+0x4e>

08008424 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(adcHandle->Instance==ADC1)
 8008424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008428:	6802      	ldr	r2, [r0, #0]
 800842a:	f2c4 0301 	movt	r3, #16385	; 0x4001
{
 800842e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(adcHandle->Instance==ADC1)
 8008430:	429a      	cmp	r2, r3
{
 8008432:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008434:	f04f 0400 	mov.w	r4, #0
 8008438:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800843c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8008440:	9407      	str	r4, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8008442:	d001      	beq.n	8008448 <HAL_ADC_MspInit+0x24>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008444:	b009      	add	sp, #36	; 0x24
 8008446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008448:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800844c:	2540      	movs	r5, #64	; 0x40
 800844e:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008450:	4620      	mov	r0, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008452:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008456:	a903      	add	r1, sp, #12
 8008458:	f2c4 0002 	movt	r0, #16386	; 0x4002
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800845c:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008460:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008466:	645a      	str	r2, [r3, #68]	; 0x44
 8008468:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800846a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800846e:	9201      	str	r2, [sp, #4]
 8008470:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008472:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008474:	f042 0201 	orr.w	r2, r2, #1
 8008478:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800847a:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800847e:	9503      	str	r5, [sp, #12]
    hdma_adc1.Instance = DMA2_Stream0;
 8008480:	f243 453c 	movw	r5, #13372	; 0x343c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008484:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008488:	9204      	str	r2, [sp, #16]
    hdma_adc1.Instance = DMA2_Stream0;
 800848a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800848e:	9302      	str	r3, [sp, #8]
 8008490:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008492:	f7f9 fa4d 	bl	8001930 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8008496:	f246 4310 	movw	r3, #25616	; 0x6410
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800849a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800849e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80084a2:	4628      	mov	r0, r5
    hdma_adc1.Instance = DMA2_Stream0;
 80084a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80084a8:	60ec      	str	r4, [r5, #12]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80084aa:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_adc1.Instance = DMA2_Stream0;
 80084ac:	602b      	str	r3, [r5, #0]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80084ae:	61aa      	str	r2, [r5, #24]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084b0:	e9c5 4401 	strd	r4, r4, [r5, #4]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80084b4:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80084b8:	e9c5 7104 	strd	r7, r1, [r5, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80084bc:	f7f9 f866 	bl	800158c <HAL_DMA_Init>
 80084c0:	b918      	cbnz	r0, 80084ca <HAL_ADC_MspInit+0xa6>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80084c2:	63b5      	str	r5, [r6, #56]	; 0x38
 80084c4:	63ae      	str	r6, [r5, #56]	; 0x38
}
 80084c6:	b009      	add	sp, #36	; 0x24
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80084ca:	f000 fcc7 	bl	8008e5c <Error_Handler>
 80084ce:	e7f8      	b.n	80084c2 <HAL_ADC_MspInit+0x9e>

080084d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 80084d0:	b500      	push	{lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 80084d2:	2301      	movs	r3, #1
{
 80084d4:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 80084d6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80084da:	f000 f96b 	bl	80087b4 <BSP_PlatformIsDetected>
 80084de:	b908      	cbnz	r0, 80084e4 <BSP_SD_Init+0x14>
  {
    status = SD_NOT_PRESENT;
 80084e0:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 80084e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d003      	beq.n	80084f4 <BSP_SD_Init+0x24>
}
 80084ec:	2002      	movs	r0, #2
 80084ee:	b003      	add	sp, #12
 80084f0:	f85d fb04 	ldr.w	pc, [sp], #4
  sd_state = HAL_SD_Init(&hsd1);
 80084f4:	f643 2070 	movw	r0, #14960	; 0x3a70
 80084f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
}
 80084fc:	b003      	add	sp, #12
 80084fe:	f85d eb04 	ldr.w	lr, [sp], #4
  sd_state = HAL_SD_Init(&hsd1);
 8008502:	f7fa bf87 	b.w	8003414 <HAL_SD_Init>
 8008506:	bf00      	nop

08008508 <BSP_SD_ReadBlocks>:
{
 8008508:	b500      	push	{lr}
 800850a:	b083      	sub	sp, #12
  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800850c:	9300      	str	r3, [sp, #0]
 800850e:	4613      	mov	r3, r2
 8008510:	460a      	mov	r2, r1
 8008512:	4601      	mov	r1, r0
 8008514:	f643 2070 	movw	r0, #14960	; 0x3a70
 8008518:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800851c:	f7fa fa3c 	bl	8002998 <HAL_SD_ReadBlocks>
}
 8008520:	3000      	adds	r0, #0
 8008522:	bf18      	it	ne
 8008524:	2001      	movne	r0, #1
 8008526:	b003      	add	sp, #12
 8008528:	f85d fb04 	ldr.w	pc, [sp], #4

0800852c <BSP_SD_WriteBlocks>:
{
 800852c:	b500      	push	{lr}
 800852e:	b083      	sub	sp, #12
  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK) 
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	4613      	mov	r3, r2
 8008534:	460a      	mov	r2, r1
 8008536:	4601      	mov	r1, r0
 8008538:	f643 2070 	movw	r0, #14960	; 0x3a70
 800853c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008540:	f7fa fb46 	bl	8002bd0 <HAL_SD_WriteBlocks>
}
 8008544:	3000      	adds	r0, #0
 8008546:	bf18      	it	ne
 8008548:	2001      	movne	r0, #1
 800854a:	b003      	add	sp, #12
 800854c:	f85d fb04 	ldr.w	pc, [sp], #4

08008550 <BSP_SD_GetCardState>:
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008550:	f643 2070 	movw	r0, #14960	; 0x3a70
{
 8008554:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008556:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800855a:	f7fa ff8d 	bl	8003478 <HAL_SD_GetCardState>
}
 800855e:	3804      	subs	r0, #4
 8008560:	bf18      	it	ne
 8008562:	2001      	movne	r0, #1
 8008564:	bd08      	pop	{r3, pc}
 8008566:	bf00      	nop

08008568 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8008568:	4601      	mov	r1, r0
 800856a:	f643 2070 	movw	r0, #14960	; 0x3a70
 800856e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008572:	f7fa bf6b 	b.w	800344c <HAL_SD_GetCardInfo>
 8008576:	bf00      	nop

08008578 <BSP_SD_AbortCallback>:
}
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop

0800857c <HAL_SD_AbortCallback>:
{
 800857c:	b508      	push	{r3, lr}
  BSP_SD_AbortCallback();
 800857e:	f7ff fffb 	bl	8008578 <BSP_SD_AbortCallback>
}
 8008582:	bd08      	pop	{r3, pc}

08008584 <BSP_SD_WriteCpltCallback>:
 8008584:	4770      	bx	lr
 8008586:	bf00      	nop

08008588 <HAL_SD_TxCpltCallback>:
{
 8008588:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800858a:	f7ff fffb 	bl	8008584 <BSP_SD_WriteCpltCallback>
}
 800858e:	bd08      	pop	{r3, pc}

08008590 <BSP_SD_ReadCpltCallback>:
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop

08008594 <HAL_SD_RxCpltCallback>:
{
 8008594:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 8008596:	f7ff fffb 	bl	8008590 <BSP_SD_ReadCpltCallback>
}
 800859a:	bd08      	pop	{r3, pc}

0800859c <MX_DAC_Init>:
{
  DAC_ChannelConfTypeDef sConfig = {0};

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 800859c:	f243 439c 	movw	r3, #13468	; 0x349c
 80085a0:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
  DAC_ChannelConfTypeDef sConfig = {0};
 80085a4:	2200      	movs	r2, #0
  hdac.Instance = DAC;
 80085a6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80085aa:	f2c4 0100 	movt	r1, #16384	; 0x4000
{
 80085ae:	b510      	push	{r4, lr}
 80085b0:	b082      	sub	sp, #8
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80085b2:	4618      	mov	r0, r3
  hdac.Instance = DAC;
 80085b4:	6019      	str	r1, [r3, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 80085b6:	9201      	str	r2, [sp, #4]
 80085b8:	9200      	str	r2, [sp, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80085ba:	f7f8 feeb 	bl	8001394 <HAL_DAC_Init>
 80085be:	b980      	cbnz	r0, 80085e2 <MX_DAC_Init+0x46>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80085c0:	f243 409c 	movw	r0, #13468	; 0x349c
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80085c4:	2404      	movs	r4, #4
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80085c6:	2300      	movs	r3, #0
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80085c8:	4669      	mov	r1, sp
 80085ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80085ce:	2210      	movs	r2, #16
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80085d0:	e9cd 4300 	strd	r4, r3, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80085d4:	f7f8 ff96 	bl	8001504 <HAL_DAC_ConfigChannel>
 80085d8:	b108      	cbz	r0, 80085de <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80085da:	f000 fc3f 	bl	8008e5c <Error_Handler>
  }

}
 80085de:	b002      	add	sp, #8
 80085e0:	bd10      	pop	{r4, pc}
    Error_Handler();
 80085e2:	f000 fc3b 	bl	8008e5c <Error_Handler>
 80085e6:	e7eb      	b.n	80085c0 <MX_DAC_Init+0x24>

080085e8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(dacHandle->Instance==DAC)
 80085e8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80085ec:	6802      	ldr	r2, [r0, #0]
 80085ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
{
 80085f2:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dacHandle->Instance==DAC)
 80085f4:	429a      	cmp	r2, r3
{
 80085f6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085f8:	f04f 0400 	mov.w	r4, #0
 80085fc:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8008600:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8008604:	9407      	str	r4, [sp, #28]
  if(dacHandle->Instance==DAC)
 8008606:	d001      	beq.n	800860c <HAL_DAC_MspInit+0x24>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8008608:	b009      	add	sp, #36	; 0x24
 800860a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 800860c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008610:	2520      	movs	r5, #32
 8008612:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008614:	4620      	mov	r0, r4
    __HAL_RCC_DAC_CLK_ENABLE();
 8008616:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800861a:	a903      	add	r1, sp, #12
 800861c:	f2c4 0002 	movt	r0, #16386	; 0x4002
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008620:	2740      	movs	r7, #64	; 0x40
    __HAL_RCC_DAC_CLK_ENABLE();
 8008622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008624:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008628:	641a      	str	r2, [r3, #64]	; 0x40
 800862a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800862c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8008630:	9201      	str	r2, [sp, #4]
 8008632:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800863c:	2203      	movs	r2, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800863e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8008640:	9503      	str	r5, [sp, #12]
    hdma_dac2.Instance = DMA1_Stream6;
 8008642:	f243 45b0 	movw	r5, #13488	; 0x34b0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008646:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800864a:	9204      	str	r2, [sp, #16]
    hdma_dac2.Instance = DMA1_Stream6;
 800864c:	f2c2 0500 	movt	r5, #8192	; 0x2000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008650:	9302      	str	r3, [sp, #8]
 8008652:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008654:	f7f9 f96c 	bl	8001930 <HAL_GPIO_Init>
    hdma_dac2.Instance = DMA1_Stream6;
 8008658:	f246 03a0 	movw	r3, #24736	; 0x60a0
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800865c:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8008660:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8008664:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_dac2.Instance = DMA1_Stream6;
 8008668:	f2c4 0302 	movt	r3, #16386	; 0x4002
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 800866c:	4628      	mov	r0, r5
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 800866e:	60ec      	str	r4, [r5, #12]
    hdma_dac2.Instance = DMA1_Stream6;
 8008670:	602b      	str	r3, [r5, #0]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8008672:	6129      	str	r1, [r5, #16]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8008674:	61ea      	str	r2, [r5, #28]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008676:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800867a:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800867e:	e9c5 c701 	strd	ip, r7, [r5, #4]
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8008682:	f7f8 ff83 	bl	800158c <HAL_DMA_Init>
 8008686:	b918      	cbnz	r0, 8008690 <HAL_DAC_MspInit+0xa8>
    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8008688:	60f5      	str	r5, [r6, #12]
 800868a:	63ae      	str	r6, [r5, #56]	; 0x38
}
 800868c:	b009      	add	sp, #36	; 0x24
 800868e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8008690:	f000 fbe4 	bl	8008e5c <Error_Handler>
 8008694:	e7f8      	b.n	8008688 <HAL_DAC_MspInit+0xa0>
 8008696:	bf00      	nop

08008698 <MX_DMA_Init>:
  */
void MX_DMA_Init(void) 
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008698:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800869c:	2200      	movs	r2, #0
 800869e:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80086a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80086a4:	4611      	mov	r1, r2
{
 80086a6:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 80086a8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
{
 80086aa:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 80086ac:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 80086b0:	631c      	str	r4, [r3, #48]	; 0x30
 80086b2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80086b4:	f404 1400 	and.w	r4, r4, #2097152	; 0x200000
 80086b8:	9400      	str	r4, [sp, #0]
 80086ba:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80086bc:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80086be:	f444 0480 	orr.w	r4, r4, #4194304	; 0x400000
 80086c2:	631c      	str	r4, [r3, #48]	; 0x30
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80086ce:	f7f8 fdfd 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80086d2:	200c      	movs	r0, #12
 80086d4:	f7f8 fe36 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80086d8:	2200      	movs	r2, #0
 80086da:	200d      	movs	r0, #13
 80086dc:	4611      	mov	r1, r2
 80086de:	f7f8 fdf5 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80086e2:	200d      	movs	r0, #13
 80086e4:	f7f8 fe2e 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80086e8:	2200      	movs	r2, #0
 80086ea:	200e      	movs	r0, #14
 80086ec:	4611      	mov	r1, r2
 80086ee:	f7f8 fded 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80086f2:	200e      	movs	r0, #14
 80086f4:	f7f8 fe26 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80086f8:	2200      	movs	r2, #0
 80086fa:	200f      	movs	r0, #15
 80086fc:	4611      	mov	r1, r2
 80086fe:	f7f8 fde5 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8008702:	200f      	movs	r0, #15
 8008704:	f7f8 fe1e 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8008708:	2200      	movs	r2, #0
 800870a:	2010      	movs	r0, #16
 800870c:	4611      	mov	r1, r2
 800870e:	f7f8 fddd 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8008712:	2010      	movs	r0, #16
 8008714:	f7f8 fe16 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8008718:	2200      	movs	r2, #0
 800871a:	2011      	movs	r0, #17
 800871c:	4611      	mov	r1, r2
 800871e:	f7f8 fdd5 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8008722:	2011      	movs	r0, #17
 8008724:	f7f8 fe0e 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8008728:	2200      	movs	r2, #0
 800872a:	202f      	movs	r0, #47	; 0x2f
 800872c:	4611      	mov	r1, r2
 800872e:	f7f8 fdcd 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8008732:	202f      	movs	r0, #47	; 0x2f
 8008734:	f7f8 fe06 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8008738:	2200      	movs	r2, #0
 800873a:	2038      	movs	r0, #56	; 0x38
 800873c:	4611      	mov	r1, r2
 800873e:	f7f8 fdc5 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8008742:	2038      	movs	r0, #56	; 0x38
 8008744:	f7f8 fdfe 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8008748:	2200      	movs	r2, #0
 800874a:	203a      	movs	r0, #58	; 0x3a
 800874c:	4611      	mov	r1, r2
 800874e:	f7f8 fdbd 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8008752:	203a      	movs	r0, #58	; 0x3a
 8008754:	f7f8 fdf6 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8008758:	2200      	movs	r2, #0
 800875a:	203b      	movs	r0, #59	; 0x3b
 800875c:	4611      	mov	r1, r2
 800875e:	f7f8 fdb5 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8008762:	203b      	movs	r0, #59	; 0x3b
 8008764:	f7f8 fdee 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8008768:	2200      	movs	r2, #0
 800876a:	2045      	movs	r0, #69	; 0x45
 800876c:	4611      	mov	r1, r2
 800876e:	f7f8 fdad 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8008772:	2045      	movs	r0, #69	; 0x45
 8008774:	f7f8 fde6 	bl	8001344 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8008778:	2200      	movs	r2, #0
 800877a:	2046      	movs	r0, #70	; 0x46
 800877c:	4611      	mov	r1, r2
 800877e:	f7f8 fda5 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008782:	2046      	movs	r0, #70	; 0x46

}
 8008784:	b002      	add	sp, #8
 8008786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800878a:	f7f8 bddb 	b.w	8001344 <HAL_NVIC_EnableIRQ>
 800878e:	bf00      	nop

08008790 <MX_FATFS_Init>:
/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008790:	f243 5114 	movw	r1, #13588	; 0x3514
 8008794:	f24a 60a0 	movw	r0, #42656	; 0xa6a0
{
 8008798:	b508      	push	{r3, lr}
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800879a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800879e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80087a2:	f7fd fb35 	bl	8005e10 <FATFS_LinkDriver>
 80087a6:	f243 5310 	movw	r3, #13584	; 0x3510
 80087aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80087ae:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80087b0:	bd08      	pop	{r3, pc}
 80087b2:	bf00      	nop

080087b4 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80087b4:	2000      	movs	r0, #0
 80087b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
uint8_t	BSP_PlatformIsDetected(void) {
 80087ba:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80087bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80087c0:	f7f9 f9d6 	bl	8001b70 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
}  
 80087c4:	fab0 f080 	clz	r0, r0
 80087c8:	0940      	lsrs	r0, r0, #5
 80087ca:	bd08      	pop	{r3, pc}

080087cc <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80087cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 80087d0:	2201      	movs	r2, #1
 80087d2:	2110      	movs	r1, #16
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80087d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
{
 80087d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087dc:	2400      	movs	r4, #0
{
 80087de:	b08b      	sub	sp, #44	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INIT_OK_Pin|LLVOE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOD0_LED_Pin|CE_Pin, GPIO_PIN_RESET);
 80087e0:	f44f 6800 	mov.w	r8, #2048	; 0x800

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MOD1_LED_GPIO_Port, MOD1_LED_Pin, GPIO_PIN_RESET);
 80087e4:	f44f 6580 	mov.w	r5, #1024	; 0x400
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087e8:	9406      	str	r4, [sp, #24]
  HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 80087ea:	4626      	mov	r6, r4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087ec:	9405      	str	r4, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, MOD0_LED_Pin|CE_Pin, GPIO_PIN_RESET);
 80087ee:	f2c4 0802 	movt	r8, #16386	; 0x4002
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 80087f4:	f2c4 0602 	movt	r6, #16386	; 0x4002
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087f8:	9408      	str	r4, [sp, #32]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF24_NSS_GPIO_Port, RF24_NSS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IMU_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80087fa:	4617      	mov	r7, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087fc:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 80087fe:	4630      	mov	r0, r6
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008800:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(MOD1_LED_GPIO_Port, MOD1_LED_Pin, GPIO_PIN_RESET);
 8008804:	f2c4 0502 	movt	r5, #16386	; 0x4002
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(MOD1_LED_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF24_NSS_Pin;
 8008808:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800880c:	f04f 0a03 	mov.w	sl, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008810:	f04c 0c80 	orr.w	ip, ip, #128	; 0x80
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(RF24_NSS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IRQ_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008814:	46a1      	mov	r9, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008816:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800881a:	f2c1 0911 	movt	r9, #4113	; 0x1011
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800881e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8008822:	f00c 0c80 	and.w	ip, ip, #128	; 0x80
 8008826:	f8cd c000 	str.w	ip, [sp]
 800882a:	f8dd c000 	ldr.w	ip, [sp]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800882e:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8008832:	f04c 0c04 	orr.w	ip, ip, #4
 8008836:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800883a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800883e:	f00c 0c04 	and.w	ip, ip, #4
 8008842:	f8cd c004 	str.w	ip, [sp, #4]
 8008846:	f8dd c004 	ldr.w	ip, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800884a:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800884e:	ea4c 0c02 	orr.w	ip, ip, r2
 8008852:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8008856:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800885a:	ea0c 0c02 	and.w	ip, ip, r2
 800885e:	f8cd c008 	str.w	ip, [sp, #8]
 8008862:	f8dd c008 	ldr.w	ip, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008866:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 800886a:	f04c 0c02 	orr.w	ip, ip, #2
 800886e:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 8008872:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8008876:	f00c 0c02 	and.w	ip, ip, #2
 800887a:	f8cd c00c 	str.w	ip, [sp, #12]
 800887e:	f8dd c00c 	ldr.w	ip, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008882:	f8d3 c030 	ldr.w	ip, [r3, #48]	; 0x30
 8008886:	f04c 0c08 	orr.w	ip, ip, #8
 800888a:	f8c3 c030 	str.w	ip, [r3, #48]	; 0x30
 800888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	9304      	str	r3, [sp, #16]
 8008896:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 8008898:	f7f9 f970 	bl	8001b7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, INIT_OK_Pin|LLVOE_Pin, GPIO_PIN_RESET);
 800889c:	4622      	mov	r2, r4
 800889e:	4630      	mov	r0, r6
 80088a0:	f44f 6108 	mov.w	r1, #2176	; 0x880
 80088a4:	f7f9 f96a 	bl	8001b7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, MOD0_LED_Pin|CE_Pin, GPIO_PIN_RESET);
 80088a8:	4640      	mov	r0, r8
 80088aa:	4622      	mov	r2, r4
 80088ac:	2150      	movs	r1, #80	; 0x50
 80088ae:	f7f9 f965 	bl	8001b7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MOD1_LED_GPIO_Port, MOD1_LED_Pin, GPIO_PIN_RESET);
 80088b2:	4628      	mov	r0, r5
 80088b4:	4622      	mov	r2, r4
 80088b6:	2102      	movs	r1, #2
 80088b8:	f7f9 f960 	bl	8001b7c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF24_NSS_GPIO_Port, RF24_NSS_Pin, GPIO_PIN_SET);
 80088bc:	463a      	mov	r2, r7
 80088be:	4628      	mov	r0, r5
 80088c0:	4659      	mov	r1, fp
 80088c2:	f7f9 f95b 	bl	8001b7c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = IMU_NSS_Pin;
 80088c6:	2310      	movs	r3, #16
  HAL_GPIO_Init(IMU_NSS_GPIO_Port, &GPIO_InitStruct);
 80088c8:	4630      	mov	r0, r6
 80088ca:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088cc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088ce:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088d2:	e9cd 3705 	strd	r3, r7, [sp, #20]
  HAL_GPIO_Init(IMU_NSS_GPIO_Port, &GPIO_InitStruct);
 80088d6:	f7f9 f82b 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = INIT_OK_Pin|LLVOE_Pin;
 80088da:	f44f 6308 	mov.w	r3, #2176	; 0x880
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088de:	4630      	mov	r0, r6
 80088e0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = INIT_OK_Pin|LLVOE_Pin;
 80088e2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e4:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e6:	e9cd 7406 	strd	r7, r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ea:	f7f9 f821 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOD0_LED_Pin|CE_Pin;
 80088ee:	2350      	movs	r3, #80	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088f0:	4640      	mov	r0, r8
 80088f2:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = MOD0_LED_Pin|CE_Pin;
 80088f4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088f6:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f8:	e9cd 7406 	strd	r7, r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088fc:	f7f9 f818 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MOD1_LED_Pin;
 8008900:	2302      	movs	r3, #2
  HAL_GPIO_Init(MOD1_LED_GPIO_Port, &GPIO_InitStruct);
 8008902:	4628      	mov	r0, r5
 8008904:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = MOD1_LED_Pin;
 8008906:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008908:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890a:	e9cd 7406 	strd	r7, r4, [sp, #24]
  HAL_GPIO_Init(MOD1_LED_GPIO_Port, &GPIO_InitStruct);
 800890e:	f7f9 f80f 	bl	8001930 <HAL_GPIO_Init>
  HAL_GPIO_Init(RF24_NSS_GPIO_Port, &GPIO_InitStruct);
 8008912:	4628      	mov	r0, r5
 8008914:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008916:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = RF24_NSS_Pin;
 800891a:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800891e:	e9cd 7706 	strd	r7, r7, [sp, #24]
  HAL_GPIO_Init(RF24_NSS_GPIO_Port, &GPIO_InitStruct);
 8008922:	f7f9 f805 	bl	8001930 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = IRQ_Pin;
 8008926:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8008928:	4640      	mov	r0, r8
 800892a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = IRQ_Pin;
 800892c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800892e:	e9cd 9406 	strd	r9, r4, [sp, #24]
  HAL_GPIO_Init(IRQ_GPIO_Port, &GPIO_InitStruct);
 8008932:	f7f8 fffd 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USBOSD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USBOSD_GPIO_Port, &GPIO_InitStruct);
 8008936:	4630      	mov	r0, r6
 8008938:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800893c:	e9cd b405 	strd	fp, r4, [sp, #20]
  HAL_GPIO_Init(USBOSD_GPIO_Port, &GPIO_InitStruct);
 8008940:	f7f8 fff6 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INTA_Pin;
 8008944:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(INTA_GPIO_Port, &GPIO_InitStruct);
 8008948:	4628      	mov	r0, r5
 800894a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = INTA_Pin;
 800894c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800894e:	e9cd 9406 	strd	r9, r4, [sp, #24]
  HAL_GPIO_Init(INTA_GPIO_Port, &GPIO_InitStruct);
 8008952:	f7f8 ffed 	bl	8001930 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8008956:	4622      	mov	r2, r4
 8008958:	4621      	mov	r1, r4
 800895a:	2017      	movs	r0, #23
 800895c:	f7f8 fcb6 	bl	80012cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8008960:	2017      	movs	r0, #23
 8008962:	f7f8 fcef 	bl	8001344 <HAL_NVIC_EnableIRQ>

}
 8008966:	b00b      	add	sp, #44	; 0x2c
 8008968:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800896c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c3;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800896c:	b538      	push	{r3, r4, r5, lr}

  hi2c1.Instance = I2C1;
 800896e:	f643 2324 	movw	r3, #14884	; 0x3a24
 8008972:	f44f 44a8 	mov.w	r4, #21504	; 0x5400
  hi2c1.Init.Timing = 0x20404768;
 8008976:	f244 7168 	movw	r1, #18280	; 0x4768
  hi2c1.Init.OwnAddress1 = 0;
 800897a:	2200      	movs	r2, #0
  hi2c1.Instance = I2C1;
 800897c:	f2c2 0300 	movt	r3, #8192	; 0x2000
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008980:	2501      	movs	r5, #1
  hi2c1.Instance = I2C1;
 8008982:	f2c4 0400 	movt	r4, #16384	; 0x4000
  hi2c1.Init.Timing = 0x20404768;
 8008986:	f2c2 0140 	movt	r1, #8256	; 0x2040
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800898a:	4618      	mov	r0, r3
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800898c:	621a      	str	r2, [r3, #32]
  hi2c1.Init.Timing = 0x20404768;
 800898e:	e9c3 4100 	strd	r4, r1, [r3]
  hi2c1.Init.OwnAddress1 = 0;
 8008992:	e9c3 2502 	strd	r2, r5, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8008996:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800899a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800899e:	f7f9 f909 	bl	8001bb4 <HAL_I2C_Init>
 80089a2:	b9b8      	cbnz	r0, 80089d4 <MX_I2C1_Init+0x68>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80089a4:	f643 2024 	movw	r0, #14884	; 0x3a24
 80089a8:	2100      	movs	r1, #0
 80089aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80089ae:	f7f9 f957 	bl	8001c60 <HAL_I2CEx_ConfigAnalogFilter>
 80089b2:	b960      	cbnz	r0, 80089ce <MX_I2C1_Init+0x62>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80089b4:	f643 2024 	movw	r0, #14884	; 0x3a24
 80089b8:	2100      	movs	r1, #0
 80089ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80089be:	f7f9 f979 	bl	8001cb4 <HAL_I2CEx_ConfigDigitalFilter>
 80089c2:	b900      	cbnz	r0, 80089c6 <MX_I2C1_Init+0x5a>
  {
    Error_Handler();
  }

}
 80089c4:	bd38      	pop	{r3, r4, r5, pc}
 80089c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80089ca:	f000 ba47 	b.w	8008e5c <Error_Handler>
    Error_Handler();
 80089ce:	f000 fa45 	bl	8008e5c <Error_Handler>
 80089d2:	e7ef      	b.n	80089b4 <MX_I2C1_Init+0x48>
    Error_Handler();
 80089d4:	f000 fa42 	bl	8008e5c <Error_Handler>
 80089d8:	e7e4      	b.n	80089a4 <MX_I2C1_Init+0x38>
 80089da:	bf00      	nop

080089dc <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80089dc:	b538      	push	{r3, r4, r5, lr}

  hi2c3.Instance = I2C3;
 80089de:	f643 1378 	movw	r3, #14712	; 0x3978
 80089e2:	f44f 44b8 	mov.w	r4, #23552	; 0x5c00
  hi2c3.Init.Timing = 0x20404768;
 80089e6:	f244 7168 	movw	r1, #18280	; 0x4768
  hi2c3.Init.OwnAddress1 = 0;
 80089ea:	2200      	movs	r2, #0
  hi2c3.Instance = I2C3;
 80089ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80089f0:	2501      	movs	r5, #1
  hi2c3.Instance = I2C3;
 80089f2:	f2c4 0400 	movt	r4, #16384	; 0x4000
  hi2c3.Init.Timing = 0x20404768;
 80089f6:	f2c2 0140 	movt	r1, #8256	; 0x2040
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c3.Init.OwnAddress2 = 0;
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80089fa:	4618      	mov	r0, r3
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80089fc:	621a      	str	r2, [r3, #32]
  hi2c3.Init.Timing = 0x20404768;
 80089fe:	e9c3 4100 	strd	r4, r1, [r3]
  hi2c3.Init.OwnAddress1 = 0;
 8008a02:	e9c3 2502 	strd	r2, r5, [r3, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8008a06:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a0a:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8008a0e:	f7f9 f8d1 	bl	8001bb4 <HAL_I2C_Init>
 8008a12:	b9b8      	cbnz	r0, 8008a44 <MX_I2C3_Init+0x68>
  {
    Error_Handler();
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a14:	f643 1078 	movw	r0, #14712	; 0x3978
 8008a18:	2100      	movs	r1, #0
 8008a1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008a1e:	f7f9 f91f 	bl	8001c60 <HAL_I2CEx_ConfigAnalogFilter>
 8008a22:	b960      	cbnz	r0, 8008a3e <MX_I2C3_Init+0x62>
  {
    Error_Handler();
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8008a24:	f643 1078 	movw	r0, #14712	; 0x3978
 8008a28:	2100      	movs	r1, #0
 8008a2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008a2e:	f7f9 f941 	bl	8001cb4 <HAL_I2CEx_ConfigDigitalFilter>
 8008a32:	b900      	cbnz	r0, 8008a36 <MX_I2C3_Init+0x5a>
  {
    Error_Handler();
  }

}
 8008a34:	bd38      	pop	{r3, r4, r5, pc}
 8008a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8008a3a:	f000 ba0f 	b.w	8008e5c <Error_Handler>
    Error_Handler();
 8008a3e:	f000 fa0d 	bl	8008e5c <Error_Handler>
 8008a42:	e7ef      	b.n	8008a24 <MX_I2C3_Init+0x48>
    Error_Handler();
 8008a44:	f000 fa0a 	bl	8008e5c <Error_Handler>
 8008a48:	e7e4      	b.n	8008a14 <MX_I2C3_Init+0x38>
 8008a4a:	bf00      	nop

08008a4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8008a4c:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 8008a50:	6802      	ldr	r2, [r0, #0]
 8008a52:	f2c4 0300 	movt	r3, #16384	; 0x4000
{
 8008a56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(i2cHandle->Instance==I2C1)
 8008a5a:	429a      	cmp	r2, r3
{
 8008a5c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a5e:	f04f 0400 	mov.w	r4, #0
 8008a62:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8008a66:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8008a6a:	9409      	str	r4, [sp, #36]	; 0x24
  if(i2cHandle->Instance==I2C1)
 8008a6c:	d06f      	beq.n	8008b4e <HAL_I2C_MspInit+0x102>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(i2cHandle->Instance==I2C3)
 8008a6e:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8008a72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d002      	beq.n	8008a80 <HAL_I2C_MspInit+0x34>

  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8008a7a:	b00b      	add	sp, #44	; 0x2c
 8008a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a80:	f44f 5760 	mov.w	r7, #14336	; 0x3800
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008a84:	f04f 0804 	mov.w	r8, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008a88:	f04f 0a01 	mov.w	sl, #1
 8008a8c:	4606      	mov	r6, r0
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a8e:	f2c4 0702 	movt	r7, #16386	; 0x4002
    HAL_GPIO_Init(ARDU_SDA_GPIO_Port, &GPIO_InitStruct);
 8008a92:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Pin = ARDU_SDA_Pin;
 8008a96:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008a9a:	f04f 0b12 	mov.w	fp, #18
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008aa0:	f04f 0903 	mov.w	r9, #3
    HAL_GPIO_Init(ARDU_SDA_GPIO_Port, &GPIO_InitStruct);
 8008aa4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8008aa8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008aaa:	ea43 0308 	orr.w	r3, r3, r8
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8008aae:	f643 15c4 	movw	r5, #14788	; 0x39c4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ab2:	633b      	str	r3, [r7, #48]	; 0x30
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8008ab4:	f2c2 0500 	movt	r5, #8192	; 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aba:	ea03 0308 	and.w	r3, r3, r8
 8008abe:	9302      	str	r3, [sp, #8]
 8008ac0:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	ea43 030a 	orr.w	r3, r3, sl
 8008ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8008aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = ARDU_SDA_Pin;
 8008acc:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ace:	ea03 030a 	and.w	r3, r3, sl
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ad2:	f8cd 9020 	str.w	r9, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008ad6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ada:	9303      	str	r3, [sp, #12]
 8008adc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ade:	e9cd ba06 	strd	fp, sl, [sp, #24]
    HAL_GPIO_Init(ARDU_SDA_GPIO_Port, &GPIO_InitStruct);
 8008ae2:	f7f8 ff25 	bl	8001930 <HAL_GPIO_Init>
    HAL_GPIO_Init(ARDU_SCL_GPIO_Port, &GPIO_InitStruct);
 8008ae6:	2000      	movs	r0, #0
    GPIO_InitStruct.Pin = ARDU_SCL_Pin;
 8008ae8:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(ARDU_SCL_GPIO_Port, &GPIO_InitStruct);
 8008aec:	a905      	add	r1, sp, #20
 8008aee:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008af2:	f8cd b018 	str.w	fp, [sp, #24]
    GPIO_InitStruct.Pin = ARDU_SCL_Pin;
 8008af6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8008af8:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008afc:	e9cd a907 	strd	sl, r9, [sp, #28]
    HAL_GPIO_Init(ARDU_SCL_GPIO_Port, &GPIO_InitStruct);
 8008b00:	f7f8 ff16 	bl	8001930 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8008b06:	f246 0228 	movw	r2, #24616	; 0x6028
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8008b0a:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008b0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8008b16:	f2c4 0202 	movt	r2, #16386	; 0x4002
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8008b1a:	4628      	mov	r0, r5
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008b1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b20:	60ac      	str	r4, [r5, #8]
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b26:	60ec      	str	r4, [r5, #12]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008b28:	616c      	str	r4, [r5, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
 8008b2a:	9304      	str	r3, [sp, #16]
 8008b2c:	9b04      	ldr	r3, [sp, #16]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008b2e:	6129      	str	r1, [r5, #16]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8008b30:	e9c5 4406 	strd	r4, r4, [r5, #24]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b34:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8008b38:	e9c5 2c00 	strd	r2, ip, [r5]
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8008b3c:	f7f8 fd26 	bl	800158c <HAL_DMA_Init>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d12e      	bne.n	8008ba2 <HAL_I2C_MspInit+0x156>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8008b44:	63f5      	str	r5, [r6, #60]	; 0x3c
 8008b46:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8008b48:	b00b      	add	sp, #44	; 0x2c
 8008b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b4e:	f44f 5460 	mov.w	r4, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b52:	2512      	movs	r5, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b54:	2201      	movs	r2, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b56:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b5a:	f2c4 0402 	movt	r4, #16386	; 0x4002
    GPIO_InitStruct.Pin = IMU2_SCL_Pin|IMU2_SDA_Pin;
 8008b5e:	26c0      	movs	r6, #192	; 0xc0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b60:	a905      	add	r1, sp, #20
 8008b62:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008b68:	f043 0302 	orr.w	r3, r3, #2
 8008b6c:	6323      	str	r3, [r4, #48]	; 0x30
 8008b6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b70:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b72:	2503      	movs	r5, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b74:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b78:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008b7a:	2204      	movs	r2, #4
    GPIO_InitStruct.Pin = IMU2_SCL_Pin|IMU2_SDA_Pin;
 8008b7c:	9605      	str	r6, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008b82:	e9cd 5208 	strd	r5, r2, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b86:	f7f8 fed3 	bl	8001930 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008b8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b90:	6423      	str	r3, [r4, #64]	; 0x40
 8008b92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	9b01      	ldr	r3, [sp, #4]
}
 8008b9c:	b00b      	add	sp, #44	; 0x2c
 8008b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      Error_Handler();
 8008ba2:	f000 f95b 	bl	8008e5c <Error_Handler>
 8008ba6:	e7cd      	b.n	8008b44 <HAL_I2C_MspInit+0xf8>

08008ba8 <HAL_SPI_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//read IMU GYRO ACCEL alternating
	if (icm.init == true){
 8008bac:	f243 3490 	movw	r4, #13200	; 0x3390
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8008bb0:	b087      	sub	sp, #28
	if (icm.init == true){
 8008bb2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008bb6:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f000 80a7 	beq.w	8008d0e <HAL_SPI_RxCpltCallback+0x166>
		int16_t r_gyro[3],r_accel[3];

		if(icm.ac == 0){
 8008bc0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d04e      	beq.n	8008c66 <HAL_SPI_RxCpltCallback+0xbe>
			for(int i = 0; i<3; i++){
				icm.ypr[i] = r_gyro[i] / 65.5;
			}
			icm.ac = 1;
		}else{
			r_accel[0] = (icm.buf[0] << 8) | icm.buf[1];
 8008bc8:	7e23      	ldrb	r3, [r4, #24]
			r_accel[1] = (icm.buf[2] << 8) | icm.buf[3];
			r_accel[2] = (icm.buf[4] << 8) | icm.buf[5];

			for(int i = 0; i<3; i++){
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008bca:	f04f 0a00 	mov.w	sl, #0
			r_accel[0] = (icm.buf[0] << 8) | icm.buf[1];
 8008bce:	7e60      	ldrb	r0, [r4, #25]
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008bd0:	f8cd a008 	str.w	sl, [sp, #8]
 8008bd4:	46d3      	mov	fp, sl
			r_accel[0] = (icm.buf[0] << 8) | icm.buf[1];
 8008bd6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008bda:	4653      	mov	r3, sl
			r_accel[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008bdc:	7ea5      	ldrb	r5, [r4, #26]
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008bde:	f6c3 7b30 	movt	fp, #16176	; 0x3f30
 8008be2:	f6c3 7330 	movt	r3, #16176	; 0x3f30
 8008be6:	b200      	sxth	r0, r0
			r_accel[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008be8:	7ee6      	ldrb	r6, [r4, #27]
 8008bea:	b2ed      	uxtb	r5, r5
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008bec:	9303      	str	r3, [sp, #12]
 8008bee:	f8cd a010 	str.w	sl, [sp, #16]
			r_accel[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008bf2:	b2f6      	uxtb	r6, r6
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008bf4:	f8cd a014 	str.w	sl, [sp, #20]
 8008bf8:	f7f7 fc64 	bl	80004c4 <__aeabi_i2d>
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	4652      	mov	r2, sl
			r_accel[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c00:	7f27      	ldrb	r7, [r4, #28]
			r_accel[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008c02:	ea46 2505 	orr.w	r5, r6, r5, lsl #8
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008c06:	f6c3 7330 	movt	r3, #16176	; 0x3f30
			r_accel[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c0a:	f894 801d 	ldrb.w	r8, [r4, #29]
 8008c0e:	b2ff      	uxtb	r7, r7
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008c10:	9305      	str	r3, [sp, #20]
 8008c12:	465b      	mov	r3, fp
 8008c14:	f7f7 fcc0 	bl	8000598 <__aeabi_dmul>
			r_accel[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c18:	fa5f f888 	uxtb.w	r8, r8
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008c1c:	f7f7 ff76 	bl	8000b0c <__aeabi_d2f>
 8008c20:	60e0      	str	r0, [r4, #12]
 8008c22:	b228      	sxth	r0, r5
 8008c24:	f7f7 fc4e 	bl	80004c4 <__aeabi_i2d>
			r_accel[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c28:	ea48 2707 	orr.w	r7, r8, r7, lsl #8
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c30:	f7f7 fcb2 	bl	8000598 <__aeabi_dmul>
 8008c34:	f7f7 ff6a 	bl	8000b0c <__aeabi_d2f>
 8008c38:	6120      	str	r0, [r4, #16]
 8008c3a:	b238      	sxth	r0, r7
 8008c3c:	f7f7 fc42 	bl	80004c4 <__aeabi_i2d>
 8008c40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c44:	f7f7 fca8 	bl	8000598 <__aeabi_dmul>
 8008c48:	f7f7 ff60 	bl	8000b0c <__aeabi_d2f>
			}
			icm.ac = 0;
 8008c4c:	f884 a025 	strb.w	sl, [r4, #37]	; 0x25
				icm.accel[i] =  r_accel[i] / 4096.0;
 8008c50:	6160      	str	r0, [r4, #20]
		}
		//NSS HIGH IMU SPI
		HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 8008c52:	2000      	movs	r0, #0
 8008c54:	2201      	movs	r2, #1
 8008c56:	2110      	movs	r1, #16
 8008c58:	f2c4 0002 	movt	r0, #16386	; 0x4002
	}
}
 8008c5c:	b007      	add	sp, #28
 8008c5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_SET);
 8008c62:	f7f8 bf8b 	b.w	8001b7c <HAL_GPIO_WritePin>
			r_gyro[0] = (icm.buf[0] << 8) | icm.buf[1];
 8008c66:	7e23      	ldrb	r3, [r4, #24]
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008c68:	f244 2271 	movw	r2, #17009	; 0x4271
			r_gyro[0] = (icm.buf[0] << 8) | icm.buf[1];
 8008c6c:	7e60      	ldrb	r0, [r4, #25]
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008c6e:	f244 2871 	movw	r8, #17009	; 0x4271
			r_gyro[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008c72:	7ea5      	ldrb	r5, [r4, #26]
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008c74:	f6c9 624a 	movt	r2, #40522	; 0x9e4a
			r_gyro[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008c78:	f894 a01b 	ldrb.w	sl, [r4, #27]
			r_gyro[0] = (icm.buf[0] << 8) | icm.buf[1];
 8008c7c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			r_gyro[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c80:	f894 b01c 	ldrb.w	fp, [r4, #28]
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008c84:	f244 4965 	movw	r9, #17509	; 0x4465
			r_gyro[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c88:	7f63      	ldrb	r3, [r4, #29]
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008c8a:	b200      	sxth	r0, r0
 8008c8c:	4646      	mov	r6, r8
 8008c8e:	9200      	str	r2, [sp, #0]
			r_gyro[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c90:	b2db      	uxtb	r3, r3
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008c92:	f6c9 684a 	movt	r8, #40522	; 0x9e4a
 8008c96:	f6c3 798f 	movt	r9, #16271	; 0x3f8f
			r_gyro[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008c9a:	b2ed      	uxtb	r5, r5
			r_gyro[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008c9c:	9302      	str	r3, [sp, #8]
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008c9e:	f7f7 fc11 	bl	80004c4 <__aeabi_i2d>
 8008ca2:	f244 4265 	movw	r2, #17509	; 0x4465
 8008ca6:	464b      	mov	r3, r9
			r_gyro[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008ca8:	fa5f fa8a 	uxtb.w	sl, sl
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008cac:	f244 4765 	movw	r7, #17509	; 0x4465
 8008cb0:	9201      	str	r2, [sp, #4]
 8008cb2:	4642      	mov	r2, r8
 8008cb4:	f7f7 fc70 	bl	8000598 <__aeabi_dmul>
 8008cb8:	9a01      	ldr	r2, [sp, #4]
			r_gyro[1] = (icm.buf[2] << 8) | icm.buf[3];
 8008cba:	ea4a 2505 	orr.w	r5, sl, r5, lsl #8
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008cbe:	f6c9 664a 	movt	r6, #40522	; 0x9e4a
 8008cc2:	f6c3 728f 	movt	r2, #16271	; 0x3f8f
 8008cc6:	f6c3 778f 	movt	r7, #16271	; 0x3f8f
			r_gyro[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008cca:	fa5f fb8b 	uxtb.w	fp, fp
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008cce:	9201      	str	r2, [sp, #4]
 8008cd0:	f7f7 ff1c 	bl	8000b0c <__aeabi_d2f>
 8008cd4:	6020      	str	r0, [r4, #0]
 8008cd6:	b228      	sxth	r0, r5
 8008cd8:	f7f7 fbf4 	bl	80004c4 <__aeabi_i2d>
 8008cdc:	4632      	mov	r2, r6
 8008cde:	463b      	mov	r3, r7
 8008ce0:	f7f7 fc5a 	bl	8000598 <__aeabi_dmul>
 8008ce4:	f7f7 ff12 	bl	8000b0c <__aeabi_d2f>
			r_gyro[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008ce8:	9b02      	ldr	r3, [sp, #8]
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008cea:	6060      	str	r0, [r4, #4]
			r_gyro[2] = (icm.buf[4] << 8) | icm.buf[5];
 8008cec:	ea43 2b0b 	orr.w	fp, r3, fp, lsl #8
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008cf0:	fa0f f08b 	sxth.w	r0, fp
 8008cf4:	f7f7 fbe6 	bl	80004c4 <__aeabi_i2d>
 8008cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cfc:	f7f7 fc4c 	bl	8000598 <__aeabi_dmul>
 8008d00:	f7f7 ff04 	bl	8000b0c <__aeabi_d2f>
			icm.ac = 1;
 8008d04:	2301      	movs	r3, #1
				icm.ypr[i] = r_gyro[i] / 65.5;
 8008d06:	60a0      	str	r0, [r4, #8]
			icm.ac = 1;
 8008d08:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8008d0c:	e7a1      	b.n	8008c52 <HAL_SPI_RxCpltCallback+0xaa>
}
 8008d0e:	b007      	add	sp, #28
 8008d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d14 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d14:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d16:	2400      	movs	r4, #0
{
 8008d18:	b0b4      	sub	sp, #208	; 0xd0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d1a:	2280      	movs	r2, #128	; 0x80
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d1c:	2502      	movs	r5, #2
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d1e:	4621      	mov	r1, r4
 8008d20:	a814      	add	r0, sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d22:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d24:	2601      	movs	r6, #1
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d26:	9403      	str	r4, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d28:	940d      	str	r4, [sp, #52]	; 0x34
 8008d2a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d2e:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8008d32:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008d36:	f001 fa2a 	bl	800a18e <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d3a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d3e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d42:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d46:	f2c4 0202 	movt	r2, #16386	; 0x4002
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d4a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d4e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8008d50:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8008d54:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d56:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008d5c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8008d60:	9201      	str	r2, [sp, #4]
 8008d62:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8008d6a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 432;
 8008d6c:	f44f 72d8 	mov.w	r2, #432	; 0x1b0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d70:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008d72:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d74:	2108      	movs	r1, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008d7a:	900f      	str	r0, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d7c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008d7e:	9608      	str	r6, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d80:	9302      	str	r3, [sp, #8]
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d82:	260f      	movs	r6, #15
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d84:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8008d86:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d88:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8008d8a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d8c:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 432;
 8008d8e:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d92:	f7f8 fff9 	bl	8001d88 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8008d96:	f7f8 ffb7 	bl	8001d08 <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008d9a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008da2:	2107      	movs	r1, #7
 8008da4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008da6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008da8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008daa:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008dac:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8008db0:	f7f9 f9f4 	bl	800219c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008db4:	f244 03c0 	movw	r3, #16576	; 0x40c0
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008db8:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008dba:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008dbc:	f2c0 03a1 	movt	r3, #161	; 0xa1
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8008dc0:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8008dc2:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8008dc4:	942d      	str	r4, [sp, #180]	; 0xb4
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8008dc6:	9314      	str	r3, [sp, #80]	; 0x50
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8008dc8:	e9cd 4431 	strd	r4, r4, [sp, #196]	; 0xc4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008dcc:	f7f9 fb44 	bl	8002458 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8008dd0:	b034      	add	sp, #208	; 0xd0
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}

08008dd4 <main>:
{
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	f640 0488 	movw	r4, #2184	; 0x888
 8008dda:	f243 3590 	movw	r5, #13200	; 0x3390
  HAL_Init();
 8008dde:	f7f8 f8b5 	bl	8000f4c <HAL_Init>
 8008de2:	f2c2 0400 	movt	r4, #8192	; 0x2000
  SystemClock_Config();
 8008de6:	f7ff ff95 	bl	8008d14 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8008dea:	f7ff fcef 	bl	80087cc <MX_GPIO_Init>
 8008dee:	f2c2 0500 	movt	r5, #8192	; 0x2000
  MX_DMA_Init();
 8008df2:	f7ff fc51 	bl	8008698 <MX_DMA_Init>
	  fc.Loop();
 8008df6:	4626      	mov	r6, r4
  MX_I2C1_Init();
 8008df8:	f7ff fdb8 	bl	800896c <MX_I2C1_Init>
  MX_SDMMC1_SD_Init();
 8008dfc:	f000 f8b8 	bl	8008f70 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8008e00:	f000 f98a 	bl	8009118 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8008e04:	f000 fe3c 	bl	8009a80 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8008e08:	f000 fe5a 	bl	8009ac0 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8008e0c:	f7ff fcc0 	bl	8008790 <MX_FATFS_Init>
  MX_I2C3_Init();
 8008e10:	f7ff fde4 	bl	80089dc <MX_I2C3_Init>
  MX_TIM2_Init();
 8008e14:	f000 fbd2 	bl	80095bc <MX_TIM2_Init>
  MX_DAC_Init();
 8008e18:	f7ff fbc0 	bl	800859c <MX_DAC_Init>
  MX_SPI3_Init();
 8008e1c:	f000 f9a6 	bl	800916c <MX_SPI3_Init>
  MX_ADC1_Init();
 8008e20:	f7ff fac4 	bl	80083ac <MX_ADC1_Init>
  MX_TIM3_Init();
 8008e24:	f000 fcaa 	bl	800977c <MX_TIM3_Init>
  MX_TIM6_Init();
 8008e28:	f000 fd9c 	bl	8009964 <MX_TIM6_Init>
  MX_TIM4_Init();
 8008e2c:	f000 fd5a 	bl	80098e4 <MX_TIM4_Init>
  fc.Init();
 8008e30:	4620      	mov	r0, r4
 8008e32:	f7fd f8bd 	bl	8005fb0 <_ZN16FLIGHTCONTROLLER16Flightcontroller4InitEv>
		  fc.imu.accel[i] = icm.accel[i];
 8008e36:	68eb      	ldr	r3, [r5, #12]
	  fc.Loop();
 8008e38:	4630      	mov	r0, r6
	  icm.init = fc.imu.initOK;
 8008e3a:	7a22      	ldrb	r2, [r4, #8]
		  fc.imu.accel[i] = icm.accel[i];
 8008e3c:	6323      	str	r3, [r4, #48]	; 0x30
		  fc.imu.ypr[i] = icm.ypr[i];
 8008e3e:	682b      	ldr	r3, [r5, #0]
	  icm.init = fc.imu.initOK;
 8008e40:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
		  fc.imu.ypr[i] = icm.ypr[i];
 8008e44:	60e3      	str	r3, [r4, #12]
		  fc.imu.accel[i] = icm.accel[i];
 8008e46:	692b      	ldr	r3, [r5, #16]
 8008e48:	6363      	str	r3, [r4, #52]	; 0x34
		  fc.imu.ypr[i] = icm.ypr[i];
 8008e4a:	686b      	ldr	r3, [r5, #4]
 8008e4c:	6123      	str	r3, [r4, #16]
		  fc.imu.accel[i] = icm.accel[i];
 8008e4e:	696b      	ldr	r3, [r5, #20]
 8008e50:	63a3      	str	r3, [r4, #56]	; 0x38
		  fc.imu.ypr[i] = icm.ypr[i];
 8008e52:	68ab      	ldr	r3, [r5, #8]
 8008e54:	6163      	str	r3, [r4, #20]
	  fc.Loop();
 8008e56:	f7fd fa87 	bl	8006368 <_ZN16FLIGHTCONTROLLER16Flightcontroller4LoopEv>
 8008e5a:	e7ec      	b.n	8008e36 <main+0x62>

08008e5c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop

08008e60 <_GLOBAL__sub_I_icm>:
FLIGHTCONTROLLER::Flightcontroller fc;
 8008e60:	f640 0088 	movw	r0, #2184	; 0x888
 8008e64:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008e68:	f7fc bff8 	b.w	8005e5c <_ZN16FLIGHTCONTROLLER16FlightcontrollerC1Ev>

08008e6c <_GLOBAL__sub_D_icm>:
 8008e6c:	f640 0088 	movw	r0, #2184	; 0x888
 8008e70:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8008e74:	f7fd be54 	b.w	8006b20 <_ZN16FLIGHTCONTROLLER16FlightcontrollerD1Ev>

08008e78 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008e78:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;  
 8008e7a:	f240 0408 	movw	r4, #8
 8008e7e:	2501      	movs	r5, #1
 8008e80:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008e84:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8008e86:	f7ff fb23 	bl	80084d0 <BSP_SD_Init>
 8008e8a:	b108      	cbz	r0, 8008e90 <SD_initialize+0x18>
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8008e8c:	7820      	ldrb	r0, [r4, #0]
}
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 8008e90:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008e92:	f7ff fb5d 	bl	8008550 <BSP_SD_GetCardState>
 8008e96:	b918      	cbnz	r0, 8008ea0 <SD_initialize+0x28>
    Stat &= ~STA_NOINIT;
 8008e98:	7823      	ldrb	r3, [r4, #0]
 8008e9a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008e9e:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008ea0:	7823      	ldrb	r3, [r4, #0]
 8008ea2:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8008ea4:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008ea6:	7820      	ldrb	r0, [r4, #0]
}
 8008ea8:	bd38      	pop	{r3, r4, r5, pc}
 8008eaa:	bf00      	nop

08008eac <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008eac:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8008eae:	f240 0408 	movw	r4, #8
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8008eb8:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8008eba:	f7ff fb49 	bl	8008550 <BSP_SD_GetCardState>
 8008ebe:	b918      	cbnz	r0, 8008ec8 <SD_status+0x1c>
    Stat &= ~STA_NOINIT;
 8008ec0:	7823      	ldrb	r3, [r4, #0]
 8008ec2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008ec6:	7023      	strb	r3, [r4, #0]
  return Stat;
 8008ec8:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8008eca:	bd10      	pop	{r4, pc}

08008ecc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008ecc:	b508      	push	{r3, lr}
 8008ece:	4608      	mov	r0, r1
 8008ed0:	4611      	mov	r1, r2
 8008ed2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8008ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed8:	f7ff fb16 	bl	8008508 <BSP_SD_ReadBlocks>
 8008edc:	b920      	cbnz	r0, 8008ee8 <SD_read+0x1c>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008ede:	f7ff fb37 	bl	8008550 <BSP_SD_GetCardState>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1fb      	bne.n	8008ede <SD_read+0x12>
    }
    res = RES_OK;
  }

  return res;
}
 8008ee6:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008ee8:	2001      	movs	r0, #1
}
 8008eea:	bd08      	pop	{r3, pc}

08008eec <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008eec:	f240 0308 	movw	r3, #8
 8008ef0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	07db      	lsls	r3, r3, #31
 8008ef8:	d408      	bmi.n	8008f0c <SD_ioctl+0x20>
{
 8008efa:	b510      	push	{r4, lr}
 8008efc:	4614      	mov	r4, r2
 8008efe:	b088      	sub	sp, #32

  switch (cmd)
 8008f00:	2903      	cmp	r1, #3
 8008f02:	d821      	bhi.n	8008f48 <SD_ioctl+0x5c>
 8008f04:	e8df f001 	tbb	[pc, r1]
 8008f08:	170f0704 	.word	0x170f0704
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008f0c:	2003      	movs	r0, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8008f0e:	4770      	bx	lr
    res = RES_OK;
 8008f10:	2000      	movs	r0, #0
}
 8008f12:	b008      	add	sp, #32
 8008f14:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008f16:	4668      	mov	r0, sp
 8008f18:	f7ff fb26 	bl	8008568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008f1c:	9b06      	ldr	r3, [sp, #24]
    res = RES_OK;
 8008f1e:	2000      	movs	r0, #0
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008f20:	6023      	str	r3, [r4, #0]
}
 8008f22:	b008      	add	sp, #32
 8008f24:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008f26:	4668      	mov	r0, sp
 8008f28:	f7ff fb1e 	bl	8008568 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008f2c:	9b07      	ldr	r3, [sp, #28]
    res = RES_OK;
 8008f2e:	2000      	movs	r0, #0
    *(WORD*)buff = CardInfo.LogBlockSize;
 8008f30:	8023      	strh	r3, [r4, #0]
}
 8008f32:	b008      	add	sp, #32
 8008f34:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8008f36:	4668      	mov	r0, sp
 8008f38:	f7ff fb16 	bl	8008568 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	2000      	movs	r0, #0
 8008f40:	0a5b      	lsrs	r3, r3, #9
 8008f42:	6023      	str	r3, [r4, #0]
}
 8008f44:	b008      	add	sp, #32
 8008f46:	bd10      	pop	{r4, pc}
    res = RES_PARERR;
 8008f48:	2004      	movs	r0, #4
}
 8008f4a:	b008      	add	sp, #32
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	bf00      	nop

08008f50 <SD_write>:
{
 8008f50:	b508      	push	{r3, lr}
 8008f52:	4608      	mov	r0, r1
 8008f54:	4611      	mov	r1, r2
 8008f56:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8008f58:	f04f 33ff 	mov.w	r3, #4294967295
 8008f5c:	f7ff fae6 	bl	800852c <BSP_SD_WriteBlocks>
 8008f60:	b920      	cbnz	r0, 8008f6c <SD_write+0x1c>
    while(BSP_SD_GetCardState()!= MSD_OK)
 8008f62:	f7ff faf5 	bl	8008550 <BSP_SD_GetCardState>
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d1fb      	bne.n	8008f62 <SD_write+0x12>
}
 8008f6a:	bd08      	pop	{r3, pc}
  DRESULT res = RES_ERROR;
 8008f6c:	2001      	movs	r0, #1
}
 8008f6e:	bd08      	pop	{r3, pc}

08008f70 <MX_SDMMC1_SD_Init>:
/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 8008f70:	f643 2370 	movw	r3, #14960	; 0x3a70
 8008f74:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8008f78:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 8008f7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8008f7e:	f2c4 0101 	movt	r1, #16385	; 0x4001
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008f82:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hsd1.Instance = SDMMC1;
 8008f86:	e9c3 1200 	strd	r1, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008f8a:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8008f8e:	619a      	str	r2, [r3, #24]

}
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop

08008f94 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 8008f94:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8008f98:	6802      	ldr	r2, [r0, #0]
 8008f9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
{
 8008f9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if(sdHandle->Instance==SDMMC1)
 8008fa2:	429a      	cmp	r2, r3
{
 8008fa4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fa6:	f04f 0400 	mov.w	r4, #0
 8008faa:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8008fae:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8008fb2:	9407      	str	r4, [sp, #28]
  if(sdHandle->Instance==SDMMC1)
 8008fb4:	d002      	beq.n	8008fbc <HAL_SD_MspInit+0x28>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8008fb6:	b008      	add	sp, #32
 8008fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008fbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8008fc0:	f04f 080c 	mov.w	r8, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8008fc4:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8008fc8:	4606      	mov	r6, r0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008fca:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fce:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008fd2:	2703      	movs	r7, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fd4:	f04f 0902 	mov.w	r9, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008fda:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008fde:	f04f 0a04 	mov.w	sl, #4
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8008fe2:	f643 3554 	movw	r5, #15188	; 0x3b54
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8008fea:	f2c2 0500 	movt	r5, #8192	; 0x2000
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008fee:	645a      	str	r2, [r3, #68]	; 0x44
 8008ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ff2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008ff6:	9200      	str	r2, [sp, #0]
 8008ff8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ffc:	f042 0204 	orr.w	r2, r2, #4
 8009000:	631a      	str	r2, [r3, #48]	; 0x30
 8009002:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009004:	f002 0204 	and.w	r2, r2, #4
 8009008:	9201      	str	r2, [sp, #4]
 800900a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800900c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800900e:	f042 0208 	orr.w	r2, r2, #8
 8009012:	631a      	str	r2, [r3, #48]	; 0x30
 8009014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8009016:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009018:	eb0d 0108 	add.w	r1, sp, r8
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800901c:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009020:	f8cd 801c 	str.w	r8, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009024:	f8cd 9010 	str.w	r9, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8009028:	9302      	str	r3, [sp, #8]
 800902a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800902c:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800902e:	f7f8 fc7f 	bl	8001930 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009032:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009036:	eb0d 0108 	add.w	r1, sp, r8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800903a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800903c:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009040:	f8cd 9010 	str.w	r9, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8009044:	f8cd a00c 	str.w	sl, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8009048:	e9cd 7806 	strd	r7, r8, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800904c:	f7f8 fc70 	bl	8001930 <HAL_GPIO_Init>
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8009050:	f246 43a0 	movw	r3, #25760	; 0x64a0
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009054:	2040      	movs	r0, #64	; 0x40
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8009056:	f04f 6800 	mov.w	r8, #134217728	; 0x8000000
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800905a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800905e:	f44f 6e80 	mov.w	lr, #1024	; 0x400
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009062:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009066:	60ec      	str	r4, [r5, #12]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009068:	622c      	str	r4, [r5, #32]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800906a:	2120      	movs	r1, #32
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800906c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8009070:	602b      	str	r3, [r5, #0]
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8009072:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8009076:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800907a:	60a8      	str	r0, [r5, #8]
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800907c:	4628      	mov	r0, r5
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800907e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8009082:	62af      	str	r7, [r5, #40]	; 0x28
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8009084:	f8c5 8004 	str.w	r8, [r5, #4]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8009088:	e9c5 ec04 	strd	lr, ip, [r5, #16]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800908c:	e9c5 4106 	strd	r4, r1, [r5, #24]
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8009090:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8009094:	f7f8 fa7a 	bl	800158c <HAL_DMA_Init>
 8009098:	2800      	cmp	r0, #0
 800909a:	d137      	bne.n	800910c <HAL_SD_MspInit+0x178>
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800909c:	f643 24f4 	movw	r4, #15092	; 0x3af4
 80090a0:	f246 4358 	movw	r3, #25688	; 0x6458
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80090a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80090a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80090ac:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80090b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80090b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090b8:	f44f 6780 	mov.w	r7, #1024	; 0x400
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80090bc:	6023      	str	r3, [r4, #0]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80090be:	2304      	movs	r3, #4
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80090c0:	6062      	str	r2, [r4, #4]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80090c2:	2220      	movs	r2, #32
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80090c4:	6160      	str	r0, [r4, #20]
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80090c6:	2003      	movs	r0, #3
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80090c8:	61a1      	str	r1, [r4, #24]
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80090ca:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80090ce:	61e2      	str	r2, [r4, #28]
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80090d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80090d4:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80090d6:	2300      	movs	r3, #0
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80090d8:	62a0      	str	r0, [r4, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80090da:	4620      	mov	r0, r4
    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 80090dc:	6435      	str	r5, [r6, #64]	; 0x40
 80090de:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80090e0:	6127      	str	r7, [r4, #16]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80090e2:	6223      	str	r3, [r4, #32]
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80090e4:	e9c4 120b 	strd	r1, r2, [r4, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80090e8:	e9c4 3302 	strd	r3, r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80090ec:	f7f8 fa4e 	bl	800158c <HAL_DMA_Init>
 80090f0:	b978      	cbnz	r0, 8009112 <HAL_SD_MspInit+0x17e>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80090f2:	2200      	movs	r2, #0
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80090f4:	63f4      	str	r4, [r6, #60]	; 0x3c
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80090f6:	2031      	movs	r0, #49	; 0x31
    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80090f8:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80090fa:	4611      	mov	r1, r2
 80090fc:	f7f8 f8e6 	bl	80012cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8009100:	2031      	movs	r0, #49	; 0x31
 8009102:	f7f8 f91f 	bl	8001344 <HAL_NVIC_EnableIRQ>
}
 8009106:	b008      	add	sp, #32
 8009108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      Error_Handler();
 800910c:	f7ff fea6 	bl	8008e5c <Error_Handler>
 8009110:	e7c4      	b.n	800909c <HAL_SD_MspInit+0x108>
      Error_Handler();
 8009112:	f7ff fea3 	bl	8008e5c <Error_Handler>
 8009116:	e7ec      	b.n	80090f2 <HAL_SD_MspInit+0x15e>

08009118 <MX_SPI2_Init>:

/* SPI2 init function */
void MX_SPI2_Init(void)
{

  hspi2.Instance = SPI2;
 8009118:	f643 33b4 	movw	r3, #15284	; 0x3bb4
 800911c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009120:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009124:	f44f 7000 	mov.w	r0, #512	; 0x200
  hspi2.Instance = SPI2;
 8009128:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800912c:	f2c4 0200 	movt	r2, #16384	; 0x4000
{
 8009130:	b570      	push	{r4, r5, r6, lr}
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009132:	f44f 66e0 	mov.w	r6, #1792	; 0x700
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009136:	2520      	movs	r5, #32
  hspi2.Instance = SPI2;
 8009138:	601a      	str	r2, [r3, #0]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 7;
 800913a:	2407      	movs	r4, #7
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800913c:	2200      	movs	r2, #0
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800913e:	6059      	str	r1, [r3, #4]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8009140:	2108      	movs	r1, #8
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8009142:	6198      	str	r0, [r3, #24]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009144:	4618      	mov	r0, r3
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8009146:	60de      	str	r6, [r3, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009148:	61dd      	str	r5, [r3, #28]
  hspi2.Init.CRCPolynomial = 7;
 800914a:	62dc      	str	r4, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800914c:	6359      	str	r1, [r3, #52]	; 0x34
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800914e:	609a      	str	r2, [r3, #8]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009152:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8009154:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009158:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800915c:	f7fa fa56 	bl	800360c <HAL_SPI_Init>
 8009160:	b900      	cbnz	r0, 8009164 <MX_SPI2_Init+0x4c>
  {
    Error_Handler();
  }

}
 8009162:	bd70      	pop	{r4, r5, r6, pc}
 8009164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 8009168:	f7ff be78 	b.w	8008e5c <Error_Handler>

0800916c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{

  hspi3.Instance = SPI3;
 800916c:	f643 4378 	movw	r3, #15480	; 0x3c78
 8009170:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009174:	f44f 60e0 	mov.w	r0, #1792	; 0x700
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
 8009178:	2107      	movs	r1, #7
  hspi3.Instance = SPI3;
 800917a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800917e:	f2c4 0200 	movt	r2, #16384	; 0x4000
{
 8009182:	b570      	push	{r4, r5, r6, lr}
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009184:	f44f 7682 	mov.w	r6, #260	; 0x104
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8009188:	f44f 7500 	mov.w	r5, #512	; 0x200
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800918c:	2410      	movs	r4, #16
  hspi3.Instance = SPI3;
 800918e:	601a      	str	r2, [r3, #0]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8009190:	2200      	movs	r2, #0
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8009192:	60d8      	str	r0, [r3, #12]
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8009194:	4618      	mov	r0, r3
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8009196:	605e      	str	r6, [r3, #4]
  hspi3.Init.CRCPolynomial = 7;
 8009198:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800919a:	609a      	str	r2, [r3, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800919c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800919e:	e9c3 5406 	strd	r5, r4, [r3, #24]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80091a2:	e9c3 2204 	strd	r2, r2, [r3, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80091a6:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80091aa:	e9c3 220c 	strd	r2, r2, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80091ae:	f7fa fa2d 	bl	800360c <HAL_SPI_Init>
 80091b2:	b900      	cbnz	r0, 80091b6 <MX_SPI3_Init+0x4a>
  {
    Error_Handler();
  }

}
 80091b4:	bd70      	pop	{r4, r5, r6, pc}
 80091b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Error_Handler();
 80091ba:	f7ff be4f 	b.w	8008e5c <Error_Handler>
 80091be:	bf00      	nop

080091c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI2)
 80091c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091c4:	6802      	ldr	r2, [r0, #0]
 80091c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
{
 80091ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(spiHandle->Instance==SPI2)
 80091ce:	429a      	cmp	r2, r3
{
 80091d0:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d2:	f04f 0400 	mov.w	r4, #0
{
 80091d6:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091d8:	e9cd 4407 	strd	r4, r4, [sp, #28]
 80091dc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80091e0:	940b      	str	r4, [sp, #44]	; 0x2c
  if(spiHandle->Instance==SPI2)
 80091e2:	d008      	beq.n	80091f6 <HAL_SPI_MspInit+0x36>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 80091e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80091e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d07f      	beq.n	80092f0 <HAL_SPI_MspInit+0x130>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80091f0:	b00d      	add	sp, #52	; 0x34
 80091f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80091f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80091fa:	f04f 0902 	mov.w	r9, #2
    GPIO_InitStruct.Pin = RF24_MOSI_Pin|RF24_MISO_Pin;
 80091fe:	2106      	movs	r1, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009200:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009204:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009208:	f04f 0803 	mov.w	r8, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800920c:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800920e:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009214:	f643 4618 	movw	r6, #15384	; 0x3c18
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009218:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800921c:	f2c2 0600 	movt	r6, #8192	; 0x2000
    __HAL_RCC_SPI2_CLK_ENABLE();
 8009220:	641a      	str	r2, [r3, #64]	; 0x40
 8009222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009224:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009228:	9201      	str	r2, [sp, #4]
 800922a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800922c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800922e:	f042 0204 	orr.w	r2, r2, #4
 8009232:	631a      	str	r2, [r3, #48]	; 0x30
 8009234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009236:	f002 0204 	and.w	r2, r2, #4
 800923a:	9202      	str	r2, [sp, #8]
 800923c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800923e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009240:	ea42 0209 	orr.w	r2, r2, r9
 8009244:	631a      	str	r2, [r3, #48]	; 0x30
 8009246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RF24_MOSI_Pin|RF24_MISO_Pin;
 8009248:	9107      	str	r1, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800924a:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800924c:	ea03 0309 	and.w	r3, r3, r9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009250:	f8cd 9020 	str.w	r9, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009254:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009258:	9303      	str	r3, [sp, #12]
 800925a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800925c:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800925e:	f7f8 fb67 	bl	8001930 <HAL_GPIO_Init>
    HAL_GPIO_Init(RF24_SCK_GPIO_Port, &GPIO_InitStruct);
 8009262:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = RF24_SCK_Pin;
 8009266:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RF24_SCK_GPIO_Port, &GPIO_InitStruct);
 800926a:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800926c:	f8cd 9020 	str.w	r9, [sp, #32]
    HAL_GPIO_Init(RF24_SCK_GPIO_Port, &GPIO_InitStruct);
 8009270:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = RF24_SCK_Pin;
 8009274:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009276:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009278:	e9cd 870a 	strd	r8, r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(RF24_SCK_GPIO_Port, &GPIO_InitStruct);
 800927c:	f7f8 fb58 	bl	8001930 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009280:	f246 0358 	movw	r3, #24664	; 0x6058
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009284:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8009288:	4630      	mov	r0, r6
    hdma_spi2_rx.Instance = DMA1_Stream3;
 800928a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800928e:	6074      	str	r4, [r6, #4]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009290:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8009292:	6033      	str	r3, [r6, #0]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009294:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009296:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800929a:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800929e:	e9c6 4407 	strd	r4, r4, [r6, #28]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80092a2:	f7f8 f973 	bl	800158c <HAL_DMA_Init>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	f040 8097 	bne.w	80093da <HAL_SPI_MspInit+0x21a>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80092ac:	f643 543c 	movw	r4, #15676	; 0x3d3c
 80092b0:	f246 0270 	movw	r2, #24688	; 0x6070
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80092b4:	2300      	movs	r3, #0
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80092b6:	2740      	movs	r7, #64	; 0x40
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80092b8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80092bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80092c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 80092c4:	65ae      	str	r6, [r5, #88]	; 0x58
 80092c6:	63b5      	str	r5, [r6, #56]	; 0x38
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80092c8:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80092ca:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80092cc:	6022      	str	r2, [r4, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80092ce:	60a7      	str	r7, [r4, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80092d0:	6121      	str	r1, [r4, #16]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80092d2:	6063      	str	r3, [r4, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80092d4:	60e3      	str	r3, [r4, #12]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80092d6:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80092da:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80092de:	f7f8 f955 	bl	800158c <HAL_DMA_Init>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	d176      	bne.n	80093d4 <HAL_SPI_MspInit+0x214>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80092e6:	656c      	str	r4, [r5, #84]	; 0x54
 80092e8:	63a5      	str	r5, [r4, #56]	; 0x38
}
 80092ea:	b00d      	add	sp, #52	; 0x34
 80092ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80092f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092f4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = IMU_MOSI_Pin;
 80092f6:	2104      	movs	r1, #4
    HAL_GPIO_Init(IMU_MOSI_GPIO_Port, &GPIO_InitStruct);
 80092f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_RCC_SPI3_CLK_ENABLE();
 80092fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009300:	2703      	movs	r7, #3
    HAL_GPIO_Init(IMU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8009302:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_SPI3_CLK_ENABLE();
 8009306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009308:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800930c:	641a      	str	r2, [r3, #64]	; 0x40
 800930e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009310:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8009314:	9204      	str	r2, [sp, #16]
 8009316:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800931a:	4332      	orrs	r2, r6
 800931c:	631a      	str	r2, [r3, #48]	; 0x30
 800931e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009320:	4032      	ands	r2, r6
 8009322:	9205      	str	r2, [sp, #20]
 8009324:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009326:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009328:	430a      	orrs	r2, r1
 800932a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800932c:	2207      	movs	r2, #7
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = IMU_MOSI_Pin;
 8009330:	9107      	str	r1, [sp, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009332:	400b      	ands	r3, r1
    HAL_GPIO_Init(IMU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8009334:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009336:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009338:	9306      	str	r3, [sp, #24]
 800933a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800933c:	920b      	str	r2, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800933e:	970a      	str	r7, [sp, #40]	; 0x28
    HAL_GPIO_Init(IMU_MOSI_GPIO_Port, &GPIO_InitStruct);
 8009340:	f7f8 faf6 	bl	8001930 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009344:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin;
 8009348:	f44f 6240 	mov.w	r2, #3072	; 0xc00
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800934c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800934e:	a907      	add	r1, sp, #28
 8009350:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009354:	9608      	str	r6, [sp, #32]
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8009356:	f643 569c 	movw	r6, #15772	; 0x3d9c
    GPIO_InitStruct.Pin = IMU_SCK_Pin|IMU_MISO_Pin;
 800935a:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800935c:	930b      	str	r3, [sp, #44]	; 0x2c
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800935e:	f2c2 0600 	movt	r6, #8192	; 0x2000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009362:	e9cd 4709 	strd	r4, r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009366:	f7f8 fae3 	bl	8001930 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream2;
 800936a:	f246 0340 	movw	r3, #24640	; 0x6040
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800936e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8009376:	f2c4 0302 	movt	r3, #16386	; 0x4002
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800937a:	4630      	mov	r0, r6
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800937c:	60f4      	str	r4, [r6, #12]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800937e:	61f4      	str	r4, [r6, #28]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009380:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_spi3_rx.Instance = DMA1_Stream2;
 8009382:	6033      	str	r3, [r6, #0]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009384:	6131      	str	r1, [r6, #16]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8009386:	6232      	str	r2, [r6, #32]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009388:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800938c:	e9c6 4405 	strd	r4, r4, [r6, #20]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8009390:	f7f8 f8fc 	bl	800158c <HAL_DMA_Init>
 8009394:	bb20      	cbnz	r0, 80093e0 <HAL_SPI_MspInit+0x220>
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8009396:	f643 44dc 	movw	r4, #15580	; 0x3cdc
 800939a:	f246 03b8 	movw	r3, #24760	; 0x60b8
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800939e:	2040      	movs	r0, #64	; 0x40
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80093a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80093a4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80093a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80093ac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80093b0:	65ae      	str	r6, [r5, #88]	; 0x58
    hdma_spi3_tx.Instance = DMA1_Stream7;
 80093b2:	6023      	str	r3, [r4, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80093b4:	2300      	movs	r3, #0
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80093b6:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80093b8:	60a0      	str	r0, [r4, #8]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80093ba:	4620      	mov	r0, r4
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80093bc:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80093be:	6121      	str	r1, [r4, #16]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80093c0:	6222      	str	r2, [r4, #32]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80093c2:	6063      	str	r3, [r4, #4]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80093c4:	60e3      	str	r3, [r4, #12]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80093c6:	61e3      	str	r3, [r4, #28]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80093c8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80093cc:	f7f8 f8de 	bl	800158c <HAL_DMA_Init>
 80093d0:	2800      	cmp	r0, #0
 80093d2:	d088      	beq.n	80092e6 <HAL_SPI_MspInit+0x126>
      Error_Handler();
 80093d4:	f7ff fd42 	bl	8008e5c <Error_Handler>
 80093d8:	e785      	b.n	80092e6 <HAL_SPI_MspInit+0x126>
      Error_Handler();
 80093da:	f7ff fd3f 	bl	8008e5c <Error_Handler>
 80093de:	e765      	b.n	80092ac <HAL_SPI_MspInit+0xec>
      Error_Handler();
 80093e0:	f7ff fd3c 	bl	8008e5c <Error_Handler>
 80093e4:	e7d7      	b.n	8009396 <HAL_SPI_MspInit+0x1d6>
 80093e6:	bf00      	nop

080093e8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80093e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
{
 80093ec:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 80093ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40
 80093fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093fc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8009400:	9200      	str	r2, [sp, #0]
 8009402:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800940a:	645a      	str	r2, [r3, #68]	; 0x44
 800940c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800940e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009416:	b002      	add	sp, #8
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop

0800941c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop

08009420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009420:	e7fe      	b.n	8009420 <HardFault_Handler>
 8009422:	bf00      	nop

08009424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009424:	e7fe      	b.n	8009424 <MemManage_Handler>
 8009426:	bf00      	nop

08009428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009428:	e7fe      	b.n	8009428 <BusFault_Handler>
 800942a:	bf00      	nop

0800942c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800942c:	e7fe      	b.n	800942c <UsageFault_Handler>
 800942e:	bf00      	nop

08009430 <SVC_Handler>:
 8009430:	4770      	bx	lr
 8009432:	bf00      	nop

08009434 <DebugMon_Handler>:
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop

08009438 <PendSV_Handler>:
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop

0800943c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800943c:	f7f7 bd92 	b.w	8000f64 <HAL_IncTick>

08009440 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8009440:	f643 10c4 	movw	r0, #14788	; 0x39c4
 8009444:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009448:	f7f8 b998 	b.w	800177c <HAL_DMA_IRQHandler>

0800944c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800944c:	f643 509c 	movw	r0, #15772	; 0x3d9c
 8009450:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009454:	f7f8 b992 	b.w	800177c <HAL_DMA_IRQHandler>

08009458 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8009458:	f643 4018 	movw	r0, #15384	; 0x3c18
 800945c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009460:	f7f8 b98c 	b.w	800177c <HAL_DMA_IRQHandler>

08009464 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8009464:	f643 503c 	movw	r0, #15676	; 0x3d3c
 8009468:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800946c:	f7f8 b986 	b.w	800177c <HAL_DMA_IRQHandler>

08009470 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009470:	f643 60fc 	movw	r0, #16124	; 0x3efc
 8009474:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009478:	f7f8 b980 	b.w	800177c <HAL_DMA_IRQHandler>

0800947c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800947c:	f243 40b0 	movw	r0, #13488	; 0x34b0
 8009480:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009484:	f7f8 b97a 	b.w	800177c <HAL_DMA_IRQHandler>

08009488 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009488:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800948a:	2080      	movs	r0, #128	; 0x80
 800948c:	f7f8 fb84 	bl	8001b98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8009490:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8009498:	f7f8 bb7e 	b.w	8001b98 <HAL_GPIO_EXTI_IRQHandler>

0800949c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void){
 800949c:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN TIM4_IRQn 0 */
	uint8_t tmp[1];
	if (icm.init == true){
 800949e:	f243 3490 	movw	r4, #13200	; 0x3390
void TIM4_IRQHandler(void){
 80094a2:	b083      	sub	sp, #12
	if (icm.init == true){
 80094a4:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80094a8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80094ac:	b313      	cbz	r3, 80094f4 <TIM4_IRQHandler+0x58>
		if(icm.ac == 0){
 80094ae:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
			tmp[0] = GYRO_XOUT_H|0x80;
		}else{
			tmp[0] = ACCEL_XOUT_H|0x80;
		}
		// IMU SPI NSS LOW
		HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_RESET);
 80094b2:	2000      	movs	r0, #0
 80094b4:	ad02      	add	r5, sp, #8
 80094b6:	2110      	movs	r1, #16
			tmp[0] = ACCEL_XOUT_H|0x80;
 80094b8:	4283      	cmp	r3, r0
		HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_RESET);
 80094ba:	4602      	mov	r2, r0
 80094bc:	f2c4 0002 	movt	r0, #16386	; 0x4002
			tmp[0] = ACCEL_XOUT_H|0x80;
 80094c0:	bf0c      	ite	eq
 80094c2:	23c3      	moveq	r3, #195	; 0xc3
 80094c4:	23bb      	movne	r3, #187	; 0xbb
 80094c6:	f805 3d04 	strb.w	r3, [r5, #-4]!
		HAL_GPIO_WritePin(IMU_NSS_GPIO_Port, IMU_NSS_Pin, GPIO_PIN_RESET);
 80094ca:	f7f8 fb57 	bl	8001b7c <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi3,(uint8_t *)tmp, 1, HAL_MAX_DELAY);
 80094ce:	f643 4078 	movw	r0, #15480	; 0x3c78
 80094d2:	4629      	mov	r1, r5
 80094d4:	2201      	movs	r2, #1
 80094d6:	f04f 33ff 	mov.w	r3, #4294967295
 80094da:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80094de:	f7fa f8f7 	bl	80036d0 <HAL_SPI_Transmit>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t *)icm.buf, 6);
 80094e2:	f643 4078 	movw	r0, #15480	; 0x3c78
 80094e6:	f104 0118 	add.w	r1, r4, #24
 80094ea:	2206      	movs	r2, #6
 80094ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80094f0:	f7fa fe7a 	bl	80041e8 <HAL_SPI_Receive_DMA>
	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80094f4:	f643 50fc 	movw	r0, #15868	; 0x3dfc
 80094f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80094fc:	f7fb fbf6 	bl	8004cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009500:	b003      	add	sp, #12
 8009502:	bd30      	pop	{r4, r5, pc}

08009504 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009504:	f244 009c 	movw	r0, #16540	; 0x409c
 8009508:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800950c:	f7fb bce2 	b.w	8004ed4 <HAL_UART_IRQHandler>

08009510 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8009510:	f643 40dc 	movw	r0, #15580	; 0x3cdc
 8009514:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009518:	f7f8 b930 	b.w	800177c <HAL_DMA_IRQHandler>

0800951c <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800951c:	f643 2070 	movw	r0, #14960	; 0x3a70
 8009520:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009524:	f7f9 bcac 	b.w	8002e80 <HAL_SD_IRQHandler>

08009528 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009528:	f243 403c 	movw	r0, #13372	; 0x343c
 800952c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009530:	f7f8 b924 	b.w	800177c <HAL_DMA_IRQHandler>

08009534 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009534:	f643 70bc 	movw	r0, #16316	; 0x3fbc
 8009538:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800953c:	f7f8 b91e 	b.w	800177c <HAL_DMA_IRQHandler>

08009540 <DMA2_Stream3_IRQHandler>:
void DMA2_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8009540:	f643 20f4 	movw	r0, #15092	; 0x3af4
 8009544:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009548:	f7f8 b918 	b.w	800177c <HAL_DMA_IRQHandler>

0800954c <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 800954c:	f643 3054 	movw	r0, #15188	; 0x3b54
 8009550:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009554:	f7f8 b912 	b.w	800177c <HAL_DMA_IRQHandler>

08009558 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8009558:	f643 705c 	movw	r0, #16220	; 0x3f5c
 800955c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009560:	f7f8 b90c 	b.w	800177c <HAL_DMA_IRQHandler>

08009564 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009564:	f44f 426d 	mov.w	r2, #60672	; 0xed00
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009568:	f44f 5360 	mov.w	r3, #14336	; 0x3800

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800956c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009570:	f2ce 0200 	movt	r2, #57344	; 0xe000
  RCC->CR |= (uint32_t)0x00000001;
 8009574:	f2c4 0302 	movt	r3, #16386	; 0x4002
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009578:	f6cf 61f6 	movt	r1, #65270	; 0xfef6
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800957c:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8009580:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
{
 8009584:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009586:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
  RCC->CFGR = 0x00000000;
 800958a:	2400      	movs	r4, #0
  RCC->CR |= (uint32_t)0x00000001;
 800958c:	6818      	ldr	r0, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800958e:	f243 0510 	movw	r5, #12304	; 0x3010

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009592:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
  RCC->CR |= (uint32_t)0x00000001;
 8009596:	f040 0001 	orr.w	r0, r0, #1
  RCC->PLLCFGR = 0x24003010;
 800959a:	f2c2 4500 	movt	r5, #9216	; 0x2400
  RCC->CR |= (uint32_t)0x00000001;
 800959e:	6018      	str	r0, [r3, #0]
  RCC->CFGR = 0x00000000;
 80095a0:	609c      	str	r4, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80095a2:	6818      	ldr	r0, [r3, #0]
 80095a4:	4001      	ands	r1, r0
 80095a6:	6019      	str	r1, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80095a8:	605d      	str	r5, [r3, #4]
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80095aa:	6819      	ldr	r1, [r3, #0]
 80095ac:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80095b0:	6019      	str	r1, [r3, #0]
  RCC->CIR = 0x00000000;
 80095b2:	60dc      	str	r4, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80095b4:	6096      	str	r6, [r2, #8]
#endif
}
 80095b6:	bc70      	pop	{r4, r5, r6}
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop

080095bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80095bc:	b570      	push	{r4, r5, r6, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  htim2.Instance = TIM2;
 80095be:	f643 64bc 	movw	r4, #16060	; 0x3ebc
 80095c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 12;
 80095c6:	210c      	movs	r1, #12
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095c8:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 80095ca:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
 80095ce:	b096      	sub	sp, #88	; 0x58
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4096;
 80095d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095d4:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095d6:	61a3      	str	r3, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095d8:	9306      	str	r3, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095da:	9303      	str	r3, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80095dc:	930f      	str	r3, [sp, #60]	; 0x3c
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095de:	9309      	str	r3, [sp, #36]	; 0x24
  htim2.Init.Prescaler = 12;
 80095e0:	e9c4 0100 	strd	r0, r1, [r4]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80095e4:	4620      	mov	r0, r4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80095e6:	e9c4 3202 	strd	r3, r2, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095ee:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80095f2:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80095f6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 80095fa:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80095fe:	f7fa ff75 	bl	80044ec <HAL_TIM_Base_Init>
 8009602:	2800      	cmp	r0, #0
 8009604:	d16f      	bne.n	80096e6 <MX_TIM2_Init+0x12a>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009606:	f643 60bc 	movw	r0, #16060	; 0x3ebc
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800960a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800960e:	a906      	add	r1, sp, #24
 8009610:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009614:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009616:	f7fb fab7 	bl	8004b88 <HAL_TIM_ConfigClockSource>
 800961a:	2800      	cmp	r0, #0
 800961c:	d160      	bne.n	80096e0 <MX_TIM2_Init+0x124>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800961e:	f643 60bc 	movw	r0, #16060	; 0x3ebc
 8009622:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009626:	f7fb f837 	bl	8004698 <HAL_TIM_PWM_Init>
 800962a:	2800      	cmp	r0, #0
 800962c:	d155      	bne.n	80096da <MX_TIM2_Init+0x11e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800962e:	f643 60bc 	movw	r0, #16060	; 0x3ebc
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009632:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009634:	a903      	add	r1, sp, #12
 8009636:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800963a:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800963c:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800963e:	f7fb fc0d 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 8009642:	2800      	cmp	r0, #0
 8009644:	d146      	bne.n	80096d4 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
 8009646:	2300      	movs	r3, #0
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009648:	f643 60bc 	movw	r0, #16060	; 0x3ebc
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800964c:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800964e:	a90f      	add	r1, sp, #60	; 0x3c
 8009650:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009654:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009656:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009658:	950f      	str	r5, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800965a:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800965e:	f7fb f8dd 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 8009662:	bba0      	cbnz	r0, 80096ce <MX_TIM2_Init+0x112>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009664:	f643 60bc 	movw	r0, #16060	; 0x3ebc
 8009668:	2204      	movs	r2, #4
 800966a:	a90f      	add	r1, sp, #60	; 0x3c
 800966c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009670:	f7fb f8d4 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 8009674:	bb40      	cbnz	r0, 80096c8 <MX_TIM2_Init+0x10c>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009676:	f643 60bc 	movw	r0, #16060	; 0x3ebc
 800967a:	2208      	movs	r2, #8
 800967c:	a90f      	add	r1, sp, #60	; 0x3c
 800967e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009682:	f7fb f8cb 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 8009686:	b9e0      	cbnz	r0, 80096c2 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009688:	f643 60bc 	movw	r0, #16060	; 0x3ebc
 800968c:	a90f      	add	r1, sp, #60	; 0x3c
 800968e:	220c      	movs	r2, #12
 8009690:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009694:	f7fb f8c2 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 8009698:	b108      	cbz	r0, 800969e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800969a:	f7ff fbdf 	bl	8008e5c <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM2)
 800969e:	6823      	ldr	r3, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096a0:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM2)
 80096a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096a6:	940e      	str	r4, [sp, #56]	; 0x38
 80096a8:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80096ac:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  if(timHandle->Instance==TIM2)
 80096b0:	d035      	beq.n	800971e <MX_TIM2_Init+0x162>

  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM3)
 80096b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096b6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d016      	beq.n	80096ec <MX_TIM2_Init+0x130>
}
 80096be:	b016      	add	sp, #88	; 0x58
 80096c0:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 80096c2:	f7ff fbcb 	bl	8008e5c <Error_Handler>
 80096c6:	e7df      	b.n	8009688 <MX_TIM2_Init+0xcc>
    Error_Handler();
 80096c8:	f7ff fbc8 	bl	8008e5c <Error_Handler>
 80096cc:	e7d3      	b.n	8009676 <MX_TIM2_Init+0xba>
    Error_Handler();
 80096ce:	f7ff fbc5 	bl	8008e5c <Error_Handler>
 80096d2:	e7c7      	b.n	8009664 <MX_TIM2_Init+0xa8>
    Error_Handler();
 80096d4:	f7ff fbc2 	bl	8008e5c <Error_Handler>
 80096d8:	e7b5      	b.n	8009646 <MX_TIM2_Init+0x8a>
    Error_Handler();
 80096da:	f7ff fbbf 	bl	8008e5c <Error_Handler>
 80096de:	e7a6      	b.n	800962e <MX_TIM2_Init+0x72>
    Error_Handler();
 80096e0:	f7ff fbbc 	bl	8008e5c <Error_Handler>
 80096e4:	e79b      	b.n	800961e <MX_TIM2_Init+0x62>
    Error_Handler();
 80096e6:	f7ff fbb9 	bl	8008e5c <Error_Handler>
 80096ea:	e78c      	b.n	8009606 <MX_TIM2_Init+0x4a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    PB0     ------> TIM3_CH3
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GIMBAL_X_Pin|GIMBAL_Y_Pin|GIMBAL_Z_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096f0:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GIMBAL_X_Pin|GIMBAL_Y_Pin|GIMBAL_Z_Pin;
 80096f6:	2531      	movs	r5, #49	; 0x31
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096fc:	a90a      	add	r1, sp, #40	; 0x28
 80096fe:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009704:	4322      	orrs	r2, r4
 8009706:	631a      	str	r2, [r3, #48]	; 0x30
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GIMBAL_X_Pin|GIMBAL_Y_Pin|GIMBAL_Z_Pin;
 800970a:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800970c:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800970e:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009710:	940e      	str	r4, [sp, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009712:	9302      	str	r3, [sp, #8]
 8009714:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009716:	f7f8 f90b 	bl	8001930 <HAL_GPIO_Init>
}
 800971a:	b016      	add	sp, #88	; 0x58
 800971c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800971e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009722:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009724:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009726:	4620      	mov	r0, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009728:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 800972c:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800972e:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009734:	432a      	orrs	r2, r5
 8009736:	631a      	str	r2, [r3, #48]	; 0x30
 8009738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800973a:	402a      	ands	r2, r5
 800973c:	9200      	str	r2, [sp, #0]
 800973e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009742:	4332      	orrs	r2, r6
 8009744:	631a      	str	r2, [r3, #48]	; 0x30
 8009746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 8009748:	910a      	str	r1, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800974a:	a90a      	add	r1, sp, #40	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800974c:	4033      	ands	r3, r6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800974e:	960b      	str	r6, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009750:	950e      	str	r5, [sp, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009752:	9301      	str	r3, [sp, #4]
 8009754:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009756:	f7f8 f8eb 	bl	8001930 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800975a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_4_Pin;
 800975e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009762:	a90a      	add	r1, sp, #40	; 0x28
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009764:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009766:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800976a:	950e      	str	r5, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_4_Pin;
 800976c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800976e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009772:	f7f8 f8dd 	bl	8001930 <HAL_GPIO_Init>
}
 8009776:	b016      	add	sp, #88	; 0x58
 8009778:	bd70      	pop	{r4, r5, r6, pc}
 800977a:	bf00      	nop

0800977c <MX_TIM3_Init>:
{
 800977c:	b570      	push	{r4, r5, r6, lr}
  htim3.Instance = TIM3;
 800977e:	f643 643c 	movw	r4, #15932	; 0x3e3c
 8009782:	f44f 6280 	mov.w	r2, #1024	; 0x400
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009786:	2300      	movs	r3, #0
{
 8009788:	b092      	sub	sp, #72	; 0x48
  htim3.Instance = TIM3;
 800978a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800978e:	f2c4 0200 	movt	r2, #16384	; 0x4000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009792:	9303      	str	r3, [sp, #12]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009794:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009796:	6123      	str	r3, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009798:	61a3      	str	r3, [r4, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800979a:	930b      	str	r3, [sp, #44]	; 0x2c
  htim3.Init.Prescaler = 0;
 800979c:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 0;
 80097a0:	e9c4 3302 	strd	r3, r3, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80097a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80097a8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80097ac:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80097b0:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80097b4:	f7fa ff70 	bl	8004698 <HAL_TIM_PWM_Init>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	d149      	bne.n	8009850 <MX_TIM3_Init+0xd4>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80097bc:	f643 603c 	movw	r0, #15932	; 0x3e3c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097c0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80097c2:	a903      	add	r1, sp, #12
 80097c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097c8:	9303      	str	r3, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80097ca:	9305      	str	r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80097cc:	f7fb fb46 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d13a      	bne.n	800984a <MX_TIM3_Init+0xce>
  sConfigOC.Pulse = 0;
 80097d4:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80097d6:	f643 603c 	movw	r0, #15932	; 0x3e3c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80097da:	2560      	movs	r5, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80097dc:	a90b      	add	r1, sp, #44	; 0x2c
 80097de:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80097e2:	461a      	mov	r2, r3
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80097e4:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80097e6:	950b      	str	r5, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80097e8:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80097ec:	f7fb f816 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 80097f0:	bb40      	cbnz	r0, 8009844 <MX_TIM3_Init+0xc8>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80097f2:	f643 603c 	movw	r0, #15932	; 0x3e3c
 80097f6:	2204      	movs	r2, #4
 80097f8:	a90b      	add	r1, sp, #44	; 0x2c
 80097fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80097fe:	f7fb f80d 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 8009802:	b9e0      	cbnz	r0, 800983e <MX_TIM3_Init+0xc2>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009804:	f643 603c 	movw	r0, #15932	; 0x3e3c
 8009808:	a90b      	add	r1, sp, #44	; 0x2c
 800980a:	2208      	movs	r2, #8
 800980c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8009810:	f7fb f804 	bl	800481c <HAL_TIM_PWM_ConfigChannel>
 8009814:	b108      	cbz	r0, 800981a <MX_TIM3_Init+0x9e>
    Error_Handler();
 8009816:	f7ff fb21 	bl	8008e5c <Error_Handler>
  if(timHandle->Instance==TIM2)
 800981a:	6823      	ldr	r3, [r4, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800981c:	2400      	movs	r4, #0
  if(timHandle->Instance==TIM2)
 800981e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009822:	940a      	str	r4, [sp, #40]	; 0x28
 8009824:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8009828:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if(timHandle->Instance==TIM2)
 800982c:	d02c      	beq.n	8009888 <MX_TIM3_Init+0x10c>
  else if(timHandle->Instance==TIM3)
 800982e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009832:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009836:	4293      	cmp	r3, r2
 8009838:	d00d      	beq.n	8009856 <MX_TIM3_Init+0xda>
}
 800983a:	b012      	add	sp, #72	; 0x48
 800983c:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 800983e:	f7ff fb0d 	bl	8008e5c <Error_Handler>
 8009842:	e7df      	b.n	8009804 <MX_TIM3_Init+0x88>
    Error_Handler();
 8009844:	f7ff fb0a 	bl	8008e5c <Error_Handler>
 8009848:	e7d3      	b.n	80097f2 <MX_TIM3_Init+0x76>
    Error_Handler();
 800984a:	f7ff fb07 	bl	8008e5c <Error_Handler>
 800984e:	e7c1      	b.n	80097d4 <MX_TIM3_Init+0x58>
    Error_Handler();
 8009850:	f7ff fb04 	bl	8008e5c <Error_Handler>
 8009854:	e7b2      	b.n	80097bc <MX_TIM3_Init+0x40>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009856:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800985a:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800985c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GIMBAL_X_Pin|GIMBAL_Y_Pin|GIMBAL_Z_Pin;
 8009860:	2531      	movs	r5, #49	; 0x31
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009862:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009866:	a906      	add	r1, sp, #24
 8009868:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800986c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800986e:	4322      	orrs	r2, r4
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
 8009872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GIMBAL_X_Pin|GIMBAL_Y_Pin|GIMBAL_Z_Pin;
 8009874:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009876:	4023      	ands	r3, r4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009878:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800987a:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800987c:	9302      	str	r3, [sp, #8]
 800987e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009880:	f7f8 f856 	bl	8001930 <HAL_GPIO_Init>
}
 8009884:	b012      	add	sp, #72	; 0x48
 8009886:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009888:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800988c:	2501      	movs	r5, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800988e:	2602      	movs	r6, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009890:	4620      	mov	r0, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009892:	f2c4 0302 	movt	r3, #16386	; 0x4002
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 8009896:	2103      	movs	r1, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009898:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800989c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800989e:	432a      	orrs	r2, r5
 80098a0:	631a      	str	r2, [r3, #48]	; 0x30
 80098a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098a4:	402a      	ands	r2, r5
 80098a6:	9200      	str	r2, [sp, #0]
 80098a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ac:	4332      	orrs	r2, r6
 80098ae:	631a      	str	r2, [r3, #48]	; 0x30
 80098b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = MOTOR_1_Pin|MOTOR_2_Pin;
 80098b2:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098b4:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098b6:	4033      	ands	r3, r6
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098b8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80098ba:	950a      	str	r5, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098bc:	9301      	str	r3, [sp, #4]
 80098be:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098c0:	f7f8 f836 	bl	8001930 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_4_Pin;
 80098c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098cc:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098ce:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098d0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80098d4:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = MOTOR_3_Pin|MOTOR_4_Pin;
 80098d6:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098d8:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098dc:	f7f8 f828 	bl	8001930 <HAL_GPIO_Init>
}
 80098e0:	b012      	add	sp, #72	; 0x48
 80098e2:	bd70      	pop	{r4, r5, r6, pc}

080098e4 <MX_TIM4_Init>:
  htim4.Instance = TIM4;
 80098e4:	f643 52fc 	movw	r2, #15868	; 0x3dfc
 80098e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  htim4.Init.Prescaler = 7;
 80098ec:	2007      	movs	r0, #7
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098ee:	2300      	movs	r3, #0
  htim4.Instance = TIM4;
 80098f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80098f4:	f2c4 0100 	movt	r1, #16384	; 0x4000
{
 80098f8:	b510      	push	{r4, lr}
  htim4.Init.Period = 53999;
 80098fa:	f24d 24ef 	movw	r4, #53999	; 0xd2ef
{
 80098fe:	b088      	sub	sp, #32
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009900:	6113      	str	r3, [r2, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009902:	6193      	str	r3, [r2, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009904:	9304      	str	r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009906:	9301      	str	r3, [sp, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009908:	9307      	str	r3, [sp, #28]
  htim4.Init.Prescaler = 7;
 800990a:	e9c2 1000 	strd	r1, r0, [r2]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800990e:	4610      	mov	r0, r2
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009910:	e9c2 3402 	strd	r3, r4, [r2, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009914:	e9cd 3305 	strd	r3, r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009918:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800991c:	f7fa fde6 	bl	80044ec <HAL_TIM_Base_Init>
 8009920:	b9e0      	cbnz	r0, 800995c <MX_TIM4_Init+0x78>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009922:	f643 50fc 	movw	r0, #15868	; 0x3dfc
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800992a:	a904      	add	r1, sp, #16
 800992c:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009930:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009932:	f7fb f929 	bl	8004b88 <HAL_TIM_ConfigClockSource>
 8009936:	b970      	cbnz	r0, 8009956 <MX_TIM4_Init+0x72>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009938:	f643 50fc 	movw	r0, #15868	; 0x3dfc
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800993c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800993e:	a901      	add	r1, sp, #4
 8009940:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009944:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009946:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009948:	f7fb fa88 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 800994c:	b108      	cbz	r0, 8009952 <MX_TIM4_Init+0x6e>
    Error_Handler();
 800994e:	f7ff fa85 	bl	8008e5c <Error_Handler>
}
 8009952:	b008      	add	sp, #32
 8009954:	bd10      	pop	{r4, pc}
    Error_Handler();
 8009956:	f7ff fa81 	bl	8008e5c <Error_Handler>
 800995a:	e7ed      	b.n	8009938 <MX_TIM4_Init+0x54>
    Error_Handler();
 800995c:	f7ff fa7e 	bl	8008e5c <Error_Handler>
 8009960:	e7df      	b.n	8009922 <MX_TIM4_Init+0x3e>
 8009962:	bf00      	nop

08009964 <MX_TIM6_Init>:
  htim6.Instance = TIM6;
 8009964:	f643 637c 	movw	r3, #15996	; 0x3e7c
 8009968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800996c:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
 800996e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009972:	f2c4 0100 	movt	r1, #16384	; 0x4000
{
 8009976:	b510      	push	{r4, lr}
  htim6.Init.Period = 10;
 8009978:	240a      	movs	r4, #10
{
 800997a:	b084      	sub	sp, #16
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800997c:	4618      	mov	r0, r3
  htim6.Instance = TIM6;
 800997e:	6019      	str	r1, [r3, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009980:	9201      	str	r2, [sp, #4]
  htim6.Init.Period = 10;
 8009982:	60dc      	str	r4, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009984:	619a      	str	r2, [r3, #24]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009986:	e9c3 2201 	strd	r2, r2, [r3, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800998a:	e9cd 2202 	strd	r2, r2, [sp, #8]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800998e:	f7fa fdad 	bl	80044ec <HAL_TIM_Base_Init>
 8009992:	b978      	cbnz	r0, 80099b4 <MX_TIM6_Init+0x50>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8009994:	f643 607c 	movw	r0, #15996	; 0x3e7c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009998:	2220      	movs	r2, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800999a:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800999c:	a901      	add	r1, sp, #4
 800999e:	f2c2 0000 	movt	r0, #8192	; 0x2000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80099a2:	9201      	str	r2, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80099a4:	9303      	str	r3, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80099a6:	f7fb fa59 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 80099aa:	b108      	cbz	r0, 80099b0 <MX_TIM6_Init+0x4c>
    Error_Handler();
 80099ac:	f7ff fa56 	bl	8008e5c <Error_Handler>
}
 80099b0:	b004      	add	sp, #16
 80099b2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80099b4:	f7ff fa52 	bl	8008e5c <Error_Handler>
 80099b8:	e7ec      	b.n	8009994 <MX_TIM6_Init+0x30>
 80099ba:	bf00      	nop

080099bc <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM2)
 80099bc:	6803      	ldr	r3, [r0, #0]
 80099be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80099c2:	b510      	push	{r4, lr}
 80099c4:	b084      	sub	sp, #16
  if(tim_baseHandle->Instance==TIM2)
 80099c6:	d01c      	beq.n	8009a02 <HAL_TIM_Base_MspInit+0x46>
  else if(tim_baseHandle->Instance==TIM4)
 80099c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099cc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d025      	beq.n	8009a20 <HAL_TIM_Base_MspInit+0x64>
  else if(tim_baseHandle->Instance==TIM6)
 80099d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80099d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80099dc:	4293      	cmp	r3, r2
 80099de:	d001      	beq.n	80099e4 <HAL_TIM_Base_MspInit+0x28>
}
 80099e0:	b004      	add	sp, #16
 80099e2:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 80099e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099ee:	f042 0210 	orr.w	r2, r2, #16
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40
 80099f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099f6:	f003 0310 	and.w	r3, r3, #16
 80099fa:	9303      	str	r3, [sp, #12]
 80099fc:	9b03      	ldr	r3, [sp, #12]
}
 80099fe:	b004      	add	sp, #16
 8009a00:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009a02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a0c:	f042 0201 	orr.w	r2, r2, #1
 8009a10:	641a      	str	r2, [r3, #64]	; 0x40
 8009a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a14:	f003 0301 	and.w	r3, r3, #1
 8009a18:	9301      	str	r3, [sp, #4]
 8009a1a:	9b01      	ldr	r3, [sp, #4]
}
 8009a1c:	b004      	add	sp, #16
 8009a1e:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009a20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009a24:	2200      	movs	r2, #0
 8009a26:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009a28:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009a2c:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009a2e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8009a30:	f044 0404 	orr.w	r4, r4, #4
 8009a34:	641c      	str	r4, [r3, #64]	; 0x40
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	f003 0304 	and.w	r3, r3, #4
 8009a3c:	9302      	str	r3, [sp, #8]
 8009a3e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8009a40:	f7f7 fc44 	bl	80012cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009a44:	201e      	movs	r0, #30
}
 8009a46:	b004      	add	sp, #16
 8009a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009a4c:	f7f7 bc7a 	b.w	8001344 <HAL_NVIC_EnableIRQ>

08009a50 <HAL_TIM_PWM_MspInit>:
  if(tim_pwmHandle->Instance==TIM3)
 8009a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a54:	6802      	ldr	r2, [r0, #0]
 8009a56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d000      	beq.n	8009a60 <HAL_TIM_PWM_MspInit+0x10>
 8009a5e:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009a60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
{
 8009a64:	b082      	sub	sp, #8
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009a66:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009a6c:	f042 0202 	orr.w	r2, r2, #2
 8009a70:	641a      	str	r2, [r3, #64]	; 0x40
 8009a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a74:	f003 0302 	and.w	r3, r3, #2
 8009a78:	9301      	str	r3, [sp, #4]
 8009a7a:	9b01      	ldr	r3, [sp, #4]
}
 8009a7c:	b002      	add	sp, #8
 8009a7e:	4770      	bx	lr

08009a80 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009a80:	b538      	push	{r3, r4, r5, lr}

  huart1.Instance = USART1;
 8009a82:	f244 031c 	movw	r3, #16412	; 0x401c
 8009a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009a8a:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 115200;
 8009a8c:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Instance = USART1;
 8009a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009a94:	240c      	movs	r4, #12
  huart1.Instance = USART1;
 8009a96:	f2c4 0101 	movt	r1, #16385	; 0x4001
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009a9a:	4618      	mov	r0, r3
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009a9c:	615c      	str	r4, [r3, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009a9e:	611a      	str	r2, [r3, #16]
  huart1.Init.BaudRate = 115200;
 8009aa0:	e9c3 1500 	strd	r1, r5, [r3]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009aa4:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009aa8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009aac:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ab0:	f7fb fb14 	bl	80050dc <HAL_UART_Init>
 8009ab4:	b900      	cbnz	r0, 8009ab8 <MX_USART1_UART_Init+0x38>
  {
    Error_Handler();
  }

}
 8009ab6:	bd38      	pop	{r3, r4, r5, pc}
 8009ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8009abc:	f7ff b9ce 	b.w	8008e5c <Error_Handler>

08009ac0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009ac0:	b538      	push	{r3, r4, r5, lr}

  huart2.Instance = USART2;
 8009ac2:	f244 039c 	movw	r3, #16540	; 0x409c
 8009ac6:	f44f 4188 	mov.w	r1, #17408	; 0x4400
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009aca:	2200      	movs	r2, #0
  huart2.Init.BaudRate = 115200;
 8009acc:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Instance = USART2;
 8009ad0:	f2c2 0300 	movt	r3, #8192	; 0x2000
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009ad4:	240c      	movs	r4, #12
  huart2.Instance = USART2;
 8009ad6:	f2c4 0100 	movt	r1, #16384	; 0x4000
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009ada:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009adc:	615c      	str	r4, [r3, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009ade:	611a      	str	r2, [r3, #16]
  huart2.Init.BaudRate = 115200;
 8009ae0:	e9c3 1500 	strd	r1, r5, [r3]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009ae4:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ae8:	e9c3 2206 	strd	r2, r2, [r3, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009aec:	e9c3 2208 	strd	r2, r2, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009af0:	f7fb faf4 	bl	80050dc <HAL_UART_Init>
 8009af4:	b900      	cbnz	r0, 8009af8 <MX_USART2_UART_Init+0x38>
  {
    Error_Handler();
  }

}
 8009af6:	bd38      	pop	{r3, r4, r5, pc}
 8009af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8009afc:	f7ff b9ae 	b.w	8008e5c <Error_Handler>

08009b00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8009b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b04:	6802      	ldr	r2, [r0, #0]
 8009b06:	f2c4 0301 	movt	r3, #16385	; 0x4001
{
 8009b0a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(uartHandle->Instance==USART1)
 8009b0c:	429a      	cmp	r2, r3
{
 8009b0e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b10:	f04f 0400 	mov.w	r4, #0
{
 8009b14:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b16:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8009b1a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8009b1e:	9409      	str	r4, [sp, #36]	; 0x24
  if(uartHandle->Instance==USART1)
 8009b20:	d007      	beq.n	8009b32 <HAL_UART_MspInit+0x32>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8009b22:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8009b26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d065      	beq.n	8009bfa <HAL_UART_MspInit+0xfa>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009b2e:	b00b      	add	sp, #44	; 0x2c
 8009b30:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8009b32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
 8009b36:	f44f 66c0 	mov.w	r6, #1536	; 0x600
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b3a:	4620      	mov	r0, r4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b3c:	2703      	movs	r7, #3
    __HAL_RCC_USART1_CLK_ENABLE();
 8009b3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b42:	a905      	add	r1, sp, #20
 8009b44:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_USART1_CLK_ENABLE();
 8009b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b4a:	f042 0210 	orr.w	r2, r2, #16
 8009b4e:	645a      	str	r2, [r3, #68]	; 0x44
 8009b50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b52:	f002 0210 	and.w	r2, r2, #16
 8009b56:	9201      	str	r2, [sp, #4]
 8009b58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b5c:	f042 0201 	orr.w	r2, r2, #1
 8009b60:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b62:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b66:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009b68:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b6a:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = FTDI_TX_Pin|FTDI_RX_Pin;
 8009b6e:	9605      	str	r6, [sp, #20]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009b70:	f643 76bc 	movw	r6, #16316	; 0x3fbc
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009b74:	9209      	str	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b76:	9302      	str	r3, [sp, #8]
 8009b78:	9b02      	ldr	r3, [sp, #8]
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009b7a:	f2c2 0600 	movt	r6, #8192	; 0x2000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b7e:	9708      	str	r7, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b80:	f7f7 fed6 	bl	8001930 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009b84:	f246 4340 	movw	r3, #25664	; 0x6440
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009b88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009b90:	4630      	mov	r0, r6
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009b92:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b96:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b98:	60f4      	str	r4, [r6, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b9a:	6174      	str	r4, [r6, #20]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009b9c:	6132      	str	r2, [r6, #16]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8009b9e:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009ba2:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009ba6:	e9c6 3100 	strd	r3, r1, [r6]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009baa:	f7f7 fcef 	bl	800158c <HAL_DMA_Init>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d16f      	bne.n	8009c92 <HAL_UART_MspInit+0x192>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009bb2:	f643 745c 	movw	r4, #16220	; 0x3f5c
 8009bb6:	f246 43b8 	movw	r3, #25784	; 0x64b8
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009bba:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009bbe:	2140      	movs	r1, #64	; 0x40
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009bc0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8009bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009bc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009bcc:	66ee      	str	r6, [r5, #108]	; 0x6c
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009bce:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bd0:	2300      	movs	r3, #0
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009bd2:	6060      	str	r0, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009bd4:	4620      	mov	r0, r4
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009bd6:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009bd8:	60a1      	str	r1, [r4, #8]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009bda:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bdc:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009be0:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009be4:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009be8:	f7f7 fcd0 	bl	800158c <HAL_DMA_Init>
 8009bec:	b108      	cbz	r0, 8009bf2 <HAL_UART_MspInit+0xf2>
      Error_Handler();
 8009bee:	f7ff f935 	bl	8008e5c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009bf2:	66ac      	str	r4, [r5, #104]	; 0x68
 8009bf4:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8009bf6:	b00b      	add	sp, #44	; 0x2c
 8009bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8009bfa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8009bfe:	260c      	movs	r6, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c00:	2000      	movs	r0, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c02:	2703      	movs	r7, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8009c04:	f2c4 0302 	movt	r3, #16386	; 0x4002
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c08:	a905      	add	r1, sp, #20
 8009c0a:	f2c4 0002 	movt	r0, #16386	; 0x4002
    __HAL_RCC_USART2_CLK_ENABLE();
 8009c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c10:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009c14:	641a      	str	r2, [r3, #64]	; 0x40
 8009c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c18:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8009c1c:	9203      	str	r2, [sp, #12]
 8009c1e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c22:	f042 0201 	orr.w	r2, r2, #1
 8009c26:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c28:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c2c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009c2e:	2207      	movs	r2, #7
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c30:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 8009c34:	9605      	str	r6, [sp, #20]
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009c36:	f643 66fc 	movw	r6, #16124	; 0x3efc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c3a:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c3c:	9304      	str	r3, [sp, #16]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009c3e:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c42:	9b04      	ldr	r3, [sp, #16]
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009c44:	f2c2 0600 	movt	r6, #8192	; 0x2000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009c48:	9209      	str	r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c4a:	f7f7 fe71 	bl	8001930 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009c4e:	f246 0388 	movw	r3, #24712	; 0x6088
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009c52:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009c56:	f44f 7280 	mov.w	r2, #256	; 0x100
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009c5a:	4630      	mov	r0, r6
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8009c5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009c60:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c62:	60f4      	str	r4, [r6, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c64:	6174      	str	r4, [r6, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c66:	61b4      	str	r4, [r6, #24]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009c68:	6131      	str	r1, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009c6a:	61f2      	str	r2, [r6, #28]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c6c:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8009c70:	e9c6 3700 	strd	r3, r7, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009c74:	f7f7 fc8a 	bl	800158c <HAL_DMA_Init>
 8009c78:	b970      	cbnz	r0, 8009c98 <HAL_UART_MspInit+0x198>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009c7a:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009c7c:	66ee      	str	r6, [r5, #108]	; 0x6c
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009c7e:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009c80:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009c82:	4611      	mov	r1, r2
 8009c84:	f7f7 fb22 	bl	80012cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009c88:	2026      	movs	r0, #38	; 0x26
 8009c8a:	f7f7 fb5b 	bl	8001344 <HAL_NVIC_EnableIRQ>
}
 8009c8e:	b00b      	add	sp, #44	; 0x2c
 8009c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8009c92:	f7ff f8e3 	bl	8008e5c <Error_Handler>
 8009c96:	e78c      	b.n	8009bb2 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8009c98:	f7ff f8e0 	bl	8008e5c <Error_Handler>
 8009c9c:	e7ed      	b.n	8009c7a <HAL_UART_MspInit+0x17a>
 8009c9e:	bf00      	nop

08009ca0 <_ZdlPv>:
 8009ca0:	f000 b82c 	b.w	8009cfc <free>

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4e0d      	ldr	r6, [pc, #52]	; (8009cdc <__libc_init_array+0x38>)
 8009ca8:	4c0d      	ldr	r4, [pc, #52]	; (8009ce0 <__libc_init_array+0x3c>)
 8009caa:	1ba4      	subs	r4, r4, r6
 8009cac:	10a4      	asrs	r4, r4, #2
 8009cae:	2500      	movs	r5, #0
 8009cb0:	42a5      	cmp	r5, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	4e0b      	ldr	r6, [pc, #44]	; (8009ce4 <__libc_init_array+0x40>)
 8009cb6:	4c0c      	ldr	r4, [pc, #48]	; (8009ce8 <__libc_init_array+0x44>)
 8009cb8:	f000 fc3c 	bl	800a534 <_init>
 8009cbc:	1ba4      	subs	r4, r4, r6
 8009cbe:	10a4      	asrs	r4, r4, #2
 8009cc0:	2500      	movs	r5, #0
 8009cc2:	42a5      	cmp	r5, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ccc:	4798      	blx	r3
 8009cce:	3501      	adds	r5, #1
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cd6:	4798      	blx	r3
 8009cd8:	3501      	adds	r5, #1
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	0800a6d8 	.word	0x0800a6d8
 8009ce0:	0800a6d8 	.word	0x0800a6d8
 8009ce4:	0800a6d8 	.word	0x0800a6d8
 8009ce8:	0800a6e4 	.word	0x0800a6e4

08009cec <malloc>:
 8009cec:	4b02      	ldr	r3, [pc, #8]	; (8009cf8 <malloc+0xc>)
 8009cee:	4601      	mov	r1, r0
 8009cf0:	6818      	ldr	r0, [r3, #0]
 8009cf2:	f000 b80b 	b.w	8009d0c <_malloc_r>
 8009cf6:	bf00      	nop
 8009cf8:	20000010 	.word	0x20000010

08009cfc <free>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <free+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f000 baf5 	b.w	800a2f0 <_free_r>
 8009d06:	bf00      	nop
 8009d08:	20000010 	.word	0x20000010

08009d0c <_malloc_r>:
 8009d0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d10:	f101 050b 	add.w	r5, r1, #11
 8009d14:	2d16      	cmp	r5, #22
 8009d16:	4606      	mov	r6, r0
 8009d18:	d906      	bls.n	8009d28 <_malloc_r+0x1c>
 8009d1a:	f035 0507 	bics.w	r5, r5, #7
 8009d1e:	d504      	bpl.n	8009d2a <_malloc_r+0x1e>
 8009d20:	230c      	movs	r3, #12
 8009d22:	6033      	str	r3, [r6, #0]
 8009d24:	2400      	movs	r4, #0
 8009d26:	e1a8      	b.n	800a07a <_malloc_r+0x36e>
 8009d28:	2510      	movs	r5, #16
 8009d2a:	428d      	cmp	r5, r1
 8009d2c:	d3f8      	bcc.n	8009d20 <_malloc_r+0x14>
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f000 fa36 	bl	800a1a0 <__malloc_lock>
 8009d34:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8009d38:	4fc0      	ldr	r7, [pc, #768]	; (800a03c <_malloc_r+0x330>)
 8009d3a:	d238      	bcs.n	8009dae <_malloc_r+0xa2>
 8009d3c:	f105 0208 	add.w	r2, r5, #8
 8009d40:	443a      	add	r2, r7
 8009d42:	f1a2 0108 	sub.w	r1, r2, #8
 8009d46:	6854      	ldr	r4, [r2, #4]
 8009d48:	428c      	cmp	r4, r1
 8009d4a:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 8009d4e:	d102      	bne.n	8009d56 <_malloc_r+0x4a>
 8009d50:	68d4      	ldr	r4, [r2, #12]
 8009d52:	42a2      	cmp	r2, r4
 8009d54:	d010      	beq.n	8009d78 <_malloc_r+0x6c>
 8009d56:	6863      	ldr	r3, [r4, #4]
 8009d58:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009d5c:	f023 0303 	bic.w	r3, r3, #3
 8009d60:	60ca      	str	r2, [r1, #12]
 8009d62:	4423      	add	r3, r4
 8009d64:	6091      	str	r1, [r2, #8]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	f042 0201 	orr.w	r2, r2, #1
 8009d6c:	605a      	str	r2, [r3, #4]
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f000 fa1c 	bl	800a1ac <__malloc_unlock>
 8009d74:	3408      	adds	r4, #8
 8009d76:	e180      	b.n	800a07a <_malloc_r+0x36e>
 8009d78:	3302      	adds	r3, #2
 8009d7a:	4ab1      	ldr	r2, [pc, #708]	; (800a040 <_malloc_r+0x334>)
 8009d7c:	693c      	ldr	r4, [r7, #16]
 8009d7e:	4294      	cmp	r4, r2
 8009d80:	4611      	mov	r1, r2
 8009d82:	d075      	beq.n	8009e70 <_malloc_r+0x164>
 8009d84:	6860      	ldr	r0, [r4, #4]
 8009d86:	f020 0c03 	bic.w	ip, r0, #3
 8009d8a:	ebac 0005 	sub.w	r0, ip, r5
 8009d8e:	280f      	cmp	r0, #15
 8009d90:	dd48      	ble.n	8009e24 <_malloc_r+0x118>
 8009d92:	1963      	adds	r3, r4, r5
 8009d94:	f045 0501 	orr.w	r5, r5, #1
 8009d98:	6065      	str	r5, [r4, #4]
 8009d9a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8009d9e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8009da2:	f040 0201 	orr.w	r2, r0, #1
 8009da6:	605a      	str	r2, [r3, #4]
 8009da8:	f844 000c 	str.w	r0, [r4, ip]
 8009dac:	e7df      	b.n	8009d6e <_malloc_r+0x62>
 8009dae:	0a6b      	lsrs	r3, r5, #9
 8009db0:	d02a      	beq.n	8009e08 <_malloc_r+0xfc>
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d812      	bhi.n	8009ddc <_malloc_r+0xd0>
 8009db6:	09ab      	lsrs	r3, r5, #6
 8009db8:	3338      	adds	r3, #56	; 0x38
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8009dc0:	f1a2 0c08 	sub.w	ip, r2, #8
 8009dc4:	6854      	ldr	r4, [r2, #4]
 8009dc6:	4564      	cmp	r4, ip
 8009dc8:	d006      	beq.n	8009dd8 <_malloc_r+0xcc>
 8009dca:	6862      	ldr	r2, [r4, #4]
 8009dcc:	f022 0203 	bic.w	r2, r2, #3
 8009dd0:	1b50      	subs	r0, r2, r5
 8009dd2:	280f      	cmp	r0, #15
 8009dd4:	dd1c      	ble.n	8009e10 <_malloc_r+0x104>
 8009dd6:	3b01      	subs	r3, #1
 8009dd8:	3301      	adds	r3, #1
 8009dda:	e7ce      	b.n	8009d7a <_malloc_r+0x6e>
 8009ddc:	2b14      	cmp	r3, #20
 8009dde:	d801      	bhi.n	8009de4 <_malloc_r+0xd8>
 8009de0:	335b      	adds	r3, #91	; 0x5b
 8009de2:	e7ea      	b.n	8009dba <_malloc_r+0xae>
 8009de4:	2b54      	cmp	r3, #84	; 0x54
 8009de6:	d802      	bhi.n	8009dee <_malloc_r+0xe2>
 8009de8:	0b2b      	lsrs	r3, r5, #12
 8009dea:	336e      	adds	r3, #110	; 0x6e
 8009dec:	e7e5      	b.n	8009dba <_malloc_r+0xae>
 8009dee:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009df2:	d802      	bhi.n	8009dfa <_malloc_r+0xee>
 8009df4:	0beb      	lsrs	r3, r5, #15
 8009df6:	3377      	adds	r3, #119	; 0x77
 8009df8:	e7df      	b.n	8009dba <_malloc_r+0xae>
 8009dfa:	f240 5254 	movw	r2, #1364	; 0x554
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d804      	bhi.n	8009e0c <_malloc_r+0x100>
 8009e02:	0cab      	lsrs	r3, r5, #18
 8009e04:	337c      	adds	r3, #124	; 0x7c
 8009e06:	e7d8      	b.n	8009dba <_malloc_r+0xae>
 8009e08:	233f      	movs	r3, #63	; 0x3f
 8009e0a:	e7d6      	b.n	8009dba <_malloc_r+0xae>
 8009e0c:	237e      	movs	r3, #126	; 0x7e
 8009e0e:	e7d4      	b.n	8009dba <_malloc_r+0xae>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	68e1      	ldr	r1, [r4, #12]
 8009e14:	db04      	blt.n	8009e20 <_malloc_r+0x114>
 8009e16:	68a3      	ldr	r3, [r4, #8]
 8009e18:	60d9      	str	r1, [r3, #12]
 8009e1a:	608b      	str	r3, [r1, #8]
 8009e1c:	18a3      	adds	r3, r4, r2
 8009e1e:	e7a2      	b.n	8009d66 <_malloc_r+0x5a>
 8009e20:	460c      	mov	r4, r1
 8009e22:	e7d0      	b.n	8009dc6 <_malloc_r+0xba>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	e9c7 2204 	strd	r2, r2, [r7, #16]
 8009e2a:	db07      	blt.n	8009e3c <_malloc_r+0x130>
 8009e2c:	44a4      	add	ip, r4
 8009e2e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009e32:	f043 0301 	orr.w	r3, r3, #1
 8009e36:	f8cc 3004 	str.w	r3, [ip, #4]
 8009e3a:	e798      	b.n	8009d6e <_malloc_r+0x62>
 8009e3c:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f080 8099 	bcs.w	8009f78 <_malloc_r+0x26c>
 8009e46:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 8009e4a:	ea4f 0eac 	mov.w	lr, ip, asr #2
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f10c 0c01 	add.w	ip, ip, #1
 8009e54:	fa02 f20e 	lsl.w	r2, r2, lr
 8009e58:	4310      	orrs	r0, r2
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8009e60:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8009e64:	3a08      	subs	r2, #8
 8009e66:	e9c4 0202 	strd	r0, r2, [r4, #8]
 8009e6a:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8009e6e:	60c4      	str	r4, [r0, #12]
 8009e70:	2001      	movs	r0, #1
 8009e72:	109a      	asrs	r2, r3, #2
 8009e74:	fa00 f202 	lsl.w	r2, r0, r2
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	4290      	cmp	r0, r2
 8009e7c:	d326      	bcc.n	8009ecc <_malloc_r+0x1c0>
 8009e7e:	4210      	tst	r0, r2
 8009e80:	d106      	bne.n	8009e90 <_malloc_r+0x184>
 8009e82:	f023 0303 	bic.w	r3, r3, #3
 8009e86:	0052      	lsls	r2, r2, #1
 8009e88:	4210      	tst	r0, r2
 8009e8a:	f103 0304 	add.w	r3, r3, #4
 8009e8e:	d0fa      	beq.n	8009e86 <_malloc_r+0x17a>
 8009e90:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8009e94:	46e1      	mov	r9, ip
 8009e96:	4698      	mov	r8, r3
 8009e98:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009e9c:	454c      	cmp	r4, r9
 8009e9e:	f040 80af 	bne.w	800a000 <_malloc_r+0x2f4>
 8009ea2:	f108 0801 	add.w	r8, r8, #1
 8009ea6:	f018 0f03 	tst.w	r8, #3
 8009eaa:	f109 0908 	add.w	r9, r9, #8
 8009eae:	d1f3      	bne.n	8009e98 <_malloc_r+0x18c>
 8009eb0:	0798      	lsls	r0, r3, #30
 8009eb2:	f040 80e8 	bne.w	800a086 <_malloc_r+0x37a>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	ea23 0302 	bic.w	r3, r3, r2
 8009ebc:	607b      	str	r3, [r7, #4]
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	0052      	lsls	r2, r2, #1
 8009ec2:	4290      	cmp	r0, r2
 8009ec4:	d302      	bcc.n	8009ecc <_malloc_r+0x1c0>
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	f040 80ec 	bne.w	800a0a4 <_malloc_r+0x398>
 8009ecc:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8009ed0:	f8da 4004 	ldr.w	r4, [sl, #4]
 8009ed4:	f024 0203 	bic.w	r2, r4, #3
 8009ed8:	42aa      	cmp	r2, r5
 8009eda:	d303      	bcc.n	8009ee4 <_malloc_r+0x1d8>
 8009edc:	1b53      	subs	r3, r2, r5
 8009ede:	2b0f      	cmp	r3, #15
 8009ee0:	f300 8140 	bgt.w	800a164 <_malloc_r+0x458>
 8009ee4:	4b57      	ldr	r3, [pc, #348]	; (800a044 <_malloc_r+0x338>)
 8009ee6:	9200      	str	r2, [sp, #0]
 8009ee8:	2008      	movs	r0, #8
 8009eea:	681c      	ldr	r4, [r3, #0]
 8009eec:	f000 f974 	bl	800a1d8 <sysconf>
 8009ef0:	4b55      	ldr	r3, [pc, #340]	; (800a048 <_malloc_r+0x33c>)
 8009ef2:	9a00      	ldr	r2, [sp, #0]
 8009ef4:	6819      	ldr	r1, [r3, #0]
 8009ef6:	3410      	adds	r4, #16
 8009ef8:	3101      	adds	r1, #1
 8009efa:	442c      	add	r4, r5
 8009efc:	bf1f      	itttt	ne
 8009efe:	f104 34ff 	addne.w	r4, r4, #4294967295
 8009f02:	1824      	addne	r4, r4, r0
 8009f04:	4241      	negne	r1, r0
 8009f06:	400c      	andne	r4, r1
 8009f08:	4680      	mov	r8, r0
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	e9cd 2300 	strd	r2, r3, [sp]
 8009f12:	f000 f951 	bl	800a1b8 <_sbrk_r>
 8009f16:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f1a:	4683      	mov	fp, r0
 8009f1c:	f000 80fb 	beq.w	800a116 <_malloc_r+0x40a>
 8009f20:	9a00      	ldr	r2, [sp, #0]
 8009f22:	9b01      	ldr	r3, [sp, #4]
 8009f24:	eb0a 0102 	add.w	r1, sl, r2
 8009f28:	4281      	cmp	r1, r0
 8009f2a:	d902      	bls.n	8009f32 <_malloc_r+0x226>
 8009f2c:	45ba      	cmp	sl, r7
 8009f2e:	f040 80f2 	bne.w	800a116 <_malloc_r+0x40a>
 8009f32:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800a054 <_malloc_r+0x348>
 8009f36:	f8d9 0000 	ldr.w	r0, [r9]
 8009f3a:	4559      	cmp	r1, fp
 8009f3c:	eb00 0e04 	add.w	lr, r0, r4
 8009f40:	f8c9 e000 	str.w	lr, [r9]
 8009f44:	f108 3cff 	add.w	ip, r8, #4294967295
 8009f48:	f040 80ae 	bne.w	800a0a8 <_malloc_r+0x39c>
 8009f4c:	ea11 0f0c 	tst.w	r1, ip
 8009f50:	f040 80aa 	bne.w	800a0a8 <_malloc_r+0x39c>
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4414      	add	r4, r2
 8009f58:	f044 0401 	orr.w	r4, r4, #1
 8009f5c:	605c      	str	r4, [r3, #4]
 8009f5e:	4a3b      	ldr	r2, [pc, #236]	; (800a04c <_malloc_r+0x340>)
 8009f60:	f8d9 3000 	ldr.w	r3, [r9]
 8009f64:	6811      	ldr	r1, [r2, #0]
 8009f66:	428b      	cmp	r3, r1
 8009f68:	bf88      	it	hi
 8009f6a:	6013      	strhi	r3, [r2, #0]
 8009f6c:	4a38      	ldr	r2, [pc, #224]	; (800a050 <_malloc_r+0x344>)
 8009f6e:	6811      	ldr	r1, [r2, #0]
 8009f70:	428b      	cmp	r3, r1
 8009f72:	bf88      	it	hi
 8009f74:	6013      	strhi	r3, [r2, #0]
 8009f76:	e0ce      	b.n	800a116 <_malloc_r+0x40a>
 8009f78:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009f7c:	2a04      	cmp	r2, #4
 8009f7e:	d818      	bhi.n	8009fb2 <_malloc_r+0x2a6>
 8009f80:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009f84:	3238      	adds	r2, #56	; 0x38
 8009f86:	f102 0e01 	add.w	lr, r2, #1
 8009f8a:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8009f8e:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8009f92:	45f0      	cmp	r8, lr
 8009f94:	d12b      	bne.n	8009fee <_malloc_r+0x2e2>
 8009f96:	1092      	asrs	r2, r2, #2
 8009f98:	f04f 0c01 	mov.w	ip, #1
 8009f9c:	fa0c f202 	lsl.w	r2, ip, r2
 8009fa0:	4310      	orrs	r0, r2
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009fa8:	f8c8 4008 	str.w	r4, [r8, #8]
 8009fac:	f8ce 400c 	str.w	r4, [lr, #12]
 8009fb0:	e75e      	b.n	8009e70 <_malloc_r+0x164>
 8009fb2:	2a14      	cmp	r2, #20
 8009fb4:	d801      	bhi.n	8009fba <_malloc_r+0x2ae>
 8009fb6:	325b      	adds	r2, #91	; 0x5b
 8009fb8:	e7e5      	b.n	8009f86 <_malloc_r+0x27a>
 8009fba:	2a54      	cmp	r2, #84	; 0x54
 8009fbc:	d803      	bhi.n	8009fc6 <_malloc_r+0x2ba>
 8009fbe:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009fc2:	326e      	adds	r2, #110	; 0x6e
 8009fc4:	e7df      	b.n	8009f86 <_malloc_r+0x27a>
 8009fc6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009fca:	d803      	bhi.n	8009fd4 <_malloc_r+0x2c8>
 8009fcc:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009fd0:	3277      	adds	r2, #119	; 0x77
 8009fd2:	e7d8      	b.n	8009f86 <_malloc_r+0x27a>
 8009fd4:	f240 5e54 	movw	lr, #1364	; 0x554
 8009fd8:	4572      	cmp	r2, lr
 8009fda:	bf9a      	itte	ls
 8009fdc:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009fe0:	327c      	addls	r2, #124	; 0x7c
 8009fe2:	227e      	movhi	r2, #126	; 0x7e
 8009fe4:	e7cf      	b.n	8009f86 <_malloc_r+0x27a>
 8009fe6:	f8de e008 	ldr.w	lr, [lr, #8]
 8009fea:	45f0      	cmp	r8, lr
 8009fec:	d005      	beq.n	8009ffa <_malloc_r+0x2ee>
 8009fee:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009ff2:	f022 0203 	bic.w	r2, r2, #3
 8009ff6:	4562      	cmp	r2, ip
 8009ff8:	d8f5      	bhi.n	8009fe6 <_malloc_r+0x2da>
 8009ffa:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009ffe:	e7d1      	b.n	8009fa4 <_malloc_r+0x298>
 800a000:	6860      	ldr	r0, [r4, #4]
 800a002:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800a006:	f020 0003 	bic.w	r0, r0, #3
 800a00a:	eba0 0a05 	sub.w	sl, r0, r5
 800a00e:	f1ba 0f0f 	cmp.w	sl, #15
 800a012:	dd21      	ble.n	800a058 <_malloc_r+0x34c>
 800a014:	68a2      	ldr	r2, [r4, #8]
 800a016:	1963      	adds	r3, r4, r5
 800a018:	f045 0501 	orr.w	r5, r5, #1
 800a01c:	6065      	str	r5, [r4, #4]
 800a01e:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a022:	f8ce 2008 	str.w	r2, [lr, #8]
 800a026:	f04a 0201 	orr.w	r2, sl, #1
 800a02a:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800a02e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a032:	605a      	str	r2, [r3, #4]
 800a034:	f844 a000 	str.w	sl, [r4, r0]
 800a038:	e699      	b.n	8009d6e <_malloc_r+0x62>
 800a03a:	bf00      	nop
 800a03c:	20000440 	.word	0x20000440
 800a040:	20000448 	.word	0x20000448
 800a044:	200033e8 	.word	0x200033e8
 800a048:	20000848 	.word	0x20000848
 800a04c:	200033e0 	.word	0x200033e0
 800a050:	200033e4 	.word	0x200033e4
 800a054:	200033b8 	.word	0x200033b8
 800a058:	f1ba 0f00 	cmp.w	sl, #0
 800a05c:	db11      	blt.n	800a082 <_malloc_r+0x376>
 800a05e:	4420      	add	r0, r4
 800a060:	6843      	ldr	r3, [r0, #4]
 800a062:	f043 0301 	orr.w	r3, r3, #1
 800a066:	6043      	str	r3, [r0, #4]
 800a068:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a06c:	4630      	mov	r0, r6
 800a06e:	f8c3 e00c 	str.w	lr, [r3, #12]
 800a072:	f8ce 3008 	str.w	r3, [lr, #8]
 800a076:	f000 f899 	bl	800a1ac <__malloc_unlock>
 800a07a:	4620      	mov	r0, r4
 800a07c:	b003      	add	sp, #12
 800a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a082:	4674      	mov	r4, lr
 800a084:	e70a      	b.n	8009e9c <_malloc_r+0x190>
 800a086:	f1ac 0008 	sub.w	r0, ip, #8
 800a08a:	f8dc c000 	ldr.w	ip, [ip]
 800a08e:	4584      	cmp	ip, r0
 800a090:	f103 33ff 	add.w	r3, r3, #4294967295
 800a094:	f43f af0c 	beq.w	8009eb0 <_malloc_r+0x1a4>
 800a098:	e711      	b.n	8009ebe <_malloc_r+0x1b2>
 800a09a:	3304      	adds	r3, #4
 800a09c:	0052      	lsls	r2, r2, #1
 800a09e:	4210      	tst	r0, r2
 800a0a0:	d0fb      	beq.n	800a09a <_malloc_r+0x38e>
 800a0a2:	e6f5      	b.n	8009e90 <_malloc_r+0x184>
 800a0a4:	4643      	mov	r3, r8
 800a0a6:	e7fa      	b.n	800a09e <_malloc_r+0x392>
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	9200      	str	r2, [sp, #0]
 800a0ac:	3001      	adds	r0, #1
 800a0ae:	bf1b      	ittet	ne
 800a0b0:	ebab 0101 	subne.w	r1, fp, r1
 800a0b4:	4471      	addne	r1, lr
 800a0b6:	f8c3 b000 	streq.w	fp, [r3]
 800a0ba:	f8c9 1000 	strne.w	r1, [r9]
 800a0be:	f01b 0307 	ands.w	r3, fp, #7
 800a0c2:	bf1c      	itt	ne
 800a0c4:	f1c3 0308 	rsbne	r3, r3, #8
 800a0c8:	449b      	addne	fp, r3
 800a0ca:	445c      	add	r4, fp
 800a0cc:	4498      	add	r8, r3
 800a0ce:	ea04 030c 	and.w	r3, r4, ip
 800a0d2:	eba8 0803 	sub.w	r8, r8, r3
 800a0d6:	4641      	mov	r1, r8
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 f86d 	bl	800a1b8 <_sbrk_r>
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	bf04      	itt	eq
 800a0e2:	4658      	moveq	r0, fp
 800a0e4:	f04f 0800 	moveq.w	r8, #0
 800a0e8:	f8d9 3000 	ldr.w	r3, [r9]
 800a0ec:	f8c7 b008 	str.w	fp, [r7, #8]
 800a0f0:	eba0 000b 	sub.w	r0, r0, fp
 800a0f4:	4440      	add	r0, r8
 800a0f6:	4443      	add	r3, r8
 800a0f8:	f040 0001 	orr.w	r0, r0, #1
 800a0fc:	45ba      	cmp	sl, r7
 800a0fe:	9a00      	ldr	r2, [sp, #0]
 800a100:	f8c9 3000 	str.w	r3, [r9]
 800a104:	f8cb 0004 	str.w	r0, [fp, #4]
 800a108:	f43f af29 	beq.w	8009f5e <_malloc_r+0x252>
 800a10c:	2a0f      	cmp	r2, #15
 800a10e:	d810      	bhi.n	800a132 <_malloc_r+0x426>
 800a110:	2301      	movs	r3, #1
 800a112:	f8cb 3004 	str.w	r3, [fp, #4]
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	f022 0203 	bic.w	r2, r2, #3
 800a11e:	42aa      	cmp	r2, r5
 800a120:	eba2 0305 	sub.w	r3, r2, r5
 800a124:	d301      	bcc.n	800a12a <_malloc_r+0x41e>
 800a126:	2b0f      	cmp	r3, #15
 800a128:	dc1c      	bgt.n	800a164 <_malloc_r+0x458>
 800a12a:	4630      	mov	r0, r6
 800a12c:	f000 f83e 	bl	800a1ac <__malloc_unlock>
 800a130:	e5f8      	b.n	8009d24 <_malloc_r+0x18>
 800a132:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a136:	f1a2 040c 	sub.w	r4, r2, #12
 800a13a:	f024 0407 	bic.w	r4, r4, #7
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	4323      	orrs	r3, r4
 800a144:	f8ca 3004 	str.w	r3, [sl, #4]
 800a148:	2205      	movs	r2, #5
 800a14a:	eb0a 0304 	add.w	r3, sl, r4
 800a14e:	2c0f      	cmp	r4, #15
 800a150:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800a154:	f67f af03 	bls.w	8009f5e <_malloc_r+0x252>
 800a158:	f10a 0108 	add.w	r1, sl, #8
 800a15c:	4630      	mov	r0, r6
 800a15e:	f000 f8c7 	bl	800a2f0 <_free_r>
 800a162:	e6fc      	b.n	8009f5e <_malloc_r+0x252>
 800a164:	68bc      	ldr	r4, [r7, #8]
 800a166:	f045 0201 	orr.w	r2, r5, #1
 800a16a:	4425      	add	r5, r4
 800a16c:	f043 0301 	orr.w	r3, r3, #1
 800a170:	6062      	str	r2, [r4, #4]
 800a172:	60bd      	str	r5, [r7, #8]
 800a174:	606b      	str	r3, [r5, #4]
 800a176:	e5fa      	b.n	8009d6e <_malloc_r+0x62>

0800a178 <memcpy>:
 800a178:	b510      	push	{r4, lr}
 800a17a:	1e43      	subs	r3, r0, #1
 800a17c:	440a      	add	r2, r1
 800a17e:	4291      	cmp	r1, r2
 800a180:	d100      	bne.n	800a184 <memcpy+0xc>
 800a182:	bd10      	pop	{r4, pc}
 800a184:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a18c:	e7f7      	b.n	800a17e <memcpy+0x6>

0800a18e <memset>:
 800a18e:	4402      	add	r2, r0
 800a190:	4603      	mov	r3, r0
 800a192:	4293      	cmp	r3, r2
 800a194:	d100      	bne.n	800a198 <memset+0xa>
 800a196:	4770      	bx	lr
 800a198:	f803 1b01 	strb.w	r1, [r3], #1
 800a19c:	e7f9      	b.n	800a192 <memset+0x4>
	...

0800a1a0 <__malloc_lock>:
 800a1a0:	4801      	ldr	r0, [pc, #4]	; (800a1a8 <__malloc_lock+0x8>)
 800a1a2:	f000 b961 	b.w	800a468 <__retarget_lock_acquire_recursive>
 800a1a6:	bf00      	nop
 800a1a8:	20004120 	.word	0x20004120

0800a1ac <__malloc_unlock>:
 800a1ac:	4801      	ldr	r0, [pc, #4]	; (800a1b4 <__malloc_unlock+0x8>)
 800a1ae:	f000 b95c 	b.w	800a46a <__retarget_lock_release_recursive>
 800a1b2:	bf00      	nop
 800a1b4:	20004120 	.word	0x20004120

0800a1b8 <_sbrk_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4c06      	ldr	r4, [pc, #24]	; (800a1d4 <_sbrk_r+0x1c>)
 800a1bc:	2300      	movs	r3, #0
 800a1be:	4605      	mov	r5, r0
 800a1c0:	4608      	mov	r0, r1
 800a1c2:	6023      	str	r3, [r4, #0]
 800a1c4:	f000 f9a8 	bl	800a518 <_sbrk>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_sbrk_r+0x1a>
 800a1cc:	6823      	ldr	r3, [r4, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_sbrk_r+0x1a>
 800a1d0:	602b      	str	r3, [r5, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	20004128 	.word	0x20004128

0800a1d8 <sysconf>:
 800a1d8:	2808      	cmp	r0, #8
 800a1da:	b508      	push	{r3, lr}
 800a1dc:	d006      	beq.n	800a1ec <sysconf+0x14>
 800a1de:	f000 f819 	bl	800a214 <__errno>
 800a1e2:	2316      	movs	r3, #22
 800a1e4:	6003      	str	r3, [r0, #0]
 800a1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ea:	bd08      	pop	{r3, pc}
 800a1ec:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a1f0:	e7fb      	b.n	800a1ea <sysconf+0x12>
	...

0800a1f4 <register_fini>:
 800a1f4:	4b02      	ldr	r3, [pc, #8]	; (800a200 <register_fini+0xc>)
 800a1f6:	b113      	cbz	r3, 800a1fe <register_fini+0xa>
 800a1f8:	4802      	ldr	r0, [pc, #8]	; (800a204 <register_fini+0x10>)
 800a1fa:	f000 b805 	b.w	800a208 <atexit>
 800a1fe:	4770      	bx	lr
 800a200:	00000000 	.word	0x00000000
 800a204:	0800a221 	.word	0x0800a221

0800a208 <atexit>:
 800a208:	2300      	movs	r3, #0
 800a20a:	4601      	mov	r1, r0
 800a20c:	461a      	mov	r2, r3
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 b92c 	b.w	800a46c <__register_exitproc>

0800a214 <__errno>:
 800a214:	4b01      	ldr	r3, [pc, #4]	; (800a21c <__errno+0x8>)
 800a216:	6818      	ldr	r0, [r3, #0]
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	20000010 	.word	0x20000010

0800a220 <__libc_fini_array>:
 800a220:	b538      	push	{r3, r4, r5, lr}
 800a222:	4d07      	ldr	r5, [pc, #28]	; (800a240 <__libc_fini_array+0x20>)
 800a224:	4c07      	ldr	r4, [pc, #28]	; (800a244 <__libc_fini_array+0x24>)
 800a226:	1b64      	subs	r4, r4, r5
 800a228:	10a4      	asrs	r4, r4, #2
 800a22a:	b91c      	cbnz	r4, 800a234 <__libc_fini_array+0x14>
 800a22c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a230:	f000 b986 	b.w	800a540 <_fini>
 800a234:	3c01      	subs	r4, #1
 800a236:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a23a:	4798      	blx	r3
 800a23c:	e7f5      	b.n	800a22a <__libc_fini_array+0xa>
 800a23e:	bf00      	nop
 800a240:	0800a6e4 	.word	0x0800a6e4
 800a244:	0800a6ec 	.word	0x0800a6ec

0800a248 <_malloc_trim_r>:
 800a248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a24c:	4605      	mov	r5, r0
 800a24e:	2008      	movs	r0, #8
 800a250:	460c      	mov	r4, r1
 800a252:	f7ff ffc1 	bl	800a1d8 <sysconf>
 800a256:	4f23      	ldr	r7, [pc, #140]	; (800a2e4 <_malloc_trim_r+0x9c>)
 800a258:	4680      	mov	r8, r0
 800a25a:	4628      	mov	r0, r5
 800a25c:	f7ff ffa0 	bl	800a1a0 <__malloc_lock>
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	685e      	ldr	r6, [r3, #4]
 800a264:	f026 0603 	bic.w	r6, r6, #3
 800a268:	1b34      	subs	r4, r6, r4
 800a26a:	3c11      	subs	r4, #17
 800a26c:	4444      	add	r4, r8
 800a26e:	fbb4 f4f8 	udiv	r4, r4, r8
 800a272:	3c01      	subs	r4, #1
 800a274:	fb08 f404 	mul.w	r4, r8, r4
 800a278:	45a0      	cmp	r8, r4
 800a27a:	dd05      	ble.n	800a288 <_malloc_trim_r+0x40>
 800a27c:	4628      	mov	r0, r5
 800a27e:	f7ff ff95 	bl	800a1ac <__malloc_unlock>
 800a282:	2000      	movs	r0, #0
 800a284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a288:	2100      	movs	r1, #0
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7ff ff94 	bl	800a1b8 <_sbrk_r>
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	4433      	add	r3, r6
 800a294:	4298      	cmp	r0, r3
 800a296:	d1f1      	bne.n	800a27c <_malloc_trim_r+0x34>
 800a298:	4261      	negs	r1, r4
 800a29a:	4628      	mov	r0, r5
 800a29c:	f7ff ff8c 	bl	800a1b8 <_sbrk_r>
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d110      	bne.n	800a2c6 <_malloc_trim_r+0x7e>
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f7ff ff86 	bl	800a1b8 <_sbrk_r>
 800a2ac:	68ba      	ldr	r2, [r7, #8]
 800a2ae:	1a83      	subs	r3, r0, r2
 800a2b0:	2b0f      	cmp	r3, #15
 800a2b2:	dde3      	ble.n	800a27c <_malloc_trim_r+0x34>
 800a2b4:	490c      	ldr	r1, [pc, #48]	; (800a2e8 <_malloc_trim_r+0xa0>)
 800a2b6:	6809      	ldr	r1, [r1, #0]
 800a2b8:	1a40      	subs	r0, r0, r1
 800a2ba:	490c      	ldr	r1, [pc, #48]	; (800a2ec <_malloc_trim_r+0xa4>)
 800a2bc:	f043 0301 	orr.w	r3, r3, #1
 800a2c0:	6008      	str	r0, [r1, #0]
 800a2c2:	6053      	str	r3, [r2, #4]
 800a2c4:	e7da      	b.n	800a27c <_malloc_trim_r+0x34>
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	4a08      	ldr	r2, [pc, #32]	; (800a2ec <_malloc_trim_r+0xa4>)
 800a2ca:	1b36      	subs	r6, r6, r4
 800a2cc:	f046 0601 	orr.w	r6, r6, #1
 800a2d0:	605e      	str	r6, [r3, #4]
 800a2d2:	6813      	ldr	r3, [r2, #0]
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	1b1c      	subs	r4, r3, r4
 800a2d8:	6014      	str	r4, [r2, #0]
 800a2da:	f7ff ff67 	bl	800a1ac <__malloc_unlock>
 800a2de:	2001      	movs	r0, #1
 800a2e0:	e7d0      	b.n	800a284 <_malloc_trim_r+0x3c>
 800a2e2:	bf00      	nop
 800a2e4:	20000440 	.word	0x20000440
 800a2e8:	20000848 	.word	0x20000848
 800a2ec:	200033b8 	.word	0x200033b8

0800a2f0 <_free_r>:
 800a2f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2f4:	4604      	mov	r4, r0
 800a2f6:	4688      	mov	r8, r1
 800a2f8:	2900      	cmp	r1, #0
 800a2fa:	f000 80ab 	beq.w	800a454 <_free_r+0x164>
 800a2fe:	f7ff ff4f 	bl	800a1a0 <__malloc_lock>
 800a302:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a306:	4d54      	ldr	r5, [pc, #336]	; (800a458 <_free_r+0x168>)
 800a308:	f022 0001 	bic.w	r0, r2, #1
 800a30c:	f1a8 0308 	sub.w	r3, r8, #8
 800a310:	181f      	adds	r7, r3, r0
 800a312:	68a9      	ldr	r1, [r5, #8]
 800a314:	687e      	ldr	r6, [r7, #4]
 800a316:	42b9      	cmp	r1, r7
 800a318:	f026 0603 	bic.w	r6, r6, #3
 800a31c:	f002 0201 	and.w	r2, r2, #1
 800a320:	d11b      	bne.n	800a35a <_free_r+0x6a>
 800a322:	4430      	add	r0, r6
 800a324:	b93a      	cbnz	r2, 800a336 <_free_r+0x46>
 800a326:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a32a:	1a9b      	subs	r3, r3, r2
 800a32c:	4410      	add	r0, r2
 800a32e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a332:	60ca      	str	r2, [r1, #12]
 800a334:	6091      	str	r1, [r2, #8]
 800a336:	f040 0201 	orr.w	r2, r0, #1
 800a33a:	605a      	str	r2, [r3, #4]
 800a33c:	60ab      	str	r3, [r5, #8]
 800a33e:	4b47      	ldr	r3, [pc, #284]	; (800a45c <_free_r+0x16c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4283      	cmp	r3, r0
 800a344:	d804      	bhi.n	800a350 <_free_r+0x60>
 800a346:	4b46      	ldr	r3, [pc, #280]	; (800a460 <_free_r+0x170>)
 800a348:	4620      	mov	r0, r4
 800a34a:	6819      	ldr	r1, [r3, #0]
 800a34c:	f7ff ff7c 	bl	800a248 <_malloc_trim_r>
 800a350:	4620      	mov	r0, r4
 800a352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a356:	f7ff bf29 	b.w	800a1ac <__malloc_unlock>
 800a35a:	607e      	str	r6, [r7, #4]
 800a35c:	2a00      	cmp	r2, #0
 800a35e:	d139      	bne.n	800a3d4 <_free_r+0xe4>
 800a360:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a364:	1a5b      	subs	r3, r3, r1
 800a366:	4408      	add	r0, r1
 800a368:	6899      	ldr	r1, [r3, #8]
 800a36a:	f105 0c08 	add.w	ip, r5, #8
 800a36e:	4561      	cmp	r1, ip
 800a370:	d032      	beq.n	800a3d8 <_free_r+0xe8>
 800a372:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800a376:	f8c1 c00c 	str.w	ip, [r1, #12]
 800a37a:	f8cc 1008 	str.w	r1, [ip, #8]
 800a37e:	19b9      	adds	r1, r7, r6
 800a380:	6849      	ldr	r1, [r1, #4]
 800a382:	07c9      	lsls	r1, r1, #31
 800a384:	d40a      	bmi.n	800a39c <_free_r+0xac>
 800a386:	4430      	add	r0, r6
 800a388:	68b9      	ldr	r1, [r7, #8]
 800a38a:	bb3a      	cbnz	r2, 800a3dc <_free_r+0xec>
 800a38c:	4e35      	ldr	r6, [pc, #212]	; (800a464 <_free_r+0x174>)
 800a38e:	42b1      	cmp	r1, r6
 800a390:	d124      	bne.n	800a3dc <_free_r+0xec>
 800a392:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800a396:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a39a:	2201      	movs	r2, #1
 800a39c:	f040 0101 	orr.w	r1, r0, #1
 800a3a0:	6059      	str	r1, [r3, #4]
 800a3a2:	5018      	str	r0, [r3, r0]
 800a3a4:	2a00      	cmp	r2, #0
 800a3a6:	d1d3      	bne.n	800a350 <_free_r+0x60>
 800a3a8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a3ac:	d21a      	bcs.n	800a3e4 <_free_r+0xf4>
 800a3ae:	08c0      	lsrs	r0, r0, #3
 800a3b0:	1081      	asrs	r1, r0, #2
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	408a      	lsls	r2, r1
 800a3b6:	6869      	ldr	r1, [r5, #4]
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	430a      	orrs	r2, r1
 800a3bc:	606a      	str	r2, [r5, #4]
 800a3be:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a3c2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a3c6:	3a08      	subs	r2, #8
 800a3c8:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800a3cc:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a3d0:	60cb      	str	r3, [r1, #12]
 800a3d2:	e7bd      	b.n	800a350 <_free_r+0x60>
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	e7d2      	b.n	800a37e <_free_r+0x8e>
 800a3d8:	2201      	movs	r2, #1
 800a3da:	e7d0      	b.n	800a37e <_free_r+0x8e>
 800a3dc:	68fe      	ldr	r6, [r7, #12]
 800a3de:	60ce      	str	r6, [r1, #12]
 800a3e0:	60b1      	str	r1, [r6, #8]
 800a3e2:	e7db      	b.n	800a39c <_free_r+0xac>
 800a3e4:	0a42      	lsrs	r2, r0, #9
 800a3e6:	2a04      	cmp	r2, #4
 800a3e8:	d813      	bhi.n	800a412 <_free_r+0x122>
 800a3ea:	0982      	lsrs	r2, r0, #6
 800a3ec:	3238      	adds	r2, #56	; 0x38
 800a3ee:	1c51      	adds	r1, r2, #1
 800a3f0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a3f4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a3f8:	428e      	cmp	r6, r1
 800a3fa:	d124      	bne.n	800a446 <_free_r+0x156>
 800a3fc:	2001      	movs	r0, #1
 800a3fe:	1092      	asrs	r2, r2, #2
 800a400:	fa00 f202 	lsl.w	r2, r0, r2
 800a404:	6868      	ldr	r0, [r5, #4]
 800a406:	4302      	orrs	r2, r0
 800a408:	606a      	str	r2, [r5, #4]
 800a40a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a40e:	60b3      	str	r3, [r6, #8]
 800a410:	e7de      	b.n	800a3d0 <_free_r+0xe0>
 800a412:	2a14      	cmp	r2, #20
 800a414:	d801      	bhi.n	800a41a <_free_r+0x12a>
 800a416:	325b      	adds	r2, #91	; 0x5b
 800a418:	e7e9      	b.n	800a3ee <_free_r+0xfe>
 800a41a:	2a54      	cmp	r2, #84	; 0x54
 800a41c:	d802      	bhi.n	800a424 <_free_r+0x134>
 800a41e:	0b02      	lsrs	r2, r0, #12
 800a420:	326e      	adds	r2, #110	; 0x6e
 800a422:	e7e4      	b.n	800a3ee <_free_r+0xfe>
 800a424:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a428:	d802      	bhi.n	800a430 <_free_r+0x140>
 800a42a:	0bc2      	lsrs	r2, r0, #15
 800a42c:	3277      	adds	r2, #119	; 0x77
 800a42e:	e7de      	b.n	800a3ee <_free_r+0xfe>
 800a430:	f240 5154 	movw	r1, #1364	; 0x554
 800a434:	428a      	cmp	r2, r1
 800a436:	bf9a      	itte	ls
 800a438:	0c82      	lsrls	r2, r0, #18
 800a43a:	327c      	addls	r2, #124	; 0x7c
 800a43c:	227e      	movhi	r2, #126	; 0x7e
 800a43e:	e7d6      	b.n	800a3ee <_free_r+0xfe>
 800a440:	6889      	ldr	r1, [r1, #8]
 800a442:	428e      	cmp	r6, r1
 800a444:	d004      	beq.n	800a450 <_free_r+0x160>
 800a446:	684a      	ldr	r2, [r1, #4]
 800a448:	f022 0203 	bic.w	r2, r2, #3
 800a44c:	4282      	cmp	r2, r0
 800a44e:	d8f7      	bhi.n	800a440 <_free_r+0x150>
 800a450:	68ce      	ldr	r6, [r1, #12]
 800a452:	e7da      	b.n	800a40a <_free_r+0x11a>
 800a454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a458:	20000440 	.word	0x20000440
 800a45c:	2000084c 	.word	0x2000084c
 800a460:	200033e8 	.word	0x200033e8
 800a464:	20000448 	.word	0x20000448

0800a468 <__retarget_lock_acquire_recursive>:
 800a468:	4770      	bx	lr

0800a46a <__retarget_lock_release_recursive>:
 800a46a:	4770      	bx	lr

0800a46c <__register_exitproc>:
 800a46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a470:	4c26      	ldr	r4, [pc, #152]	; (800a50c <__register_exitproc+0xa0>)
 800a472:	4606      	mov	r6, r0
 800a474:	6820      	ldr	r0, [r4, #0]
 800a476:	4698      	mov	r8, r3
 800a478:	460f      	mov	r7, r1
 800a47a:	4691      	mov	r9, r2
 800a47c:	f7ff fff4 	bl	800a468 <__retarget_lock_acquire_recursive>
 800a480:	4b23      	ldr	r3, [pc, #140]	; (800a510 <__register_exitproc+0xa4>)
 800a482:	681d      	ldr	r5, [r3, #0]
 800a484:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800a488:	b918      	cbnz	r0, 800a492 <__register_exitproc+0x26>
 800a48a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800a48e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800a492:	6843      	ldr	r3, [r0, #4]
 800a494:	2b1f      	cmp	r3, #31
 800a496:	dd19      	ble.n	800a4cc <__register_exitproc+0x60>
 800a498:	4b1e      	ldr	r3, [pc, #120]	; (800a514 <__register_exitproc+0xa8>)
 800a49a:	b933      	cbnz	r3, 800a4aa <__register_exitproc+0x3e>
 800a49c:	6820      	ldr	r0, [r4, #0]
 800a49e:	f7ff ffe4 	bl	800a46a <__retarget_lock_release_recursive>
 800a4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4aa:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a4ae:	f7ff fc1d 	bl	8009cec <malloc>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d0f2      	beq.n	800a49c <__register_exitproc+0x30>
 800a4b6:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800a4ba:	6003      	str	r3, [r0, #0]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	6042      	str	r2, [r0, #4]
 800a4c0:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800a4c4:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800a4c8:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800a4cc:	6843      	ldr	r3, [r0, #4]
 800a4ce:	b19e      	cbz	r6, 800a4f8 <__register_exitproc+0x8c>
 800a4d0:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800a4d4:	2201      	movs	r2, #1
 800a4d6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800a4da:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800a4de:	409a      	lsls	r2, r3
 800a4e0:	4311      	orrs	r1, r2
 800a4e2:	2e02      	cmp	r6, #2
 800a4e4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800a4e8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800a4ec:	bf02      	ittt	eq
 800a4ee:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800a4f2:	430a      	orreq	r2, r1
 800a4f4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	6042      	str	r2, [r0, #4]
 800a4fe:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800a502:	6820      	ldr	r0, [r4, #0]
 800a504:	f7ff ffb1 	bl	800a46a <__retarget_lock_release_recursive>
 800a508:	2000      	movs	r0, #0
 800a50a:	e7cc      	b.n	800a4a6 <__register_exitproc+0x3a>
 800a50c:	20000850 	.word	0x20000850
 800a510:	0800a6cc 	.word	0x0800a6cc
 800a514:	08009ced 	.word	0x08009ced

0800a518 <_sbrk>:
 800a518:	4b04      	ldr	r3, [pc, #16]	; (800a52c <_sbrk+0x14>)
 800a51a:	6819      	ldr	r1, [r3, #0]
 800a51c:	4602      	mov	r2, r0
 800a51e:	b909      	cbnz	r1, 800a524 <_sbrk+0xc>
 800a520:	4903      	ldr	r1, [pc, #12]	; (800a530 <_sbrk+0x18>)
 800a522:	6019      	str	r1, [r3, #0]
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	4402      	add	r2, r0
 800a528:	601a      	str	r2, [r3, #0]
 800a52a:	4770      	bx	lr
 800a52c:	200033ec 	.word	0x200033ec
 800a530:	20004130 	.word	0x20004130

0800a534 <_init>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	bf00      	nop
 800a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53a:	bc08      	pop	{r3}
 800a53c:	469e      	mov	lr, r3
 800a53e:	4770      	bx	lr

0800a540 <_fini>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	bf00      	nop
 800a544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a546:	bc08      	pop	{r3}
 800a548:	469e      	mov	lr, r3
 800a54a:	4770      	bx	lr
