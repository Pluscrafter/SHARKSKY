
SHARKSKY3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af4  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002cd4  08002cd4  00012cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce4  08002ce4  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cec  08002cec  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08002cec  08002cec  00012cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cf4  08002cf4  00012cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08002cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  200000dc  08002dd4  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200005e0  08002dd4  000205e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129db  00000000  00000000  0002014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e76  00000000  00000000  00032b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000022f4  00000000  00000000  000359a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000688  00000000  00000000  00037c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000095b  00000000  00000000  00038320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024499  00000000  00000000  00038c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000bc03  00000000  00000000  0005d114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cffb5  00000000  00000000  00068d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000010d8  00000000  00000000  00138ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00139da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000dc 	.word	0x200000dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002cbc 	.word	0x08002cbc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000e0 	.word	0x200000e0
 800021c:	08002cbc 	.word	0x08002cbc

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__aeabi_d2f>:
 80009bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009c4:	bf24      	itt	cs
 80009c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009ce:	d90d      	bls.n	80009ec <__aeabi_d2f+0x30>
 80009d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009e4:	bf08      	it	eq
 80009e6:	f020 0001 	biceq.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f0:	d121      	bne.n	8000a36 <__aeabi_d2f+0x7a>
 80009f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009f6:	bfbc      	itt	lt
 80009f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009fc:	4770      	bxlt	lr
 80009fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a06:	f1c2 0218 	rsb	r2, r2, #24
 8000a0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a12:	fa20 f002 	lsr.w	r0, r0, r2
 8000a16:	bf18      	it	ne
 8000a18:	f040 0001 	orrne.w	r0, r0, #1
 8000a1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a28:	ea40 000c 	orr.w	r0, r0, ip
 8000a2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a34:	e7cc      	b.n	80009d0 <__aeabi_d2f+0x14>
 8000a36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a3a:	d107      	bne.n	8000a4c <__aeabi_d2f+0x90>
 8000a3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a40:	bf1e      	ittt	ne
 8000a42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a4a:	4770      	bxne	lr
 8000a4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>:
 */

#include "GPIO.hpp"

	void GPIO::EN(GPIO_TypeDef* gpio){
		if(gpio == GPIOA){
 8000d58:	4b28      	ldr	r3, [pc, #160]	; (8000dfc <_ZN4GPIO2ENEP12GPIO_TypeDef+0xa4>)
 8000d5a:	4298      	cmp	r0, r3
 8000d5c:	d01e      	beq.n	8000d9c <_ZN4GPIO2ENEP12GPIO_TypeDef+0x44>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOAEN;
		}else if(gpio == GPIOB){
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xa8>)
 8000d60:	4298      	cmp	r0, r3
 8000d62:	d015      	beq.n	8000d90 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x38>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOBEN;
		}else if(gpio == GPIOC){
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xac>)
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d024      	beq.n	8000db4 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x5c>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOCEN;
		}else if(gpio == GPIOD){
 8000d6a:	4b27      	ldr	r3, [pc, #156]	; (8000e08 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xb0>)
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	d027      	beq.n	8000dc0 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x68>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIODEN;
		}else if(gpio == GPIOE){
 8000d70:	4b26      	ldr	r3, [pc, #152]	; (8000e0c <_ZN4GPIO2ENEP12GPIO_TypeDef+0xb4>)
 8000d72:	4298      	cmp	r0, r3
 8000d74:	d018      	beq.n	8000da8 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x50>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOEEN;
		}else if(gpio == GPIOF){
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xb8>)
 8000d78:	4298      	cmp	r0, r3
 8000d7a:	d027      	beq.n	8000dcc <_ZN4GPIO2ENEP12GPIO_TypeDef+0x74>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOFEN;
		}else if(gpio == GPIOG){
 8000d7c:	4b25      	ldr	r3, [pc, #148]	; (8000e14 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xbc>)
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d030      	beq.n	8000de4 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x8c>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOGEN;
		}else if(gpio == GPIOH){
 8000d82:	4b25      	ldr	r3, [pc, #148]	; (8000e18 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc0>)
 8000d84:	4298      	cmp	r0, r3
 8000d86:	d033      	beq.n	8000df0 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x98>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOHEN;
		}else if(gpio == GPIOI){
 8000d88:	4b24      	ldr	r3, [pc, #144]	; (8000e1c <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc4>)
 8000d8a:	4298      	cmp	r0, r3
 8000d8c:	d024      	beq.n	8000dd8 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x80>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOIEN;
		}
	}
 8000d8e:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOBEN;
 8000d90:	4a23      	ldr	r2, [pc, #140]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000d92:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d94:	f043 0302 	orr.w	r3, r3, #2
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOAEN;
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000d9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOEEN;
 8000da8:	4a1d      	ldr	r2, [pc, #116]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000daa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dac:	f043 0310 	orr.w	r3, r3, #16
 8000db0:	6313      	str	r3, [r2, #48]	; 0x30
 8000db2:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOCEN;
 8000db4:	4a1a      	ldr	r2, [pc, #104]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000db6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIODEN;
 8000dc0:	4a17      	ldr	r2, [pc, #92]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000dc2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dc4:	f043 0308 	orr.w	r3, r3, #8
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOFEN;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000dce:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000dd0:	f043 0320 	orr.w	r3, r3, #32
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOIEN;
 8000dd8:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000dda:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000de0:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000de2:	e7d4      	b.n	8000d8e <_ZN4GPIO2ENEP12GPIO_TypeDef+0x36>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOGEN;
 8000de4:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000de6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOHEN;
 8000df0:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000df2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4770      	bx	lr
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020c00 	.word	0x40020c00
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	40021400 	.word	0x40021400
 8000e14:	40021800 	.word	0x40021800
 8000e18:	40021c00 	.word	0x40021c00
 8000e1c:	40022000 	.word	0x40022000
 8000e20:	40023800 	.word	0x40023800

08000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>:

	void GPIO::MODE(GPIO_TypeDef* gpio, uint8_t pin, uint8_t mode){
		gpio->MODER = (gpio->MODER) | (mode << 2*pin);
 8000e24:	0049      	lsls	r1, r1, #1
 8000e26:	6803      	ldr	r3, [r0, #0]
 8000e28:	408a      	lsls	r2, r1
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	6002      	str	r2, [r0, #0]
	}
 8000e2e:	4770      	bx	lr

08000e30 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>:

	void GPIO::SPEED(GPIO_TypeDef* gpio, uint8_t pin, uint8_t speed){
		gpio->OSPEEDR = (gpio->OSPEEDR) | (speed << 2*pin);
 8000e30:	0049      	lsls	r1, r1, #1
 8000e32:	6883      	ldr	r3, [r0, #8]
 8000e34:	408a      	lsls	r2, r1
 8000e36:	431a      	orrs	r2, r3
 8000e38:	6082      	str	r2, [r0, #8]
	}
 8000e3a:	4770      	bx	lr

08000e3c <_ZN4GPIO4PUPDEP12GPIO_TypeDefhh>:

	void GPIO::PUPD(GPIO_TypeDef* gpio, uint8_t pin, uint8_t pupd){
		gpio->PUPDR = (gpio->PUPDR) | (pupd << 2*pin);
 8000e3c:	0049      	lsls	r1, r1, #1
 8000e3e:	68c3      	ldr	r3, [r0, #12]
 8000e40:	408a      	lsls	r2, r1
 8000e42:	431a      	orrs	r2, r3
 8000e44:	60c2      	str	r2, [r0, #12]
	}
 8000e46:	4770      	bx	lr

08000e48 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>:

	void GPIO::AFR(GPIO_TypeDef* gpio, uint8_t pin, uint8_t afr){
		if(pin <= 7){
 8000e48:	2907      	cmp	r1, #7
 8000e4a:	d805      	bhi.n	8000e58 <_ZN4GPIO3AFREP12GPIO_TypeDefhh+0x10>
			gpio->AFR[0] = gpio->AFR[0] | (afr << 4*pin);
 8000e4c:	0089      	lsls	r1, r1, #2
 8000e4e:	6a03      	ldr	r3, [r0, #32]
 8000e50:	408a      	lsls	r2, r1
 8000e52:	431a      	orrs	r2, r3
 8000e54:	6202      	str	r2, [r0, #32]
 8000e56:	4770      	bx	lr
		}else{
			gpio->AFR[1] = gpio->AFR[1] | (afr << 4*(pin-8));
 8000e58:	3908      	subs	r1, #8
 8000e5a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e5c:	0089      	lsls	r1, r1, #2
 8000e5e:	408a      	lsls	r2, r1
 8000e60:	431a      	orrs	r2, r3
 8000e62:	6242      	str	r2, [r0, #36]	; 0x24
		}
	}
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>:

	void GPIO::WRITE(GPIO_TypeDef* gpio, uint8_t pin, bool pinState){
		gpio->BSRR |= (1 << (pin + (16* !pinState)));
 8000e68:	2301      	movs	r3, #1
 8000e6a:	405a      	eors	r2, r3
 8000e6c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8000e70:	6982      	ldr	r2, [r0, #24]
 8000e72:	408b      	lsls	r3, r1
 8000e74:	4313      	orrs	r3, r2
 8000e76:	6183      	str	r3, [r0, #24]
	}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <_ZN4GPIO4READEP12GPIO_TypeDefh>:

	bool GPIO::READ(GPIO_TypeDef* gpio, uint8_t pin){
		return gpio->IDR & (1<<pin);
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	fa03 f101 	lsl.w	r1, r3, r1
 8000e82:	6903      	ldr	r3, [r0, #16]
 8000e84:	4219      	tst	r1, r3
	}
 8000e86:	bf14      	ite	ne
 8000e88:	2001      	movne	r0, #1
 8000e8a:	2000      	moveq	r0, #0
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh>:

	void GPIO::INTERRUPT_INIT(GPIO_TypeDef* gpio, uint8_t pin){
		if(gpio == GPIOA){
 8000e90:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xd0>)
 8000e92:	4298      	cmp	r0, r3
 8000e94:	d02b      	beq.n	8000eee <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x5e>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0000 << ((pin % 4) * 4));
		}else if(gpio == GPIOB){
 8000e96:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xd4>)
 8000e98:	4298      	cmp	r0, r3
 8000e9a:	d01b      	beq.n	8000ed4 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x44>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0001 << ((pin % 4) * 4));
		}else if(gpio == GPIOC){
 8000e9c:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xd8>)
 8000e9e:	4298      	cmp	r0, r3
 8000ea0:	d034      	beq.n	8000f0c <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x7c>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0010 << ((pin % 4) * 4));
		}else if(gpio == GPIOD){
 8000ea2:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xdc>)
 8000ea4:	4298      	cmp	r0, r3
 8000ea6:	d03e      	beq.n	8000f26 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x96>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0011 << ((pin % 4) * 4));
		}else if(gpio == GPIOE){
 8000ea8:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xe0>)
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d027      	beq.n	8000efe <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x6e>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0100 << ((pin % 4) * 4));
		}else if(gpio == GPIOF){
 8000eae:	4b31      	ldr	r3, [pc, #196]	; (8000f74 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xe4>)
 8000eb0:	4298      	cmp	r0, r3
 8000eb2:	d03f      	beq.n	8000f34 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xa4>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0101 << ((pin % 4) * 4));
		}else if(gpio == GPIOG){
 8000eb4:	4b30      	ldr	r3, [pc, #192]	; (8000f78 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xe8>)
 8000eb6:	4298      	cmp	r0, r3
 8000eb8:	d043      	beq.n	8000f42 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xb2>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0110 << ((pin % 4) * 4));
		}else if(gpio == GPIOH){
 8000eba:	4b30      	ldr	r3, [pc, #192]	; (8000f7c <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xec>)
 8000ebc:	4298      	cmp	r0, r3
 8000ebe:	d047      	beq.n	8000f50 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xc0>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0111 << ((pin % 4) * 4));
		}else if(gpio == GPIOI){
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf0>)
 8000ec2:	4298      	cmp	r0, r3
 8000ec4:	d112      	bne.n	8000eec <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x5c>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b1000 << ((pin % 4) * 4));
 8000ec6:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000eca:	4a2e      	ldr	r2, [pc, #184]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000ecc:	f001 0103 	and.w	r1, r1, #3
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	e005      	b.n	8000ee0 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x50>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0001 << ((pin % 4) * 4));
 8000ed4:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000ed8:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000eda:	f001 0103 	and.w	r1, r1, #3
 8000ede:	2301      	movs	r3, #1
 8000ee0:	4402      	add	r2, r0
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b1000 << ((pin % 4) * 4));
 8000ee2:	0089      	lsls	r1, r1, #2
 8000ee4:	6890      	ldr	r0, [r2, #8]
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	4303      	orrs	r3, r0
 8000eea:	6093      	str	r3, [r2, #8]
		}
	}
 8000eec:	4770      	bx	lr
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0000 << ((pin % 4) * 4));
 8000eee:	f5a3 4347 	sub.w	r3, r3, #50944	; 0xc700
 8000ef2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8000ef6:	3bf8      	subs	r3, #248	; 0xf8
 8000ef8:	585a      	ldr	r2, [r3, r1]
 8000efa:	505a      	str	r2, [r3, r1]
 8000efc:	4770      	bx	lr
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0100 << ((pin % 4) * 4));
 8000efe:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000f02:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000f04:	f001 0103 	and.w	r1, r1, #3
 8000f08:	2304      	movs	r3, #4
 8000f0a:	e7e9      	b.n	8000ee0 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x50>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0010 << ((pin % 4) * 4));
 8000f0c:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000f10:	2302      	movs	r3, #2
 8000f12:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000f14:	f001 0103 	and.w	r1, r1, #3
 8000f18:	4402      	add	r2, r0
 8000f1a:	4099      	lsls	r1, r3
 8000f1c:	6890      	ldr	r0, [r2, #8]
 8000f1e:	408b      	lsls	r3, r1
 8000f20:	4303      	orrs	r3, r0
 8000f22:	6093      	str	r3, [r2, #8]
 8000f24:	4770      	bx	lr
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0011 << ((pin % 4) * 4));
 8000f26:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000f2a:	4a16      	ldr	r2, [pc, #88]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000f2c:	f001 0103 	and.w	r1, r1, #3
 8000f30:	2303      	movs	r3, #3
 8000f32:	e7d5      	b.n	8000ee0 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x50>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0101 << ((pin % 4) * 4));
 8000f34:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000f38:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000f3a:	f001 0103 	and.w	r1, r1, #3
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e7ce      	b.n	8000ee0 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x50>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0110 << ((pin % 4) * 4));
 8000f42:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000f46:	4a0f      	ldr	r2, [pc, #60]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000f48:	f001 0103 	and.w	r1, r1, #3
 8000f4c:	2306      	movs	r3, #6
 8000f4e:	e7c7      	b.n	8000ee0 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x50>
			SYSCFG->EXTICR[pin/4] = SYSCFG->EXTICR[pin/4] | (0b0111 << ((pin % 4) * 4));
 8000f50:	f001 00fc 	and.w	r0, r1, #252	; 0xfc
 8000f54:	4a0b      	ldr	r2, [pc, #44]	; (8000f84 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0xf4>)
 8000f56:	f001 0103 	and.w	r1, r1, #3
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e7c0      	b.n	8000ee0 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh+0x50>
 8000f5e:	bf00      	nop
 8000f60:	40020000 	.word	0x40020000
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40021400 	.word	0x40021400
 8000f78:	40021800 	.word	0x40021800
 8000f7c:	40021c00 	.word	0x40021c00
 8000f80:	40022000 	.word	0x40022000
 8000f84:	40013800 	.word	0x40013800

08000f88 <_ZN7SENSORS3IMU8IMU_InitEv>:
		}

		return true;
	}

	bool IMU::IMU_Init(){
 8000f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		tmp[0] = reg;
 8000f8c:	f244 036b 	movw	r3, #16491	; 0x406b
	bool IMU::IMU_Init(){
 8000f90:	b082      	sub	sp, #8
 8000f92:	4604      	mov	r4, r0
		spi3.CS_EN();
 8000f94:	487a      	ldr	r0, [pc, #488]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 8000f96:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8000f9a:	f000 fe1b 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8000f9e:	2202      	movs	r2, #2
 8000fa0:	a901      	add	r1, sp, #4
 8000fa2:	4877      	ldr	r0, [pc, #476]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg|0x80;
 8000fa4:	25f5      	movs	r5, #245	; 0xf5
		spi3.Transmit(tmp, 2);
 8000fa6:	f000 fd55 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8000faa:	4875      	ldr	r0, [pc, #468]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8000fac:	f000 fe1c 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 8000fb0:	f241 036a 	movw	r3, #4202	; 0x106a
		spi3.CS_EN();
 8000fb4:	4872      	ldr	r0, [pc, #456]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 8000fb6:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8000fba:	f000 fe0b 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	a901      	add	r1, sp, #4
 8000fc2:	486f      	ldr	r0, [pc, #444]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8000fc4:	f000 fd46 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8000fc8:	486d      	ldr	r0, [pc, #436]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8000fca:	f000 fe0d 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 8000fce:	236b      	movs	r3, #107	; 0x6b
		spi3.CS_EN();
 8000fd0:	486b      	ldr	r0, [pc, #428]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 8000fd2:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8000fd6:	f000 fdfd 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8000fda:	2202      	movs	r2, #2
 8000fdc:	a901      	add	r1, sp, #4
 8000fde:	4868      	ldr	r0, [pc, #416]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8000fe0:	f000 fd38 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8000fe4:	4866      	ldr	r0, [pc, #408]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8000fe6:	f000 fdff 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		spi3.CS_EN();
 8000fea:	4865      	ldr	r0, [pc, #404]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg|0x80;
 8000fec:	f88d 5000 	strb.w	r5, [sp]
		spi3.CS_EN();
 8000ff0:	f000 fdf0 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 1);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4669      	mov	r1, sp
 8000ff8:	4861      	ldr	r0, [pc, #388]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8000ffa:	f000 fd2b 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.Receive(ret, 1);
 8000ffe:	2201      	movs	r2, #1
 8001000:	a901      	add	r1, sp, #4
 8001002:	485f      	ldr	r0, [pc, #380]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001004:	f000 fd3e 	bl	8001a84 <_ZN3COM3SPI7ReceiveEPhj>
		spi3.CS_DIS();
 8001008:	485d      	ldr	r0, [pc, #372]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 800100a:	f000 fded 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		return ret[0];
 800100e:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if(IMU_readRegister(WHO_AM_I) != 0x98){
 8001012:	2b98      	cmp	r3, #152	; 0x98
 8001014:	f040 80b0 	bne.w	8001178 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f0>
		tmp[0] = reg;
 8001018:	231a      	movs	r3, #26
		spi3.CS_EN();
 800101a:	4859      	ldr	r0, [pc, #356]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		IMU_f_ypr[1] += IMU_f_ypr[0] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);

	}

	void IMU::FIRFilter_Init(FIRFilter *filt, float *coeff, float *buf, const uint8_t order) {
		filt->out = 0.0f;
 800101c:	f04f 0800 	mov.w	r8, #0

		filt->coeff = coeff;
 8001020:	4f58      	ldr	r7, [pc, #352]	; (8001184 <_ZN7SENSORS3IMU8IMU_InitEv+0x1fc>)
		tmp[0] = reg;
 8001022:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001026:	f000 fdd5 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 800102a:	a901      	add	r1, sp, #4
 800102c:	2202      	movs	r2, #2
 800102e:	4854      	ldr	r0, [pc, #336]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		filt->buf   = buf;
		filt->order = order;
 8001030:	2633      	movs	r6, #51	; 0x33
		spi3.Transmit(tmp, 2);
 8001032:	f000 fd0f 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001036:	4852      	ldr	r0, [pc, #328]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001038:	f000 fdd6 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 800103c:	f640 431b 	movw	r3, #3099	; 0xc1b
		spi3.CS_EN();
 8001040:	484f      	ldr	r0, [pc, #316]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 8001042:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001046:	f000 fdc5 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 800104a:	a901      	add	r1, sp, #4
 800104c:	2202      	movs	r2, #2
 800104e:	484c      	ldr	r0, [pc, #304]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001050:	f000 fd00 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001054:	484a      	ldr	r0, [pc, #296]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001056:	f000 fdc7 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 800105a:	f241 031c 	movw	r3, #4124	; 0x101c
		spi3.CS_EN();
 800105e:	4848      	ldr	r0, [pc, #288]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 8001060:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001064:	f000 fdb6 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001068:	a901      	add	r1, sp, #4
 800106a:	2202      	movs	r2, #2
 800106c:	4844      	ldr	r0, [pc, #272]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 800106e:	f000 fcf1 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001072:	4843      	ldr	r0, [pc, #268]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001074:	f000 fdb8 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 8001078:	f640 031d 	movw	r3, #2077	; 0x81d
		spi3.CS_EN();
 800107c:	4840      	ldr	r0, [pc, #256]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 800107e:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001082:	f000 fda7 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001086:	a901      	add	r1, sp, #4
 8001088:	2202      	movs	r2, #2
 800108a:	483d      	ldr	r0, [pc, #244]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 800108c:	f000 fce2 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001090:	483b      	ldr	r0, [pc, #236]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001092:	f000 fda9 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 8001096:	2319      	movs	r3, #25
		spi3.CS_EN();
 8001098:	4839      	ldr	r0, [pc, #228]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 800109a:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 800109e:	f000 fd99 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 80010a2:	a901      	add	r1, sp, #4
 80010a4:	2202      	movs	r2, #2
 80010a6:	4836      	ldr	r0, [pc, #216]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 80010a8:	f000 fcd4 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 80010ac:	4834      	ldr	r0, [pc, #208]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 80010ae:	f000 fd9b 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 80010b2:	2337      	movs	r3, #55	; 0x37
		spi3.CS_EN();
 80010b4:	4832      	ldr	r0, [pc, #200]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 80010b6:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 80010ba:	f000 fd8b 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 80010be:	a901      	add	r1, sp, #4
 80010c0:	2202      	movs	r2, #2
 80010c2:	482f      	ldr	r0, [pc, #188]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 80010c4:	f000 fcc6 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 80010c8:	482d      	ldr	r0, [pc, #180]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 80010ca:	f000 fd8d 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 80010ce:	f44f 739c 	mov.w	r3, #312	; 0x138
		spi3.CS_EN();
 80010d2:	482b      	ldr	r0, [pc, #172]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg;
 80010d4:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 80010d8:	f000 fd7c 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 80010dc:	a901      	add	r1, sp, #4
 80010de:	2202      	movs	r2, #2
 80010e0:	4827      	ldr	r0, [pc, #156]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 80010e2:	f000 fcb7 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 80010e6:	4826      	ldr	r0, [pc, #152]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 80010e8:	f000 fd7e 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		FIRFilter_Init(&IMU_FIR_Y, filter_taps, IMU_BUF_FIR_Y, FILTER_TAP_NUM);
 80010ec:	f104 0010 	add.w	r0, r4, #16
		filt->putIndex = 0;

		for (uint8_t n = 0; n < order; n++) {
			filt->buf[n] = 0.0f;
 80010f0:	22cc      	movs	r2, #204	; 0xcc
 80010f2:	2100      	movs	r1, #0
		filt->buf   = buf;
 80010f4:	f8c4 027c 	str.w	r0, [r4, #636]	; 0x27c
		filt->out = 0.0f;
 80010f8:	f8c4 8274 	str.w	r8, [r4, #628]	; 0x274
		filt->coeff = coeff;
 80010fc:	f8c4 7278 	str.w	r7, [r4, #632]	; 0x278
		filt->order = order;
 8001100:	f8a4 6280 	strh.w	r6, [r4, #640]	; 0x280
			filt->buf[n] = 0.0f;
 8001104:	f001 fdae 	bl	8002c64 <memset>
		FIRFilter_Init(&IMU_FIR_P, filter_taps, IMU_BUF_FIR_P, FILTER_TAP_NUM);
 8001108:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
			filt->buf[n] = 0.0f;
 800110c:	22cc      	movs	r2, #204	; 0xcc
 800110e:	2100      	movs	r1, #0
		filt->out = 0.0f;
 8001110:	f8c4 8284 	str.w	r8, [r4, #644]	; 0x284
		filt->coeff = coeff;
 8001114:	f8c4 7288 	str.w	r7, [r4, #648]	; 0x288
		filt->order = order;
 8001118:	f8a4 6290 	strh.w	r6, [r4, #656]	; 0x290
		filt->buf   = buf;
 800111c:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
			filt->buf[n] = 0.0f;
 8001120:	f001 fda0 	bl	8002c64 <memset>
		FIRFilter_Init(&IMU_FIR_R, filter_taps, IMU_BUF_FIR_R, FILTER_TAP_NUM);
 8001124:	f504 70d4 	add.w	r0, r4, #424	; 0x1a8
			filt->buf[n] = 0.0f;
 8001128:	22cc      	movs	r2, #204	; 0xcc
 800112a:	2100      	movs	r1, #0
		filt->out = 0.0f;
 800112c:	f8c4 8294 	str.w	r8, [r4, #660]	; 0x294
		filt->coeff = coeff;
 8001130:	f8c4 7298 	str.w	r7, [r4, #664]	; 0x298
		filt->order = order;
 8001134:	f8a4 62a0 	strh.w	r6, [r4, #672]	; 0x2a0
		filt->buf   = buf;
 8001138:	f8c4 029c 	str.w	r0, [r4, #668]	; 0x29c
			filt->buf[n] = 0.0f;
 800113c:	f001 fd92 	bl	8002c64 <memset>
		spi3.CS_EN();
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
		tmp[0] = reg|0x80;
 8001142:	f88d 5000 	strb.w	r5, [sp]
		spi3.CS_EN();
 8001146:	f000 fd45 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 1);
 800114a:	4669      	mov	r1, sp
 800114c:	2201      	movs	r2, #1
 800114e:	480c      	ldr	r0, [pc, #48]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001150:	f000 fc80 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.Receive(ret, 1);
 8001154:	2201      	movs	r2, #1
 8001156:	a901      	add	r1, sp, #4
 8001158:	4809      	ldr	r0, [pc, #36]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 800115a:	f000 fc93 	bl	8001a84 <_ZN3COM3SPI7ReceiveEPhj>
		spi3.CS_DIS();
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <_ZN7SENSORS3IMU8IMU_InitEv+0x1f8>)
 8001160:	f000 fd42 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		return ret[0];
 8001164:	f89d 0004 	ldrb.w	r0, [sp, #4]
		if(IMU_readRegister(WHO_AM_I) != 0x98){
 8001168:	f1a0 0098 	sub.w	r0, r0, #152	; 0x98
 800116c:	fab0 f080 	clz	r0, r0
 8001170:	0940      	lsrs	r0, r0, #5
	}
 8001172:	b002      	add	sp, #8
 8001174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
 8001178:	2000      	movs	r0, #0
	}
 800117a:	b002      	add	sp, #8
 800117c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001180:	2000012c 	.word	0x2000012c
 8001184:	20000000 	.word	0x20000000

08001188 <_ZN7SENSORS3IMU12IMU_startINTEv>:
	void IMU::IMU_startINT(){
 8001188:	b508      	push	{r3, lr}
		GPIO::EN(GPIOB);
 800118a:	4811      	ldr	r0, [pc, #68]	; (80011d0 <_ZN7SENSORS3IMU12IMU_startINTEv+0x48>)
 800118c:	f7ff fde4 	bl	8000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::MODE(GPIOB, 9, MODE_INPUT);
 8001190:	2200      	movs	r2, #0
 8001192:	2109      	movs	r1, #9
 8001194:	480e      	ldr	r0, [pc, #56]	; (80011d0 <_ZN7SENSORS3IMU12IMU_startINTEv+0x48>)
 8001196:	f7ff fe45 	bl	8000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::PUPD(GPIOB, 9, PULLDOWN);
 800119a:	2202      	movs	r2, #2
 800119c:	2109      	movs	r1, #9
 800119e:	480c      	ldr	r0, [pc, #48]	; (80011d0 <_ZN7SENSORS3IMU12IMU_startINTEv+0x48>)
 80011a0:	f7ff fe4c 	bl	8000e3c <_ZN4GPIO4PUPDEP12GPIO_TypeDefhh>
		GPIO::INTERRUPT_INIT(GPIOB, 9);
 80011a4:	2109      	movs	r1, #9
 80011a6:	480a      	ldr	r0, [pc, #40]	; (80011d0 <_ZN7SENSORS3IMU12IMU_startINTEv+0x48>)
 80011a8:	f7ff fe72 	bl	8000e90 <_ZN4GPIO14INTERRUPT_INITEP12GPIO_TypeDefh>
		EXTI->IMR = EXTI->IMR | (1 << 9);
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <_ZN7SENSORS3IMU12IMU_startINTEv+0x4c>)
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	490a      	ldr	r1, [pc, #40]	; (80011d8 <_ZN7SENSORS3IMU12IMU_startINTEv+0x50>)
 80011b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011ba:	601a      	str	r2, [r3, #0]
		EXTI->RTSR = EXTI->RTSR | (1 << 9);
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80011c2:	609a      	str	r2, [r3, #8]
		EXTI->FTSR = EXTI->FTSR & ~(1 << 9);
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	6008      	str	r0, [r1, #0]
	}
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	40020400 	.word	0x40020400
 80011d4:	40013c00 	.word	0x40013c00
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	00000000 	.word	0x00000000

080011e0 <_ZN7SENSORS3IMU13IMU_readAngleEv>:
	void IMU::IMU_readAngle(){
 80011e0:	b570      	push	{r4, r5, r6, lr}
		tmp[0] = reg|0x80;
 80011e2:	23bb      	movs	r3, #187	; 0xbb
	void IMU::IMU_readAngle(){
 80011e4:	4604      	mov	r4, r0
		spi3.CS_EN();
 80011e6:	4876      	ldr	r0, [pc, #472]	; (80013c0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e0>)
	void IMU::IMU_readAngle(){
 80011e8:	ed2d 8b02 	vpush	{d8}
 80011ec:	b082      	sub	sp, #8
		tmp[0] = reg|0x80;
 80011ee:	f88d 3004 	strb.w	r3, [sp, #4]
		spi3.CS_EN();
 80011f2:	f000 fcef 	bl	8001bd4 <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 1);
 80011f6:	2201      	movs	r2, #1
 80011f8:	a901      	add	r1, sp, #4
 80011fa:	4871      	ldr	r0, [pc, #452]	; (80013c0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e0>)
 80011fc:	f000 fc2a 	bl	8001a54 <_ZN3COM3SPI8TransmitEPKhj>
		spi3.Receive(ret, buf);
 8001200:	220e      	movs	r2, #14
 8001202:	1c61      	adds	r1, r4, #1
 8001204:	486e      	ldr	r0, [pc, #440]	; (80013c0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e0>)
 8001206:	f000 fc3d 	bl	8001a84 <_ZN3COM3SPI7ReceiveEPhj>
		spi3.CS_DIS();
 800120a:	486d      	ldr	r0, [pc, #436]	; (80013c0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e0>)
 800120c:	f000 fcec 	bl	8001be8 <_ZN3COM3SPI6CS_DISEv>
		IMU_r_gyro[0] = (IMU_BUF[8] << 8) | IMU_BUF[9];
 8001210:	f8b4 0009 	ldrh.w	r0, [r4, #9]
 8001214:	f8b4 200b 	ldrh.w	r2, [r4, #11]
 8001218:	f8b4 300d 	ldrh.w	r3, [r4, #13]
 800121c:	ba40      	rev16	r0, r0
 800121e:	ba52      	rev16	r2, r2
 8001220:	ba5b      	rev16	r3, r3
 8001222:	f8a4 02f2 	strh.w	r0, [r4, #754]	; 0x2f2
		IMU_r_gyro[1] = (IMU_BUF[10] << 8) | IMU_BUF[11];
 8001226:	f8a4 22f4 	strh.w	r2, [r4, #756]	; 0x2f4
			IMU_ypr[i] = IMU_r_gyro[i] / 65.5;
 800122a:	b200      	sxth	r0, r0
		IMU_r_gyro[2] = (IMU_BUF[12] << 8) | IMU_BUF[13];
 800122c:	f8a4 32f6 	strh.w	r3, [r4, #758]	; 0x2f6
			IMU_ypr[i] = IMU_r_gyro[i] / 65.5;
 8001230:	b216      	sxth	r6, r2
 8001232:	b21d      	sxth	r5, r3
 8001234:	f7ff f946 	bl	80004c4 <__aeabi_i2d>
 8001238:	a35b      	add	r3, pc, #364	; (adr r3, 80013a8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1c8>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff f9ab 	bl	8000598 <__aeabi_dmul>
 8001242:	f7ff fbbb 	bl	80009bc <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	4630      	mov	r0, r6
 800124a:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
 800124e:	f7ff f939 	bl	80004c4 <__aeabi_i2d>
 8001252:	a355      	add	r3, pc, #340	; (adr r3, 80013a8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1c8>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f99e 	bl	8000598 <__aeabi_dmul>
 800125c:	f7ff fbae 	bl	80009bc <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	4628      	mov	r0, r5
 8001264:	f8c4 32a8 	str.w	r3, [r4, #680]	; 0x2a8
 8001268:	f7ff f92c 	bl	80004c4 <__aeabi_i2d>
 800126c:	a34e      	add	r3, pc, #312	; (adr r3, 80013a8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1c8>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff f991 	bl	8000598 <__aeabi_dmul>
 8001276:	f7ff fba1 	bl	80009bc <__aeabi_d2f>
 800127a:	f8b4 3003 	ldrh.w	r3, [r4, #3]
 800127e:	f8b4 2001 	ldrh.w	r2, [r4, #1]
 8001282:	ba5b      	rev16	r3, r3
 8001284:	f8c4 02ac 	str.w	r0, [r4, #684]	; 0x2ac
		IMU_r_accel[0] = (IMU_BUF[0] << 8) | IMU_BUF[1];
 8001288:	ba50      	rev16	r0, r2
 800128a:	b21e      	sxth	r6, r3
		IMU_r_accel[1] = (IMU_BUF[2] << 8) | IMU_BUF[3];
 800128c:	f8a4 32ee 	strh.w	r3, [r4, #750]	; 0x2ee
 8001290:	f8b4 3005 	ldrh.w	r3, [r4, #5]
		IMU_r_accel[0] = (IMU_BUF[0] << 8) | IMU_BUF[1];
 8001294:	f8a4 02ec 	strh.w	r0, [r4, #748]	; 0x2ec
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 8001298:	b200      	sxth	r0, r0
 800129a:	ba5b      	rev16	r3, r3
		IMU_r_accel[2] = (IMU_BUF[4] << 8) | IMU_BUF[5];
 800129c:	f8a4 32f0 	strh.w	r3, [r4, #752]	; 0x2f0
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 80012a0:	b21d      	sxth	r5, r3
 80012a2:	f7ff f90f 	bl	80004c4 <__aeabi_i2d>
 80012a6:	2200      	movs	r2, #0
 80012a8:	4b46      	ldr	r3, [pc, #280]	; (80013c4 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e4>)
 80012aa:	f7ff f975 	bl	8000598 <__aeabi_dmul>
 80012ae:	f7ff fb85 	bl	80009bc <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4630      	mov	r0, r6
 80012b6:	f8c4 32c8 	str.w	r3, [r4, #712]	; 0x2c8
 80012ba:	ee08 3a90 	vmov	s17, r3
 80012be:	f7ff f901 	bl	80004c4 <__aeabi_i2d>
 80012c2:	2200      	movs	r2, #0
 80012c4:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e4>)
 80012c6:	f7ff f967 	bl	8000598 <__aeabi_dmul>
 80012ca:	f7ff fb77 	bl	80009bc <__aeabi_d2f>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4628      	mov	r0, r5
 80012d2:	ee08 3a10 	vmov	s16, r3
 80012d6:	f8c4 32cc 	str.w	r3, [r4, #716]	; 0x2cc
 80012da:	f7ff f8f3 	bl	80004c4 <__aeabi_i2d>
 80012de:	2200      	movs	r2, #0
		IMU_fullvec = sqrt(IMU_accel[0]*IMU_accel[0] + IMU_accel[1]*IMU_accel[1] + IMU_accel[2]*IMU_accel[2]);
 80012e0:	ee28 8a08 	vmul.f32	s16, s16, s16
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 80012e4:	4b37      	ldr	r3, [pc, #220]	; (80013c4 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e4>)
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_dmul>
 80012ea:	f7ff fb67 	bl	80009bc <__aeabi_d2f>
 80012ee:	ee07 0a90 	vmov	s15, r0
		IMU_fullvec = sqrt(IMU_accel[0]*IMU_accel[0] + IMU_accel[1]*IMU_accel[1] + IMU_accel[2]*IMU_accel[2]);
 80012f2:	eea8 8aa8 	vfma.f32	s16, s17, s17
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 80012f6:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
		IMU_fullvec = sqrt(IMU_accel[0]*IMU_accel[0] + IMU_accel[1]*IMU_accel[1] + IMU_accel[2]*IMU_accel[2]);
 80012fa:	eea7 8aa7 	vfma.f32	s16, s15, s15
		if(IMU_fullvec == 0) {
 80012fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d04a      	beq.n	800139e <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1be>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001308:	eef1 7ac8 	vsqrt.f32	s15, s16
		IMU_acclAngle[0] = ff_fastASin(IMU_accel[0]/IMU_fullvec) * -57.29577951;
 800130c:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 8001310:	edc4 7aba 	vstr	s15, [r4, #744]	; 0x2e8
 8001314:	eeb0 0a68 	vmov.f32	s0, s17
 8001318:	f000 fed0 	bl	80020bc <_Z11ff_fastASinf>
 800131c:	ee10 0a10 	vmov	r0, s0
 8001320:	f7ff f8e2 	bl	80004e8 <__aeabi_f2d>
 8001324:	a322      	add	r3, pc, #136	; (adr r3, 80013b0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1d0>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff f935 	bl	8000598 <__aeabi_dmul>
 800132e:	f7ff fb45 	bl	80009bc <__aeabi_d2f>
		IMU_acclAngle[1] = ff_fastASin(IMU_accel[1]/IMU_fullvec) * 57.29577951;
 8001332:	edd4 7aba 	vldr	s15, [r4, #744]	; 0x2e8
 8001336:	ed94 0ab3 	vldr	s0, [r4, #716]	; 0x2cc
		IMU_acclAngle[0] = ff_fastASin(IMU_accel[0]/IMU_fullvec) * -57.29577951;
 800133a:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
		IMU_acclAngle[1] = ff_fastASin(IMU_accel[1]/IMU_fullvec) * 57.29577951;
 800133e:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001342:	f000 febb 	bl	80020bc <_Z11ff_fastASinf>
 8001346:	ee10 0a10 	vmov	r0, s0
 800134a:	f7ff f8cd 	bl	80004e8 <__aeabi_f2d>
 800134e:	a31a      	add	r3, pc, #104	; (adr r3, 80013b8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1d8>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f920 	bl	8000598 <__aeabi_dmul>
 8001358:	f7ff fb30 	bl	80009bc <__aeabi_d2f>
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 800135c:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e8>)
 800135e:	edd4 6aac 	vldr	s13, [r4, #688]	; 0x2b0
 8001362:	ed93 6a00 	vldr	s12, [r3]
		IMU_t_ypr[1] += IMU_ypr[1] * looptime;
 8001366:	ed94 7aad 	vldr	s14, [r4, #692]	; 0x2b4
		IMU_t_ypr[2] += IMU_ypr[2] * looptime;
 800136a:	edd4 7aae 	vldr	s15, [r4, #696]	; 0x2b8
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 800136e:	edd4 4aa9 	vldr	s9, [r4, #676]	; 0x2a4
		IMU_t_ypr[1] += IMU_ypr[1] * looptime;
 8001372:	ed94 5aaa 	vldr	s10, [r4, #680]	; 0x2a8
		IMU_t_ypr[2] += IMU_ypr[2] * looptime;
 8001376:	edd4 5aab 	vldr	s11, [r4, #684]	; 0x2ac
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 800137a:	eee4 6a86 	vfma.f32	s13, s9, s12
		IMU_t_ypr[1] += IMU_ypr[1] * looptime;
 800137e:	eea6 7a05 	vfma.f32	s14, s12, s10
		IMU_acclAngle[1] = ff_fastASin(IMU_accel[1]/IMU_fullvec) * 57.29577951;
 8001382:	f8c4 02d8 	str.w	r0, [r4, #728]	; 0x2d8
		IMU_t_ypr[2] += IMU_ypr[2] * looptime;
 8001386:	eee6 7a25 	vfma.f32	s15, s12, s11
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 800138a:	edc4 6aac 	vstr	s13, [r4, #688]	; 0x2b0
		IMU_t_ypr[1] += IMU_ypr[1] * looptime;
 800138e:	ed84 7aad 	vstr	s14, [r4, #692]	; 0x2b4
		IMU_t_ypr[2] += IMU_ypr[2] * looptime;
 8001392:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
	}
 8001396:	b002      	add	sp, #8
 8001398:	ecbd 8b02 	vpop	{d8}
 800139c:	bd70      	pop	{r4, r5, r6, pc}
			IMU_fullvec = 1;
 800139e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80013a2:	e7b5      	b.n	8001310 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x130>
 80013a4:	f3af 8000 	nop.w
 80013a8:	9e4a4271 	.word	0x9e4a4271
 80013ac:	3f8f4465 	.word	0x3f8f4465
 80013b0:	1a5d2372 	.word	0x1a5d2372
 80013b4:	c04ca5dc 	.word	0xc04ca5dc
 80013b8:	1a5d2372 	.word	0x1a5d2372
 80013bc:	404ca5dc 	.word	0x404ca5dc
 80013c0:	2000012c 	.word	0x2000012c
 80013c4:	3f300000 	.word	0x3f300000
 80013c8:	200000cc 	.word	0x200000cc
 80013cc:	00000000 	.word	0x00000000

080013d0 <_ZN7SENSORS3IMU13IMU_calcAngleEv>:
	void IMU::IMU_calcAngle(){
 80013d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80013d4:	4604      	mov	r4, r0
		IMU_t_ypr[0] = IMU_t_ypr[0] * 0.9996 + IMU_acclAngle[1] * 0.0004;	// angle is mixed up WHY I DON'T KNOW?
 80013d6:	f8d0 02b0 	ldr.w	r0, [r0, #688]	; 0x2b0
	void IMU::IMU_calcAngle(){
 80013da:	ed2d 8b02 	vpush	{d8}
		IMU_t_ypr[0] = IMU_t_ypr[0] * 0.9996 + IMU_acclAngle[1] * 0.0004;	// angle is mixed up WHY I DON'T KNOW?
 80013de:	f7ff f883 	bl	80004e8 <__aeabi_f2d>
 80013e2:	a3a3      	add	r3, pc, #652	; (adr r3, 8001670 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a0>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f8d6 	bl	8000598 <__aeabi_dmul>
 80013ec:	4606      	mov	r6, r0
 80013ee:	460f      	mov	r7, r1
 80013f0:	f8d4 02d8 	ldr.w	r0, [r4, #728]	; 0x2d8
 80013f4:	f7ff f878 	bl	80004e8 <__aeabi_f2d>
 80013f8:	a39f      	add	r3, pc, #636	; (adr r3, 8001678 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a8>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f8cb 	bl	8000598 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4630      	mov	r0, r6
 8001408:	4639      	mov	r1, r7
 800140a:	f7fe ff0f 	bl	800022c <__adddf3>
 800140e:	f7ff fad5 	bl	80009bc <__aeabi_d2f>
 8001412:	4603      	mov	r3, r0
		IMU_t_ypr[1] = IMU_t_ypr[1] * 0.9996 + IMU_acclAngle[0] * 0.0004;
 8001414:	f8d4 02b4 	ldr.w	r0, [r4, #692]	; 0x2b4
		IMU_t_ypr[0] = IMU_t_ypr[0] * 0.9996 + IMU_acclAngle[1] * 0.0004;	// angle is mixed up WHY I DON'T KNOW?
 8001418:	f8c4 32b0 	str.w	r3, [r4, #688]	; 0x2b0
		IMU_t_ypr[1] = IMU_t_ypr[1] * 0.9996 + IMU_acclAngle[0] * 0.0004;
 800141c:	f7ff f864 	bl	80004e8 <__aeabi_f2d>
 8001420:	a393      	add	r3, pc, #588	; (adr r3, 8001670 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a0>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f8b7 	bl	8000598 <__aeabi_dmul>
 800142a:	460f      	mov	r7, r1
 800142c:	4606      	mov	r6, r0
 800142e:	f8d4 02d4 	ldr.w	r0, [r4, #724]	; 0x2d4
 8001432:	f7ff f859 	bl	80004e8 <__aeabi_f2d>
 8001436:	a390      	add	r3, pc, #576	; (adr r3, 8001678 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a8>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f8ac 	bl	8000598 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4630      	mov	r0, r6
 8001446:	4639      	mov	r1, r7
 8001448:	f7fe fef0 	bl	800022c <__adddf3>
 800144c:	f7ff fab6 	bl	80009bc <__aeabi_d2f>
		}
	}

	float IMU::FIRFilter_Update(FIRFilter *filt, float in) {
		/* Store newest input value in circular buffer */
		filt->buf[filt->putIndex] = in;
 8001450:	f8d4 527c 	ldr.w	r5, [r4, #636]	; 0x27c
 8001454:	f894 e281 	ldrb.w	lr, [r4, #641]	; 0x281
		FIRFilter_Update(&IMU_FIR_Y, IMU_t_ypr[2]);
 8001458:	f8d4 22b8 	ldr.w	r2, [r4, #696]	; 0x2b8
		filt->buf[filt->putIndex] = in;
 800145c:	eb05 038e 	add.w	r3, r5, lr, lsl #2

		/* Compute filter output */
		uint8_t getIndex = filt->putIndex;

		filt->out = 0.0f;
 8001460:	eddf 7a81 	vldr	s15, [pc, #516]	; 8001668 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x298>
		IMU_t_ypr[1] = IMU_t_ypr[1] * 0.9996 + IMU_acclAngle[0] * 0.0004;
 8001464:	f8c4 02b4 	str.w	r0, [r4, #692]	; 0x2b4
		filt->buf[filt->putIndex] = in;
 8001468:	601a      	str	r2, [r3, #0]
		for (uint8_t n = 0; n < filt->order; n++) {
 800146a:	f894 7280 	ldrb.w	r7, [r4, #640]	; 0x280
		filt->out = 0.0f;
 800146e:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
		for (uint8_t n = 0; n < filt->order; n++) {
 8001472:	b327      	cbz	r7, 80014be <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xee>
 8001474:	f8d4 1278 	ldr.w	r1, [r4, #632]	; 0x278
 8001478:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
		uint8_t getIndex = filt->putIndex;
 800147c:	4672      	mov	r2, lr
 800147e:	fa5f f888 	uxtb.w	r8, r8
 8001482:	1d0b      	adds	r3, r1, #4
 8001484:	eb03 0688 	add.w	r6, r3, r8, lsl #2
 8001488:	e005      	b.n	8001496 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xc6>
		for (uint8_t n = 0; n < filt->order; n++) {
 800148a:	42b3      	cmp	r3, r6
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];

			if (getIndex == 0) {
				getIndex = filt->order - 1;
			} else {
			   getIndex--;
 800148c:	fa5f f28c 	uxtb.w	r2, ip
		for (uint8_t n = 0; n < filt->order; n++) {
 8001490:	f103 0304 	add.w	r3, r3, #4
 8001494:	d013      	beq.n	80014be <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xee>
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 8001496:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 800149a:	ed91 7a00 	vldr	s14, [r1]
			   getIndex--;
 800149e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 80014a2:	4619      	mov	r1, r3
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 80014a4:	edd0 6a00 	vldr	s13, [r0]
 80014a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80014ac:	edc4 7a9d 	vstr	s15, [r4, #628]	; 0x274
			if (getIndex == 0) {
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d1ea      	bne.n	800148a <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xba>
		for (uint8_t n = 0; n < filt->order; n++) {
 80014b4:	42b3      	cmp	r3, r6
				getIndex = filt->order - 1;
 80014b6:	4642      	mov	r2, r8
		for (uint8_t n = 0; n < filt->order; n++) {
 80014b8:	f103 0304 	add.w	r3, r3, #4
 80014bc:	d1eb      	bne.n	8001496 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xc6>
			}
		}

		/* Increment buffer index */
		filt->putIndex++;
 80014be:	f10e 0301 	add.w	r3, lr, #1
		filt->buf[filt->putIndex] = in;
 80014c2:	f8d4 528c 	ldr.w	r5, [r4, #652]	; 0x28c
 80014c6:	f894 e291 	ldrb.w	lr, [r4, #657]	; 0x291
		filt->putIndex++;
 80014ca:	b2db      	uxtb	r3, r3
		FIRFilter_Update(&IMU_FIR_P, IMU_t_ypr[0]);
 80014cc:	f8d4 22b0 	ldr.w	r2, [r4, #688]	; 0x2b0
		filt->out = 0.0f;
 80014d0:	eddf 7a65 	vldr	s15, [pc, #404]	; 8001668 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x298>
		if (filt->putIndex == filt->order) {
			filt->putIndex = 0;
 80014d4:	42bb      	cmp	r3, r7
 80014d6:	bf08      	it	eq
 80014d8:	2300      	moveq	r3, #0
 80014da:	f884 3281 	strb.w	r3, [r4, #641]	; 0x281
		filt->buf[filt->putIndex] = in;
 80014de:	eb05 038e 	add.w	r3, r5, lr, lsl #2
 80014e2:	601a      	str	r2, [r3, #0]
		for (uint8_t n = 0; n < filt->order; n++) {
 80014e4:	f894 7290 	ldrb.w	r7, [r4, #656]	; 0x290
		filt->out = 0.0f;
 80014e8:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
		for (uint8_t n = 0; n < filt->order; n++) {
 80014ec:	b327      	cbz	r7, 8001538 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x168>
 80014ee:	f8d4 1288 	ldr.w	r1, [r4, #648]	; 0x288
 80014f2:	f107 38ff 	add.w	r8, r7, #4294967295	; 0xffffffff
		uint8_t getIndex = filt->putIndex;
 80014f6:	4672      	mov	r2, lr
 80014f8:	fa5f f888 	uxtb.w	r8, r8
 80014fc:	1d0b      	adds	r3, r1, #4
 80014fe:	eb03 0688 	add.w	r6, r3, r8, lsl #2
 8001502:	e005      	b.n	8001510 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x140>
		for (uint8_t n = 0; n < filt->order; n++) {
 8001504:	42b3      	cmp	r3, r6
			   getIndex--;
 8001506:	fa5f f28c 	uxtb.w	r2, ip
		for (uint8_t n = 0; n < filt->order; n++) {
 800150a:	f103 0304 	add.w	r3, r3, #4
 800150e:	d013      	beq.n	8001538 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x168>
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 8001510:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8001514:	ed91 7a00 	vldr	s14, [r1]
			   getIndex--;
 8001518:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800151c:	4619      	mov	r1, r3
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 800151e:	edd0 6a00 	vldr	s13, [r0]
 8001522:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001526:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
			if (getIndex == 0) {
 800152a:	2a00      	cmp	r2, #0
 800152c:	d1ea      	bne.n	8001504 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x134>
		for (uint8_t n = 0; n < filt->order; n++) {
 800152e:	42b3      	cmp	r3, r6
				getIndex = filt->order - 1;
 8001530:	4642      	mov	r2, r8
		for (uint8_t n = 0; n < filt->order; n++) {
 8001532:	f103 0304 	add.w	r3, r3, #4
 8001536:	d1eb      	bne.n	8001510 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x140>
		filt->putIndex++;
 8001538:	f10e 0301 	add.w	r3, lr, #1
		filt->buf[filt->putIndex] = in;
 800153c:	f8d4 529c 	ldr.w	r5, [r4, #668]	; 0x29c
 8001540:	f894 e2a1 	ldrb.w	lr, [r4, #673]	; 0x2a1
		filt->putIndex++;
 8001544:	b2db      	uxtb	r3, r3
		FIRFilter_Update(&IMU_FIR_R, IMU_t_ypr[1]);
 8001546:	f8d4 22b4 	ldr.w	r2, [r4, #692]	; 0x2b4
		filt->out = 0.0f;
 800154a:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8001668 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x298>
			filt->putIndex = 0;
 800154e:	42bb      	cmp	r3, r7
 8001550:	bf08      	it	eq
 8001552:	2300      	moveq	r3, #0
 8001554:	f884 3291 	strb.w	r3, [r4, #657]	; 0x291
		filt->buf[filt->putIndex] = in;
 8001558:	eb05 038e 	add.w	r3, r5, lr, lsl #2
 800155c:	601a      	str	r2, [r3, #0]
		for (uint8_t n = 0; n < filt->order; n++) {
 800155e:	f894 82a0 	ldrb.w	r8, [r4, #672]	; 0x2a0
		filt->out = 0.0f;
 8001562:	ed84 8aa5 	vstr	s16, [r4, #660]	; 0x294
		for (uint8_t n = 0; n < filt->order; n++) {
 8001566:	f1b8 0f00 	cmp.w	r8, #0
 800156a:	d023      	beq.n	80015b4 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1e4>
 800156c:	f8d4 1298 	ldr.w	r1, [r4, #664]	; 0x298
 8001570:	f108 37ff 	add.w	r7, r8, #4294967295	; 0xffffffff
		uint8_t getIndex = filt->putIndex;
 8001574:	4672      	mov	r2, lr
 8001576:	b2ff      	uxtb	r7, r7
 8001578:	1d0b      	adds	r3, r1, #4
 800157a:	eb03 0687 	add.w	r6, r3, r7, lsl #2
 800157e:	e005      	b.n	800158c <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1bc>
		for (uint8_t n = 0; n < filt->order; n++) {
 8001580:	429e      	cmp	r6, r3
			   getIndex--;
 8001582:	fa5f f28c 	uxtb.w	r2, ip
		for (uint8_t n = 0; n < filt->order; n++) {
 8001586:	f103 0304 	add.w	r3, r3, #4
 800158a:	d013      	beq.n	80015b4 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1e4>
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 800158c:	eb05 0082 	add.w	r0, r5, r2, lsl #2
 8001590:	edd1 7a00 	vldr	s15, [r1]
			   getIndex--;
 8001594:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001598:	4619      	mov	r1, r3
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 800159a:	ed90 7a00 	vldr	s14, [r0]
 800159e:	eea7 8a27 	vfma.f32	s16, s14, s15
 80015a2:	ed84 8aa5 	vstr	s16, [r4, #660]	; 0x294
			if (getIndex == 0) {
 80015a6:	2a00      	cmp	r2, #0
 80015a8:	d1ea      	bne.n	8001580 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1b0>
		for (uint8_t n = 0; n < filt->order; n++) {
 80015aa:	429e      	cmp	r6, r3
				getIndex = filt->order - 1;
 80015ac:	463a      	mov	r2, r7
		for (uint8_t n = 0; n < filt->order; n++) {
 80015ae:	f103 0304 	add.w	r3, r3, #4
 80015b2:	d1eb      	bne.n	800158c <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1bc>
		filt->putIndex++;
 80015b4:	f10e 0301 	add.w	r3, lr, #1
		IMU_f_ypr[0] = IMU_FIR_P.out;
 80015b8:	f8d4 2284 	ldr.w	r2, [r4, #644]	; 0x284
		IMU_f_ypr[2] = IMU_FIR_Y.out;
 80015bc:	f8d4 9274 	ldr.w	r9, [r4, #628]	; 0x274
		filt->putIndex++;
 80015c0:	b2db      	uxtb	r3, r3
		IMU_f_ypr[0] -= IMU_f_ypr[1] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);
 80015c2:	4d2a      	ldr	r5, [pc, #168]	; (800166c <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x29c>)
		IMU_f_ypr[1] = IMU_FIR_R.out;
 80015c4:	ed84 8ab0 	vstr	s16, [r4, #704]	; 0x2c0
			filt->putIndex = 0;
 80015c8:	4598      	cmp	r8, r3
 80015ca:	bf08      	it	eq
 80015cc:	2300      	moveq	r3, #0
		IMU_f_ypr[0] -= IMU_f_ypr[1] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);
 80015ce:	6828      	ldr	r0, [r5, #0]
		IMU_f_ypr[0] = IMU_FIR_P.out;
 80015d0:	f8c4 22bc 	str.w	r2, [r4, #700]	; 0x2bc
 80015d4:	f884 32a1 	strb.w	r3, [r4, #673]	; 0x2a1
		IMU_f_ypr[2] = IMU_FIR_Y.out;
 80015d8:	f8c4 92c4 	str.w	r9, [r4, #708]	; 0x2c4
		IMU_f_ypr[0] -= IMU_f_ypr[1] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);
 80015dc:	f7fe ff84 	bl	80004e8 <__aeabi_f2d>
 80015e0:	a31f      	add	r3, pc, #124	; (adr r3, 8001660 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x290>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7fe ffd7 	bl	8000598 <__aeabi_dmul>
 80015ea:	4606      	mov	r6, r0
 80015ec:	460f      	mov	r7, r1
 80015ee:	4648      	mov	r0, r9
 80015f0:	f7fe ff7a 	bl	80004e8 <__aeabi_f2d>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4630      	mov	r0, r6
 80015fa:	4639      	mov	r1, r7
 80015fc:	f7fe ffcc 	bl	8000598 <__aeabi_dmul>
 8001600:	f7ff f9dc 	bl	80009bc <__aeabi_d2f>
 8001604:	ee00 0a10 	vmov	s0, r0
 8001608:	f000 fd3a 	bl	8002080 <_Z10ff_fastSinf>
 800160c:	edd4 8aaf 	vldr	s17, [r4, #700]	; 0x2bc
		IMU_f_ypr[1] += IMU_f_ypr[0] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);
 8001610:	6828      	ldr	r0, [r5, #0]
		IMU_f_ypr[0] -= IMU_f_ypr[1] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);
 8001612:	eee0 8a48 	vfms.f32	s17, s0, s16
 8001616:	edc4 8aaf 	vstr	s17, [r4, #700]	; 0x2bc
		IMU_f_ypr[1] += IMU_f_ypr[0] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);
 800161a:	f7fe ff65 	bl	80004e8 <__aeabi_f2d>
 800161e:	a310      	add	r3, pc, #64	; (adr r3, 8001660 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x290>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7fe ffb8 	bl	8000598 <__aeabi_dmul>
 8001628:	4606      	mov	r6, r0
 800162a:	460f      	mov	r7, r1
 800162c:	f8d4 02c4 	ldr.w	r0, [r4, #708]	; 0x2c4
 8001630:	f7fe ff5a 	bl	80004e8 <__aeabi_f2d>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4630      	mov	r0, r6
 800163a:	4639      	mov	r1, r7
 800163c:	f7fe ffac 	bl	8000598 <__aeabi_dmul>
 8001640:	f7ff f9bc 	bl	80009bc <__aeabi_d2f>
 8001644:	ee00 0a10 	vmov	s0, r0
 8001648:	f000 fd1a 	bl	8002080 <_Z10ff_fastSinf>
 800164c:	edd4 7ab0 	vldr	s15, [r4, #704]	; 0x2c0
 8001650:	eee8 7a80 	vfma.f32	s15, s17, s0
	}
 8001654:	ecbd 8b02 	vpop	{d8}
		IMU_f_ypr[1] += IMU_f_ypr[0] * ff_fastSin(IMU_f_ypr[2] * 0.017453293 * looptime);
 8001658:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
	}
 800165c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001660:	aa91ed06 	.word	0xaa91ed06
 8001664:	3f91df46 	.word	0x3f91df46
 8001668:	00000000 	.word	0x00000000
 800166c:	200000cc 	.word	0x200000cc
 8001670:	23a29c78 	.word	0x23a29c78
 8001674:	3feffcb9 	.word	0x3feffcb9
 8001678:	eb1c432d 	.word	0xeb1c432d
 800167c:	3f3a36e2 	.word	0x3f3a36e2

08001680 <SPI3_IRQHandler>:
TIMER::TIM tim4_controller(TIM4,71, 4096);
TIMER::TIM tim5_trig(TIM5,1, 26999);
TIMER::TIM tim7_trig(TIM7,1, 53999);

extern "C" void SPI3_IRQHandler(){
	spi3.Interrupt_Handler();
 8001680:	4801      	ldr	r0, [pc, #4]	; (8001688 <SPI3_IRQHandler+0x8>)
 8001682:	f000 ba19 	b.w	8001ab8 <_ZN3COM3SPI17Interrupt_HandlerEv>
 8001686:	bf00      	nop
 8001688:	2000012c 	.word	0x2000012c

0800168c <SPI2_IRQHandler>:
}

extern "C" void SPI2_IRQHandler(){
	spi2.Interrupt_Handler();
 800168c:	4801      	ldr	r0, [pc, #4]	; (8001694 <SPI2_IRQHandler+0x8>)
 800168e:	f000 ba13 	b.w	8001ab8 <_ZN3COM3SPI17Interrupt_HandlerEv>
 8001692:	bf00      	nop
 8001694:	200000f8 	.word	0x200000f8

08001698 <USART1_IRQHandler>:
}

extern "C" void USART1_IRQHandler(){
	uart1.Interrupt_Handler();
 8001698:	4801      	ldr	r0, [pc, #4]	; (80016a0 <USART1_IRQHandler+0x8>)
 800169a:	f000 bccb 	b.w	8002034 <_ZN3COM4UART17Interrupt_HandlerEv>
 800169e:	bf00      	nop
 80016a0:	200002b4 	.word	0x200002b4

080016a4 <TIM3_IRQHandler>:
}

extern "C" void TIM3_IRQHandler(){
	tim3_controller.Interrupt_Handler();
 80016a4:	4801      	ldr	r0, [pc, #4]	; (80016ac <TIM3_IRQHandler+0x8>)
 80016a6:	f000 bbc5 	b.w	8001e34 <_ZN5TIMER3TIM17Interrupt_HandlerEv>
 80016aa:	bf00      	nop
 80016ac:	200001a4 	.word	0x200001a4

080016b0 <TIM4_IRQHandler>:
}

extern "C" void TIM4_IRQHandler(){
	tim4_controller.Interrupt_Handler();
 80016b0:	4801      	ldr	r0, [pc, #4]	; (80016b8 <TIM4_IRQHandler+0x8>)
 80016b2:	f000 bbbf 	b.w	8001e34 <_ZN5TIMER3TIM17Interrupt_HandlerEv>
 80016b6:	bf00      	nop
 80016b8:	200001e8 	.word	0x200001e8

080016bc <TIM5_IRQHandler>:
}

extern "C" void TIM5_IRQHandler(){
 80016bc:	b508      	push	{r3, lr}
	if(GPIO::READ(GPIOC, 4)){
 80016be:	2104      	movs	r1, #4
 80016c0:	480b      	ldr	r0, [pc, #44]	; (80016f0 <TIM5_IRQHandler+0x34>)
 80016c2:	f7ff fbdb 	bl	8000e7c <_ZN4GPIO4READEP12GPIO_TypeDefh>
 80016c6:	b160      	cbz	r0, 80016e2 <TIM5_IRQHandler+0x26>
		GPIO::WRITE(GPIOC, 4, LOW);
 80016c8:	2200      	movs	r2, #0
 80016ca:	2104      	movs	r1, #4
 80016cc:	4808      	ldr	r0, [pc, #32]	; (80016f0 <TIM5_IRQHandler+0x34>)
 80016ce:	f7ff fbcb 	bl	8000e68 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
	}else{
		GPIO::WRITE(GPIOC, 4, HIGH);
	}
	imu.IMU_calcAngle();
 80016d2:	4808      	ldr	r0, [pc, #32]	; (80016f4 <TIM5_IRQHandler+0x38>)
 80016d4:	f7ff fe7c 	bl	80013d0 <_ZN7SENSORS3IMU13IMU_calcAngleEv>
	tim5_trig.UpdateInterrupt_Handler();
 80016d8:	4807      	ldr	r0, [pc, #28]	; (80016f8 <TIM5_IRQHandler+0x3c>)
}
 80016da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	tim5_trig.UpdateInterrupt_Handler();
 80016de:	f000 bb0d 	b.w	8001cfc <_ZN5TIMER3TIM23UpdateInterrupt_HandlerEv>
		GPIO::WRITE(GPIOC, 4, HIGH);
 80016e2:	2201      	movs	r2, #1
 80016e4:	2104      	movs	r1, #4
 80016e6:	4802      	ldr	r0, [pc, #8]	; (80016f0 <TIM5_IRQHandler+0x34>)
 80016e8:	f7ff fbbe 	bl	8000e68 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
 80016ec:	e7f1      	b.n	80016d2 <TIM5_IRQHandler+0x16>
 80016ee:	bf00      	nop
 80016f0:	40020800 	.word	0x40020800
 80016f4:	200002e0 	.word	0x200002e0
 80016f8:	2000022c 	.word	0x2000022c

080016fc <TIM7_IRQHandler>:


extern "C" void TIM7_IRQHandler(){
	tim7_trig.UpdateInterrupt_Handler();
 80016fc:	4801      	ldr	r0, [pc, #4]	; (8001704 <TIM7_IRQHandler+0x8>)
 80016fe:	f000 bafd 	b.w	8001cfc <_ZN5TIMER3TIM23UpdateInterrupt_HandlerEv>
 8001702:	bf00      	nop
 8001704:	20000270 	.word	0x20000270

08001708 <EXTI9_5_IRQHandler>:
}

extern "C" void EXTI9_5_IRQHandler(){

	//imu.IMU_readAngle();
	EXTI->PR = EXTI->PR | (1 << 9);
 8001708:	4a02      	ldr	r2, [pc, #8]	; (8001714 <EXTI9_5_IRQHandler+0xc>)
 800170a:	6953      	ldr	r3, [r2, #20]
 800170c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001710:	6153      	str	r3, [r2, #20]
}
 8001712:	4770      	bx	lr
 8001714:	40013c00 	.word	0x40013c00

08001718 <_GLOBAL__sub_I_spi3>:
 8001718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
public:

	constexpr SPI(SPI_TypeDef* spi, GPIO_TypeDef* mosi , uint8_t mosi_pin, uint8_t mosi_afr,
									GPIO_TypeDef* miso , uint8_t miso_pin, uint8_t miso_afr,
									GPIO_TypeDef* sck , uint8_t sck_pin, uint8_t sck_afr,
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 800171c:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80018c4 <_GLOBAL__sub_I_spi3+0x1ac>
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
									sck(sck), sck_pin(sck_pin), sck_afr(sck_afr),
									cs(cs), cs_pin(cs_pin),
									tx_current(nullptr), rx_current(nullptr),
 8001720:	2300      	movs	r3, #0
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 8001722:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80018c8 <_GLOBAL__sub_I_spi3+0x1b0>
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 8001726:	f04f 0923 	mov.w	r9, #35	; 0x23
									cs(cs), cs_pin(cs_pin),
 800172a:	4a58      	ldr	r2, [pc, #352]	; (800188c <_GLOBAL__sub_I_spi3+0x174>)
#include "GPIO.hpp"

namespace TIMER {
	class TIM{
	public:
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 800172c:	f04f 0a47 	mov.w	sl, #71	; 0x47
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
 8001730:	f8df e198 	ldr.w	lr, [pc, #408]	; 80018cc <_GLOBAL__sub_I_spi3+0x1b4>
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 8001734:	f8df 8198 	ldr.w	r8, [pc, #408]	; 80018d0 <_GLOBAL__sub_I_spi3+0x1b8>
 8001738:	f8cc b018 	str.w	fp, [ip, #24]
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 800173c:	4954      	ldr	r1, [pc, #336]	; (8001890 <_GLOBAL__sub_I_spi3+0x178>)
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 800173e:	f8df b194 	ldr.w	fp, [pc, #404]	; 80018d4 <_GLOBAL__sub_I_spi3+0x1bc>
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 8001742:	4f54      	ldr	r7, [pc, #336]	; (8001894 <_GLOBAL__sub_I_spi3+0x17c>)
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 8001744:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 8001748:	f8cc 1000 	str.w	r1, [ip]
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 800174c:	f88c 9004 	strb.w	r9, [ip, #4]
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 8001750:	f8cc b01c 	str.w	fp, [ip, #28]
 8001754:	f8df b180 	ldr.w	fp, [pc, #384]	; 80018d8 <_GLOBAL__sub_I_spi3+0x1c0>
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 8001758:	f887 9004 	strb.w	r9, [r7, #4]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 800175c:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8001760:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 8001764:	4e4c      	ldr	r6, [pc, #304]	; (8001898 <_GLOBAL__sub_I_spi3+0x180>)
 8001766:	4c4d      	ldr	r4, [pc, #308]	; (800189c <_GLOBAL__sub_I_spi3+0x184>)
 8001768:	4d4d      	ldr	r5, [pc, #308]	; (80018a0 <_GLOBAL__sub_I_spi3+0x188>)
 800176a:	484e      	ldr	r0, [pc, #312]	; (80018a4 <_GLOBAL__sub_I_spi3+0x18c>)
 800176c:	494e      	ldr	r1, [pc, #312]	; (80018a8 <_GLOBAL__sub_I_spi3+0x190>)
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
 800176e:	e9cc 8e02 	strd	r8, lr, [ip, #8]
									cs(cs), cs_pin(cs_pin),
 8001772:	e9cc e204 	strd	lr, r2, [ip, #16]
									tx_current(nullptr), rx_current(nullptr),
 8001776:	e9cc 3308 	strd	r3, r3, [ip, #32]
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 800177a:	e9cc 330a 	strd	r3, r3, [ip, #40]	; 0x28
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 800177e:	f8df c15c 	ldr.w	ip, [pc, #348]	; 80018dc <_GLOBAL__sub_I_spi3+0x1c4>
 8001782:	f8c7 c000 	str.w	ip, [r7]
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 8001786:	f8df c158 	ldr.w	ip, [pc, #344]	; 80018e0 <_GLOBAL__sub_I_spi3+0x1c8>
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
 800178a:	e9c7 ee02 	strd	lr, lr, [r7, #8]
									cs(cs), cs_pin(cs_pin),
 800178e:	e9c7 8804 	strd	r8, r8, [r7, #16]
									tx_current(nullptr), rx_current(nullptr),
 8001792:	e9c7 3308 	strd	r3, r3, [r7, #32]

class UART {
public:
	UART(USART_TypeDef* uart, GPIO_TypeDef* tx, uint8_t tx_pin, uint8_t tx_afr ,
							  GPIO_TypeDef* rx, uint8_t rx_pin,	uint8_t rx_afr) :
							  uart(uart), tx(tx), tx_pin(tx_pin), tx_afr(tx_afr),
 8001796:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80018e4 <_GLOBAL__sub_I_spi3+0x1cc>
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 800179a:	f04f 0e1d 	mov.w	lr, #29
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 800179e:	e9c7 330a 	strd	r3, r3, [r7, #40]	; 0x28
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 80017a2:	e9c7 bc06 	strd	fp, ip, [r7, #24]
 80017a6:	4f41      	ldr	r7, [pc, #260]	; (80018ac <_GLOBAL__sub_I_spi3+0x194>)
 80017a8:	f8c8 7000 	str.w	r7, [r8]
 80017ac:	4f40      	ldr	r7, [pc, #256]	; (80018b0 <_GLOBAL__sub_I_spi3+0x198>)
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80017ae:	e9c6 3300 	strd	r3, r3, [r6]
							  rx(rx), rx_pin(rx_pin), rx_afr(rx_afr){};
 80017b2:	e9c8 2202 	strd	r2, r2, [r8, #8]
							  uart(uart), tx(tx), tx_pin(tx_pin), tx_afr(tx_afr),
 80017b6:	f8c8 7010 	str.w	r7, [r8, #16]
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80017ba:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80017be:	f8a6 9040 	strh.w	r9, [r6, #64]	; 0x40
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80017c2:	6137      	str	r7, [r6, #16]
 80017c4:	270c      	movs	r7, #12
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80017c6:	63eb      	str	r3, [r5, #60]	; 0x3c
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80017c8:	62f7      	str	r7, [r6, #44]	; 0x2c
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80017ca:	6023      	str	r3, [r4, #0]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80017cc:	f8a5 9040 	strh.w	r9, [r5, #64]	; 0x40
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 80017d0:	e9c6 2309 	strd	r2, r3, [r6, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80017d4:	e9c6 3302 	strd	r3, r3, [r6, #8]
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 80017d8:	e9c6 e205 	strd	lr, r2, [r6, #20]
 80017dc:	e9c6 2207 	strd	r2, r2, [r6, #28]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80017e0:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
 80017e4:	e9c6 330e 	strd	r3, r3, [r6, #56]	; 0x38
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80017e8:	4e32      	ldr	r6, [pc, #200]	; (80018b4 <_GLOBAL__sub_I_spi3+0x19c>)
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 80017ea:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80017ee:	e9c5 3300 	strd	r3, r3, [r5]
 80017f2:	e9c5 3302 	strd	r3, r3, [r5, #8]
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 80017f6:	e9c5 e205 	strd	lr, r2, [r5, #20]
 80017fa:	e9c5 2207 	strd	r2, r2, [r5, #28]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80017fe:	e9c5 a30b 	strd	sl, r3, [r5, #44]	; 0x2c
 8001802:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001806:	612e      	str	r6, [r5, #16]
 8001808:	2501      	movs	r5, #1
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 800180a:	6063      	str	r3, [r4, #4]
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 800180c:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001810:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
 8001814:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001816:	e9c0 530b 	strd	r5, r3, [r0, #44]	; 0x2c
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 800181a:	4d27      	ldr	r5, [pc, #156]	; (80018b8 <_GLOBAL__sub_I_spi3+0x1a0>)
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 800181c:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 8001820:	e9c4 3302 	strd	r3, r3, [r4, #8]
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 8001824:	e9c4 e205 	strd	lr, r2, [r4, #20]
 8001828:	e9c4 2207 	strd	r2, r2, [r4, #28]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 800182c:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8001830:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001834:	6125      	str	r5, [r4, #16]
 8001836:	4c21      	ldr	r4, [pc, #132]	; (80018bc <_GLOBAL__sub_I_spi3+0x1a4>)
 8001838:	6104      	str	r4, [r0, #16]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 800183a:	f646 1477 	movw	r4, #26999	; 0x6977
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 800183e:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 8001842:	e9c0 3300 	strd	r3, r3, [r0]
 8001846:	e9c0 3302 	strd	r3, r3, [r0, #8]
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 800184a:	e9c0 e205 	strd	lr, r2, [r0, #20]
 800184e:	e9c0 2207 	strd	r2, r2, [r0, #28]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001852:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 8001856:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 800185a:	f24d 20ef 	movw	r0, #53999	; 0xd2ef
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 800185e:	600b      	str	r3, [r1, #0]
 8001860:	60cb      	str	r3, [r1, #12]
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 8001862:	628b      	str	r3, [r1, #40]	; 0x28
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001864:	63cb      	str	r3, [r1, #60]	; 0x3c
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001866:	f8c1 e014 	str.w	lr, [r1, #20]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 800186a:	f8a1 0040 	strh.w	r0, [r1, #64]	; 0x40
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 800186e:	e9c1 2206 	strd	r2, r2, [r1, #24]
 8001872:	e9c1 2208 	strd	r2, r2, [r1, #32]
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001876:	2201      	movs	r2, #1
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 8001878:	e9c1 3301 	strd	r3, r3, [r1, #4]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 800187c:	e9c1 230b 	strd	r2, r3, [r1, #44]	; 0x2c
 8001880:	e9c1 330d 	strd	r3, r3, [r1, #52]	; 0x34
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <_GLOBAL__sub_I_spi3+0x1a8>)
 8001886:	610b      	str	r3, [r1, #16]
 8001888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800188c:	40020000 	.word	0x40020000
 8001890:	40003c00 	.word	0x40003c00
 8001894:	200000f8 	.word	0x200000f8
 8001898:	20000160 	.word	0x20000160
 800189c:	200001e8 	.word	0x200001e8
 80018a0:	200001a4 	.word	0x200001a4
 80018a4:	2000022c 	.word	0x2000022c
 80018a8:	20000270 	.word	0x20000270
 80018ac:	40011000 	.word	0x40011000
 80018b0:	07070a09 	.word	0x07070a09
 80018b4:	40000400 	.word	0x40000400
 80018b8:	40000800 	.word	0x40000800
 80018bc:	40000c00 	.word	0x40000c00
 80018c0:	40001400 	.word	0x40001400
 80018c4:	2000012c 	.word	0x2000012c
 80018c8:	040b0a02 	.word	0x040b0a02
 80018cc:	40020800 	.word	0x40020800
 80018d0:	40020400 	.word	0x40020400
 80018d4:	01060607 	.word	0x01060607
 80018d8:	0c0d0201 	.word	0x0c0d0201
 80018dc:	40003800 	.word	0x40003800
 80018e0:	01050505 	.word	0x01050505
 80018e4:	200002b4 	.word	0x200002b4

080018e8 <_ZN3COM3SPI4InitEv>:
 */

#include "SPI.hpp"

namespace COM {
	void SPI::Init(){
 80018e8:	b538      	push	{r3, r4, r5, lr}
		if(spi == SPI1){
 80018ea:	4a53      	ldr	r2, [pc, #332]	; (8001a38 <_ZN3COM3SPI4InitEv+0x150>)
	void SPI::Init(){
 80018ec:	4604      	mov	r4, r0
		if(spi == SPI1){
 80018ee:	6803      	ldr	r3, [r0, #0]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	f000 8089 	beq.w	8001a08 <_ZN3COM3SPI4InitEv+0x120>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI1EN;
			IRQn = SPI1_IRQn;
		}else if(spi == SPI2){
 80018f6:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <_ZN3COM3SPI4InitEv+0x154>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d012      	beq.n	8001922 <_ZN3COM3SPI4InitEv+0x3a>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI2EN;
			IRQn = SPI2_IRQn;
		}else if(spi == SPI3){
 80018fc:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <_ZN3COM3SPI4InitEv+0x158>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	f000 808a 	beq.w	8001a18 <_ZN3COM3SPI4InitEv+0x130>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI3EN;
			IRQn = SPI3_IRQn;
		}else if(spi == SPI4){
 8001904:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <_ZN3COM3SPI4InitEv+0x15c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f000 808e 	beq.w	8001a28 <_ZN3COM3SPI4InitEv+0x140>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI4EN;
			IRQn = SPI4_IRQn;
		}else if(spi == SPI5){
 800190c:	4a4e      	ldr	r2, [pc, #312]	; (8001a48 <_ZN3COM3SPI4InitEv+0x160>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d10e      	bne.n	8001930 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI5EN;
 8001912:	494e      	ldr	r1, [pc, #312]	; (8001a4c <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI5_IRQn;
 8001914:	2055      	movs	r0, #85	; 0x55
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI5EN;
 8001916:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001918:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800191c:	644a      	str	r2, [r1, #68]	; 0x44
			IRQn = SPI5_IRQn;
 800191e:	7120      	strb	r0, [r4, #4]
 8001920:	e006      	b.n	8001930 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI2EN;
 8001922:	494a      	ldr	r1, [pc, #296]	; (8001a4c <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI2_IRQn;
 8001924:	2024      	movs	r0, #36	; 0x24
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI2EN;
 8001926:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001928:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800192c:	640a      	str	r2, [r1, #64]	; 0x40
			IRQn = SPI2_IRQn;
 800192e:	7120      	strb	r0, [r4, #4]
		}

		spi->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 8001930:	f44f 7145 	mov.w	r1, #788	; 0x314
		spi->CR2 = SPI_CR2_DS_1 | SPI_CR2_FRXTH | SPI_CR2_RXNEIE;
 8001934:	f44f 5292 	mov.w	r2, #4672	; 0x1240

		GPIO::EN(mosi);
 8001938:	68a0      	ldr	r0, [r4, #8]
		spi->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 800193a:	6019      	str	r1, [r3, #0]
		spi->CR2 = SPI_CR2_DS_1 | SPI_CR2_FRXTH | SPI_CR2_RXNEIE;
 800193c:	605a      	str	r2, [r3, #4]
		GPIO::EN(mosi);
 800193e:	f7ff fa0b 	bl	8000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::EN(miso);
 8001942:	68e0      	ldr	r0, [r4, #12]
 8001944:	f7ff fa08 	bl	8000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::EN(sck);
 8001948:	6920      	ldr	r0, [r4, #16]
 800194a:	f7ff fa05 	bl	8000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::EN(cs);
 800194e:	6960      	ldr	r0, [r4, #20]
 8001950:	f7ff fa02 	bl	8000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>

		GPIO::MODE(mosi, mosi_pin, MODE_ALT);
 8001954:	2202      	movs	r2, #2
 8001956:	7e21      	ldrb	r1, [r4, #24]
 8001958:	68a0      	ldr	r0, [r4, #8]
 800195a:	f7ff fa63 	bl	8000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::MODE(miso, miso_pin, MODE_ALT);
 800195e:	2202      	movs	r2, #2
 8001960:	7e61      	ldrb	r1, [r4, #25]
 8001962:	68e0      	ldr	r0, [r4, #12]
 8001964:	f7ff fa5e 	bl	8000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::MODE(sck, sck_pin, MODE_ALT);
 8001968:	2202      	movs	r2, #2
 800196a:	7ea1      	ldrb	r1, [r4, #26]
 800196c:	6920      	ldr	r0, [r4, #16]
 800196e:	f7ff fa59 	bl	8000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::MODE(cs, cs_pin, MODE_OUTPUT);
 8001972:	2201      	movs	r2, #1
 8001974:	7ee1      	ldrb	r1, [r4, #27]
 8001976:	6960      	ldr	r0, [r4, #20]
 8001978:	f7ff fa54 	bl	8000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>

		GPIO::PUPD(cs, cs_pin, PULLUP);
 800197c:	2201      	movs	r2, #1
 800197e:	7ee1      	ldrb	r1, [r4, #27]
 8001980:	6960      	ldr	r0, [r4, #20]
 8001982:	f7ff fa5b 	bl	8000e3c <_ZN4GPIO4PUPDEP12GPIO_TypeDefhh>

		GPIO::SPEED(mosi, mosi_pin, SPEED_VHIGH);
 8001986:	2203      	movs	r2, #3
 8001988:	7e21      	ldrb	r1, [r4, #24]
 800198a:	68a0      	ldr	r0, [r4, #8]
 800198c:	f7ff fa50 	bl	8000e30 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::SPEED(miso, miso_pin, SPEED_VHIGH);
 8001990:	2203      	movs	r2, #3
 8001992:	7e61      	ldrb	r1, [r4, #25]
 8001994:	68e0      	ldr	r0, [r4, #12]
 8001996:	f7ff fa4b 	bl	8000e30 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::SPEED(sck, sck_pin, SPEED_VHIGH);
 800199a:	2203      	movs	r2, #3
 800199c:	7ea1      	ldrb	r1, [r4, #26]
 800199e:	6920      	ldr	r0, [r4, #16]
 80019a0:	f7ff fa46 	bl	8000e30 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::SPEED(cs, cs_pin, SPEED_VHIGH);
 80019a4:	2203      	movs	r2, #3
 80019a6:	7ee1      	ldrb	r1, [r4, #27]
 80019a8:	6960      	ldr	r0, [r4, #20]
 80019aa:	f7ff fa41 	bl	8000e30 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>

		GPIO::AFR(mosi, mosi_pin, mosi_afr);
 80019ae:	7f22      	ldrb	r2, [r4, #28]
 80019b0:	7e21      	ldrb	r1, [r4, #24]
 80019b2:	68a0      	ldr	r0, [r4, #8]
 80019b4:	f7ff fa48 	bl	8000e48 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>
		GPIO::AFR(miso, miso_pin, miso_afr);
 80019b8:	7f62      	ldrb	r2, [r4, #29]
 80019ba:	7e61      	ldrb	r1, [r4, #25]
 80019bc:	68e0      	ldr	r0, [r4, #12]
 80019be:	f7ff fa43 	bl	8000e48 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>
		GPIO::AFR(sck, sck_pin, sck_afr);
 80019c2:	7fa2      	ldrb	r2, [r4, #30]
 80019c4:	7ea1      	ldrb	r1, [r4, #26]
 80019c6:	6920      	ldr	r0, [r4, #16]
 80019c8:	f7ff fa3e 	bl	8000e48 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>

		cs->BSRR = cs->BSRR | 1 << cs_pin;
 80019cc:	6960      	ldr	r0, [r4, #20]
 80019ce:	7ee3      	ldrb	r3, [r4, #27]
 80019d0:	2101      	movs	r1, #1
 80019d2:	6982      	ldr	r2, [r0, #24]
 80019d4:	fa01 f303 	lsl.w	r3, r1, r3
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
		NVIC_EnableIRQ(IRQn);
	}

	void SPI::Enable(){
		spi->CR1 = spi->CR1 | SPI_CR1_SPE;
 80019d8:	6825      	ldr	r5, [r4, #0]
		cs->BSRR = cs->BSRR | 1 << cs_pin;
 80019da:	4313      	orrs	r3, r2
		NVIC_EnableIRQ(IRQn);
 80019dc:	f994 2004 	ldrsb.w	r2, [r4, #4]
		cs->BSRR = cs->BSRR | 1 << cs_pin;
 80019e0:	6183      	str	r3, [r0, #24]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	2a00      	cmp	r2, #0
		spi->CR1 = spi->CR1 | SPI_CR1_SPE;
 80019e4:	682b      	ldr	r3, [r5, #0]
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 80019e6:	4819      	ldr	r0, [pc, #100]	; (8001a4c <_ZN3COM3SPI4InitEv+0x164>)
		spi->CR1 = spi->CR1 | SPI_CR1_SPE;
 80019e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019ec:	602b      	str	r3, [r5, #0]
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 80019ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6443      	str	r3, [r0, #68]	; 0x44
 80019f6:	db06      	blt.n	8001a06 <_ZN3COM3SPI4InitEv+0x11e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019f8:	f002 001f 	and.w	r0, r2, #31
 80019fc:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <_ZN3COM3SPI4InitEv+0x168>)
 80019fe:	0952      	lsrs	r2, r2, #5
 8001a00:	4081      	lsls	r1, r0
 8001a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI1EN;
 8001a08:	4910      	ldr	r1, [pc, #64]	; (8001a4c <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI1_IRQn;
 8001a0a:	2023      	movs	r0, #35	; 0x23
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI1EN;
 8001a0c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001a0e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001a12:	644a      	str	r2, [r1, #68]	; 0x44
			IRQn = SPI1_IRQn;
 8001a14:	7120      	strb	r0, [r4, #4]
 8001a16:	e78b      	b.n	8001930 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI3EN;
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI3_IRQn;
 8001a1a:	2033      	movs	r0, #51	; 0x33
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI3EN;
 8001a1c:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001a1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a22:	640a      	str	r2, [r1, #64]	; 0x40
			IRQn = SPI3_IRQn;
 8001a24:	7120      	strb	r0, [r4, #4]
 8001a26:	e783      	b.n	8001930 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI4EN;
 8001a28:	4908      	ldr	r1, [pc, #32]	; (8001a4c <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI4_IRQn;
 8001a2a:	2054      	movs	r0, #84	; 0x54
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI4EN;
 8001a2c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001a2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a32:	644a      	str	r2, [r1, #68]	; 0x44
			IRQn = SPI4_IRQn;
 8001a34:	7120      	strb	r0, [r4, #4]
 8001a36:	e77b      	b.n	8001930 <_ZN3COM3SPI4InitEv+0x48>
 8001a38:	40013000 	.word	0x40013000
 8001a3c:	40003800 	.word	0x40003800
 8001a40:	40003c00 	.word	0x40003c00
 8001a44:	40013400 	.word	0x40013400
 8001a48:	40015000 	.word	0x40015000
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <_ZN3COM3SPI8TransmitEPKhj>:
	void SPI::Disable(){
		spi->CR1 = spi->CR1 & ~SPI_CR1_SPE;
	}

	void SPI::Transmit(const uint8_t *data, std::size_t size){
		done = false;
 8001a54:	2300      	movs	r3, #0
	void SPI::Transmit(const uint8_t *data, std::size_t size){
 8001a56:	b410      	push	{r4}
		mode = SPI_Mode::TX;
		tx_current = data;
		rx_current = 0;

		tx_end = data + size;
 8001a58:	188c      	adds	r4, r1, r2
		done = false;
 8001a5a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		mode = SPI_Mode::TX;
 8001a5e:	77c3      	strb	r3, [r0, #31]
		rx_current = 0;
 8001a60:	e9c0 1308 	strd	r1, r3, [r0, #32]
		rx_end = reinterpret_cast<uint8_t*>(size);
 8001a64:	e9c0 420a 	strd	r4, r2, [r0, #40]	; 0x28
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a68:	f3bf 8f5f 	dmb	sy

		__DMB();
		spi->CR2 = spi->CR2 | (SPI_CR2_TXEIE | SPI_CR2_RXNEIE);
 8001a6c:	6802      	ldr	r2, [r0, #0]
 8001a6e:	6853      	ldr	r3, [r2, #4]
 8001a70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a74:	6053      	str	r3, [r2, #4]

		while(!done);
 8001a76:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0fb      	beq.n	8001a76 <_ZN3COM3SPI8TransmitEPKhj+0x22>
	}
 8001a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_ZN3COM3SPI7ReceiveEPhj>:
	void SPI::Receive(uint8_t *data, std::size_t size){
 8001a84:	b410      	push	{r4}
		done = false;
		mode = SPI_Mode::RX;
 8001a86:	2401      	movs	r4, #1
		done = false;
 8001a88:	2300      	movs	r3, #0
		mode = SPI_Mode::RX;
 8001a8a:	77c4      	strb	r4, [r0, #31]
		rx_current = data;
		tx_current = 0;

		rx_end = data + size;
 8001a8c:	188c      	adds	r4, r1, r2
		done = false;
 8001a8e:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		tx_current = 0;
 8001a92:	e9c0 3108 	strd	r3, r1, [r0, #32]
		rx_end = data + size;
 8001a96:	e9c0 240a 	strd	r2, r4, [r0, #40]	; 0x28
 8001a9a:	f3bf 8f5f 	dmb	sy
		tx_end = reinterpret_cast<const uint8_t*>(size);

		__DMB();
		spi->CR2 = spi->CR2 | (SPI_CR2_TXEIE | SPI_CR2_RXNEIE);
 8001a9e:	6802      	ldr	r2, [r0, #0]
 8001aa0:	6853      	ldr	r3, [r2, #4]
 8001aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aa6:	6053      	str	r3, [r2, #4]

		while(!done);
 8001aa8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0fb      	beq.n	8001aa8 <_ZN3COM3SPI7ReceiveEPhj+0x24>
	}
 8001ab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop

08001ab8 <_ZN3COM3SPI17Interrupt_HandlerEv>:

	void SPI::Interrupt_Handler(){
		auto* tmp_tx_current = tx_current;
		auto* tmp_tx_end = tx_end;

		auto* tmp_rx_current = rx_current;
 8001ab8:	f100 0120 	add.w	r1, r0, #32
		auto* tmp_rx_end = rx_end;
		switch(mode){
 8001abc:	7fc3      	ldrb	r3, [r0, #31]
	void SPI::Interrupt_Handler(){
 8001abe:	b470      	push	{r4, r5, r6}
		auto* tmp_rx_current = rx_current;
 8001ac0:	c926      	ldmia	r1, {r1, r2, r5}
		auto* tmp_rx_end = rx_end;
 8001ac2:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		switch(mode){
 8001ac4:	b373      	cbz	r3, 8001b24 <_ZN3COM3SPI17Interrupt_HandlerEv+0x6c>
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d05e      	beq.n	8001b88 <_ZN3COM3SPI17Interrupt_HandlerEv+0xd0>
				*tmp_rx_current++ = *reinterpret_cast<volatile uint8_t*>(&spi->DR);
			}
			break;

		default: //Mode_TRX
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001aca:	6803      	ldr	r3, [r0, #0]
 8001acc:	689e      	ldr	r6, [r3, #8]
 8001ace:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001ad2:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001ad6:	d00e      	beq.n	8001af6 <_ZN3COM3SPI17Interrupt_HandlerEv+0x3e>
 8001ad8:	42a9      	cmp	r1, r5
 8001ada:	d302      	bcc.n	8001ae2 <_ZN3COM3SPI17Interrupt_HandlerEv+0x2a>
 8001adc:	e00b      	b.n	8001af6 <_ZN3COM3SPI17Interrupt_HandlerEv+0x3e>
 8001ade:	428d      	cmp	r5, r1
 8001ae0:	d909      	bls.n	8001af6 <_ZN3COM3SPI17Interrupt_HandlerEv+0x3e>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = *tmp_tx_current++;
 8001ae2:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001ae6:	731e      	strb	r6, [r3, #12]
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001ae8:	6803      	ldr	r3, [r0, #0]
 8001aea:	689e      	ldr	r6, [r3, #8]
 8001aec:	f406 5cc0 	and.w	ip, r6, #6144	; 0x1800
 8001af0:	f5bc 5fc0 	cmp.w	ip, #6144	; 0x1800
 8001af4:	d1f3      	bne.n	8001ade <_ZN3COM3SPI17Interrupt_HandlerEv+0x26>
			}
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001af6:	42a2      	cmp	r2, r4
 8001af8:	689e      	ldr	r6, [r3, #8]
 8001afa:	d307      	bcc.n	8001b0c <_ZN3COM3SPI17Interrupt_HandlerEv+0x54>
 8001afc:	e008      	b.n	8001b10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
				*tmp_rx_current++ = *reinterpret_cast<volatile uint8_t*>(&spi->DR);
 8001afe:	7b1b      	ldrb	r3, [r3, #12]
 8001b00:	f802 3b01 	strb.w	r3, [r2], #1
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001b04:	4294      	cmp	r4, r2
 8001b06:	6803      	ldr	r3, [r0, #0]
 8001b08:	689e      	ldr	r6, [r3, #8]
 8001b0a:	d901      	bls.n	8001b10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
 8001b0c:	07f6      	lsls	r6, r6, #31
 8001b0e:	d4f6      	bmi.n	8001afe <_ZN3COM3SPI17Interrupt_HandlerEv+0x46>
			}
			break;
		}

		if(tmp_tx_current == tmp_tx_end){
 8001b10:	42a9      	cmp	r1, r5
 8001b12:	d02a      	beq.n	8001b6a <_ZN3COM3SPI17Interrupt_HandlerEv+0xb2>
			spi->CR2 = spi->CR2 & ~SPI_CR2_TXEIE;
		}

		if(tmp_rx_current == tmp_rx_end){
 8001b14:	42a2      	cmp	r2, r4
 8001b16:	d02e      	beq.n	8001b76 <_ZN3COM3SPI17Interrupt_HandlerEv+0xbe>
		}

		tx_current = tmp_tx_current;
		tx_end = tmp_tx_end;
		rx_current = tmp_rx_current;
		rx_end = tmp_rx_end;
 8001b18:	62c4      	str	r4, [r0, #44]	; 0x2c
		tx_current = tmp_tx_current;
 8001b1a:	6201      	str	r1, [r0, #32]
		rx_current = tmp_rx_current;
 8001b1c:	e9c0 2509 	strd	r2, r5, [r0, #36]	; 0x24
	}
 8001b20:	bc70      	pop	{r4, r5, r6}
 8001b22:	4770      	bx	lr
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001b24:	6803      	ldr	r3, [r0, #0]
 8001b26:	689e      	ldr	r6, [r3, #8]
 8001b28:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001b2c:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001b30:	d00e      	beq.n	8001b50 <_ZN3COM3SPI17Interrupt_HandlerEv+0x98>
 8001b32:	42a9      	cmp	r1, r5
 8001b34:	d302      	bcc.n	8001b3c <_ZN3COM3SPI17Interrupt_HandlerEv+0x84>
 8001b36:	e00b      	b.n	8001b50 <_ZN3COM3SPI17Interrupt_HandlerEv+0x98>
 8001b38:	428d      	cmp	r5, r1
 8001b3a:	d909      	bls.n	8001b50 <_ZN3COM3SPI17Interrupt_HandlerEv+0x98>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = *tmp_tx_current++;
 8001b3c:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001b40:	731e      	strb	r6, [r3, #12]
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	689e      	ldr	r6, [r3, #8]
 8001b46:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001b4a:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001b4e:	d1f3      	bne.n	8001b38 <_ZN3COM3SPI17Interrupt_HandlerEv+0x80>
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001b50:	42a2      	cmp	r2, r4
 8001b52:	689e      	ldr	r6, [r3, #8]
 8001b54:	d305      	bcc.n	8001b62 <_ZN3COM3SPI17Interrupt_HandlerEv+0xaa>
 8001b56:	e7db      	b.n	8001b10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
				tmp_rx_current++;
 8001b58:	3201      	adds	r2, #1
				*reinterpret_cast<volatile uint8_t*>(&spi->DR);
 8001b5a:	7b1e      	ldrb	r6, [r3, #12]
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001b5c:	689e      	ldr	r6, [r3, #8]
 8001b5e:	4294      	cmp	r4, r2
 8001b60:	d9d6      	bls.n	8001b10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
 8001b62:	07f6      	lsls	r6, r6, #31
 8001b64:	d4f8      	bmi.n	8001b58 <_ZN3COM3SPI17Interrupt_HandlerEv+0xa0>
		if(tmp_tx_current == tmp_tx_end){
 8001b66:	42a9      	cmp	r1, r5
 8001b68:	d1d4      	bne.n	8001b14 <_ZN3COM3SPI17Interrupt_HandlerEv+0x5c>
			spi->CR2 = spi->CR2 & ~SPI_CR2_TXEIE;
 8001b6a:	685e      	ldr	r6, [r3, #4]
		if(tmp_rx_current == tmp_rx_end){
 8001b6c:	42a2      	cmp	r2, r4
			spi->CR2 = spi->CR2 & ~SPI_CR2_TXEIE;
 8001b6e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8001b72:	605e      	str	r6, [r3, #4]
		if(tmp_rx_current == tmp_rx_end){
 8001b74:	d1d0      	bne.n	8001b18 <_ZN3COM3SPI17Interrupt_HandlerEv+0x60>
			spi->CR2 = spi->CR2 & ~SPI_CR2_RXNEIE;
 8001b76:	685a      	ldr	r2, [r3, #4]
			done = true;
 8001b78:	2101      	movs	r1, #1
			spi->CR2 = spi->CR2 & ~SPI_CR2_RXNEIE;
 8001b7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
	}
 8001b7e:	bc70      	pop	{r4, r5, r6}
			spi->CR2 = spi->CR2 & ~SPI_CR2_RXNEIE;
 8001b80:	605a      	str	r2, [r3, #4]
			done = true;
 8001b82:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	}
 8001b86:	4770      	bx	lr
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001b88:	6803      	ldr	r3, [r0, #0]
 8001b8a:	689e      	ldr	r6, [r3, #8]
 8001b8c:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001b90:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001b94:	d010      	beq.n	8001bb8 <_ZN3COM3SPI17Interrupt_HandlerEv+0x100>
 8001b96:	42a9      	cmp	r1, r5
 8001b98:	d20e      	bcs.n	8001bb8 <_ZN3COM3SPI17Interrupt_HandlerEv+0x100>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = 0;
 8001b9a:	f04f 0c00 	mov.w	ip, #0
 8001b9e:	e001      	b.n	8001ba4 <_ZN3COM3SPI17Interrupt_HandlerEv+0xec>
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001ba0:	428d      	cmp	r5, r1
 8001ba2:	d909      	bls.n	8001bb8 <_ZN3COM3SPI17Interrupt_HandlerEv+0x100>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = 0;
 8001ba4:	f883 c00c 	strb.w	ip, [r3, #12]
				tmp_tx_current++;
 8001ba8:	3101      	adds	r1, #1
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	689e      	ldr	r6, [r3, #8]
 8001bae:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001bb2:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001bb6:	d1f3      	bne.n	8001ba0 <_ZN3COM3SPI17Interrupt_HandlerEv+0xe8>
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001bb8:	42a2      	cmp	r2, r4
 8001bba:	689e      	ldr	r6, [r3, #8]
 8001bbc:	d307      	bcc.n	8001bce <_ZN3COM3SPI17Interrupt_HandlerEv+0x116>
 8001bbe:	e7a7      	b.n	8001b10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
				*tmp_rx_current++ = *reinterpret_cast<volatile uint8_t*>(&spi->DR);
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	f802 3b01 	strb.w	r3, [r2], #1
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001bc6:	4294      	cmp	r4, r2
 8001bc8:	6803      	ldr	r3, [r0, #0]
 8001bca:	689e      	ldr	r6, [r3, #8]
 8001bcc:	d9a0      	bls.n	8001b10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
 8001bce:	07f6      	lsls	r6, r6, #31
 8001bd0:	d4f6      	bmi.n	8001bc0 <_ZN3COM3SPI17Interrupt_HandlerEv+0x108>
 8001bd2:	e79d      	b.n	8001b10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>

08001bd4 <_ZN3COM3SPI5CS_ENEv>:

	void SPI::CS_EN(){
		cs->BSRR = cs->BSRR | (1 << (cs_pin + 16));
 8001bd4:	7ec2      	ldrb	r2, [r0, #27]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	6941      	ldr	r1, [r0, #20]
 8001bda:	3210      	adds	r2, #16
 8001bdc:	6988      	ldr	r0, [r1, #24]
 8001bde:	4093      	lsls	r3, r2
 8001be0:	4303      	orrs	r3, r0
 8001be2:	618b      	str	r3, [r1, #24]
	}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop

08001be8 <_ZN3COM3SPI6CS_DISEv>:

	void SPI::CS_DIS(){
		cs->BSRR = cs->BSRR | 1 << cs_pin;
 8001be8:	6942      	ldr	r2, [r0, #20]
 8001bea:	2301      	movs	r3, #1
 8001bec:	7ec0      	ldrb	r0, [r0, #27]
 8001bee:	6991      	ldr	r1, [r2, #24]
 8001bf0:	4083      	lsls	r3, r0
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	6193      	str	r3, [r2, #24]
	}
 8001bf6:	4770      	bx	lr

08001bf8 <_ZN5TIMER3TIM4InitEv>:
 */
#include "TIM.hpp"

namespace TIMER{
	void TIM::Init(){
		if(tim == TIM1){
 8001bf8:	4b35      	ldr	r3, [pc, #212]	; (8001cd0 <_ZN5TIMER3TIM4InitEv+0xd8>)
 8001bfa:	6902      	ldr	r2, [r0, #16]
 8001bfc:	429a      	cmp	r2, r3
	void TIM::Init(){
 8001bfe:	b410      	push	{r4}
		if(tim == TIM1){
 8001c00:	d02f      	beq.n	8001c62 <_ZN5TIMER3TIM4InitEv+0x6a>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_TIM1EN;
			//IRQn = TIM1_CC_IRQn;
		}else if(tim == TIM2){
 8001c02:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001c06:	d011      	beq.n	8001c2c <_ZN5TIMER3TIM4InitEv+0x34>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM2EN;
			IRQn = TIM2_IRQn;
		}else if(tim == TIM3){
 8001c08:	4b32      	ldr	r3, [pc, #200]	; (8001cd4 <_ZN5TIMER3TIM4InitEv+0xdc>)
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d045      	beq.n	8001c9a <_ZN5TIMER3TIM4InitEv+0xa2>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM3EN;
			IRQn = TIM3_IRQn;
		}else if(tim == TIM4){
 8001c0e:	4b32      	ldr	r3, [pc, #200]	; (8001cd8 <_ZN5TIMER3TIM4InitEv+0xe0>)
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d048      	beq.n	8001ca6 <_ZN5TIMER3TIM4InitEv+0xae>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM4EN;
			IRQn = TIM4_IRQn;
		}else if(tim == TIM5){
 8001c14:	4b31      	ldr	r3, [pc, #196]	; (8001cdc <_ZN5TIMER3TIM4InitEv+0xe4>)
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d039      	beq.n	8001c8e <_ZN5TIMER3TIM4InitEv+0x96>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
			IRQn = TIM5_IRQn;
		}else if(tim == TIM6){
 8001c1a:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <_ZN5TIMER3TIM4InitEv+0xe8>)
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d048      	beq.n	8001cb2 <_ZN5TIMER3TIM4InitEv+0xba>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM6EN;
			//IRQn = TIM6_IRQn;
		}else if(tim == TIM7){
 8001c20:	4b30      	ldr	r3, [pc, #192]	; (8001ce4 <_ZN5TIMER3TIM4InitEv+0xec>)
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d04d      	beq.n	8001cc2 <_ZN5TIMER3TIM4InitEv+0xca>
		tim->PSC = tim_prescale;
		tim->ARR = tim_resolution;


		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
		NVIC_EnableIRQ(IRQn);
 8001c26:	f990 3014 	ldrsb.w	r3, [r0, #20]
 8001c2a:	e021      	b.n	8001c70 <_ZN5TIMER3TIM4InitEv+0x78>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM2EN;
 8001c2c:	492e      	ldr	r1, [pc, #184]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM2_IRQn;
 8001c2e:	231c      	movs	r3, #28
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM2EN;
 8001c30:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001c32:	f044 0401 	orr.w	r4, r4, #1
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
 8001c36:	640c      	str	r4, [r1, #64]	; 0x40
			IRQn = TIM5_IRQn;
 8001c38:	7503      	strb	r3, [r0, #20]
		tim->PSC = tim_prescale;
 8001c3a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		tim->ARR = tim_resolution;
 8001c3c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		tim->PSC = tim_prescale;
 8001c40:	6294      	str	r4, [r2, #40]	; 0x28
		tim->ARR = tim_resolution;
 8001c42:	62d0      	str	r0, [r2, #44]	; 0x2c
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001c44:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c4a:	644a      	str	r2, [r1, #68]	; 0x44
 8001c4c:	f003 001f 	and.w	r0, r3, #31
 8001c50:	2201      	movs	r2, #1
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	4925      	ldr	r1, [pc, #148]	; (8001cec <_ZN5TIMER3TIM4InitEv+0xf4>)
 8001c56:	4082      	lsls	r2, r0
	}
 8001c58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001c60:	4770      	bx	lr
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_TIM1EN;
 8001c62:	4c21      	ldr	r4, [pc, #132]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
		NVIC_EnableIRQ(IRQn);
 8001c64:	f990 3014 	ldrsb.w	r3, [r0, #20]
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_TIM1EN;
 8001c68:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001c6a:	f041 0101 	orr.w	r1, r1, #1
 8001c6e:	6461      	str	r1, [r4, #68]	; 0x44
		tim->PSC = tim_prescale;
 8001c70:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((int32_t)(IRQn) >= 0)
 8001c72:	2b00      	cmp	r3, #0
		tim->ARR = tim_resolution;
 8001c74:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001c78:	491b      	ldr	r1, [pc, #108]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
		tim->PSC = tim_prescale;
 8001c7a:	6294      	str	r4, [r2, #40]	; 0x28
		tim->ARR = tim_resolution;
 8001c7c:	62d0      	str	r0, [r2, #44]	; 0x2c
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001c7e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001c80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c84:	644a      	str	r2, [r1, #68]	; 0x44
 8001c86:	dae1      	bge.n	8001c4c <_ZN5TIMER3TIM4InitEv+0x54>
	}
 8001c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c8c:	4770      	bx	lr
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
 8001c8e:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM5_IRQn;
 8001c90:	2332      	movs	r3, #50	; 0x32
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
 8001c92:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001c94:	f044 0408 	orr.w	r4, r4, #8
 8001c98:	e7cd      	b.n	8001c36 <_ZN5TIMER3TIM4InitEv+0x3e>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM3EN;
 8001c9a:	4913      	ldr	r1, [pc, #76]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM3_IRQn;
 8001c9c:	231d      	movs	r3, #29
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM3EN;
 8001c9e:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001ca0:	f044 0402 	orr.w	r4, r4, #2
 8001ca4:	e7c7      	b.n	8001c36 <_ZN5TIMER3TIM4InitEv+0x3e>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM4EN;
 8001ca6:	4910      	ldr	r1, [pc, #64]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM4_IRQn;
 8001ca8:	231e      	movs	r3, #30
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM4EN;
 8001caa:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001cac:	f044 0404 	orr.w	r4, r4, #4
 8001cb0:	e7c1      	b.n	8001c36 <_ZN5TIMER3TIM4InitEv+0x3e>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM6EN;
 8001cb2:	4c0d      	ldr	r4, [pc, #52]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
		NVIC_EnableIRQ(IRQn);
 8001cb4:	f990 3014 	ldrsb.w	r3, [r0, #20]
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM6EN;
 8001cb8:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001cba:	f041 0110 	orr.w	r1, r1, #16
 8001cbe:	6421      	str	r1, [r4, #64]	; 0x40
 8001cc0:	e7d6      	b.n	8001c70 <_ZN5TIMER3TIM4InitEv+0x78>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM7EN;
 8001cc2:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM7_IRQn;
 8001cc4:	2337      	movs	r3, #55	; 0x37
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM7EN;
 8001cc6:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001cc8:	f044 0420 	orr.w	r4, r4, #32
 8001ccc:	e7b3      	b.n	8001c36 <_ZN5TIMER3TIM4InitEv+0x3e>
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40000c00 	.word	0x40000c00
 8001ce0:	40001000 	.word	0x40001000
 8001ce4:	40001400 	.word	0x40001400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	e000e100 	.word	0xe000e100

08001cf0 <_ZN5TIMER3TIM21EnableUpdateInterruptEv>:
	void TIM::EnableUpdateInterrupt(){
		tim->DIER = tim->DIER | TIM_DIER_UIE;
 8001cf0:	6902      	ldr	r2, [r0, #16]
 8001cf2:	68d3      	ldr	r3, [r2, #12]
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	60d3      	str	r3, [r2, #12]
	}
 8001cfa:	4770      	bx	lr

08001cfc <_ZN5TIMER3TIM23UpdateInterrupt_HandlerEv>:

	void TIM::UpdateInterrupt_Handler(){
		tim->SR &= ~TIM_SR_UIF;
 8001cfc:	6902      	ldr	r2, [r0, #16]
 8001cfe:	6913      	ldr	r3, [r2, #16]
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6113      	str	r3, [r2, #16]
	}
 8001d06:	4770      	bx	lr

08001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>:

	void TIM::EnableChannel(GPIO_TypeDef *tim_gpio, uint8_t tim_pin, uint8_t tim_afr, uint8_t tim_channel){
 8001d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d0c:	460c      	mov	r4, r1
 8001d0e:	4615      	mov	r5, r2
 8001d10:	4606      	mov	r6, r0
		GPIO::EN(tim_gpio);
 8001d12:	4608      	mov	r0, r1
	void TIM::EnableChannel(GPIO_TypeDef *tim_gpio, uint8_t tim_pin, uint8_t tim_afr, uint8_t tim_channel){
 8001d14:	461f      	mov	r7, r3
 8001d16:	f89d 8018 	ldrb.w	r8, [sp, #24]
		GPIO::EN(tim_gpio);
 8001d1a:	f7ff f81d 	bl	8000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::MODE(tim_gpio, tim_pin, MODE_ALT);
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4629      	mov	r1, r5
 8001d22:	4620      	mov	r0, r4
 8001d24:	f7ff f87e 	bl	8000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::SPEED(tim_gpio, tim_pin, SPEED_VHIGH);
 8001d28:	2203      	movs	r2, #3
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	4620      	mov	r0, r4
 8001d2e:	f7ff f87f 	bl	8000e30 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::AFR(tim_gpio, tim_pin, tim_afr);
 8001d32:	463a      	mov	r2, r7
 8001d34:	4629      	mov	r1, r5
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff f886 	bl	8000e48 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>

		if(tim_channel == 1){
 8001d3c:	f1b8 0f01 	cmp.w	r8, #1
 8001d40:	d011      	beq.n	8001d66 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x5e>
			gpio_CH1 = tim_gpio;
			gpio_CH1_pin = tim_pin;
		}else if(tim_channel == 2){
 8001d42:	f1b8 0f02 	cmp.w	r8, #2
 8001d46:	d009      	beq.n	8001d5c <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x54>
			gpio_CH2 = tim_gpio;
			gpio_CH2_pin = tim_pin;
		}else if(tim_channel == 3){
 8001d48:	f1b8 0f03 	cmp.w	r8, #3
 8001d4c:	d010      	beq.n	8001d70 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x68>
			gpio_CH3 = tim_gpio;
			gpio_CH3_pin = tim_pin;
		}else if(tim_channel == 4){
 8001d4e:	f1b8 0f04 	cmp.w	r8, #4
 8001d52:	d106      	bne.n	8001d62 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x5a>
			gpio_CH4 = tim_gpio;
 8001d54:	6274      	str	r4, [r6, #36]	; 0x24
			gpio_CH4_pin = tim_pin;
 8001d56:	f886 502b 	strb.w	r5, [r6, #43]	; 0x2b
		}


	}
 8001d5a:	e002      	b.n	8001d62 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x5a>
			gpio_CH2 = tim_gpio;
 8001d5c:	61f4      	str	r4, [r6, #28]
			gpio_CH2_pin = tim_pin;
 8001d5e:	f886 5029 	strb.w	r5, [r6, #41]	; 0x29
	}
 8001d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_CH1 = tim_gpio;
 8001d66:	61b4      	str	r4, [r6, #24]
			gpio_CH1_pin = tim_pin;
 8001d68:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	}
 8001d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_CH3 = tim_gpio;
 8001d70:	6234      	str	r4, [r6, #32]
			gpio_CH3_pin = tim_pin;
 8001d72:	f886 502a 	strb.w	r5, [r6, #42]	; 0x2a
	}
 8001d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d7a:	bf00      	nop

08001d7c <_ZN5TIMER3TIM9EnablePWMEh>:

	void TIM::EnablePWM(uint8_t tim_channel){
		if(tim_channel == 1){
 8001d7c:	3901      	subs	r1, #1
 8001d7e:	2903      	cmp	r1, #3
 8001d80:	d84b      	bhi.n	8001e1a <_ZN5TIMER3TIM9EnablePWMEh+0x9e>
 8001d82:	e8df f001 	tbb	[pc, r1]
 8001d86:	2638      	.short	0x2638
 8001d88:	0214      	.short	0x0214
		}else if(tim_channel == 3){
			tim->CCMR2 = tim->CCMR2 & ~(TIM_CCMR2_OC3M_0 | TIM_CCMR2_OC3M_3 | TIM_CCMR2_OC3PE);
			tim->CCMR2 = tim->CCMR2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
			tim->CCER = tim->CCER | TIM_CCER_CC3E;
		}else if(tim_channel == 4){
			tim->CCMR2 = tim->CCMR2 & ~(TIM_CCMR2_OC4M_0 | TIM_CCMR2_OC4M_3 | TIM_CCMR2_OC4PE);
 8001d8a:	6903      	ldr	r3, [r0, #16]
 8001d8c:	4a24      	ldr	r2, [pc, #144]	; (8001e20 <_ZN5TIMER3TIM9EnablePWMEh+0xa4>)
 8001d8e:	69d9      	ldr	r1, [r3, #28]
 8001d90:	400a      	ands	r2, r1
 8001d92:	61da      	str	r2, [r3, #28]
			tim->CCMR2 = tim->CCMR2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8001d94:	69da      	ldr	r2, [r3, #28]
 8001d96:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001d9a:	61da      	str	r2, [r3, #28]
			tim->CCER = tim->CCER | TIM_CCER_CC4E;
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001da2:	621a      	str	r2, [r3, #32]

		}
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	f042 0201 	orr.w	r2, r2, #1
 8001daa:	615a      	str	r2, [r3, #20]
	}
 8001dac:	4770      	bx	lr
			tim->CCMR2 = tim->CCMR2 & ~(TIM_CCMR2_OC3M_0 | TIM_CCMR2_OC3M_3 | TIM_CCMR2_OC3PE);
 8001dae:	6903      	ldr	r3, [r0, #16]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	; (8001e24 <_ZN5TIMER3TIM9EnablePWMEh+0xa8>)
 8001db2:	69d9      	ldr	r1, [r3, #28]
 8001db4:	400a      	ands	r2, r1
 8001db6:	61da      	str	r2, [r3, #28]
			tim->CCMR2 = tim->CCMR2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8001db8:	69da      	ldr	r2, [r3, #28]
 8001dba:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001dbe:	61da      	str	r2, [r3, #28]
			tim->CCER = tim->CCER | TIM_CCER_CC3E;
 8001dc0:	6a1a      	ldr	r2, [r3, #32]
 8001dc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001dc6:	621a      	str	r2, [r3, #32]
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001dc8:	695a      	ldr	r2, [r3, #20]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	615a      	str	r2, [r3, #20]
	}
 8001dd0:	4770      	bx	lr
			tim->CCMR1 = tim->CCMR1 & ~(TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_3 | TIM_CCMR1_OC2PE);
 8001dd2:	6903      	ldr	r3, [r0, #16]
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <_ZN5TIMER3TIM9EnablePWMEh+0xa4>)
 8001dd6:	6999      	ldr	r1, [r3, #24]
 8001dd8:	400a      	ands	r2, r1
 8001dda:	619a      	str	r2, [r3, #24]
			tim->CCMR1 = tim->CCMR1 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8001ddc:	699a      	ldr	r2, [r3, #24]
 8001dde:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001de2:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC2E;
 8001de4:	6a1a      	ldr	r2, [r3, #32]
 8001de6:	f042 0210 	orr.w	r2, r2, #16
 8001dea:	621a      	str	r2, [r3, #32]
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001dec:	695a      	ldr	r2, [r3, #20]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	615a      	str	r2, [r3, #20]
	}
 8001df4:	4770      	bx	lr
			tim->CCMR1 = tim->CCMR1 & ~(TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1PE);
 8001df6:	6903      	ldr	r3, [r0, #16]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	; (8001e24 <_ZN5TIMER3TIM9EnablePWMEh+0xa8>)
 8001dfa:	6999      	ldr	r1, [r3, #24]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	619a      	str	r2, [r3, #24]
			tim->CCMR1 = tim->CCMR1 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8001e00:	699a      	ldr	r2, [r3, #24]
 8001e02:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001e06:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC1E;
 8001e08:	6a1a      	ldr	r2, [r3, #32]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	621a      	str	r2, [r3, #32]
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	615a      	str	r2, [r3, #20]
	}
 8001e18:	4770      	bx	lr
			tim->CCMR1 = tim->CCMR1 & ~(TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1PE);
 8001e1a:	6903      	ldr	r3, [r0, #16]
 8001e1c:	e7c2      	b.n	8001da4 <_ZN5TIMER3TIM9EnablePWMEh+0x28>
 8001e1e:	bf00      	nop
 8001e20:	feffe7ff 	.word	0xfeffe7ff
 8001e24:	fffeffe7 	.word	0xfffeffe7

08001e28 <_ZN5TIMER3TIM9TIM_StartEv>:

	void TIM::TIM_Start(){
		tim->CR1 = tim->CR1 | TIM_CR1_CEN;
 8001e28:	6902      	ldr	r2, [r0, #16]
 8001e2a:	6813      	ldr	r3, [r2, #0]
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6013      	str	r3, [r2, #0]
	}
 8001e32:	4770      	bx	lr

08001e34 <_ZN5TIMER3TIM17Interrupt_HandlerEv>:

	void TIM::Interrupt_Handler(){
		if((tim->SR & TIM_SR_CC1IF_Msk) == TIM_SR_CC1IF_Msk){
 8001e34:	6903      	ldr	r3, [r0, #16]
 8001e36:	691a      	ldr	r2, [r3, #16]
	void TIM::Interrupt_Handler(){
 8001e38:	b510      	push	{r4, lr}
 8001e3a:	4604      	mov	r4, r0
		if((tim->SR & TIM_SR_CC1IF_Msk) == TIM_SR_CC1IF_Msk){
 8001e3c:	0790      	lsls	r0, r2, #30
 8001e3e:	d435      	bmi.n	8001eac <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x78>
				if(CH_1_VAL < 0) CH_1_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC1P;
			}
		}

		if((tim->SR & TIM_SR_CC2IF_Msk) == TIM_SR_CC2IF_Msk){
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	0751      	lsls	r1, r2, #29
 8001e44:	d424      	bmi.n	8001e90 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x5c>
				if(CH_2_VAL < 0) CH_2_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC2P;
			}
		}

		if((tim->SR & TIM_SR_CC3IF_Msk) == TIM_SR_CC3IF_Msk){
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	0712      	lsls	r2, r2, #28
 8001e4a:	d412      	bmi.n	8001e72 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x3e>
				if(CH_3_VAL < 0) CH_3_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC3P;
			}
		}

		if((tim->SR & TIM_SR_CC4IF_Msk) == TIM_SR_CC4IF_Msk){
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	06db      	lsls	r3, r3, #27
 8001e50:	d400      	bmi.n	8001e54 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x20>
				CH_4_VAL = tim->CCR4 - CH_4_START;
				if(CH_4_VAL < 0) CH_4_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC4P;
			}
		}
	}
 8001e52:	bd10      	pop	{r4, pc}
			if(0b1 & GPIO::READ(gpio_CH4, gpio_CH4_pin)){
 8001e54:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8001e58:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e5a:	f7ff f80f 	bl	8000e7c <_ZN4GPIO4READEP12GPIO_TypeDefh>
 8001e5e:	2800      	cmp	r0, #0
 8001e60:	d056      	beq.n	8001f10 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xdc>
				CH_4_START = tim->CCR4;
 8001e62:	6923      	ldr	r3, [r4, #16]
 8001e64:	6c19      	ldr	r1, [r3, #64]	; 0x40
				tim->CCER = tim->CCER | TIM_CCER_CC4P;
 8001e66:	6a1a      	ldr	r2, [r3, #32]
				CH_4_START = tim->CCR4;
 8001e68:	63e1      	str	r1, [r4, #60]	; 0x3c
				tim->CCER = tim->CCER | TIM_CCER_CC4P;
 8001e6a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e6e:	621a      	str	r2, [r3, #32]
	}
 8001e70:	bd10      	pop	{r4, pc}
			if(0b1 & GPIO::READ(gpio_CH3, gpio_CH3_pin)){
 8001e72:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 8001e76:	6a20      	ldr	r0, [r4, #32]
 8001e78:	f7ff f800 	bl	8000e7c <_ZN4GPIO4READEP12GPIO_TypeDefh>
				CH_3_START = tim->CCR3;
 8001e7c:	6923      	ldr	r3, [r4, #16]
			if(0b1 & GPIO::READ(gpio_CH3, gpio_CH3_pin)){
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	d03a      	beq.n	8001ef8 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xc4>
				CH_3_START = tim->CCR3;
 8001e82:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
				tim->CCER = tim->CCER | TIM_CCER_CC3P;
 8001e84:	6a1a      	ldr	r2, [r3, #32]
				CH_3_START = tim->CCR3;
 8001e86:	63a1      	str	r1, [r4, #56]	; 0x38
				tim->CCER = tim->CCER | TIM_CCER_CC3P;
 8001e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8c:	621a      	str	r2, [r3, #32]
 8001e8e:	e7dd      	b.n	8001e4c <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x18>
			if(0b1 & GPIO::READ(gpio_CH2, gpio_CH2_pin)){
 8001e90:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 8001e94:	69e0      	ldr	r0, [r4, #28]
 8001e96:	f7fe fff1 	bl	8000e7c <_ZN4GPIO4READEP12GPIO_TypeDefh>
				CH_2_START = tim->CCR2;
 8001e9a:	6923      	ldr	r3, [r4, #16]
			if(0b1 & GPIO::READ(gpio_CH2, gpio_CH2_pin)){
 8001e9c:	b300      	cbz	r0, 8001ee0 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xac>
				CH_2_START = tim->CCR2;
 8001e9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
				tim->CCER = tim->CCER | TIM_CCER_CC2P;
 8001ea0:	6a1a      	ldr	r2, [r3, #32]
				CH_2_START = tim->CCR2;
 8001ea2:	6361      	str	r1, [r4, #52]	; 0x34
				tim->CCER = tim->CCER | TIM_CCER_CC2P;
 8001ea4:	f042 0220 	orr.w	r2, r2, #32
 8001ea8:	621a      	str	r2, [r3, #32]
 8001eaa:	e7cc      	b.n	8001e46 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x12>
			if(0b1 & GPIO::READ(gpio_CH1, gpio_CH1_pin)){
 8001eac:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8001eb0:	69a0      	ldr	r0, [r4, #24]
 8001eb2:	f7fe ffe3 	bl	8000e7c <_ZN4GPIO4READEP12GPIO_TypeDefh>
				CH_1_START = tim->CCR1;
 8001eb6:	6923      	ldr	r3, [r4, #16]
			if(0b1 & GPIO::READ(gpio_CH1, gpio_CH1_pin)){
 8001eb8:	b130      	cbz	r0, 8001ec8 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x94>
				CH_1_START = tim->CCR1;
 8001eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
				tim->CCER = tim->CCER | TIM_CCER_CC1P;
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
				CH_1_START = tim->CCR1;
 8001ebe:	6321      	str	r1, [r4, #48]	; 0x30
				tim->CCER = tim->CCER | TIM_CCER_CC1P;
 8001ec0:	f042 0202 	orr.w	r2, r2, #2
 8001ec4:	621a      	str	r2, [r3, #32]
 8001ec6:	e7bb      	b.n	8001e40 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xc>
				CH_1_VAL = tim->CCR1 - CH_1_START;
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eca:	6b21      	ldr	r1, [r4, #48]	; 0x30
				if(CH_1_VAL < 0) CH_1_VAL += 4096;
 8001ecc:	1a52      	subs	r2, r2, r1
 8001ece:	bf48      	it	mi
 8001ed0:	f502 5280 	addmi.w	r2, r2, #4096	; 0x1000
 8001ed4:	6022      	str	r2, [r4, #0]
				tim->CCER = tim->CCER & ~TIM_CCER_CC1P;
 8001ed6:	6a1a      	ldr	r2, [r3, #32]
 8001ed8:	f022 0202 	bic.w	r2, r2, #2
 8001edc:	621a      	str	r2, [r3, #32]
 8001ede:	e7af      	b.n	8001e40 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xc>
				CH_2_VAL = tim->CCR2 - CH_2_START;
 8001ee0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
				if(CH_2_VAL < 0) CH_2_VAL += 4096;
 8001ee4:	1a52      	subs	r2, r2, r1
 8001ee6:	bf48      	it	mi
 8001ee8:	f502 5280 	addmi.w	r2, r2, #4096	; 0x1000
 8001eec:	6062      	str	r2, [r4, #4]
				tim->CCER = tim->CCER & ~TIM_CCER_CC2P;
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	f022 0220 	bic.w	r2, r2, #32
 8001ef4:	621a      	str	r2, [r3, #32]
 8001ef6:	e7a6      	b.n	8001e46 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x12>
				CH_3_VAL = tim->CCR3 - CH_3_START;
 8001ef8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001efa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
				if(CH_3_VAL < 0) CH_3_VAL += 4096;
 8001efc:	1a52      	subs	r2, r2, r1
 8001efe:	bf48      	it	mi
 8001f00:	f502 5280 	addmi.w	r2, r2, #4096	; 0x1000
 8001f04:	60a2      	str	r2, [r4, #8]
				tim->CCER = tim->CCER & ~TIM_CCER_CC3P;
 8001f06:	6a1a      	ldr	r2, [r3, #32]
 8001f08:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f0c:	621a      	str	r2, [r3, #32]
 8001f0e:	e79d      	b.n	8001e4c <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x18>
				CH_4_VAL = tim->CCR4 - CH_4_START;
 8001f10:	6922      	ldr	r2, [r4, #16]
 8001f12:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001f14:	6c13      	ldr	r3, [r2, #64]	; 0x40
				if(CH_4_VAL < 0) CH_4_VAL += 4096;
 8001f16:	1a5b      	subs	r3, r3, r1
 8001f18:	bf48      	it	mi
 8001f1a:	f503 5380 	addmi.w	r3, r3, #4096	; 0x1000
 8001f1e:	60e3      	str	r3, [r4, #12]
				tim->CCER = tim->CCER & ~TIM_CCER_CC4P;
 8001f20:	6a13      	ldr	r3, [r2, #32]
 8001f22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f26:	6213      	str	r3, [r2, #32]
	}
 8001f28:	bd10      	pop	{r4, pc}
 8001f2a:	bf00      	nop

08001f2c <_ZN5TIMER3TIM16PWM_setDutyCycleEht>:

	void TIM::PWM_setDutyCycle(uint8_t tim_channel ,uint16_t dutyCycle){
		if(tim_channel == 1){
 8001f2c:	3901      	subs	r1, #1
 8001f2e:	2903      	cmp	r1, #3
 8001f30:	d805      	bhi.n	8001f3e <_ZN5TIMER3TIM16PWM_setDutyCycleEht+0x12>
 8001f32:	e8df f001 	tbb	[pc, r1]
 8001f36:	080b      	.short	0x080b
 8001f38:	0205      	.short	0x0205
		}else if(tim_channel == 2){
			tim->CCR2 = dutyCycle;
		}else if(tim_channel == 3){
			tim->CCR3 = dutyCycle;
		}else if(tim_channel == 4){
			tim->CCR4 = dutyCycle;
 8001f3a:	6903      	ldr	r3, [r0, #16]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
 8001f3e:	4770      	bx	lr
			tim->CCR3 = dutyCycle;
 8001f40:	6903      	ldr	r3, [r0, #16]
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f44:	4770      	bx	lr
			tim->CCR2 = dutyCycle;
 8001f46:	6903      	ldr	r3, [r0, #16]
 8001f48:	639a      	str	r2, [r3, #56]	; 0x38
 8001f4a:	4770      	bx	lr
			tim->CCR1 = dutyCycle;
 8001f4c:	6903      	ldr	r3, [r0, #16]
 8001f4e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop

08001f54 <_ZN5TIMER3TIM18EnableInputCaptureEh>:

	void TIM::EnableInputCapture(uint8_t tim_channel){
		//static_assert((tim == TIM2) | (tim == TIM3) | (tim == TIM4) | (tim == TIM5) );

		if(tim_channel == 1){
 8001f54:	3901      	subs	r1, #1
 8001f56:	2903      	cmp	r1, #3
 8001f58:	d81c      	bhi.n	8001f94 <_ZN5TIMER3TIM18EnableInputCaptureEh+0x40>
 8001f5a:	e8df f001 	tbb	[pc, r1]
 8001f5e:	3650      	.short	0x3650
 8001f60:	021c      	.short	0x021c

			tim->DIER = tim->DIER | TIM_DIER_CC3IE;

			tim->CCER = tim->CCER | TIM_CCER_CC3E;
		} else if(tim_channel == 4){
			tim->CCMR2 =  tim->CCMR2 | TIM_CCMR2_CC4S_0;
 8001f62:	6903      	ldr	r3, [r0, #16]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f6a:	61da      	str	r2, [r3, #28]
			tim->CCMR2 =  tim->CCMR2 & ~TIM_CCMR2_CC4S_1;
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f72:	61da      	str	r2, [r3, #28]

			tim->CCER = tim->CCER | TIM_CCER_CC4P;
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f7a:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC4NP;
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f82:	621a      	str	r2, [r3, #32]

			tim->DIER = tim->DIER | TIM_DIER_CC4IE;
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	f042 0210 	orr.w	r2, r2, #16
 8001f8a:	60da      	str	r2, [r3, #12]

			tim->CCER = tim->CCER | TIM_CCER_CC4E;
 8001f8c:	6a1a      	ldr	r2, [r3, #32]
 8001f8e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f92:	621a      	str	r2, [r3, #32]
		}
	}
 8001f94:	4770      	bx	lr
			tim->CCMR2 =  tim->CCMR2 | TIM_CCMR2_CC3S_0;
 8001f96:	6903      	ldr	r3, [r0, #16]
 8001f98:	69da      	ldr	r2, [r3, #28]
 8001f9a:	f042 0201 	orr.w	r2, r2, #1
 8001f9e:	61da      	str	r2, [r3, #28]
			tim->CCMR2 =  tim->CCMR2 & ~TIM_CCMR2_CC3S_1;
 8001fa0:	69da      	ldr	r2, [r3, #28]
 8001fa2:	f022 0202 	bic.w	r2, r2, #2
 8001fa6:	61da      	str	r2, [r3, #28]
			tim->CCER = tim->CCER | TIM_CCER_CC3P;
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
 8001faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fae:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC3NP;
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fb6:	621a      	str	r2, [r3, #32]
			tim->DIER = tim->DIER | TIM_DIER_CC3IE;
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	f042 0208 	orr.w	r2, r2, #8
 8001fbe:	60da      	str	r2, [r3, #12]
			tim->CCER = tim->CCER | TIM_CCER_CC3E;
 8001fc0:	6a1a      	ldr	r2, [r3, #32]
 8001fc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc6:	621a      	str	r2, [r3, #32]
 8001fc8:	4770      	bx	lr
			tim->CCMR1 =  tim->CCMR1 | TIM_CCMR1_CC2S_0;
 8001fca:	6903      	ldr	r3, [r0, #16]
 8001fcc:	699a      	ldr	r2, [r3, #24]
 8001fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fd2:	619a      	str	r2, [r3, #24]
			tim->CCMR1 =  tim->CCMR1 & ~TIM_CCMR1_CC2S_1;
 8001fd4:	699a      	ldr	r2, [r3, #24]
 8001fd6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fda:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC2P;
 8001fdc:	6a1a      	ldr	r2, [r3, #32]
 8001fde:	f042 0220 	orr.w	r2, r2, #32
 8001fe2:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC2NP;
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fea:	621a      	str	r2, [r3, #32]
			tim->DIER = tim->DIER | TIM_DIER_CC2IE;
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	f042 0204 	orr.w	r2, r2, #4
 8001ff2:	60da      	str	r2, [r3, #12]
			tim->CCER = tim->CCER | TIM_CCER_CC2E;
 8001ff4:	6a1a      	ldr	r2, [r3, #32]
 8001ff6:	f042 0210 	orr.w	r2, r2, #16
 8001ffa:	621a      	str	r2, [r3, #32]
 8001ffc:	4770      	bx	lr
			tim->CCMR1 =  tim->CCMR1 | TIM_CCMR1_CC1S_0;
 8001ffe:	6903      	ldr	r3, [r0, #16]
 8002000:	699a      	ldr	r2, [r3, #24]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	619a      	str	r2, [r3, #24]
			tim->CCMR1 =  tim->CCMR1 & ~TIM_CCMR1_CC1S_1;
 8002008:	699a      	ldr	r2, [r3, #24]
 800200a:	f022 0202 	bic.w	r2, r2, #2
 800200e:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC1P;
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	f042 0202 	orr.w	r2, r2, #2
 8002016:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC1NP;
 8002018:	6a1a      	ldr	r2, [r3, #32]
 800201a:	f022 0208 	bic.w	r2, r2, #8
 800201e:	621a      	str	r2, [r3, #32]
			tim->DIER = tim->DIER | TIM_DIER_CC1IE;
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	f042 0202 	orr.w	r2, r2, #2
 8002026:	60da      	str	r2, [r3, #12]
			tim->CCER = tim->CCER | TIM_CCER_CC1E;
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	621a      	str	r2, [r3, #32]
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop

08002034 <_ZN3COM4UART17Interrupt_HandlerEv>:
		auto* tmp_tx_end = tx_end;

		auto* tmp_rx_current = rx_current;
		auto* tmp_rx_end = rx_end;

		switch(mode){
 8002034:	7d02      	ldrb	r2, [r0, #20]
		auto* tmp_tx_current = tx_current;
 8002036:	6983      	ldr	r3, [r0, #24]
	void UART::Interrupt_Handler(){
 8002038:	b470      	push	{r4, r5, r6}
		auto* tmp_rx_current = rx_current;
 800203a:	e9d0 6407 	ldrd	r6, r4, [r0, #28]
		auto* tmp_rx_end = rx_end;
 800203e:	6a45      	ldr	r5, [r0, #36]	; 0x24
		switch(mode){
 8002040:	b982      	cbnz	r2, 8002064 <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
		case UART_Mode::TX:
			while(((uart->ISR&USART_ISR_TXE_Msk) != USART_ISR_TXE_Msk) && tmp_tx_current < tmp_tx_end){
 8002042:	6802      	ldr	r2, [r0, #0]
 8002044:	69d1      	ldr	r1, [r2, #28]
 8002046:	0609      	lsls	r1, r1, #24
 8002048:	d40c      	bmi.n	8002064 <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
 800204a:	42a3      	cmp	r3, r4
 800204c:	d302      	bcc.n	8002054 <_ZN3COM4UART17Interrupt_HandlerEv+0x20>
 800204e:	e009      	b.n	8002064 <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
 8002050:	429c      	cmp	r4, r3
 8002052:	d907      	bls.n	8002064 <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
				*reinterpret_cast<volatile uint8_t*>(&uart->TDR) = *tmp_tx_current++;
 8002054:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002058:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
			while(((uart->ISR&USART_ISR_TXE_Msk) != USART_ISR_TXE_Msk) && tmp_tx_current < tmp_tx_end){
 800205c:	6802      	ldr	r2, [r0, #0]
 800205e:	69d1      	ldr	r1, [r2, #28]
 8002060:	0609      	lsls	r1, r1, #24
 8002062:	d5f5      	bpl.n	8002050 <_ZN3COM4UART17Interrupt_HandlerEv+0x1c>

		default:
			break;
		}

		if(tmp_tx_current == tmp_tx_end){
 8002064:	42a3      	cmp	r3, r4
 8002066:	d005      	beq.n	8002074 <_ZN3COM4UART17Interrupt_HandlerEv+0x40>
		}

		tx_current = tmp_tx_current;
		tx_end = tmp_tx_end;
		rx_current = tmp_rx_current;
		rx_end = tmp_rx_end;
 8002068:	6245      	str	r5, [r0, #36]	; 0x24
		tx_current = tmp_tx_current;
 800206a:	6183      	str	r3, [r0, #24]
		rx_current = tmp_rx_current;
 800206c:	e9c0 6407 	strd	r6, r4, [r0, #28]
	}
 8002070:	bc70      	pop	{r4, r5, r6}
 8002072:	4770      	bx	lr
			done = true;
 8002074:	2301      	movs	r3, #1
	}
 8002076:	bc70      	pop	{r4, r5, r6}
			done = true;
 8002078:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop

08002080 <_Z10ff_fastSinf>:
 */

#include "fast_math.h"

float ff_fastSin(float val){
	return val - ((val*val*val)/6) + ((val*val*val*val*val)/120) - ((val*val*val*val*val*val*val)/5040);
 8002080:	ee60 7a00 	vmul.f32	s15, s0, s0
 8002084:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80020b0 <_Z10ff_fastSinf+0x30>
 8002088:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80020b4 <_Z10ff_fastSinf+0x34>
 800208c:	eddf 5a0a 	vldr	s11, [pc, #40]	; 80020b8 <_Z10ff_fastSinf+0x38>
 8002090:	ee20 6a27 	vmul.f32	s12, s0, s15
 8002094:	ee66 6ae7 	vnmul.f32	s13, s13, s15
 8002098:	ee66 7a27 	vmul.f32	s15, s12, s15
 800209c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020a0:	eea6 7a65 	vfms.f32	s14, s12, s11
 80020a4:	ee30 0a07 	vadd.f32	s0, s0, s14
}
 80020a8:	eea6 0aa7 	vfma.f32	s0, s13, s15
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	39500d01 	.word	0x39500d01
 80020b4:	3c088889 	.word	0x3c088889
 80020b8:	3e2aaaab 	.word	0x3e2aaaab

080020bc <_Z11ff_fastASinf>:

float ff_fastASin(float val){
 80020bc:	b538      	push	{r3, r4, r5, lr}
 80020be:	ed2d 8b04 	vpush	{d8-d9}
	return val+(0.5)*((val*val*val)/3)+(0.375)*((val*val*val*val*val)/5)+(0.3125)*((val*val*val*val*val*val*val)/7);
 80020c2:	ee20 9a00 	vmul.f32	s18, s0, s0
 80020c6:	eddf 7a27 	vldr	s15, [pc, #156]	; 8002164 <_Z11ff_fastASinf+0xa8>
float ff_fastASin(float val){
 80020ca:	eeb0 8a40 	vmov.f32	s16, s0
	return val+(0.5)*((val*val*val)/3)+(0.375)*((val*val*val*val*val)/5)+(0.3125)*((val*val*val*val*val*val*val)/7);
 80020ce:	ee69 8a00 	vmul.f32	s17, s18, s0
 80020d2:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80020d6:	ee69 8a28 	vmul.f32	s17, s18, s17
 80020da:	ee17 0a90 	vmov	r0, s15
 80020de:	f7fe fa03 	bl	80004e8 <__aeabi_f2d>
 80020e2:	2200      	movs	r2, #0
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <_Z11ff_fastASinf+0xac>)
 80020e6:	f7fe fa57 	bl	8000598 <__aeabi_dmul>
 80020ea:	4604      	mov	r4, r0
 80020ec:	460d      	mov	r5, r1
 80020ee:	ee18 0a10 	vmov	r0, s16
 80020f2:	f7fe f9f9 	bl	80004e8 <__aeabi_f2d>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4620      	mov	r0, r4
 80020fc:	4629      	mov	r1, r5
 80020fe:	f7fe f895 	bl	800022c <__adddf3>
 8002102:	eddf 7a1a 	vldr	s15, [pc, #104]	; 800216c <_Z11ff_fastASinf+0xb0>
 8002106:	4604      	mov	r4, r0
 8002108:	460d      	mov	r5, r1
 800210a:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800210e:	ee17 0a90 	vmov	r0, s15
 8002112:	f7fe f9e9 	bl	80004e8 <__aeabi_f2d>
 8002116:	2200      	movs	r2, #0
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <_Z11ff_fastASinf+0xb4>)
 800211a:	f7fe fa3d 	bl	8000598 <__aeabi_dmul>
 800211e:	4602      	mov	r2, r0
 8002120:	460b      	mov	r3, r1
 8002122:	4620      	mov	r0, r4
 8002124:	4629      	mov	r1, r5
 8002126:	f7fe f881 	bl	800022c <__adddf3>
 800212a:	eddf 7a12 	vldr	s15, [pc, #72]	; 8002174 <_Z11ff_fastASinf+0xb8>
 800212e:	4604      	mov	r4, r0
 8002130:	460d      	mov	r5, r1
 8002132:	ee29 9a27 	vmul.f32	s18, s18, s15
 8002136:	ee69 7a28 	vmul.f32	s15, s18, s17
 800213a:	ee17 0a90 	vmov	r0, s15
 800213e:	f7fe f9d3 	bl	80004e8 <__aeabi_f2d>
 8002142:	2200      	movs	r2, #0
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <_Z11ff_fastASinf+0xbc>)
 8002146:	f7fe fa27 	bl	8000598 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4620      	mov	r0, r4
 8002150:	4629      	mov	r1, r5
 8002152:	f7fe f86b 	bl	800022c <__adddf3>
 8002156:	f7fe fc31 	bl	80009bc <__aeabi_d2f>
}
 800215a:	ee00 0a10 	vmov	s0, r0
 800215e:	ecbd 8b04 	vpop	{d8-d9}
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	3eaaaaab 	.word	0x3eaaaaab
 8002168:	3fe00000 	.word	0x3fe00000
 800216c:	3e4ccccd 	.word	0x3e4ccccd
 8002170:	3fd80000 	.word	0x3fd80000
 8002174:	3e124925 	.word	0x3e124925
 8002178:	3fd40000 	.word	0x3fd40000

0800217c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800217c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800217e:	4a23      	ldr	r2, [pc, #140]	; (800220c <_Z18SystemClock_Configv+0x90>)
{
 8002180:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002182:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002184:	4b22      	ldr	r3, [pc, #136]	; (8002210 <_Z18SystemClock_Configv+0x94>)
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002186:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002188:	a808      	add	r0, sp, #32
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218a:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800218c:	9403      	str	r4, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800218e:	940d      	str	r4, [sp, #52]	; 0x34
 8002190:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002194:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002198:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800219c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800219e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80021a2:	6411      	str	r1, [r2, #64]	; 0x40
 80021a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021a6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80021aa:	9201      	str	r2, [sp, #4]
 80021ac:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80021b4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021b6:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021be:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c4:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 216;
 80021ce:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021d0:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80021d4:	23d8      	movs	r3, #216	; 0xd8
 80021d6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021da:	2202      	movs	r2, #2
 80021dc:	2302      	movs	r3, #2
 80021de:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e2:	f000 fa7d 	bl	80026e0 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021e6:	f000 fa41 	bl	800266c <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ea:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021ec:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80021f0:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f2:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80021f8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021fc:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002202:	f000 fc5b 	bl	8002abc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002206:	b015      	add	sp, #84	; 0x54
 8002208:	bd30      	pop	{r4, r5, pc}
 800220a:	bf00      	nop
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
 8002214:	00000000 	.word	0x00000000

08002218 <main>:
{
 8002218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800221c:	b085      	sub	sp, #20
	DWT->CYCCNT = 0;								//https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ 12.10.19 01:30
 800221e:	f04f 0800 	mov.w	r8, #0
	HAL_Init();
 8002222:	f000 f99f 	bl	8002564 <HAL_Init>
	imu.IMU_init_ok = false;
 8002226:	f8df 9230 	ldr.w	r9, [pc, #560]	; 8002458 <main+0x240>
	SystemClock_Config();
 800222a:	f7ff ffa7 	bl	800217c <_Z18SystemClock_Configv>
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800222e:	4a7c      	ldr	r2, [pc, #496]	; (8002420 <main+0x208>)
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8002230:	487c      	ldr	r0, [pc, #496]	; (8002424 <main+0x20c>)
	tim2_motor.EnableChannel(GPIOA, 0, GPIO_AF1_TIM2, 1);
 8002232:	2401      	movs	r4, #1
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002234:	6b11      	ldr	r1, [r2, #48]	; 0x30
	tim2_motor.EnableChannel(GPIOA, 1, GPIO_AF1_TIM2, 2);
 8002236:	2502      	movs	r5, #2
	DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 8002238:	4b7b      	ldr	r3, [pc, #492]	; (8002428 <main+0x210>)
	tim2_motor.EnableChannel(GPIOB, 10, GPIO_AF1_TIM2, 3);
 800223a:	2603      	movs	r6, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800223c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	tim2_motor.EnableChannel(GPIOB, 11, GPIO_AF1_TIM2, 4);
 8002240:	2704      	movs	r7, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002242:	6311      	str	r1, [r2, #48]	; 0x30
 8002244:	6b12      	ldr	r2, [r2, #48]	; 0x30
	DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 8002246:	4979      	ldr	r1, [pc, #484]	; (800242c <main+0x214>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002248:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800224c:	9203      	str	r2, [sp, #12]
 800224e:	9a03      	ldr	r2, [sp, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8002250:	f8d0 20fc 	ldr.w	r2, [r0, #252]	; 0xfc
 8002254:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002258:	f8c0 20fc 	str.w	r2, [r0, #252]	; 0xfc
	DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 800225c:	f8c3 1fb0 	str.w	r1, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;								//https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ 12.10.19 01:30
 8002260:	f8c3 8004 	str.w	r8, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002264:	681a      	ldr	r2, [r3, #0]
	GPIO::EN(GPIOC);
 8002266:	4872      	ldr	r0, [pc, #456]	; (8002430 <main+0x218>)
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]
	GPIO::EN(GPIOC);
 800226e:	f7fe fd73 	bl	8000d58 <_ZN4GPIO2ENEP12GPIO_TypeDef>
	GPIO::MODE(GPIOC, 4, MODE_OUTPUT);
 8002272:	2201      	movs	r2, #1
 8002274:	2104      	movs	r1, #4
 8002276:	486e      	ldr	r0, [pc, #440]	; (8002430 <main+0x218>)
 8002278:	f7fe fdd4 	bl	8000e24 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
	spi2.Init();
 800227c:	486d      	ldr	r0, [pc, #436]	; (8002434 <main+0x21c>)
	imu.IMU_init_ok = false;
 800227e:	f889 8000 	strb.w	r8, [r9]
	spi2.Init();
 8002282:	f7ff fb31 	bl	80018e8 <_ZN3COM3SPI4InitEv>
	spi3.Init();
 8002286:	486c      	ldr	r0, [pc, #432]	; (8002438 <main+0x220>)
 8002288:	f7ff fb2e 	bl	80018e8 <_ZN3COM3SPI4InitEv>
	tim2_motor.Init();
 800228c:	486b      	ldr	r0, [pc, #428]	; (800243c <main+0x224>)
 800228e:	f7ff fcb3 	bl	8001bf8 <_ZN5TIMER3TIM4InitEv>
	tim3_controller.Init();
 8002292:	486b      	ldr	r0, [pc, #428]	; (8002440 <main+0x228>)
 8002294:	f7ff fcb0 	bl	8001bf8 <_ZN5TIMER3TIM4InitEv>
	tim4_controller.Init();
 8002298:	486a      	ldr	r0, [pc, #424]	; (8002444 <main+0x22c>)
 800229a:	f7ff fcad 	bl	8001bf8 <_ZN5TIMER3TIM4InitEv>
	tim5_trig.Init();
 800229e:	486a      	ldr	r0, [pc, #424]	; (8002448 <main+0x230>)
 80022a0:	f7ff fcaa 	bl	8001bf8 <_ZN5TIMER3TIM4InitEv>
	tim7_trig.Init();
 80022a4:	4869      	ldr	r0, [pc, #420]	; (800244c <main+0x234>)
 80022a6:	f7ff fca7 	bl	8001bf8 <_ZN5TIMER3TIM4InitEv>
	tim5_trig.EnableUpdateInterrupt();
 80022aa:	4867      	ldr	r0, [pc, #412]	; (8002448 <main+0x230>)
 80022ac:	f7ff fd20 	bl	8001cf0 <_ZN5TIMER3TIM21EnableUpdateInterruptEv>
	tim7_trig.EnableUpdateInterrupt();
 80022b0:	4866      	ldr	r0, [pc, #408]	; (800244c <main+0x234>)
 80022b2:	f7ff fd1d 	bl	8001cf0 <_ZN5TIMER3TIM21EnableUpdateInterruptEv>
	tim2_motor.EnableChannel(GPIOA, 0, GPIO_AF1_TIM2, 1);
 80022b6:	4623      	mov	r3, r4
 80022b8:	4642      	mov	r2, r8
 80022ba:	4965      	ldr	r1, [pc, #404]	; (8002450 <main+0x238>)
 80022bc:	485f      	ldr	r0, [pc, #380]	; (800243c <main+0x224>)
 80022be:	9400      	str	r4, [sp, #0]
 80022c0:	f7ff fd22 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnableChannel(GPIOA, 1, GPIO_AF1_TIM2, 2);
 80022c4:	4623      	mov	r3, r4
 80022c6:	4622      	mov	r2, r4
 80022c8:	4961      	ldr	r1, [pc, #388]	; (8002450 <main+0x238>)
 80022ca:	485c      	ldr	r0, [pc, #368]	; (800243c <main+0x224>)
 80022cc:	9500      	str	r5, [sp, #0]
 80022ce:	f7ff fd1b 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnableChannel(GPIOB, 10, GPIO_AF1_TIM2, 3);
 80022d2:	4623      	mov	r3, r4
 80022d4:	220a      	movs	r2, #10
 80022d6:	495f      	ldr	r1, [pc, #380]	; (8002454 <main+0x23c>)
 80022d8:	4858      	ldr	r0, [pc, #352]	; (800243c <main+0x224>)
 80022da:	9600      	str	r6, [sp, #0]
 80022dc:	f7ff fd14 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnableChannel(GPIOB, 11, GPIO_AF1_TIM2, 4);
 80022e0:	4623      	mov	r3, r4
 80022e2:	220b      	movs	r2, #11
 80022e4:	4855      	ldr	r0, [pc, #340]	; (800243c <main+0x224>)
 80022e6:	495b      	ldr	r1, [pc, #364]	; (8002454 <main+0x23c>)
 80022e8:	9700      	str	r7, [sp, #0]
 80022ea:	f7ff fd0d 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnablePWM(1);
 80022ee:	4621      	mov	r1, r4
 80022f0:	4852      	ldr	r0, [pc, #328]	; (800243c <main+0x224>)
 80022f2:	f7ff fd43 	bl	8001d7c <_ZN5TIMER3TIM9EnablePWMEh>
	tim2_motor.EnablePWM(2);
 80022f6:	4629      	mov	r1, r5
 80022f8:	4850      	ldr	r0, [pc, #320]	; (800243c <main+0x224>)
 80022fa:	f7ff fd3f 	bl	8001d7c <_ZN5TIMER3TIM9EnablePWMEh>
	tim2_motor.EnablePWM(3);
 80022fe:	4631      	mov	r1, r6
 8002300:	484e      	ldr	r0, [pc, #312]	; (800243c <main+0x224>)
 8002302:	f7ff fd3b 	bl	8001d7c <_ZN5TIMER3TIM9EnablePWMEh>
	tim2_motor.EnablePWM(4);
 8002306:	4639      	mov	r1, r7
 8002308:	484c      	ldr	r0, [pc, #304]	; (800243c <main+0x224>)
 800230a:	f7ff fd37 	bl	8001d7c <_ZN5TIMER3TIM9EnablePWMEh>
	tim2_motor.TIM_Start();
 800230e:	484b      	ldr	r0, [pc, #300]	; (800243c <main+0x224>)
 8002310:	f7ff fd8a 	bl	8001e28 <_ZN5TIMER3TIM9TIM_StartEv>
	tim2_motor.PWM_setDutyCycle(1, 50);
 8002314:	2232      	movs	r2, #50	; 0x32
 8002316:	4621      	mov	r1, r4
 8002318:	4848      	ldr	r0, [pc, #288]	; (800243c <main+0x224>)
 800231a:	f7ff fe07 	bl	8001f2c <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
	tim2_motor.PWM_setDutyCycle(2, 4000);
 800231e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002322:	4629      	mov	r1, r5
 8002324:	4845      	ldr	r0, [pc, #276]	; (800243c <main+0x224>)
 8002326:	f7ff fe01 	bl	8001f2c <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
	tim2_motor.PWM_setDutyCycle(3, 3072);
 800232a:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800232e:	4631      	mov	r1, r6
 8002330:	4842      	ldr	r0, [pc, #264]	; (800243c <main+0x224>)
 8002332:	f7ff fdfb 	bl	8001f2c <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
	tim2_motor.PWM_setDutyCycle(4, 2000);
 8002336:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800233a:	4639      	mov	r1, r7
 800233c:	483f      	ldr	r0, [pc, #252]	; (800243c <main+0x224>)
 800233e:	f7ff fdf5 	bl	8001f2c <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
	tim3_controller.EnableChannel(GPIOB, 4, GPIO_AF2_TIM3, 1); //CH 1 ROLL
 8002342:	462b      	mov	r3, r5
 8002344:	463a      	mov	r2, r7
 8002346:	4943      	ldr	r1, [pc, #268]	; (8002454 <main+0x23c>)
 8002348:	483d      	ldr	r0, [pc, #244]	; (8002440 <main+0x228>)
 800234a:	9400      	str	r4, [sp, #0]
 800234c:	f7ff fcdc 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim3_controller.EnableChannel(GPIOB, 5, GPIO_AF2_TIM3, 2); //CH 2 PITCH
 8002350:	462b      	mov	r3, r5
 8002352:	2205      	movs	r2, #5
 8002354:	493f      	ldr	r1, [pc, #252]	; (8002454 <main+0x23c>)
 8002356:	483a      	ldr	r0, [pc, #232]	; (8002440 <main+0x228>)
 8002358:	9500      	str	r5, [sp, #0]
 800235a:	f7ff fcd5 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim3_controller.EnableChannel(GPIOB, 0, GPIO_AF2_TIM3, 3); //CH 3 THROTTLE
 800235e:	4642      	mov	r2, r8
 8002360:	462b      	mov	r3, r5
 8002362:	493c      	ldr	r1, [pc, #240]	; (8002454 <main+0x23c>)
 8002364:	4836      	ldr	r0, [pc, #216]	; (8002440 <main+0x228>)
 8002366:	9600      	str	r6, [sp, #0]
 8002368:	f7ff fcce 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim4_controller.EnableChannel(GPIOB, 8, GPIO_AF2_TIM4, 3); //CH 3 THROTTLE
 800236c:	462b      	mov	r3, r5
 800236e:	2208      	movs	r2, #8
 8002370:	4834      	ldr	r0, [pc, #208]	; (8002444 <main+0x22c>)
 8002372:	4938      	ldr	r1, [pc, #224]	; (8002454 <main+0x23c>)
 8002374:	9600      	str	r6, [sp, #0]
 8002376:	f7ff fcc7 	bl	8001d08 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim3_controller.EnableInputCapture(1);
 800237a:	4621      	mov	r1, r4
 800237c:	4830      	ldr	r0, [pc, #192]	; (8002440 <main+0x228>)
 800237e:	f7ff fde9 	bl	8001f54 <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim3_controller.EnableInputCapture(2);
 8002382:	4629      	mov	r1, r5
 8002384:	482e      	ldr	r0, [pc, #184]	; (8002440 <main+0x228>)
 8002386:	f7ff fde5 	bl	8001f54 <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim3_controller.EnableInputCapture(3);
 800238a:	4631      	mov	r1, r6
 800238c:	482c      	ldr	r0, [pc, #176]	; (8002440 <main+0x228>)
 800238e:	f7ff fde1 	bl	8001f54 <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim4_controller.EnableInputCapture(3);
 8002392:	4631      	mov	r1, r6
 8002394:	482b      	ldr	r0, [pc, #172]	; (8002444 <main+0x22c>)
 8002396:	f7ff fddd 	bl	8001f54 <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim3_controller.TIM_Start();
 800239a:	4829      	ldr	r0, [pc, #164]	; (8002440 <main+0x228>)
 800239c:	f7ff fd44 	bl	8001e28 <_ZN5TIMER3TIM9TIM_StartEv>
	tim4_controller.TIM_Start();
 80023a0:	4828      	ldr	r0, [pc, #160]	; (8002444 <main+0x22c>)
 80023a2:	f7ff fd41 	bl	8001e28 <_ZN5TIMER3TIM9TIM_StartEv>
	tim5_trig.TIM_Start();
 80023a6:	4828      	ldr	r0, [pc, #160]	; (8002448 <main+0x230>)
 80023a8:	f7ff fd3e 	bl	8001e28 <_ZN5TIMER3TIM9TIM_StartEv>
	tim7_trig.TIM_Start();
 80023ac:	4827      	ldr	r0, [pc, #156]	; (800244c <main+0x234>)
 80023ae:	f7ff fd3b 	bl	8001e28 <_ZN5TIMER3TIM9TIM_StartEv>
	imu.IMU_init_ok = imu.IMU_Init();
 80023b2:	4648      	mov	r0, r9
 80023b4:	f7fe fde8 	bl	8000f88 <_ZN7SENSORS3IMU8IMU_InitEv>
 80023b8:	f889 0000 	strb.w	r0, [r9]
	if(imu.IMU_init_ok){
 80023bc:	bb30      	cbnz	r0, 800240c <main+0x1f4>
		imu.IMU_readAngle();
 80023be:	4f26      	ldr	r7, [pc, #152]	; (8002458 <main+0x240>)
 80023c0:	f8df a098 	ldr.w	sl, [pc, #152]	; 800245c <main+0x244>
	imu.IMU_startINT();
 80023c4:	4638      	mov	r0, r7
		double start = DWT->CYCCNT;
 80023c6:	4e18      	ldr	r6, [pc, #96]	; (8002428 <main+0x210>)
		looptime = (stop - start)/216000000.0;
 80023c8:	f20f 094c 	addw	r9, pc, #76	; 0x4c
 80023cc:	e9d9 8900 	ldrd	r8, r9, [r9]
	imu.IMU_startINT();
 80023d0:	f7fe feda 	bl	8001188 <_ZN7SENSORS3IMU12IMU_startINTEv>
		imu.IMU_readAngle();
 80023d4:	4638      	mov	r0, r7
		double start = DWT->CYCCNT;
 80023d6:	f8d6 b004 	ldr.w	fp, [r6, #4]
		imu.IMU_readAngle();
 80023da:	f7fe ff01 	bl	80011e0 <_ZN7SENSORS3IMU13IMU_readAngleEv>
		double stop = DWT->CYCCNT;
 80023de:	6870      	ldr	r0, [r6, #4]
 80023e0:	f7fe f860 	bl	80004a4 <__aeabi_ui2d>
 80023e4:	4604      	mov	r4, r0
 80023e6:	460d      	mov	r5, r1
		double start = DWT->CYCCNT;
 80023e8:	4658      	mov	r0, fp
 80023ea:	f7fe f85b 	bl	80004a4 <__aeabi_ui2d>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
		looptime = (stop - start)/216000000.0;
 80023f2:	4620      	mov	r0, r4
 80023f4:	4629      	mov	r1, r5
 80023f6:	f7fd ff17 	bl	8000228 <__aeabi_dsub>
 80023fa:	4642      	mov	r2, r8
 80023fc:	464b      	mov	r3, r9
 80023fe:	f7fe f8cb 	bl	8000598 <__aeabi_dmul>
 8002402:	f7fe fadb 	bl	80009bc <__aeabi_d2f>
 8002406:	f8ca 0000 	str.w	r0, [sl]
	while (1){
 800240a:	e7e3      	b.n	80023d4 <main+0x1bc>
		GPIO::WRITE(GPIOC, 4, HIGH);
 800240c:	4622      	mov	r2, r4
 800240e:	4639      	mov	r1, r7
 8002410:	4807      	ldr	r0, [pc, #28]	; (8002430 <main+0x218>)
 8002412:	f7fe fd29 	bl	8000e68 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
 8002416:	e7d2      	b.n	80023be <main+0x1a6>
 8002418:	e465d72c 	.word	0xe465d72c
 800241c:	3e33e254 	.word	0x3e33e254
 8002420:	40023800 	.word	0x40023800
 8002424:	e000ed00 	.word	0xe000ed00
 8002428:	e0001000 	.word	0xe0001000
 800242c:	c5acce55 	.word	0xc5acce55
 8002430:	40020800 	.word	0x40020800
 8002434:	200000f8 	.word	0x200000f8
 8002438:	2000012c 	.word	0x2000012c
 800243c:	20000160 	.word	0x20000160
 8002440:	200001a4 	.word	0x200001a4
 8002444:	200001e8 	.word	0x200001e8
 8002448:	2000022c 	.word	0x2000022c
 800244c:	20000270 	.word	0x20000270
 8002450:	40020000 	.word	0x40020000
 8002454:	40020400 	.word	0x40020400
 8002458:	200002e0 	.word	0x200002e0
 800245c:	200000cc 	.word	0x200000cc

08002460 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002460:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_MspInit+0x2c>)
{
 8002462:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002466:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800246a:	641a      	str	r2, [r3, #64]	; 0x40
 800246c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800246e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002472:	9200      	str	r2, [sp, #0]
 8002474:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002478:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800247c:	645a      	str	r2, [r3, #68]	; 0x44
 800247e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002488:	b002      	add	sp, #8
 800248a:	4770      	bx	lr
 800248c:	40023800 	.word	0x40023800

08002490 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler>
 8002492:	bf00      	nop

08002494 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002494:	e7fe      	b.n	8002494 <HardFault_Handler>
 8002496:	bf00      	nop

08002498 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002498:	e7fe      	b.n	8002498 <MemManage_Handler>
 800249a:	bf00      	nop

0800249c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <BusFault_Handler>
 800249e:	bf00      	nop

080024a0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a0:	e7fe      	b.n	80024a0 <UsageFault_Handler>
 80024a2:	bf00      	nop

080024a4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop

080024a8 <DebugMon_Handler>:
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop

080024ac <PendSV_Handler>:
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop

080024b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024b0:	f000 b864 	b.w	800257c <HAL_IncTick>

080024b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024b4:	4a03      	ldr	r2, [pc, #12]	; (80024c4 <SystemInit+0x10>)
 80024b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80024ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024c2:	4770      	bx	lr
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024cc:	480d      	ldr	r0, [pc, #52]	; (8002504 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024ce:	490e      	ldr	r1, [pc, #56]	; (8002508 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024d0:	4a0e      	ldr	r2, [pc, #56]	; (800250c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d4:	e002      	b.n	80024dc <LoopCopyDataInit>

080024d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024da:	3304      	adds	r3, #4

080024dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e0:	d3f9      	bcc.n	80024d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024e4:	4c0b      	ldr	r4, [pc, #44]	; (8002514 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024e8:	e001      	b.n	80024ee <LoopFillZerobss>

080024ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024ec:	3204      	adds	r2, #4

080024ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f0:	d3fb      	bcc.n	80024ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024f2:	f7ff ffdf 	bl	80024b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f000 fbbd 	bl	8002c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7ff fe8d 	bl	8002218 <main>
  bx  lr    
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002508:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800250c:	08002cf8 	.word	0x08002cf8
  ldr r2, =_sbss
 8002510:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8002514:	200005e0 	.word	0x200005e0

08002518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC_IRQHandler>
	...

0800251c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800251c:	490e      	ldr	r1, [pc, #56]	; (8002558 <HAL_InitTick+0x3c>)
 800251e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002522:	4a0e      	ldr	r2, [pc, #56]	; (800255c <HAL_InitTick+0x40>)
{
 8002524:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002526:	7809      	ldrb	r1, [r1, #0]
{
 8002528:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800252a:	6812      	ldr	r2, [r2, #0]
 800252c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002530:	fbb2 f0f3 	udiv	r0, r2, r3
 8002534:	f000 f884 	bl	8002640 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002538:	b908      	cbnz	r0, 800253e <HAL_InitTick+0x22>
 800253a:	2c0f      	cmp	r4, #15
 800253c:	d901      	bls.n	8002542 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800253e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8002540:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002542:	2200      	movs	r2, #0
 8002544:	4621      	mov	r1, r4
 8002546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254a:	f000 f83b 	bl	80025c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_InitTick+0x44>)
 8002550:	2000      	movs	r0, #0
 8002552:	601c      	str	r4, [r3, #0]
}
 8002554:	bd10      	pop	{r4, pc}
 8002556:	bf00      	nop
 8002558:	200000d4 	.word	0x200000d4
 800255c:	200000d0 	.word	0x200000d0
 8002560:	200000d8 	.word	0x200000d8

08002564 <HAL_Init>:
{
 8002564:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002566:	2003      	movs	r0, #3
 8002568:	f000 f81a 	bl	80025a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800256c:	200f      	movs	r0, #15
 800256e:	f7ff ffd5 	bl	800251c <HAL_InitTick>
  HAL_MspInit();
 8002572:	f7ff ff75 	bl	8002460 <HAL_MspInit>
}
 8002576:	2000      	movs	r0, #0
 8002578:	bd08      	pop	{r3, pc}
 800257a:	bf00      	nop

0800257c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800257c:	4a03      	ldr	r2, [pc, #12]	; (800258c <HAL_IncTick+0x10>)
 800257e:	4b04      	ldr	r3, [pc, #16]	; (8002590 <HAL_IncTick+0x14>)
 8002580:	6811      	ldr	r1, [r2, #0]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	440b      	add	r3, r1
 8002586:	6013      	str	r3, [r2, #0]
}
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	200005dc 	.word	0x200005dc
 8002590:	200000d4 	.word	0x200000d4

08002594 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002594:	4b01      	ldr	r3, [pc, #4]	; (800259c <HAL_GetTick+0x8>)
 8002596:	6818      	ldr	r0, [r3, #0]
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	200005dc 	.word	0x200005dc

080025a0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4906      	ldr	r1, [pc, #24]	; (80025bc <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a2:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a6:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025aa:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025ac:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b0:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80025b6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80025b8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00
 80025c0:	05fa0000 	.word	0x05fa0000

080025c4 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_NVIC_SetPriority+0x70>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025cc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ce:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025d2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d6:	f1be 0f04 	cmp.w	lr, #4
 80025da:	bf28      	it	cs
 80025dc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025e0:	f1bc 0f06 	cmp.w	ip, #6
 80025e4:	d91a      	bls.n	800261c <HAL_NVIC_SetPriority+0x58>
 80025e6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80025ec:	fa0c fc03 	lsl.w	ip, ip, r3
 80025f0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80025f8:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fa:	fa0c fc0e 	lsl.w	ip, ip, lr
 80025fe:	ea21 010c 	bic.w	r1, r1, ip
 8002602:	fa01 f103 	lsl.w	r1, r1, r3
 8002606:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800260a:	db0a      	blt.n	8002622 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	0109      	lsls	r1, r1, #4
 800260e:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <HAL_NVIC_SetPriority+0x74>)
 8002610:	b2c9      	uxtb	r1, r1
 8002612:	4403      	add	r3, r0
 8002614:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002618:	f85d fb04 	ldr.w	pc, [sp], #4
 800261c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	4613      	mov	r3, r2
 8002620:	e7e8      	b.n	80025f4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	f000 000f 	and.w	r0, r0, #15
 8002626:	0109      	lsls	r1, r1, #4
 8002628:	4b04      	ldr	r3, [pc, #16]	; (800263c <HAL_NVIC_SetPriority+0x78>)
 800262a:	b2c9      	uxtb	r1, r1
 800262c:	4403      	add	r3, r0
 800262e:	7619      	strb	r1, [r3, #24]
 8002630:	f85d fb04 	ldr.w	pc, [sp], #4
 8002634:	e000ed00 	.word	0xe000ed00
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ecfc 	.word	0xe000ecfc

08002640 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002640:	1e43      	subs	r3, r0, #1
 8002642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002646:	d20c      	bcs.n	8002662 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002648:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264e:	4906      	ldr	r1, [pc, #24]	; (8002668 <HAL_SYSTICK_Config+0x28>)
 8002650:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002654:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002656:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002658:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265e:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b1a      	ldr	r3, [pc, #104]	; (80026d8 <HAL_PWREx_EnableOverDrive+0x6c>)
 800266e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002670:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8002674:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002676:	641a      	str	r2, [r3, #64]	; 0x40
{
 8002678:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800267c:	4c17      	ldr	r4, [pc, #92]	; (80026dc <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268e:	f7ff ff81 	bl	8002594 <HAL_GetTick>
 8002692:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002694:	e005      	b.n	80026a2 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002696:	f7ff ff7d 	bl	8002594 <HAL_GetTick>
 800269a:	1b40      	subs	r0, r0, r5
 800269c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80026a0:	d817      	bhi.n	80026d2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80026a2:	6863      	ldr	r3, [r4, #4]
 80026a4:	03da      	lsls	r2, r3, #15
 80026a6:	d5f6      	bpl.n	8002696 <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026a8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026aa:	4d0c      	ldr	r5, [pc, #48]	; (80026dc <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80026b2:	f7ff ff6f 	bl	8002594 <HAL_GetTick>
 80026b6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026b8:	e005      	b.n	80026c6 <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80026ba:	f7ff ff6b 	bl	8002594 <HAL_GetTick>
 80026be:	1b00      	subs	r0, r0, r4
 80026c0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80026c4:	d805      	bhi.n	80026d2 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026c6:	686b      	ldr	r3, [r5, #4]
 80026c8:	039b      	lsls	r3, r3, #14
 80026ca:	d5f6      	bpl.n	80026ba <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	b003      	add	sp, #12
 80026d0:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80026d2:	2003      	movs	r0, #3
}
 80026d4:	b003      	add	sp, #12
 80026d6:	bd30      	pop	{r4, r5, pc}
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000

080026e0 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026e0:	2800      	cmp	r0, #0
 80026e2:	f000 81b6 	beq.w	8002a52 <HAL_RCC_OscConfig+0x372>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	6803      	ldr	r3, [r0, #0]
{
 80026e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ec:	07dd      	lsls	r5, r3, #31
{
 80026ee:	b082      	sub	sp, #8
 80026f0:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026f2:	d535      	bpl.n	8002760 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f4:	499a      	ldr	r1, [pc, #616]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 80026f6:	688a      	ldr	r2, [r1, #8]
 80026f8:	f002 020c 	and.w	r2, r2, #12
 80026fc:	2a04      	cmp	r2, #4
 80026fe:	f000 80e0 	beq.w	80028c2 <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002702:	688a      	ldr	r2, [r1, #8]
 8002704:	f002 020c 	and.w	r2, r2, #12
 8002708:	2a08      	cmp	r2, #8
 800270a:	f000 80d6 	beq.w	80028ba <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800270e:	6863      	ldr	r3, [r4, #4]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d010      	beq.n	8002738 <HAL_RCC_OscConfig+0x58>
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80fd 	beq.w	8002916 <HAL_RCC_OscConfig+0x236>
 800271c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002720:	4b8f      	ldr	r3, [pc, #572]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	f000 8185 	beq.w	8002a32 <HAL_RCC_OscConfig+0x352>
 8002728:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e004      	b.n	8002742 <HAL_RCC_OscConfig+0x62>
 8002738:	4a89      	ldr	r2, [pc, #548]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 800273a:	6813      	ldr	r3, [r2, #0]
 800273c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002740:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7ff ff27 	bl	8002594 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4e86      	ldr	r6, [pc, #536]	; (8002960 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002748:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e005      	b.n	8002758 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff ff22 	bl	8002594 <HAL_GetTick>
 8002750:	1b40      	subs	r0, r0, r5
 8002752:	2864      	cmp	r0, #100	; 0x64
 8002754:	f200 80db 	bhi.w	800290e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002758:	6833      	ldr	r3, [r6, #0]
 800275a:	039a      	lsls	r2, r3, #14
 800275c:	d5f6      	bpl.n	800274c <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	079f      	lsls	r7, r3, #30
 8002762:	d527      	bpl.n	80027b4 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002764:	4a7e      	ldr	r2, [pc, #504]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 8002766:	6891      	ldr	r1, [r2, #8]
 8002768:	f011 0f0c 	tst.w	r1, #12
 800276c:	d07e      	beq.n	800286c <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276e:	6891      	ldr	r1, [r2, #8]
 8002770:	f001 010c 	and.w	r1, r1, #12
 8002774:	2908      	cmp	r1, #8
 8002776:	d076      	beq.n	8002866 <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002778:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277a:	4d79      	ldr	r5, [pc, #484]	; (8002960 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8104 	beq.w	800298a <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7ff ff03 	bl	8002594 <HAL_GetTick>
 800278e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002790:	e005      	b.n	800279e <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002792:	f7ff feff 	bl	8002594 <HAL_GetTick>
 8002796:	1b80      	subs	r0, r0, r6
 8002798:	2802      	cmp	r0, #2
 800279a:	f200 80b8 	bhi.w	800290e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	682b      	ldr	r3, [r5, #0]
 80027a0:	0798      	lsls	r0, r3, #30
 80027a2:	d5f6      	bpl.n	8002792 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	6922      	ldr	r2, [r4, #16]
 80027a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80027ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80027b0:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	071a      	lsls	r2, r3, #28
 80027b6:	d41f      	bmi.n	80027f8 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b8:	075d      	lsls	r5, r3, #29
 80027ba:	d534      	bpl.n	8002826 <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027bc:	4b68      	ldr	r3, [pc, #416]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 80027be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027c0:	00d0      	lsls	r0, r2, #3
 80027c2:	d56f      	bpl.n	80028a4 <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 80027c4:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c6:	4e67      	ldr	r6, [pc, #412]	; (8002964 <HAL_RCC_OscConfig+0x284>)
 80027c8:	6833      	ldr	r3, [r6, #0]
 80027ca:	05d9      	lsls	r1, r3, #23
 80027cc:	f140 808f 	bpl.w	80028ee <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d0:	68a3      	ldr	r3, [r4, #8]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	f000 80eb 	beq.w	80029ae <HAL_RCC_OscConfig+0x2ce>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 80b2 	beq.w	8002942 <HAL_RCC_OscConfig+0x262>
 80027de:	2b05      	cmp	r3, #5
 80027e0:	4b5f      	ldr	r3, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 80027e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027e4:	f000 812d 	beq.w	8002a42 <HAL_RCC_OscConfig+0x362>
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	671a      	str	r2, [r3, #112]	; 0x70
 80027ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80027f0:	f022 0204 	bic.w	r2, r2, #4
 80027f4:	671a      	str	r2, [r3, #112]	; 0x70
 80027f6:	e0df      	b.n	80029b8 <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027f8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 80027fa:	4d59      	ldr	r5, [pc, #356]	; (8002960 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d040      	beq.n	8002882 <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 8002800:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002808:	f7ff fec4 	bl	8002594 <HAL_GetTick>
 800280c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800280e:	e004      	b.n	800281a <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002810:	f7ff fec0 	bl	8002594 <HAL_GetTick>
 8002814:	1b80      	subs	r0, r0, r6
 8002816:	2802      	cmp	r0, #2
 8002818:	d879      	bhi.n	800290e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800281c:	079b      	lsls	r3, r3, #30
 800281e:	d5f7      	bpl.n	8002810 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	075d      	lsls	r5, r3, #29
 8002824:	d4ca      	bmi.n	80027bc <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002826:	69a0      	ldr	r0, [r4, #24]
 8002828:	b1c8      	cbz	r0, 800285e <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800282a:	4d4d      	ldr	r5, [pc, #308]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 800282c:	68ab      	ldr	r3, [r5, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	f000 80d3 	beq.w	80029de <HAL_RCC_OscConfig+0x2fe>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002838:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800283a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800283c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002840:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002842:	f000 8108 	beq.w	8002a56 <HAL_RCC_OscConfig+0x376>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002846:	f7ff fea5 	bl	8002594 <HAL_GetTick>
 800284a:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284c:	e004      	b.n	8002858 <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284e:	f7ff fea1 	bl	8002594 <HAL_GetTick>
 8002852:	1b00      	subs	r0, r0, r4
 8002854:	2802      	cmp	r0, #2
 8002856:	d85a      	bhi.n	800290e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	019b      	lsls	r3, r3, #6
 800285c:	d4f7      	bmi.n	800284e <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800285e:	2000      	movs	r0, #0
}
 8002860:	b002      	add	sp, #8
 8002862:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002866:	6852      	ldr	r2, [r2, #4]
 8002868:	0256      	lsls	r6, r2, #9
 800286a:	d485      	bmi.n	8002778 <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800286c:	4a3c      	ldr	r2, [pc, #240]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	0795      	lsls	r5, r2, #30
 8002872:	d530      	bpl.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
 8002874:	68e2      	ldr	r2, [r4, #12]
 8002876:	2a01      	cmp	r2, #1
 8002878:	d02d      	beq.n	80028d6 <HAL_RCC_OscConfig+0x1f6>
        return HAL_ERROR;
 800287a:	2001      	movs	r0, #1
}
 800287c:	b002      	add	sp, #8
 800287e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002882:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002884:	f023 0301 	bic.w	r3, r3, #1
 8002888:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800288a:	f7ff fe83 	bl	8002594 <HAL_GetTick>
 800288e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002890:	e004      	b.n	800289c <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002892:	f7ff fe7f 	bl	8002594 <HAL_GetTick>
 8002896:	1b80      	subs	r0, r0, r6
 8002898:	2802      	cmp	r0, #2
 800289a:	d838      	bhi.n	800290e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800289e:	079f      	lsls	r7, r3, #30
 80028a0:	d4f7      	bmi.n	8002892 <HAL_RCC_OscConfig+0x1b2>
 80028a2:	e7bd      	b.n	8002820 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80028a6:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028ac:	641a      	str	r2, [r3, #64]	; 0x40
 80028ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028b8:	e785      	b.n	80027c6 <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ba:	684a      	ldr	r2, [r1, #4]
 80028bc:	0250      	lsls	r0, r2, #9
 80028be:	f57f af26 	bpl.w	800270e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c2:	4a27      	ldr	r2, [pc, #156]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	0391      	lsls	r1, r2, #14
 80028c8:	f57f af4a 	bpl.w	8002760 <HAL_RCC_OscConfig+0x80>
 80028cc:	6862      	ldr	r2, [r4, #4]
 80028ce:	2a00      	cmp	r2, #0
 80028d0:	f47f af46 	bne.w	8002760 <HAL_RCC_OscConfig+0x80>
 80028d4:	e7d1      	b.n	800287a <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4922      	ldr	r1, [pc, #136]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 80028d8:	6920      	ldr	r0, [r4, #16]
 80028da:	680a      	ldr	r2, [r1, #0]
 80028dc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80028e0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80028e4:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e6:	071a      	lsls	r2, r3, #28
 80028e8:	f57f af66 	bpl.w	80027b8 <HAL_RCC_OscConfig+0xd8>
 80028ec:	e784      	b.n	80027f8 <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 80028ee:	6833      	ldr	r3, [r6, #0]
 80028f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80028f6:	f7ff fe4d 	bl	8002594 <HAL_GetTick>
 80028fa:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028fc:	6833      	ldr	r3, [r6, #0]
 80028fe:	05da      	lsls	r2, r3, #23
 8002900:	f53f af66 	bmi.w	80027d0 <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7ff fe46 	bl	8002594 <HAL_GetTick>
 8002908:	1bc0      	subs	r0, r0, r7
 800290a:	2864      	cmp	r0, #100	; 0x64
 800290c:	d9f6      	bls.n	80028fc <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 800290e:	2003      	movs	r0, #3
}
 8002910:	b002      	add	sp, #8
 8002912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002916:	4d12      	ldr	r5, [pc, #72]	; (8002960 <HAL_RCC_OscConfig+0x280>)
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291e:	602b      	str	r3, [r5, #0]
 8002920:	682b      	ldr	r3, [r5, #0]
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002928:	f7ff fe34 	bl	8002594 <HAL_GetTick>
 800292c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292e:	e004      	b.n	800293a <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fe30 	bl	8002594 <HAL_GetTick>
 8002934:	1b80      	subs	r0, r0, r6
 8002936:	2864      	cmp	r0, #100	; 0x64
 8002938:	d8e9      	bhi.n	800290e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	682b      	ldr	r3, [r5, #0]
 800293c:	039b      	lsls	r3, r3, #14
 800293e:	d4f7      	bmi.n	8002930 <HAL_RCC_OscConfig+0x250>
 8002940:	e70d      	b.n	800275e <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002942:	4e07      	ldr	r6, [pc, #28]	; (8002960 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002944:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002948:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800294a:	f023 0301 	bic.w	r3, r3, #1
 800294e:	6733      	str	r3, [r6, #112]	; 0x70
 8002950:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002952:	f023 0304 	bic.w	r3, r3, #4
 8002956:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002958:	f7ff fe1c 	bl	8002594 <HAL_GetTick>
 800295c:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x292>
 8002960:	40023800 	.word	0x40023800
 8002964:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7ff fe14 	bl	8002594 <HAL_GetTick>
 800296c:	1bc0      	subs	r0, r0, r7
 800296e:	4540      	cmp	r0, r8
 8002970:	d8cd      	bhi.n	800290e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002972:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002974:	0798      	lsls	r0, r3, #30
 8002976:	d4f7      	bmi.n	8002968 <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8002978:	2d00      	cmp	r5, #0
 800297a:	f43f af54 	beq.w	8002826 <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 800297e:	4a4e      	ldr	r2, [pc, #312]	; (8002ab8 <HAL_RCC_OscConfig+0x3d8>)
 8002980:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002986:	6413      	str	r3, [r2, #64]	; 0x40
 8002988:	e74d      	b.n	8002826 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 800298a:	682b      	ldr	r3, [r5, #0]
 800298c:	f023 0301 	bic.w	r3, r3, #1
 8002990:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002992:	f7ff fdff 	bl	8002594 <HAL_GetTick>
 8002996:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002998:	e004      	b.n	80029a4 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7ff fdfb 	bl	8002594 <HAL_GetTick>
 800299e:	1b80      	subs	r0, r0, r6
 80029a0:	2802      	cmp	r0, #2
 80029a2:	d8b4      	bhi.n	800290e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	0799      	lsls	r1, r3, #30
 80029a8:	d4f7      	bmi.n	800299a <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	e702      	b.n	80027b4 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ae:	4a42      	ldr	r2, [pc, #264]	; (8002ab8 <HAL_RCC_OscConfig+0x3d8>)
 80029b0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 80029b8:	f7ff fdec 	bl	8002594 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029bc:	4f3e      	ldr	r7, [pc, #248]	; (8002ab8 <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029c2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e004      	b.n	80029d0 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7ff fde5 	bl	8002594 <HAL_GetTick>
 80029ca:	1b80      	subs	r0, r0, r6
 80029cc:	4540      	cmp	r0, r8
 80029ce:	d89e      	bhi.n	800290e <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029d2:	079b      	lsls	r3, r3, #30
 80029d4:	d5f7      	bpl.n	80029c6 <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 80029d6:	2d00      	cmp	r5, #0
 80029d8:	f43f af25 	beq.w	8002826 <HAL_RCC_OscConfig+0x146>
 80029dc:	e7cf      	b.n	800297e <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 80029e0:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	f43f af3d 	beq.w	8002860 <HAL_RCC_OscConfig+0x180>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029ea:	69e1      	ldr	r1, [r4, #28]
 80029ec:	428b      	cmp	r3, r1
 80029ee:	f47f af44 	bne.w	800287a <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f2:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	6a21      	ldr	r1, [r4, #32]
 80029f8:	428b      	cmp	r3, r1
 80029fa:	f47f af3e 	bne.w	800287a <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a02:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a04:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a06:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002a0a:	f47f af36 	bne.w	800287a <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a10:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a18:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002a1c:	f47f af2d 	bne.w	800287a <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a20:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a22:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a26:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8002a2a:	bf14      	ite	ne
 8002a2c:	2001      	movne	r0, #1
 8002a2e:	2000      	moveq	r0, #0
 8002a30:	e716      	b.n	8002860 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e67f      	b.n	8002742 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a42:	f042 0204 	orr.w	r2, r2, #4
 8002a46:	671a      	str	r2, [r3, #112]	; 0x70
 8002a48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	671a      	str	r2, [r3, #112]	; 0x70
 8002a50:	e7b2      	b.n	80029b8 <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
}
 8002a54:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002a56:	f7ff fd9d 	bl	8002594 <HAL_GetTick>
 8002a5a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5c:	e005      	b.n	8002a6a <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7ff fd99 	bl	8002594 <HAL_GetTick>
 8002a62:	1b80      	subs	r0, r0, r6
 8002a64:	2802      	cmp	r0, #2
 8002a66:	f63f af52 	bhi.w	800290e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	0199      	lsls	r1, r3, #6
 8002a6e:	d4f6      	bmi.n	8002a5e <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a70:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002a74:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a76:	4e10      	ldr	r6, [pc, #64]	; (8002ab8 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a78:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002a7c:	3a01      	subs	r2, #1
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002a82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a86:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a8a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002a8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a94:	682b      	ldr	r3, [r5, #0]
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a9c:	f7ff fd7a 	bl	8002594 <HAL_GetTick>
 8002aa0:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa2:	e005      	b.n	8002ab0 <HAL_RCC_OscConfig+0x3d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa4:	f7ff fd76 	bl	8002594 <HAL_GetTick>
 8002aa8:	1b00      	subs	r0, r0, r4
 8002aaa:	2802      	cmp	r0, #2
 8002aac:	f63f af2f 	bhi.w	800290e <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab0:	6833      	ldr	r3, [r6, #0]
 8002ab2:	019a      	lsls	r2, r3, #6
 8002ab4:	d5f6      	bpl.n	8002aa4 <HAL_RCC_OscConfig+0x3c4>
 8002ab6:	e6d2      	b.n	800285e <HAL_RCC_OscConfig+0x17e>
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002abc:	2800      	cmp	r0, #0
 8002abe:	f000 80b3 	beq.w	8002c28 <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ac2:	4a61      	ldr	r2, [pc, #388]	; (8002c48 <HAL_RCC_ClockConfig+0x18c>)
 8002ac4:	6813      	ldr	r3, [r2, #0]
 8002ac6:	f003 030f 	and.w	r3, r3, #15
 8002aca:	428b      	cmp	r3, r1
{
 8002acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ad0:	4604      	mov	r4, r0
 8002ad2:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	d20c      	bcs.n	8002af0 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	f023 030f 	bic.w	r3, r3, #15
 8002adc:	430b      	orrs	r3, r1
 8002ade:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae0:	6813      	ldr	r3, [r2, #0]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	428b      	cmp	r3, r1
 8002ae8:	d002      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002aea:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8002aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	0798      	lsls	r0, r3, #30
 8002af4:	d514      	bpl.n	8002b20 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af6:	0759      	lsls	r1, r3, #29
 8002af8:	d504      	bpl.n	8002b04 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afa:	4954      	ldr	r1, [pc, #336]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002afc:	688a      	ldr	r2, [r1, #8]
 8002afe:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002b02:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	071a      	lsls	r2, r3, #28
 8002b06:	d504      	bpl.n	8002b12 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4950      	ldr	r1, [pc, #320]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002b0a:	688a      	ldr	r2, [r1, #8]
 8002b0c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002b10:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b12:	494e      	ldr	r1, [pc, #312]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002b14:	68a0      	ldr	r0, [r4, #8]
 8002b16:	688a      	ldr	r2, [r1, #8]
 8002b18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b1c:	4302      	orrs	r2, r0
 8002b1e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b20:	07df      	lsls	r7, r3, #31
 8002b22:	d520      	bpl.n	8002b66 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b24:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b28:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b2c:	d07e      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b2e:	2a02      	cmp	r2, #2
 8002b30:	d077      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b32:	0799      	lsls	r1, r3, #30
 8002b34:	d5d9      	bpl.n	8002aea <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4e45      	ldr	r6, [pc, #276]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3c:	68b3      	ldr	r3, [r6, #8]
 8002b3e:	f023 0303 	bic.w	r3, r3, #3
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002b46:	f7ff fd25 	bl	8002594 <HAL_GetTick>
 8002b4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4c:	e004      	b.n	8002b58 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4e:	f7ff fd21 	bl	8002594 <HAL_GetTick>
 8002b52:	1bc0      	subs	r0, r0, r7
 8002b54:	4540      	cmp	r0, r8
 8002b56:	d86c      	bhi.n	8002c32 <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b58:	68b3      	ldr	r3, [r6, #8]
 8002b5a:	6862      	ldr	r2, [r4, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b64:	d1f3      	bne.n	8002b4e <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b66:	4a38      	ldr	r2, [pc, #224]	; (8002c48 <HAL_RCC_ClockConfig+0x18c>)
 8002b68:	6813      	ldr	r3, [r2, #0]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	42ab      	cmp	r3, r5
 8002b70:	d909      	bls.n	8002b86 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	6813      	ldr	r3, [r2, #0]
 8002b74:	f023 030f 	bic.w	r3, r3, #15
 8002b78:	432b      	orrs	r3, r5
 8002b7a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7c:	6813      	ldr	r3, [r2, #0]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	42ab      	cmp	r3, r5
 8002b84:	d1b1      	bne.n	8002aea <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	075a      	lsls	r2, r3, #29
 8002b8a:	d506      	bpl.n	8002b9a <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b8c:	492f      	ldr	r1, [pc, #188]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002b8e:	68e0      	ldr	r0, [r4, #12]
 8002b90:	688a      	ldr	r2, [r1, #8]
 8002b92:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002b96:	4302      	orrs	r2, r0
 8002b98:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	071b      	lsls	r3, r3, #28
 8002b9c:	d431      	bmi.n	8002c02 <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9e:	492b      	ldr	r1, [pc, #172]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002ba0:	688b      	ldr	r3, [r1, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d039      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x162>
 8002baa:	2b08      	cmp	r3, #8
 8002bac:	d118      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bb0:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bb2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb6:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002bb8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002bbc:	d03b      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bbe:	4824      	ldr	r0, [pc, #144]	; (8002c50 <HAL_RCC_ClockConfig+0x194>)
 8002bc0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	fba1 0100 	umull	r0, r1, r1, r0
 8002bca:	f7fd ff47 	bl	8000a5c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002bce:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002bda:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8002bde:	e000      	b.n	8002be2 <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 8002be0:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be2:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002be4:	4c1c      	ldr	r4, [pc, #112]	; (8002c58 <HAL_RCC_ClockConfig+0x19c>)
 8002be6:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8002be8:	481c      	ldr	r0, [pc, #112]	; (8002c5c <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bea:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002bee:	491c      	ldr	r1, [pc, #112]	; (8002c60 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8002bf0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf2:	5ca2      	ldrb	r2, [r4, r2]
 8002bf4:	40d3      	lsrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8002bf8:	f7ff fc90 	bl	800251c <HAL_InitTick>
  return HAL_OK;
 8002bfc:	2000      	movs	r0, #0
}
 8002bfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c02:	4a12      	ldr	r2, [pc, #72]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
 8002c04:	6921      	ldr	r1, [r4, #16]
 8002c06:	6893      	ldr	r3, [r2, #8]
 8002c08:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002c0c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c10:	490e      	ldr	r1, [pc, #56]	; (8002c4c <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c12:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c14:	688b      	ldr	r3, [r1, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d1c5      	bne.n	8002baa <HAL_RCC_ClockConfig+0xee>
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_RCC_ClockConfig+0x194>)
 8002c20:	e7df      	b.n	8002be2 <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c22:	0198      	lsls	r0, r3, #6
 8002c24:	d487      	bmi.n	8002b36 <HAL_RCC_ClockConfig+0x7a>
 8002c26:	e760      	b.n	8002aea <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002c28:	2001      	movs	r0, #1
}
 8002c2a:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2c:	039e      	lsls	r6, r3, #14
 8002c2e:	d482      	bmi.n	8002b36 <HAL_RCC_ClockConfig+0x7a>
 8002c30:	e75b      	b.n	8002aea <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002c32:	2003      	movs	r0, #3
 8002c34:	e75a      	b.n	8002aec <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c36:	4807      	ldr	r0, [pc, #28]	; (8002c54 <HAL_RCC_ClockConfig+0x198>)
 8002c38:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002c3c:	fba1 0100 	umull	r0, r1, r1, r0
 8002c40:	f7fd ff0c 	bl	8000a5c <__aeabi_uldivmod>
 8002c44:	e7c3      	b.n	8002bce <HAL_RCC_ClockConfig+0x112>
 8002c46:	bf00      	nop
 8002c48:	40023c00 	.word	0x40023c00
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	007a1200 	.word	0x007a1200
 8002c54:	00f42400 	.word	0x00f42400
 8002c58:	08002cd4 	.word	0x08002cd4
 8002c5c:	200000d8 	.word	0x200000d8
 8002c60:	200000d0 	.word	0x200000d0

08002c64 <memset>:
 8002c64:	4402      	add	r2, r0
 8002c66:	4603      	mov	r3, r0
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <memset+0xa>
 8002c6c:	4770      	bx	lr
 8002c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c72:	e7f9      	b.n	8002c68 <memset+0x4>

08002c74 <__libc_init_array>:
 8002c74:	b570      	push	{r4, r5, r6, lr}
 8002c76:	4d0d      	ldr	r5, [pc, #52]	; (8002cac <__libc_init_array+0x38>)
 8002c78:	4c0d      	ldr	r4, [pc, #52]	; (8002cb0 <__libc_init_array+0x3c>)
 8002c7a:	1b64      	subs	r4, r4, r5
 8002c7c:	10a4      	asrs	r4, r4, #2
 8002c7e:	2600      	movs	r6, #0
 8002c80:	42a6      	cmp	r6, r4
 8002c82:	d109      	bne.n	8002c98 <__libc_init_array+0x24>
 8002c84:	4d0b      	ldr	r5, [pc, #44]	; (8002cb4 <__libc_init_array+0x40>)
 8002c86:	4c0c      	ldr	r4, [pc, #48]	; (8002cb8 <__libc_init_array+0x44>)
 8002c88:	f000 f818 	bl	8002cbc <_init>
 8002c8c:	1b64      	subs	r4, r4, r5
 8002c8e:	10a4      	asrs	r4, r4, #2
 8002c90:	2600      	movs	r6, #0
 8002c92:	42a6      	cmp	r6, r4
 8002c94:	d105      	bne.n	8002ca2 <__libc_init_array+0x2e>
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c9c:	4798      	blx	r3
 8002c9e:	3601      	adds	r6, #1
 8002ca0:	e7ee      	b.n	8002c80 <__libc_init_array+0xc>
 8002ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca6:	4798      	blx	r3
 8002ca8:	3601      	adds	r6, #1
 8002caa:	e7f2      	b.n	8002c92 <__libc_init_array+0x1e>
 8002cac:	08002cec 	.word	0x08002cec
 8002cb0:	08002cec 	.word	0x08002cec
 8002cb4:	08002cec 	.word	0x08002cec
 8002cb8:	08002cf4 	.word	0x08002cf4

08002cbc <_init>:
 8002cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cbe:	bf00      	nop
 8002cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cc2:	bc08      	pop	{r3}
 8002cc4:	469e      	mov	lr, r3
 8002cc6:	4770      	bx	lr

08002cc8 <_fini>:
 8002cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cca:	bf00      	nop
 8002ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cce:	bc08      	pop	{r3}
 8002cd0:	469e      	mov	lr, r3
 8002cd2:	4770      	bx	lr
