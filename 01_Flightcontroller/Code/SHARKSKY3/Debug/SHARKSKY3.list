
SHARKSKY3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b4  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004298  08004298  00014298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004488  08004488  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004490  08004490  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800449c  0800449c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  080044a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b80  200002a4  08004744  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000e24  08004744  00020e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001477d  00000000  00000000  00020317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003616  00000000  00000000  00034a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000023f1  00000000  00000000  000380aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000688  00000000  00000000  0003a4a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009d9  00000000  00000000  0003ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247aa  00000000  00000000  0003b501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cac4  00000000  00000000  0005fcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0051  00000000  00000000  0006c76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001594  00000000  00000000  0013c7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0013dd54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a4 	.word	0x200002a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800427c 	.word	0x0800427c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a8 	.word	0x200002a8
 800021c:	0800427c 	.word	0x0800427c

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2f>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b24:	bf24      	itt	cs
 8000b26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_d2f+0x30>
 8000b30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b44:	bf08      	it	eq
 8000b46:	f020 0001 	biceq.w	r0, r0, #1
 8000b4a:	4770      	bx	lr
 8000b4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b50:	d121      	bne.n	8000b96 <__aeabi_d2f+0x7a>
 8000b52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b56:	bfbc      	itt	lt
 8000b58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	4770      	bxlt	lr
 8000b5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b66:	f1c2 0218 	rsb	r2, r2, #24
 8000b6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b72:	fa20 f002 	lsr.w	r0, r0, r2
 8000b76:	bf18      	it	ne
 8000b78:	f040 0001 	orrne.w	r0, r0, #1
 8000b7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b88:	ea40 000c 	orr.w	r0, r0, ip
 8000b8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b94:	e7cc      	b.n	8000b30 <__aeabi_d2f+0x14>
 8000b96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9a:	d107      	bne.n	8000bac <__aeabi_d2f+0x90>
 8000b9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ba6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000baa:	4770      	bxne	lr
 8000bac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_uldivmod>:
 8000bbc:	b953      	cbnz	r3, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bbe:	b94a      	cbnz	r2, 8000bd4 <__aeabi_uldivmod+0x18>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	bf08      	it	eq
 8000bc4:	2800      	cmpeq	r0, #0
 8000bc6:	bf1c      	itt	ne
 8000bc8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bcc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bd0:	f000 b970 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bdc:	f000 f806 	bl	8000bec <__udivmoddi4>
 8000be0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be8:	b004      	add	sp, #16
 8000bea:	4770      	bx	lr

08000bec <__udivmoddi4>:
 8000bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf0:	9e08      	ldr	r6, [sp, #32]
 8000bf2:	460d      	mov	r5, r1
 8000bf4:	4604      	mov	r4, r0
 8000bf6:	460f      	mov	r7, r1
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d14a      	bne.n	8000c92 <__udivmoddi4+0xa6>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	4694      	mov	ip, r2
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0xe2>
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	b143      	cbz	r3, 8000c1a <__udivmoddi4+0x2e>
 8000c08:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c0c:	f1c3 0220 	rsb	r2, r3, #32
 8000c10:	409f      	lsls	r7, r3
 8000c12:	fa20 f202 	lsr.w	r2, r0, r2
 8000c16:	4317      	orrs	r7, r2
 8000c18:	409c      	lsls	r4, r3
 8000c1a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1e:	fa1f f58c 	uxth.w	r5, ip
 8000c22:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c26:	0c22      	lsrs	r2, r4, #16
 8000c28:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c2c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c30:	fb01 f005 	mul.w	r0, r1, r5
 8000c34:	4290      	cmp	r0, r2
 8000c36:	d90a      	bls.n	8000c4e <__udivmoddi4+0x62>
 8000c38:	eb1c 0202 	adds.w	r2, ip, r2
 8000c3c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c40:	f080 811c 	bcs.w	8000e7c <__udivmoddi4+0x290>
 8000c44:	4290      	cmp	r0, r2
 8000c46:	f240 8119 	bls.w	8000e7c <__udivmoddi4+0x290>
 8000c4a:	3902      	subs	r1, #2
 8000c4c:	4462      	add	r2, ip
 8000c4e:	1a12      	subs	r2, r2, r0
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c56:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c5a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5e:	fb00 f505 	mul.w	r5, r0, r5
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x90>
 8000c66:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x294>
 8000c72:	42a5      	cmp	r5, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x294>
 8000c78:	4464      	add	r4, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c80:	1b64      	subs	r4, r4, r5
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11e      	cbz	r6, 8000c8e <__udivmoddi4+0xa2>
 8000c86:	40dc      	lsrs	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d908      	bls.n	8000ca8 <__udivmoddi4+0xbc>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	f000 80ed 	beq.w	8000e76 <__udivmoddi4+0x28a>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e9c6 0500 	strd	r0, r5, [r6]
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	d149      	bne.n	8000d44 <__udivmoddi4+0x158>
 8000cb0:	42ab      	cmp	r3, r5
 8000cb2:	d302      	bcc.n	8000cba <__udivmoddi4+0xce>
 8000cb4:	4282      	cmp	r2, r0
 8000cb6:	f200 80f8 	bhi.w	8000eaa <__udivmoddi4+0x2be>
 8000cba:	1a84      	subs	r4, r0, r2
 8000cbc:	eb65 0203 	sbc.w	r2, r5, r3
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	d0e2      	beq.n	8000c8e <__udivmoddi4+0xa2>
 8000cc8:	e9c6 4700 	strd	r4, r7, [r6]
 8000ccc:	e7df      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000cce:	b902      	cbnz	r2, 8000cd2 <__udivmoddi4+0xe6>
 8000cd0:	deff      	udf	#255	; 0xff
 8000cd2:	fab2 f382 	clz	r3, r2
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8090 	bne.w	8000dfc <__udivmoddi4+0x210>
 8000cdc:	1a8a      	subs	r2, r1, r2
 8000cde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce2:	fa1f fe8c 	uxth.w	lr, ip
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cec:	fb07 2015 	mls	r0, r7, r5, r2
 8000cf0:	0c22      	lsrs	r2, r4, #16
 8000cf2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf6:	fb0e f005 	mul.w	r0, lr, r5
 8000cfa:	4290      	cmp	r0, r2
 8000cfc:	d908      	bls.n	8000d10 <__udivmoddi4+0x124>
 8000cfe:	eb1c 0202 	adds.w	r2, ip, r2
 8000d02:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d06:	d202      	bcs.n	8000d0e <__udivmoddi4+0x122>
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	f200 80cb 	bhi.w	8000ea4 <__udivmoddi4+0x2b8>
 8000d0e:	4645      	mov	r5, r8
 8000d10:	1a12      	subs	r2, r2, r0
 8000d12:	b2a4      	uxth	r4, r4
 8000d14:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d18:	fb07 2210 	mls	r2, r7, r0, r2
 8000d1c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d20:	fb0e fe00 	mul.w	lr, lr, r0
 8000d24:	45a6      	cmp	lr, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x14e>
 8000d28:	eb1c 0404 	adds.w	r4, ip, r4
 8000d2c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d30:	d202      	bcs.n	8000d38 <__udivmoddi4+0x14c>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f200 80bb 	bhi.w	8000eae <__udivmoddi4+0x2c2>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	eba4 040e 	sub.w	r4, r4, lr
 8000d3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d42:	e79f      	b.n	8000c84 <__udivmoddi4+0x98>
 8000d44:	f1c1 0720 	rsb	r7, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d52:	fa05 f401 	lsl.w	r4, r5, r1
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	40fd      	lsrs	r5, r7
 8000d5c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d66:	fa1f fe8c 	uxth.w	lr, ip
 8000d6a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d74:	fb08 f50e 	mul.w	r5, r8, lr
 8000d78:	42a5      	cmp	r5, r4
 8000d7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d82:	d90b      	bls.n	8000d9c <__udivmoddi4+0x1b0>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d8c:	f080 8088 	bcs.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d90:	42a5      	cmp	r5, r4
 8000d92:	f240 8085 	bls.w	8000ea0 <__udivmoddi4+0x2b4>
 8000d96:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9a:	4464      	add	r4, ip
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	b29d      	uxth	r5, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dac:	fb03 fe0e 	mul.w	lr, r3, lr
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1da>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dbc:	d26c      	bcs.n	8000e98 <__udivmoddi4+0x2ac>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	d96a      	bls.n	8000e98 <__udivmoddi4+0x2ac>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fba3 9502 	umull	r9, r5, r3, r2
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	42ac      	cmp	r4, r5
 8000dd4:	46c8      	mov	r8, r9
 8000dd6:	46ae      	mov	lr, r5
 8000dd8:	d356      	bcc.n	8000e88 <__udivmoddi4+0x29c>
 8000dda:	d053      	beq.n	8000e84 <__udivmoddi4+0x298>
 8000ddc:	b156      	cbz	r6, 8000df4 <__udivmoddi4+0x208>
 8000dde:	ebb0 0208 	subs.w	r2, r0, r8
 8000de2:	eb64 040e 	sbc.w	r4, r4, lr
 8000de6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dea:	40ca      	lsrs	r2, r1
 8000dec:	40cc      	lsrs	r4, r1
 8000dee:	4317      	orrs	r7, r2
 8000df0:	e9c6 7400 	strd	r7, r4, [r6]
 8000df4:	4618      	mov	r0, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfc:	f1c3 0120 	rsb	r1, r3, #32
 8000e00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e04:	fa20 f201 	lsr.w	r2, r0, r1
 8000e08:	fa25 f101 	lsr.w	r1, r5, r1
 8000e0c:	409d      	lsls	r5, r3
 8000e0e:	432a      	orrs	r2, r5
 8000e10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e1c:	fb07 1510 	mls	r5, r7, r0, r1
 8000e20:	0c11      	lsrs	r1, r2, #16
 8000e22:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e26:	fb00 f50e 	mul.w	r5, r0, lr
 8000e2a:	428d      	cmp	r5, r1
 8000e2c:	fa04 f403 	lsl.w	r4, r4, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x258>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3a:	d22f      	bcs.n	8000e9c <__udivmoddi4+0x2b0>
 8000e3c:	428d      	cmp	r5, r1
 8000e3e:	d92d      	bls.n	8000e9c <__udivmoddi4+0x2b0>
 8000e40:	3802      	subs	r0, #2
 8000e42:	4461      	add	r1, ip
 8000e44:	1b49      	subs	r1, r1, r5
 8000e46:	b292      	uxth	r2, r2
 8000e48:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e4c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e50:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e54:	fb05 f10e 	mul.w	r1, r5, lr
 8000e58:	4291      	cmp	r1, r2
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x282>
 8000e5c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e60:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e64:	d216      	bcs.n	8000e94 <__udivmoddi4+0x2a8>
 8000e66:	4291      	cmp	r1, r2
 8000e68:	d914      	bls.n	8000e94 <__udivmoddi4+0x2a8>
 8000e6a:	3d02      	subs	r5, #2
 8000e6c:	4462      	add	r2, ip
 8000e6e:	1a52      	subs	r2, r2, r1
 8000e70:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e74:	e738      	b.n	8000ce8 <__udivmoddi4+0xfc>
 8000e76:	4631      	mov	r1, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e708      	b.n	8000c8e <__udivmoddi4+0xa2>
 8000e7c:	4639      	mov	r1, r7
 8000e7e:	e6e6      	b.n	8000c4e <__udivmoddi4+0x62>
 8000e80:	4610      	mov	r0, r2
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x90>
 8000e84:	4548      	cmp	r0, r9
 8000e86:	d2a9      	bcs.n	8000ddc <__udivmoddi4+0x1f0>
 8000e88:	ebb9 0802 	subs.w	r8, r9, r2
 8000e8c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e90:	3b01      	subs	r3, #1
 8000e92:	e7a3      	b.n	8000ddc <__udivmoddi4+0x1f0>
 8000e94:	4645      	mov	r5, r8
 8000e96:	e7ea      	b.n	8000e6e <__udivmoddi4+0x282>
 8000e98:	462b      	mov	r3, r5
 8000e9a:	e794      	b.n	8000dc6 <__udivmoddi4+0x1da>
 8000e9c:	4640      	mov	r0, r8
 8000e9e:	e7d1      	b.n	8000e44 <__udivmoddi4+0x258>
 8000ea0:	46d0      	mov	r8, sl
 8000ea2:	e77b      	b.n	8000d9c <__udivmoddi4+0x1b0>
 8000ea4:	3d02      	subs	r5, #2
 8000ea6:	4462      	add	r2, ip
 8000ea8:	e732      	b.n	8000d10 <__udivmoddi4+0x124>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e70a      	b.n	8000cc4 <__udivmoddi4+0xd8>
 8000eae:	4464      	add	r4, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e742      	b.n	8000d3a <__udivmoddi4+0x14e>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>:
 */

#include "GPIO.hpp"

	void GPIO::EN(GPIO_TypeDef* gpio){
		if(gpio == GPIOA){
 8000eb8:	4b28      	ldr	r3, [pc, #160]	; (8000f5c <_ZN4GPIO2ENEP12GPIO_TypeDef+0xa4>)
 8000eba:	4298      	cmp	r0, r3
 8000ebc:	d01e      	beq.n	8000efc <_ZN4GPIO2ENEP12GPIO_TypeDef+0x44>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOAEN;
		}else if(gpio == GPIOB){
 8000ebe:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xa8>)
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d015      	beq.n	8000ef0 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x38>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOBEN;
		}else if(gpio == GPIOC){
 8000ec4:	4b27      	ldr	r3, [pc, #156]	; (8000f64 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xac>)
 8000ec6:	4298      	cmp	r0, r3
 8000ec8:	d024      	beq.n	8000f14 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x5c>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOCEN;
		}else if(gpio == GPIOD){
 8000eca:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xb0>)
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	d027      	beq.n	8000f20 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x68>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIODEN;
		}else if(gpio == GPIOE){
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <_ZN4GPIO2ENEP12GPIO_TypeDef+0xb4>)
 8000ed2:	4298      	cmp	r0, r3
 8000ed4:	d018      	beq.n	8000f08 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x50>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOEEN;
		}else if(gpio == GPIOF){
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xb8>)
 8000ed8:	4298      	cmp	r0, r3
 8000eda:	d027      	beq.n	8000f2c <_ZN4GPIO2ENEP12GPIO_TypeDef+0x74>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOFEN;
		}else if(gpio == GPIOG){
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xbc>)
 8000ede:	4298      	cmp	r0, r3
 8000ee0:	d030      	beq.n	8000f44 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x8c>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOGEN;
		}else if(gpio == GPIOH){
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc0>)
 8000ee4:	4298      	cmp	r0, r3
 8000ee6:	d033      	beq.n	8000f50 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x98>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOHEN;
		}else if(gpio == GPIOI){
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc4>)
 8000eea:	4298      	cmp	r0, r3
 8000eec:	d024      	beq.n	8000f38 <_ZN4GPIO2ENEP12GPIO_TypeDef+0x80>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOIEN;
		}
	}
 8000eee:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOBEN;
 8000ef0:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000ef2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ef4:	f043 0302 	orr.w	r3, r3, #2
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOAEN;
 8000efc:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000efe:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f00:	f043 0301 	orr.w	r3, r3, #1
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOEEN;
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000f0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOCEN;
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000f16:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIODEN;
 8000f20:	4a17      	ldr	r2, [pc, #92]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000f22:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOFEN;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000f2e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f30:	f043 0320 	orr.w	r3, r3, #32
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOIEN;
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000f3a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
	}
 8000f42:	e7d4      	b.n	8000eee <_ZN4GPIO2ENEP12GPIO_TypeDef+0x36>
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOGEN;
 8000f44:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000f46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4770      	bx	lr
			RCC->AHB1ENR = RCC->AHB1ENR | RCC_AHB1ENR_GPIOHEN;
 8000f50:	4a0b      	ldr	r2, [pc, #44]	; (8000f80 <_ZN4GPIO2ENEP12GPIO_TypeDef+0xc8>)
 8000f52:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4770      	bx	lr
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40020800 	.word	0x40020800
 8000f68:	40020c00 	.word	0x40020c00
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40021400 	.word	0x40021400
 8000f74:	40021800 	.word	0x40021800
 8000f78:	40021c00 	.word	0x40021c00
 8000f7c:	40022000 	.word	0x40022000
 8000f80:	40023800 	.word	0x40023800

08000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>:

	void GPIO::MODE(GPIO_TypeDef* gpio, uint8_t pin, uint8_t mode){
		gpio->MODER = (gpio->MODER) | (mode << 2*pin);
 8000f84:	0049      	lsls	r1, r1, #1
 8000f86:	6803      	ldr	r3, [r0, #0]
 8000f88:	408a      	lsls	r2, r1
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	6002      	str	r2, [r0, #0]
	}
 8000f8e:	4770      	bx	lr

08000f90 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>:

	void GPIO::SPEED(GPIO_TypeDef* gpio, uint8_t pin, uint8_t speed){
		gpio->OSPEEDR = (gpio->OSPEEDR) | (speed << 2*pin);
 8000f90:	0049      	lsls	r1, r1, #1
 8000f92:	6883      	ldr	r3, [r0, #8]
 8000f94:	408a      	lsls	r2, r1
 8000f96:	431a      	orrs	r2, r3
 8000f98:	6082      	str	r2, [r0, #8]
	}
 8000f9a:	4770      	bx	lr

08000f9c <_ZN4GPIO4PUPDEP12GPIO_TypeDefhh>:

	void GPIO::PUPD(GPIO_TypeDef* gpio, uint8_t pin, uint8_t pupd){
		gpio->PUPDR = (gpio->PUPDR) | (pupd << 2*pin);
 8000f9c:	0049      	lsls	r1, r1, #1
 8000f9e:	68c3      	ldr	r3, [r0, #12]
 8000fa0:	408a      	lsls	r2, r1
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	60c2      	str	r2, [r0, #12]
	}
 8000fa6:	4770      	bx	lr

08000fa8 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>:

	void GPIO::AFR(GPIO_TypeDef* gpio, uint8_t pin, uint8_t afr){
		if(pin <= 7){
 8000fa8:	2907      	cmp	r1, #7
 8000faa:	d805      	bhi.n	8000fb8 <_ZN4GPIO3AFREP12GPIO_TypeDefhh+0x10>
			gpio->AFR[0] = gpio->AFR[0] | (afr << 4*pin);
 8000fac:	0089      	lsls	r1, r1, #2
 8000fae:	6a03      	ldr	r3, [r0, #32]
 8000fb0:	408a      	lsls	r2, r1
 8000fb2:	431a      	orrs	r2, r3
 8000fb4:	6202      	str	r2, [r0, #32]
 8000fb6:	4770      	bx	lr
		}else{
			gpio->AFR[1] = gpio->AFR[1] | (afr << 4*(pin-8));
 8000fb8:	3908      	subs	r1, #8
 8000fba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000fbc:	0089      	lsls	r1, r1, #2
 8000fbe:	408a      	lsls	r2, r1
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	6242      	str	r2, [r0, #36]	; 0x24
		}
	}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>:

	void GPIO::WRITE(GPIO_TypeDef* gpio, uint8_t pin, bool pinState){
		gpio->BSRR |= (1 << (pin + (16* !pinState)));
 8000fc8:	2301      	movs	r3, #1
 8000fca:	405a      	eors	r2, r3
 8000fcc:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8000fd0:	6982      	ldr	r2, [r0, #24]
 8000fd2:	408b      	lsls	r3, r1
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	6183      	str	r3, [r0, #24]
	}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <_ZN4GPIO4READEP12GPIO_TypeDefh>:

	bool GPIO::READ(GPIO_TypeDef* gpio, uint8_t pin){
		return gpio->IDR & (1<<pin);
 8000fdc:	2301      	movs	r3, #1
 8000fde:	fa03 f101 	lsl.w	r1, r3, r1
 8000fe2:	6903      	ldr	r3, [r0, #16]
 8000fe4:	4219      	tst	r1, r3
	}
 8000fe6:	bf14      	ite	ne
 8000fe8:	2001      	movne	r0, #1
 8000fea:	2000      	moveq	r0, #0
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <_ZN7SENSORS3IMU8IMU_InitEv>:
		}

		return true;
	}

	bool IMU::IMU_Init(){
 8000ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		tmp[0] = reg;
 8000ff4:	f244 036b 	movw	r3, #16491	; 0x406b
	bool IMU::IMU_Init(){
 8000ff8:	b082      	sub	sp, #8
 8000ffa:	4604      	mov	r4, r0
		spi3.CS_EN();
 8000ffc:	487f      	ldr	r0, [pc, #508]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 8000ffe:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001002:	f000 fe93 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001006:	2202      	movs	r2, #2
 8001008:	a901      	add	r1, sp, #4
 800100a:	487c      	ldr	r0, [pc, #496]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg|0x80;
 800100c:	25f5      	movs	r5, #245	; 0xf5
		spi3.Transmit(tmp, 2);
 800100e:	f000 fdcd 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001012:	487a      	ldr	r0, [pc, #488]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001014:	f000 fe94 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 8001018:	f241 036a 	movw	r3, #4202	; 0x106a
		spi3.CS_EN();
 800101c:	4877      	ldr	r0, [pc, #476]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 800101e:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001022:	f000 fe83 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001026:	2202      	movs	r2, #2
 8001028:	a901      	add	r1, sp, #4
 800102a:	4874      	ldr	r0, [pc, #464]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 800102c:	f000 fdbe 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001030:	4872      	ldr	r0, [pc, #456]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001032:	f000 fe85 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 8001036:	236b      	movs	r3, #107	; 0x6b
		spi3.CS_EN();
 8001038:	4870      	ldr	r0, [pc, #448]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 800103a:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 800103e:	f000 fe75 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001042:	2202      	movs	r2, #2
 8001044:	a901      	add	r1, sp, #4
 8001046:	486d      	ldr	r0, [pc, #436]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001048:	f000 fdb0 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 800104c:	486b      	ldr	r0, [pc, #428]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 800104e:	f000 fe77 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		spi3.CS_EN();
 8001052:	486a      	ldr	r0, [pc, #424]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg|0x80;
 8001054:	f88d 5000 	strb.w	r5, [sp]
		spi3.CS_EN();
 8001058:	f000 fe68 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 1);
 800105c:	2201      	movs	r2, #1
 800105e:	4669      	mov	r1, sp
 8001060:	4866      	ldr	r0, [pc, #408]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001062:	f000 fda3 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.Receive(ret, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	a901      	add	r1, sp, #4
 800106a:	4864      	ldr	r0, [pc, #400]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 800106c:	f000 fdb6 	bl	8001bdc <_ZN3COM3SPI7ReceiveEPhj>
		spi3.CS_DIS();
 8001070:	4862      	ldr	r0, [pc, #392]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001072:	f000 fe65 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		return ret[0];
 8001076:	f89d 3004 	ldrb.w	r3, [sp, #4]
		if(IMU_readRegister(WHO_AM_I) != 0x98){
 800107a:	2b98      	cmp	r3, #152	; 0x98
 800107c:	f040 80b9 	bne.w	80011f2 <_ZN7SENSORS3IMU8IMU_InitEv+0x202>
		tmp[0] = reg;
 8001080:	231a      	movs	r3, #26
		spi3.CS_EN();
 8001082:	485e      	ldr	r0, [pc, #376]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		IMU_f_ypr[1] += IMU_f_ypr[0] * sin(IMU_f_ypr[2] * 0.017453293 * looptime);

	}

	void IMU::FIRFilter_Init(FIRFilter *filt, float *coeff, float *buf, const uint8_t order) {
		filt->out = 0.0f;
 8001084:	f04f 0800 	mov.w	r8, #0

		filt->coeff = coeff;
 8001088:	4f5d      	ldr	r7, [pc, #372]	; (8001200 <_ZN7SENSORS3IMU8IMU_InitEv+0x210>)
		tmp[0] = reg;
 800108a:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 800108e:	f000 fe4d 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001092:	a901      	add	r1, sp, #4
 8001094:	2202      	movs	r2, #2
 8001096:	4859      	ldr	r0, [pc, #356]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		filt->buf   = buf;
		filt->order = order;
 8001098:	2691      	movs	r6, #145	; 0x91
		spi3.Transmit(tmp, 2);
 800109a:	f000 fd87 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 800109e:	4857      	ldr	r0, [pc, #348]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80010a0:	f000 fe4e 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 80010a4:	f640 431b 	movw	r3, #3099	; 0xc1b
		spi3.CS_EN();
 80010a8:	4854      	ldr	r0, [pc, #336]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 80010aa:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 80010ae:	f000 fe3d 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 80010b2:	a901      	add	r1, sp, #4
 80010b4:	2202      	movs	r2, #2
 80010b6:	4851      	ldr	r0, [pc, #324]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80010b8:	f000 fd78 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 80010bc:	484f      	ldr	r0, [pc, #316]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80010be:	f000 fe3f 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 80010c2:	f241 031c 	movw	r3, #4124	; 0x101c
		spi3.CS_EN();
 80010c6:	484d      	ldr	r0, [pc, #308]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 80010c8:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 80010cc:	f000 fe2e 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 80010d0:	a901      	add	r1, sp, #4
 80010d2:	2202      	movs	r2, #2
 80010d4:	4849      	ldr	r0, [pc, #292]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80010d6:	f000 fd69 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 80010da:	4848      	ldr	r0, [pc, #288]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80010dc:	f000 fe30 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 80010e0:	f640 031d 	movw	r3, #2077	; 0x81d
		spi3.CS_EN();
 80010e4:	4845      	ldr	r0, [pc, #276]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 80010e6:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 80010ea:	f000 fe1f 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 80010ee:	a901      	add	r1, sp, #4
 80010f0:	2202      	movs	r2, #2
 80010f2:	4842      	ldr	r0, [pc, #264]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80010f4:	f000 fd5a 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 80010f8:	4840      	ldr	r0, [pc, #256]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80010fa:	f000 fe21 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 80010fe:	2319      	movs	r3, #25
		spi3.CS_EN();
 8001100:	483e      	ldr	r0, [pc, #248]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 8001102:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001106:	f000 fe11 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 800110a:	a901      	add	r1, sp, #4
 800110c:	2202      	movs	r2, #2
 800110e:	483b      	ldr	r0, [pc, #236]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001110:	f000 fd4c 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001114:	4839      	ldr	r0, [pc, #228]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001116:	f000 fe13 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 800111a:	2337      	movs	r3, #55	; 0x37
		spi3.CS_EN();
 800111c:	4837      	ldr	r0, [pc, #220]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 800111e:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001122:	f000 fe03 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001126:	a901      	add	r1, sp, #4
 8001128:	2202      	movs	r2, #2
 800112a:	4834      	ldr	r0, [pc, #208]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 800112c:	f000 fd3e 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 8001130:	4832      	ldr	r0, [pc, #200]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001132:	f000 fe05 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		tmp[0] = reg;
 8001136:	f44f 739c 	mov.w	r3, #312	; 0x138
		spi3.CS_EN();
 800113a:	4830      	ldr	r0, [pc, #192]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg;
 800113c:	f8ad 3004 	strh.w	r3, [sp, #4]
		spi3.CS_EN();
 8001140:	f000 fdf4 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 2);
 8001144:	a901      	add	r1, sp, #4
 8001146:	2202      	movs	r2, #2
 8001148:	482c      	ldr	r0, [pc, #176]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 800114a:	f000 fd2f 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.CS_DIS();
 800114e:	482b      	ldr	r0, [pc, #172]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 8001150:	f000 fdf6 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		filt->out = 0.0f;
 8001154:	f204 63ec 	addw	r3, r4, #1772	; 0x6ec
		FIRFilter_Init(&IMU_FIR_Y, filter_taps, IMU_BUF_FIR_Y, FILTER_TAP_NUM);
 8001158:	f104 0020 	add.w	r0, r4, #32
		filt->putIndex = 0;

		for (uint8_t n = 0; n < order; n++) {
			filt->buf[n] = 0.0f;
 800115c:	f44f 7211 	mov.w	r2, #580	; 0x244
		filt->out = 0.0f;
 8001160:	f8c3 8000 	str.w	r8, [r3]
			filt->buf[n] = 0.0f;
 8001164:	2100      	movs	r1, #0
		filt->coeff = coeff;
 8001166:	f8c4 76f0 	str.w	r7, [r4, #1776]	; 0x6f0
		filt->buf   = buf;
 800116a:	f8c4 06f4 	str.w	r0, [r4, #1780]	; 0x6f4
		filt->order = order;
 800116e:	f8a4 66f8 	strh.w	r6, [r4, #1784]	; 0x6f8
			filt->buf[n] = 0.0f;
 8001172:	f003 f851 	bl	8004218 <memset>
		filt->out = 0.0f;
 8001176:	f204 63fc 	addw	r3, r4, #1788	; 0x6fc
		FIRFilter_Init(&IMU_FIR_P, filter_taps, IMU_BUF_FIR_P, FILTER_TAP_NUM);
 800117a:	f504 7019 	add.w	r0, r4, #612	; 0x264
			filt->buf[n] = 0.0f;
 800117e:	f44f 7211 	mov.w	r2, #580	; 0x244
		filt->out = 0.0f;
 8001182:	f8c3 8000 	str.w	r8, [r3]
			filt->buf[n] = 0.0f;
 8001186:	2100      	movs	r1, #0
		filt->coeff = coeff;
 8001188:	f8c4 7700 	str.w	r7, [r4, #1792]	; 0x700
		filt->buf   = buf;
 800118c:	f8c4 0704 	str.w	r0, [r4, #1796]	; 0x704
		filt->order = order;
 8001190:	f8a4 6708 	strh.w	r6, [r4, #1800]	; 0x708
			filt->buf[n] = 0.0f;
 8001194:	f003 f840 	bl	8004218 <memset>
		filt->out = 0.0f;
 8001198:	f204 730c 	addw	r3, r4, #1804	; 0x70c
		FIRFilter_Init(&IMU_FIR_R, filter_taps, IMU_BUF_FIR_R, FILTER_TAP_NUM);
 800119c:	f504 6095 	add.w	r0, r4, #1192	; 0x4a8
			filt->buf[n] = 0.0f;
 80011a0:	f44f 7211 	mov.w	r2, #580	; 0x244
		filt->out = 0.0f;
 80011a4:	f8c3 8000 	str.w	r8, [r3]
			filt->buf[n] = 0.0f;
 80011a8:	2100      	movs	r1, #0
		filt->coeff = coeff;
 80011aa:	f8c4 7710 	str.w	r7, [r4, #1808]	; 0x710
		filt->order = order;
 80011ae:	f8a4 6718 	strh.w	r6, [r4, #1816]	; 0x718
		filt->buf   = buf;
 80011b2:	f8c4 0714 	str.w	r0, [r4, #1812]	; 0x714
			filt->buf[n] = 0.0f;
 80011b6:	f003 f82f 	bl	8004218 <memset>
		spi3.CS_EN();
 80011ba:	4810      	ldr	r0, [pc, #64]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
		tmp[0] = reg|0x80;
 80011bc:	f88d 5000 	strb.w	r5, [sp]
		spi3.CS_EN();
 80011c0:	f000 fdb4 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 1);
 80011c4:	4669      	mov	r1, sp
 80011c6:	2201      	movs	r2, #1
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80011ca:	f000 fcef 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.Receive(ret, 1);
 80011ce:	2201      	movs	r2, #1
 80011d0:	a901      	add	r1, sp, #4
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80011d4:	f000 fd02 	bl	8001bdc <_ZN3COM3SPI7ReceiveEPhj>
		spi3.CS_DIS();
 80011d8:	4808      	ldr	r0, [pc, #32]	; (80011fc <_ZN7SENSORS3IMU8IMU_InitEv+0x20c>)
 80011da:	f000 fdb1 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		return ret[0];
 80011de:	f89d 0004 	ldrb.w	r0, [sp, #4]
		if(IMU_readRegister(WHO_AM_I) != 0x98){
 80011e2:	f1a0 0098 	sub.w	r0, r0, #152	; 0x98
 80011e6:	fab0 f080 	clz	r0, r0
 80011ea:	0940      	lsrs	r0, r0, #5
	}
 80011ec:	b002      	add	sp, #8
 80011ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return false;
 80011f2:	2000      	movs	r0, #0
	}
 80011f4:	b002      	add	sp, #8
 80011f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011fa:	bf00      	nop
 80011fc:	200002f4 	.word	0x200002f4
 8001200:	20000000 	.word	0x20000000
 8001204:	00000000 	.word	0x00000000

08001208 <_ZN7SENSORS3IMU13IMU_readAngleEv>:
	void IMU::IMU_readAngle(){
 8001208:	b5f0      	push	{r4, r5, r6, r7, lr}
		tmp[0] = reg|0x80;
 800120a:	23bb      	movs	r3, #187	; 0xbb
	void IMU::IMU_readAngle(){
 800120c:	4604      	mov	r4, r0
		spi3.CS_EN();
 800120e:	4878      	ldr	r0, [pc, #480]	; (80013f0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e8>)
	void IMU::IMU_readAngle(){
 8001210:	ed2d 8b04 	vpush	{d8-d9}
 8001214:	b083      	sub	sp, #12
		tmp[0] = reg|0x80;
 8001216:	f88d 3004 	strb.w	r3, [sp, #4]
		spi3.CS_EN();
 800121a:	f000 fd87 	bl	8001d2c <_ZN3COM3SPI5CS_ENEv>
		spi3.Transmit(tmp, 1);
 800121e:	2201      	movs	r2, #1
 8001220:	a901      	add	r1, sp, #4
 8001222:	4873      	ldr	r0, [pc, #460]	; (80013f0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e8>)
 8001224:	f000 fcc2 	bl	8001bac <_ZN3COM3SPI8TransmitEPKhj>
		spi3.Receive(ret, buf);
 8001228:	220e      	movs	r2, #14
 800122a:	f104 0110 	add.w	r1, r4, #16
 800122e:	4870      	ldr	r0, [pc, #448]	; (80013f0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e8>)
 8001230:	f000 fcd4 	bl	8001bdc <_ZN3COM3SPI7ReceiveEPhj>
		spi3.CS_DIS();
 8001234:	486e      	ldr	r0, [pc, #440]	; (80013f0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e8>)
 8001236:	f000 fd83 	bl	8001d40 <_ZN3COM3SPI6CS_DISEv>
		IMU_r_gyro[0] = (IMU_BUF[8] << 8) | IMU_BUF[9];
 800123a:	8b20      	ldrh	r0, [r4, #24]
 800123c:	8b62      	ldrh	r2, [r4, #26]
 800123e:	8ba3      	ldrh	r3, [r4, #28]
 8001240:	ba40      	rev16	r0, r0
 8001242:	ba52      	rev16	r2, r2
 8001244:	ba5b      	rev16	r3, r3
 8001246:	f8a4 075e 	strh.w	r0, [r4, #1886]	; 0x75e
		IMU_r_gyro[1] = (IMU_BUF[10] << 8) | IMU_BUF[11];
 800124a:	f8a4 2760 	strh.w	r2, [r4, #1888]	; 0x760
			IMU_ypr[i] = IMU_r_gyro[i] / 65.5;
 800124e:	b200      	sxth	r0, r0
		IMU_r_gyro[2] = (IMU_BUF[12] << 8) | IMU_BUF[13];
 8001250:	f8a4 3762 	strh.w	r3, [r4, #1890]	; 0x762
			IMU_ypr[i] = IMU_r_gyro[i] / 65.5;
 8001254:	b216      	sxth	r6, r2
 8001256:	b21d      	sxth	r5, r3
 8001258:	f7ff f934 	bl	80004c4 <__aeabi_i2d>
 800125c:	a35e      	add	r3, pc, #376	; (adr r3, 80013d8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1d0>)
 800125e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001262:	f7ff f999 	bl	8000598 <__aeabi_dmul>
 8001266:	f7ff fc59 	bl	8000b1c <__aeabi_d2f>
 800126a:	f204 721c 	addw	r2, r4, #1820	; 0x71c
 800126e:	4603      	mov	r3, r0
 8001270:	4630      	mov	r0, r6
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	ee09 3a90 	vmov	s19, r3
 8001278:	f7ff f924 	bl	80004c4 <__aeabi_i2d>
 800127c:	a356      	add	r3, pc, #344	; (adr r3, 80013d8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1d0>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f989 	bl	8000598 <__aeabi_dmul>
 8001286:	f7ff fc49 	bl	8000b1c <__aeabi_d2f>
 800128a:	f504 62e4 	add.w	r2, r4, #1824	; 0x720
 800128e:	4603      	mov	r3, r0
 8001290:	4628      	mov	r0, r5
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	ee09 3a10 	vmov	s18, r3
 8001298:	f7ff f914 	bl	80004c4 <__aeabi_i2d>
 800129c:	a34e      	add	r3, pc, #312	; (adr r3, 80013d8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1d0>)
 800129e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a2:	f7ff f979 	bl	8000598 <__aeabi_dmul>
 80012a6:	f7ff fc39 	bl	8000b1c <__aeabi_d2f>
 80012aa:	f204 7324 	addw	r3, r4, #1828	; 0x724
 80012ae:	4606      	mov	r6, r0
 80012b0:	6018      	str	r0, [r3, #0]
		IMU_r_accel[0] = (IMU_BUF[0] << 8) | IMU_BUF[1];
 80012b2:	8a63      	ldrh	r3, [r4, #18]
 80012b4:	8a20      	ldrh	r0, [r4, #16]
 80012b6:	ba5b      	rev16	r3, r3
 80012b8:	ba40      	rev16	r0, r0
 80012ba:	b21f      	sxth	r7, r3
		IMU_r_accel[1] = (IMU_BUF[2] << 8) | IMU_BUF[3];
 80012bc:	f8a4 375a 	strh.w	r3, [r4, #1882]	; 0x75a
 80012c0:	8aa3      	ldrh	r3, [r4, #20]
		IMU_r_accel[0] = (IMU_BUF[0] << 8) | IMU_BUF[1];
 80012c2:	f8a4 0758 	strh.w	r0, [r4, #1880]	; 0x758
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 80012c6:	b200      	sxth	r0, r0
 80012c8:	ba5b      	rev16	r3, r3
		IMU_r_accel[2] = (IMU_BUF[4] << 8) | IMU_BUF[5];
 80012ca:	f8a4 375c 	strh.w	r3, [r4, #1884]	; 0x75c
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 80012ce:	b21d      	sxth	r5, r3
 80012d0:	f7ff f8f8 	bl	80004c4 <__aeabi_i2d>
 80012d4:	2200      	movs	r2, #0
 80012d6:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1ec>)
 80012d8:	f7ff f95e 	bl	8000598 <__aeabi_dmul>
 80012dc:	f7ff fc1e 	bl	8000b1c <__aeabi_d2f>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4638      	mov	r0, r7
 80012e4:	ee08 3a90 	vmov	s17, r3
 80012e8:	f204 7334 	addw	r3, r4, #1844	; 0x734
 80012ec:	edc3 8a00 	vstr	s17, [r3]
 80012f0:	f7ff f8e8 	bl	80004c4 <__aeabi_i2d>
 80012f4:	2200      	movs	r2, #0
 80012f6:	4b3f      	ldr	r3, [pc, #252]	; (80013f4 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1ec>)
 80012f8:	f7ff f94e 	bl	8000598 <__aeabi_dmul>
 80012fc:	f7ff fc0e 	bl	8000b1c <__aeabi_d2f>
 8001300:	f504 62e7 	add.w	r2, r4, #1848	; 0x738
 8001304:	4603      	mov	r3, r0
 8001306:	4628      	mov	r0, r5
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	ee08 3a10 	vmov	s16, r3
 800130e:	f7ff f8d9 	bl	80004c4 <__aeabi_i2d>
 8001312:	4b38      	ldr	r3, [pc, #224]	; (80013f4 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1ec>)
 8001314:	2200      	movs	r2, #0
 8001316:	f7ff f93f 	bl	8000598 <__aeabi_dmul>
 800131a:	f7ff fbff 	bl	8000b1c <__aeabi_d2f>
		IMU_fullvec = sqrt(IMU_accel[0]*IMU_accel[0] + IMU_accel[1]*IMU_accel[1] + IMU_accel[2]*IMU_accel[2]);
 800131e:	ee68 7a08 	vmul.f32	s15, s16, s16
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 8001322:	ee07 0a10 	vmov	s14, r0
 8001326:	f204 733c 	addw	r3, r4, #1852	; 0x73c
		IMU_fullvec = sqrt(IMU_accel[0]*IMU_accel[0] + IMU_accel[1]*IMU_accel[1] + IMU_accel[2]*IMU_accel[2]);
 800132a:	eee8 7aa8 	vfma.f32	s15, s17, s17
			IMU_accel[i] =  IMU_r_accel[i] / 4096.0;
 800132e:	6018      	str	r0, [r3, #0]
		IMU_fullvec = sqrt(IMU_accel[0]*IMU_accel[0] + IMU_accel[1]*IMU_accel[1] + IMU_accel[2]*IMU_accel[2]);
 8001330:	eee7 7a07 	vfma.f32	s15, s14, s14
		if(IMU_fullvec == 0) {
 8001334:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133c:	d047      	beq.n	80013ce <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1c6>
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800133e:	eeb1 7ae7 	vsqrt.f32	s14, s15
		IMU_acclAngle[0] = asin(IMU_accel[0]/IMU_fullvec) * -57.29577951;
 8001342:	eec8 8a87 	vdiv.f32	s17, s17, s14
		IMU_acclAngle[1] = asin(IMU_accel[1]/IMU_fullvec) * 57.29577951;
 8001346:	ee88 8a07 	vdiv.f32	s16, s16, s14
 800134a:	f204 7354 	addw	r3, r4, #1876	; 0x754
		IMU_acclAngle[0] = asin(IMU_accel[0]/IMU_fullvec) * -57.29577951;
 800134e:	f504 67e8 	add.w	r7, r4, #1856	; 0x740
		IMU_acclAngle[1] = asin(IMU_accel[1]/IMU_fullvec) * 57.29577951;
 8001352:	f204 7544 	addw	r5, r4, #1860	; 0x744
 8001356:	ed83 7a00 	vstr	s14, [r3]
  { return __builtin_asinf(__x); }
 800135a:	eeb0 0a68 	vmov.f32	s0, s17
 800135e:	f001 fe4b 	bl	8002ff8 <asinf>
 8001362:	ee10 0a10 	vmov	r0, s0
		IMU_acclAngle[0] = asin(IMU_accel[0]/IMU_fullvec) * -57.29577951;
 8001366:	f7ff f8bf 	bl	80004e8 <__aeabi_f2d>
 800136a:	a31d      	add	r3, pc, #116	; (adr r3, 80013e0 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1d8>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff f912 	bl	8000598 <__aeabi_dmul>
 8001374:	f7ff fbd2 	bl	8000b1c <__aeabi_d2f>
 8001378:	eeb0 0a48 	vmov.f32	s0, s16
 800137c:	6038      	str	r0, [r7, #0]
 800137e:	f001 fe3b 	bl	8002ff8 <asinf>
 8001382:	ee10 0a10 	vmov	r0, s0
		IMU_acclAngle[1] = asin(IMU_accel[1]/IMU_fullvec) * 57.29577951;
 8001386:	f7ff f8af 	bl	80004e8 <__aeabi_f2d>
 800138a:	a317      	add	r3, pc, #92	; (adr r3, 80013e8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1e0>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f902 	bl	8000598 <__aeabi_dmul>
 8001394:	f7ff fbc2 	bl	8000b1c <__aeabi_d2f>
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 8001398:	f504 62e5 	add.w	r2, r4, #1832	; 0x728
 800139c:	4b16      	ldr	r3, [pc, #88]	; (80013f8 <_ZN7SENSORS3IMU13IMU_readAngleEv+0x1f0>)
		IMU_acclAngle[1] = asin(IMU_accel[1]/IMU_fullvec) * 57.29577951;
 800139e:	6028      	str	r0, [r5, #0]
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 80013a0:	ed93 7a00 	vldr	s14, [r3]
		IMU_t_ypr[1] += IMU_ypr[1] * looptime;
 80013a4:	f204 732c 	addw	r3, r4, #1836	; 0x72c
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 80013a8:	edd2 7a00 	vldr	s15, [r2]
		IMU_t_ypr[2] = IMU_ypr[2]; //* looptime;
 80013ac:	f504 64e6 	add.w	r4, r4, #1840	; 0x730
		IMU_t_ypr[0] += IMU_ypr[0] * looptime;
 80013b0:	eee9 7a87 	vfma.f32	s15, s19, s14
 80013b4:	edc2 7a00 	vstr	s15, [r2]
		IMU_t_ypr[1] += IMU_ypr[1] * looptime;
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	eee7 7a09 	vfma.f32	s15, s14, s18
 80013c0:	edc3 7a00 	vstr	s15, [r3]
		IMU_t_ypr[2] = IMU_ypr[2]; //* looptime;
 80013c4:	6026      	str	r6, [r4, #0]
	}
 80013c6:	b003      	add	sp, #12
 80013c8:	ecbd 8b04 	vpop	{d8-d9}
 80013cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			IMU_fullvec = 1;
 80013ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013d2:	e7ba      	b.n	800134a <_ZN7SENSORS3IMU13IMU_readAngleEv+0x142>
 80013d4:	f3af 8000 	nop.w
 80013d8:	9e4a4271 	.word	0x9e4a4271
 80013dc:	3f8f4465 	.word	0x3f8f4465
 80013e0:	1a5d2372 	.word	0x1a5d2372
 80013e4:	c04ca5dc 	.word	0xc04ca5dc
 80013e8:	1a5d2372 	.word	0x1a5d2372
 80013ec:	404ca5dc 	.word	0x404ca5dc
 80013f0:	200002f4 	.word	0x200002f4
 80013f4:	3f300000 	.word	0x3f300000
 80013f8:	20000244 	.word	0x20000244
 80013fc:	00000000 	.word	0x00000000

08001400 <_ZN7SENSORS3IMU13IMU_calcAngleEv>:
	void IMU::IMU_calcAngle(){
 8001400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		IMU_t_ypr[0] = IMU_t_ypr[0] * 0.9996 + IMU_acclAngle[1] * 0.0004;	// angle is mixed up WHY I DON'T KNOW?
 8001404:	f500 68e5 	add.w	r8, r0, #1832	; 0x728
	void IMU::IMU_calcAngle(){
 8001408:	4682      	mov	sl, r0
		IMU_t_ypr[0] = IMU_t_ypr[0] * 0.9996 + IMU_acclAngle[1] * 0.0004;	// angle is mixed up WHY I DON'T KNOW?
 800140a:	f8d8 0000 	ldr.w	r0, [r8]
		IMU_t_ypr[1] = IMU_t_ypr[1] * 0.9996 + IMU_acclAngle[0] * 0.0004;
 800140e:	f20a 752c 	addw	r5, sl, #1836	; 0x72c
		IMU_t_ypr[0] = IMU_t_ypr[0] * 0.9996 + IMU_acclAngle[1] * 0.0004;	// angle is mixed up WHY I DON'T KNOW?
 8001412:	f7ff f869 	bl	80004e8 <__aeabi_f2d>
	float IMU::FIRFilter_Update(FIRFilter *filt, float in) {
		filt->buf[filt->putIndex] = in;

		uint8_t getIndex = filt->putIndex;

		filt->out = 0.0f;
 8001416:	f20a 64ec 	addw	r4, sl, #1772	; 0x6ec
		IMU_t_ypr[0] = IMU_t_ypr[0] * 0.9996 + IMU_acclAngle[1] * 0.0004;	// angle is mixed up WHY I DON'T KNOW?
 800141a:	a3a3      	add	r3, pc, #652	; (adr r3, 80016a8 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a8>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7ff f8ba 	bl	8000598 <__aeabi_dmul>
 8001424:	f20a 7344 	addw	r3, sl, #1860	; 0x744
 8001428:	4606      	mov	r6, r0
 800142a:	460f      	mov	r7, r1
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f7ff f85b 	bl	80004e8 <__aeabi_f2d>
 8001432:	a39f      	add	r3, pc, #636	; (adr r3, 80016b0 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2b0>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f8ae 	bl	8000598 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4630      	mov	r0, r6
 8001442:	4639      	mov	r1, r7
 8001444:	f7fe fef2 	bl	800022c <__adddf3>
 8001448:	f7ff fb68 	bl	8000b1c <__aeabi_d2f>
 800144c:	f8c8 0000 	str.w	r0, [r8]
		IMU_t_ypr[1] = IMU_t_ypr[1] * 0.9996 + IMU_acclAngle[0] * 0.0004;
 8001450:	6828      	ldr	r0, [r5, #0]
 8001452:	f7ff f849 	bl	80004e8 <__aeabi_f2d>
 8001456:	a394      	add	r3, pc, #592	; (adr r3, 80016a8 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a8>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f89c 	bl	8000598 <__aeabi_dmul>
 8001460:	f50a 63e8 	add.w	r3, sl, #1856	; 0x740
 8001464:	460f      	mov	r7, r1
 8001466:	4606      	mov	r6, r0
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	f7ff f83d 	bl	80004e8 <__aeabi_f2d>
 800146e:	a390      	add	r3, pc, #576	; (adr r3, 80016b0 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2b0>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff f890 	bl	8000598 <__aeabi_dmul>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4630      	mov	r0, r6
 800147e:	4639      	mov	r1, r7
 8001480:	f7fe fed4 	bl	800022c <__adddf3>
 8001484:	f7ff fb4a 	bl	8000b1c <__aeabi_d2f>
		filt->buf[filt->putIndex] = in;
 8001488:	f8da c6f4 	ldr.w	ip, [sl, #1780]	; 0x6f4
		IMU_t_ypr[1] = IMU_t_ypr[1] * 0.9996 + IMU_acclAngle[0] * 0.0004;
 800148c:	6028      	str	r0, [r5, #0]
		FIRFilter_Update(&IMU_FIR_Y, IMU_t_ypr[2]);
 800148e:	f50a 63e6 	add.w	r3, sl, #1840	; 0x730
		filt->buf[filt->putIndex] = in;
 8001492:	f89a 76f9 	ldrb.w	r7, [sl, #1785]	; 0x6f9
		FIRFilter_Update(&IMU_FIR_Y, IMU_t_ypr[2]);
 8001496:	681a      	ldr	r2, [r3, #0]
		filt->out = 0.0f;
 8001498:	eddf 7a81 	vldr	s15, [pc, #516]	; 80016a0 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a0>
		filt->buf[filt->putIndex] = in;
 800149c:	eb0c 0387 	add.w	r3, ip, r7, lsl #2
 80014a0:	601a      	str	r2, [r3, #0]
		filt->out = 0.0f;
 80014a2:	edc4 7a00 	vstr	s15, [r4]
		for (uint8_t n = 0; n < filt->order; n++) {
 80014a6:	f89a e6f8 	ldrb.w	lr, [sl, #1784]	; 0x6f8
 80014aa:	f1be 0f00 	cmp.w	lr, #0
 80014ae:	d022      	beq.n	80014f6 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xf6>
 80014b0:	f8da 16f0 	ldr.w	r1, [sl, #1776]	; 0x6f0
 80014b4:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
		uint8_t getIndex = filt->putIndex;
 80014b8:	463a      	mov	r2, r7
 80014ba:	fa5f fb8b 	uxtb.w	fp, fp
 80014be:	1d0b      	adds	r3, r1, #4
 80014c0:	eb03 098b 	add.w	r9, r3, fp, lsl #2
 80014c4:	e004      	b.n	80014d0 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xd0>
		for (uint8_t n = 0; n < filt->order; n++) {
 80014c6:	454b      	cmp	r3, r9
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];

			if (getIndex == 0) {
				getIndex = filt->order - 1;
			} else {
			   getIndex--;
 80014c8:	b2f2      	uxtb	r2, r6
		for (uint8_t n = 0; n < filt->order; n++) {
 80014ca:	f103 0304 	add.w	r3, r3, #4
 80014ce:	d012      	beq.n	80014f6 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xf6>
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 80014d0:	eb0c 0082 	add.w	r0, ip, r2, lsl #2
 80014d4:	ed91 7a00 	vldr	s14, [r1]
			   getIndex--;
 80014d8:	1e56      	subs	r6, r2, #1
 80014da:	4619      	mov	r1, r3
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 80014dc:	edd0 6a00 	vldr	s13, [r0]
 80014e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80014e4:	edc4 7a00 	vstr	s15, [r4]
			if (getIndex == 0) {
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	d1ec      	bne.n	80014c6 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xc6>
		for (uint8_t n = 0; n < filt->order; n++) {
 80014ec:	454b      	cmp	r3, r9
				getIndex = filt->order - 1;
 80014ee:	465a      	mov	r2, fp
		for (uint8_t n = 0; n < filt->order; n++) {
 80014f0:	f103 0304 	add.w	r3, r3, #4
 80014f4:	d1ec      	bne.n	80014d0 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0xd0>
			}
		}

		filt->putIndex++;
 80014f6:	1c7b      	adds	r3, r7, #1
		filt->buf[filt->putIndex] = in;
 80014f8:	f8da c704 	ldr.w	ip, [sl, #1796]	; 0x704
 80014fc:	f89a 7709 	ldrb.w	r7, [sl, #1801]	; 0x709
		filt->putIndex++;
 8001500:	b2db      	uxtb	r3, r3
		filt->out = 0.0f;
 8001502:	eddf 7a67 	vldr	s15, [pc, #412]	; 80016a0 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a0>
		if (filt->putIndex == filt->order) {
			filt->putIndex = 0;
 8001506:	4573      	cmp	r3, lr
 8001508:	bf08      	it	eq
 800150a:	2300      	moveq	r3, #0
 800150c:	f88a 36f9 	strb.w	r3, [sl, #1785]	; 0x6f9
		filt->buf[filt->putIndex] = in;
 8001510:	eb0c 0387 	add.w	r3, ip, r7, lsl #2
		FIRFilter_Update(&IMU_FIR_P, IMU_t_ypr[0]);
 8001514:	f8d8 2000 	ldr.w	r2, [r8]
		filt->out = 0.0f;
 8001518:	f20a 68fc 	addw	r8, sl, #1788	; 0x6fc
		filt->buf[filt->putIndex] = in;
 800151c:	601a      	str	r2, [r3, #0]
		filt->out = 0.0f;
 800151e:	edc8 7a00 	vstr	s15, [r8]
		for (uint8_t n = 0; n < filt->order; n++) {
 8001522:	f89a e708 	ldrb.w	lr, [sl, #1800]	; 0x708
 8001526:	f1be 0f00 	cmp.w	lr, #0
 800152a:	d022      	beq.n	8001572 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x172>
 800152c:	f8da 1700 	ldr.w	r1, [sl, #1792]	; 0x700
 8001530:	f10e 3bff 	add.w	fp, lr, #4294967295	; 0xffffffff
		uint8_t getIndex = filt->putIndex;
 8001534:	463a      	mov	r2, r7
 8001536:	fa5f fb8b 	uxtb.w	fp, fp
 800153a:	1d0b      	adds	r3, r1, #4
 800153c:	eb03 098b 	add.w	r9, r3, fp, lsl #2
 8001540:	e004      	b.n	800154c <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x14c>
		for (uint8_t n = 0; n < filt->order; n++) {
 8001542:	454b      	cmp	r3, r9
			   getIndex--;
 8001544:	b2f2      	uxtb	r2, r6
		for (uint8_t n = 0; n < filt->order; n++) {
 8001546:	f103 0304 	add.w	r3, r3, #4
 800154a:	d012      	beq.n	8001572 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x172>
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 800154c:	eb0c 0082 	add.w	r0, ip, r2, lsl #2
 8001550:	ed91 7a00 	vldr	s14, [r1]
			   getIndex--;
 8001554:	1e56      	subs	r6, r2, #1
 8001556:	4619      	mov	r1, r3
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 8001558:	edd0 6a00 	vldr	s13, [r0]
 800155c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8001560:	edc8 7a00 	vstr	s15, [r8]
			if (getIndex == 0) {
 8001564:	2a00      	cmp	r2, #0
 8001566:	d1ec      	bne.n	8001542 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x142>
		for (uint8_t n = 0; n < filt->order; n++) {
 8001568:	454b      	cmp	r3, r9
				getIndex = filt->order - 1;
 800156a:	465a      	mov	r2, fp
		for (uint8_t n = 0; n < filt->order; n++) {
 800156c:	f103 0304 	add.w	r3, r3, #4
 8001570:	d1ec      	bne.n	800154c <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x14c>
		filt->putIndex++;
 8001572:	1c7b      	adds	r3, r7, #1
		filt->buf[filt->putIndex] = in;
 8001574:	f8da 7714 	ldr.w	r7, [sl, #1812]	; 0x714
		filt->out = 0.0f;
 8001578:	eddf 7a49 	vldr	s15, [pc, #292]	; 80016a0 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a0>
 800157c:	f20a 7c0c 	addw	ip, sl, #1804	; 0x70c
		filt->putIndex++;
 8001580:	b2db      	uxtb	r3, r3
			filt->putIndex = 0;
 8001582:	4573      	cmp	r3, lr
 8001584:	bf08      	it	eq
 8001586:	2300      	moveq	r3, #0
 8001588:	f88a 3709 	strb.w	r3, [sl, #1801]	; 0x709
		FIRFilter_Update(&IMU_FIR_R, IMU_t_ypr[1]);
 800158c:	682a      	ldr	r2, [r5, #0]
		filt->buf[filt->putIndex] = in;
 800158e:	f89a 5719 	ldrb.w	r5, [sl, #1817]	; 0x719
 8001592:	eb07 0385 	add.w	r3, r7, r5, lsl #2
 8001596:	601a      	str	r2, [r3, #0]
		filt->out = 0.0f;
 8001598:	edcc 7a00 	vstr	s15, [ip]
		for (uint8_t n = 0; n < filt->order; n++) {
 800159c:	f89a 9718 	ldrb.w	r9, [sl, #1816]	; 0x718
 80015a0:	f1b9 0f00 	cmp.w	r9, #0
 80015a4:	d073      	beq.n	800168e <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x28e>
 80015a6:	f8da 1710 	ldr.w	r1, [sl, #1808]	; 0x710
 80015aa:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
		uint8_t getIndex = filt->putIndex;
 80015ae:	462a      	mov	r2, r5
 80015b0:	fa5f fb8b 	uxtb.w	fp, fp
 80015b4:	1d0b      	adds	r3, r1, #4
 80015b6:	eb03 0e8b 	add.w	lr, r3, fp, lsl #2
 80015ba:	e004      	b.n	80015c6 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1c6>
		for (uint8_t n = 0; n < filt->order; n++) {
 80015bc:	459e      	cmp	lr, r3
			   getIndex--;
 80015be:	b2f2      	uxtb	r2, r6
		for (uint8_t n = 0; n < filt->order; n++) {
 80015c0:	f103 0304 	add.w	r3, r3, #4
 80015c4:	d012      	beq.n	80015ec <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1ec>
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 80015c6:	eb07 0082 	add.w	r0, r7, r2, lsl #2
 80015ca:	ed91 7a00 	vldr	s14, [r1]
			   getIndex--;
 80015ce:	1e56      	subs	r6, r2, #1
 80015d0:	4619      	mov	r1, r3
			filt->out = filt->out + filt->coeff[n] * filt->buf[getIndex];
 80015d2:	edd0 6a00 	vldr	s13, [r0]
 80015d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80015da:	edcc 7a00 	vstr	s15, [ip]
			if (getIndex == 0) {
 80015de:	2a00      	cmp	r2, #0
 80015e0:	d1ec      	bne.n	80015bc <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1bc>
		for (uint8_t n = 0; n < filt->order; n++) {
 80015e2:	459e      	cmp	lr, r3
				getIndex = filt->order - 1;
 80015e4:	465a      	mov	r2, fp
		for (uint8_t n = 0; n < filt->order; n++) {
 80015e6:	f103 0304 	add.w	r3, r3, #4
 80015ea:	d1ec      	bne.n	80015c6 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1c6>
		IMU_f_ypr[0] -= IMU_f_ypr[1] * sin(IMU_f_ypr[2] * 0.017453293 * looptime);
 80015ec:	ee17 0a90 	vmov	r0, s15
 80015f0:	f7fe ff7a 	bl	80004e8 <__aeabi_f2d>
 80015f4:	4606      	mov	r6, r0
 80015f6:	460f      	mov	r7, r1
		filt->putIndex++;
 80015f8:	3501      	adds	r5, #1
		IMU_f_ypr[0] -= IMU_f_ypr[1] * sin(IMU_f_ypr[2] * 0.017453293 * looptime);
 80015fa:	4b2a      	ldr	r3, [pc, #168]	; (80016a4 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x2a4>)
		filt->putIndex++;
 80015fc:	b2ed      	uxtb	r5, r5
		IMU_f_ypr[0] -= IMU_f_ypr[1] * sin(IMU_f_ypr[2] * 0.017453293 * looptime);
 80015fe:	6818      	ldr	r0, [r3, #0]
			filt->putIndex = 0;
 8001600:	45a9      	cmp	r9, r5
 8001602:	bf08      	it	eq
 8001604:	2500      	moveq	r5, #0
 8001606:	f88a 5719 	strb.w	r5, [sl, #1817]	; 0x719
		IMU_f_ypr[2] = IMU_FIR_Y.out;
 800160a:	f8d4 9000 	ldr.w	r9, [r4]
 800160e:	f8ca 900c 	str.w	r9, [sl, #12]
		IMU_f_ypr[0] -= IMU_f_ypr[1] * sin(IMU_f_ypr[2] * 0.017453293 * looptime);
 8001612:	f7fe ff69 	bl	80004e8 <__aeabi_f2d>
 8001616:	a320      	add	r3, pc, #128	; (adr r3, 8001698 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x298>)
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	f7fe ffbc 	bl	8000598 <__aeabi_dmul>
 8001620:	4604      	mov	r4, r0
 8001622:	460d      	mov	r5, r1
 8001624:	4648      	mov	r0, r9
 8001626:	f7fe ff5f 	bl	80004e8 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4620      	mov	r0, r4
 8001630:	4629      	mov	r1, r5
 8001632:	f7fe ffb1 	bl	8000598 <__aeabi_dmul>
 8001636:	ec41 0b10 	vmov	d0, r0, r1
 800163a:	f001 fc85 	bl	8002f48 <sin>
 800163e:	f8d8 0000 	ldr.w	r0, [r8]
 8001642:	ec55 4b10 	vmov	r4, r5, d0
 8001646:	f7fe ff4f 	bl	80004e8 <__aeabi_f2d>
 800164a:	4680      	mov	r8, r0
 800164c:	4689      	mov	r9, r1
 800164e:	4632      	mov	r2, r6
 8001650:	463b      	mov	r3, r7
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7fe ff9f 	bl	8000598 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4640      	mov	r0, r8
 8001660:	4649      	mov	r1, r9
 8001662:	f7fe fde1 	bl	8000228 <__aeabi_dsub>
 8001666:	f7ff fa59 	bl	8000b1c <__aeabi_d2f>
 800166a:	f8ca 0004 	str.w	r0, [sl, #4]
		IMU_f_ypr[1] += IMU_f_ypr[0] * sin(IMU_f_ypr[2] * 0.017453293 * looptime);
 800166e:	f7fe ff3b 	bl	80004e8 <__aeabi_f2d>
 8001672:	4622      	mov	r2, r4
 8001674:	462b      	mov	r3, r5
 8001676:	f7fe ff8f 	bl	8000598 <__aeabi_dmul>
 800167a:	4632      	mov	r2, r6
 800167c:	463b      	mov	r3, r7
 800167e:	f7fe fdd5 	bl	800022c <__adddf3>
 8001682:	f7ff fa4b 	bl	8000b1c <__aeabi_d2f>
 8001686:	f8ca 0008 	str.w	r0, [sl, #8]
	}
 800168a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (uint8_t n = 0; n < filt->order; n++) {
 800168e:	2600      	movs	r6, #0
 8001690:	2700      	movs	r7, #0
 8001692:	e7b1      	b.n	80015f8 <_ZN7SENSORS3IMU13IMU_calcAngleEv+0x1f8>
 8001694:	f3af 8000 	nop.w
 8001698:	aa91ed06 	.word	0xaa91ed06
 800169c:	3f91df46 	.word	0x3f91df46
 80016a0:	00000000 	.word	0x00000000
 80016a4:	20000244 	.word	0x20000244
 80016a8:	23a29c78 	.word	0x23a29c78
 80016ac:	3feffcb9 	.word	0x3feffcb9
 80016b0:	eb1c432d 	.word	0xeb1c432d
 80016b4:	3f3a36e2 	.word	0x3f3a36e2

080016b8 <SPI3_IRQHandler>:
TIMER::TIM tim4_controller(TIM4,71, 4096);
TIMER::TIM tim7_trig(TIM7,0, 13499);
TIMER::TIM tim5_trig(TIM5,1, 53999);

extern "C" void SPI3_IRQHandler(){
	spi3.Interrupt_Handler();
 80016b8:	4801      	ldr	r0, [pc, #4]	; (80016c0 <SPI3_IRQHandler+0x8>)
 80016ba:	f000 baa9 	b.w	8001c10 <_ZN3COM3SPI17Interrupt_HandlerEv>
 80016be:	bf00      	nop
 80016c0:	200002f4 	.word	0x200002f4

080016c4 <SPI2_IRQHandler>:
}

extern "C" void SPI2_IRQHandler(){
	spi2.Interrupt_Handler();
 80016c4:	4801      	ldr	r0, [pc, #4]	; (80016cc <SPI2_IRQHandler+0x8>)
 80016c6:	f000 baa3 	b.w	8001c10 <_ZN3COM3SPI17Interrupt_HandlerEv>
 80016ca:	bf00      	nop
 80016cc:	200002c0 	.word	0x200002c0

080016d0 <USART1_IRQHandler>:
}

extern "C" void USART1_IRQHandler(){
	uart1.Interrupt_Handler();
 80016d0:	4801      	ldr	r0, [pc, #4]	; (80016d8 <USART1_IRQHandler+0x8>)
 80016d2:	f000 bd9b 	b.w	800220c <_ZN3COM4UART17Interrupt_HandlerEv>
 80016d6:	bf00      	nop
 80016d8:	2000047c 	.word	0x2000047c

080016dc <TIM3_IRQHandler>:
}

extern "C" void TIM3_IRQHandler(){
	tim3_controller.Interrupt_Handler();
 80016dc:	4801      	ldr	r0, [pc, #4]	; (80016e4 <TIM3_IRQHandler+0x8>)
 80016de:	f000 bc95 	b.w	800200c <_ZN5TIMER3TIM17Interrupt_HandlerEv>
 80016e2:	bf00      	nop
 80016e4:	2000036c 	.word	0x2000036c

080016e8 <TIM4_IRQHandler>:
}

extern "C" void TIM4_IRQHandler(){
	tim4_controller.Interrupt_Handler();
 80016e8:	4801      	ldr	r0, [pc, #4]	; (80016f0 <TIM4_IRQHandler+0x8>)
 80016ea:	f000 bc8f 	b.w	800200c <_ZN5TIMER3TIM17Interrupt_HandlerEv>
 80016ee:	bf00      	nop
 80016f0:	200003b0 	.word	0x200003b0

080016f4 <TIM5_IRQHandler>:
}

extern "C" void TIM5_IRQHandler() noexcept{
	tim5_trig.UpdateInterrupt_Handler();
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <TIM5_IRQHandler+0x90>)
extern "C" void TIM5_IRQHandler() noexcept{
 80016f6:	b570      	push	{r4, r5, r6, lr}
	tim5_trig.UpdateInterrupt_Handler();
 80016f8:	f000 fbec 	bl	8001ed4 <_ZN5TIMER3TIM23UpdateInterrupt_HandlerEv>
	if(GPIO::READ(GPIOB,1)){
 80016fc:	2101      	movs	r1, #1
 80016fe:	4822      	ldr	r0, [pc, #136]	; (8001788 <TIM5_IRQHandler+0x94>)
 8001700:	f7ff fc6c 	bl	8000fdc <_ZN4GPIO4READEP12GPIO_TypeDefh>
 8001704:	2800      	cmp	r0, #0
 8001706:	d037      	beq.n	8001778 <TIM5_IRQHandler+0x84>
		GPIO::WRITE(GPIOB, 1, LOW);
 8001708:	2200      	movs	r2, #0
 800170a:	2101      	movs	r1, #1
 800170c:	481e      	ldr	r0, [pc, #120]	; (8001788 <TIM5_IRQHandler+0x94>)
 800170e:	f7ff fc5b 	bl	8000fc8 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
	}else{
		GPIO::WRITE(GPIOB, 1, HIGH);
	}
	recv.getVal();
 8001712:	4d1e      	ldr	r5, [pc, #120]	; (800178c <TIM5_IRQHandler+0x98>)

	mot.Y_CORR = YAW_PID.calc(recv.yaw, imu.IMU_f_ypr[2]);
 8001714:	4e1e      	ldr	r6, [pc, #120]	; (8001790 <TIM5_IRQHandler+0x9c>)
	recv.getVal();
 8001716:	4628      	mov	r0, r5
	mot.Y_CORR = YAW_PID.calc(recv.yaw, imu.IMU_f_ypr[2]);
 8001718:	4c1e      	ldr	r4, [pc, #120]	; (8001794 <TIM5_IRQHandler+0xa0>)
	recv.getVal();
 800171a:	f000 ffbb 	bl	8002694 <_ZN8receiver6getValEv>
	mot.Y_CORR = YAW_PID.calc(recv.yaw, imu.IMU_f_ypr[2]);
 800171e:	edd6 0a03 	vldr	s1, [r6, #12]
 8001722:	481d      	ldr	r0, [pc, #116]	; (8001798 <TIM5_IRQHandler+0xa4>)
 8001724:	ed95 0a00 	vldr	s0, [r5]
 8001728:	f000 f948 	bl	80019bc <_ZN3PID4calcEff>
 800172c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	mot.P_CORR = PITCH_PID.calc(recv.pitch, imu.IMU_f_ypr[1]);
 8001730:	edd6 0a02 	vldr	s1, [r6, #8]
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <TIM5_IRQHandler+0xa8>)
	mot.Y_CORR = YAW_PID.calc(recv.yaw, imu.IMU_f_ypr[2]);
 8001736:	ee17 3a90 	vmov	r3, s15
	mot.P_CORR = PITCH_PID.calc(recv.pitch, imu.IMU_f_ypr[1]);
 800173a:	ed95 0a01 	vldr	s0, [r5, #4]
	mot.Y_CORR = YAW_PID.calc(recv.yaw, imu.IMU_f_ypr[2]);
 800173e:	8023      	strh	r3, [r4, #0]
	mot.P_CORR = PITCH_PID.calc(recv.pitch, imu.IMU_f_ypr[1]);
 8001740:	f000 f93c 	bl	80019bc <_ZN3PID4calcEff>
 8001744:	eef0 7a40 	vmov.f32	s15, s0
	mot.R_CORR = ROLL_PID.calc(recv.roll, imu.IMU_f_ypr[0]);
 8001748:	4815      	ldr	r0, [pc, #84]	; (80017a0 <TIM5_IRQHandler+0xac>)
 800174a:	edd6 0a01 	vldr	s1, [r6, #4]
 800174e:	ed95 0a02 	vldr	s0, [r5, #8]
	mot.P_CORR = PITCH_PID.calc(recv.pitch, imu.IMU_f_ypr[1]);
 8001752:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001756:	ee17 3a90 	vmov	r3, s15
 800175a:	8063      	strh	r3, [r4, #2]
	mot.R_CORR = ROLL_PID.calc(recv.roll, imu.IMU_f_ypr[0]);
 800175c:	f000 f92e 	bl	80019bc <_ZN3PID4calcEff>
 8001760:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	mot.THROTTLE = recv.throttle;
 8001764:	89ab      	ldrh	r3, [r5, #12]

	mot.setMotor();
 8001766:	4620      	mov	r0, r4
	mot.THROTTLE = recv.throttle;
 8001768:	80e3      	strh	r3, [r4, #6]
	mot.R_CORR = ROLL_PID.calc(recv.roll, imu.IMU_f_ypr[0]);
 800176a:	ee10 3a10 	vmov	r3, s0
 800176e:	80a3      	strh	r3, [r4, #4]
}
 8001770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	mot.setMotor();
 8001774:	f000 bf04 	b.w	8002580 <_ZN5motor8setMotorEv>
		GPIO::WRITE(GPIOB, 1, HIGH);
 8001778:	2201      	movs	r2, #1
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <TIM5_IRQHandler+0x94>)
 800177c:	4611      	mov	r1, r2
 800177e:	f7ff fc23 	bl	8000fc8 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
 8001782:	e7c6      	b.n	8001712 <TIM5_IRQHandler+0x1e>
 8001784:	200003f4 	.word	0x200003f4
 8001788:	40020400 	.word	0x40020400
 800178c:	20000cc8 	.word	0x20000cc8
 8001790:	20000550 	.word	0x20000550
 8001794:	20000cb8 	.word	0x20000cb8
 8001798:	20000518 	.word	0x20000518
 800179c:	200004a8 	.word	0x200004a8
 80017a0:	200004e0 	.word	0x200004e0

080017a4 <TIM7_IRQHandler>:

extern "C" void TIM7_IRQHandler() noexcept{
	tim7_trig.UpdateInterrupt_Handler();
 80017a4:	480e      	ldr	r0, [pc, #56]	; (80017e0 <TIM7_IRQHandler+0x3c>)
extern "C" void TIM7_IRQHandler() noexcept{
 80017a6:	b508      	push	{r3, lr}
	tim7_trig.UpdateInterrupt_Handler();
 80017a8:	f000 fb94 	bl	8001ed4 <_ZN5TIMER3TIM23UpdateInterrupt_HandlerEv>
	if(GPIO::READ(GPIOC,4)){
 80017ac:	2104      	movs	r1, #4
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <TIM7_IRQHandler+0x40>)
 80017b0:	f7ff fc14 	bl	8000fdc <_ZN4GPIO4READEP12GPIO_TypeDefh>
 80017b4:	b148      	cbz	r0, 80017ca <TIM7_IRQHandler+0x26>
		GPIO::WRITE(GPIOC, 4, LOW);
 80017b6:	480b      	ldr	r0, [pc, #44]	; (80017e4 <TIM7_IRQHandler+0x40>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	2104      	movs	r1, #4
 80017bc:	f7ff fc04 	bl	8000fc8 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
	}else{
		GPIO::WRITE(GPIOC, 4, HIGH);
	}

	imu.IMU_calcAngle();
 80017c0:	4809      	ldr	r0, [pc, #36]	; (80017e8 <TIM7_IRQHandler+0x44>)
}
 80017c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	imu.IMU_calcAngle();
 80017c6:	f7ff be1b 	b.w	8001400 <_ZN7SENSORS3IMU13IMU_calcAngleEv>
		GPIO::WRITE(GPIOC, 4, HIGH);
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <TIM7_IRQHandler+0x40>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	2104      	movs	r1, #4
 80017d0:	f7ff fbfa 	bl	8000fc8 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
	imu.IMU_calcAngle();
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <TIM7_IRQHandler+0x44>)
}
 80017d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	imu.IMU_calcAngle();
 80017da:	f7ff be11 	b.w	8001400 <_ZN7SENSORS3IMU13IMU_calcAngleEv>
 80017de:	bf00      	nop
 80017e0:	20000438 	.word	0x20000438
 80017e4:	40020800 	.word	0x40020800
 80017e8:	20000550 	.word	0x20000550

080017ec <EXTI9_5_IRQHandler>:

extern "C" void EXTI9_5_IRQHandler(){

	//imu.IMU_readAngle();
	//EXTI->PR = EXTI->PR | (1 << 9);
}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop

080017f0 <_GLOBAL__sub_I_spi3>:
 80017f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
public:

	constexpr SPI(SPI_TypeDef* spi, GPIO_TypeDef* mosi , uint8_t mosi_pin, uint8_t mosi_afr,
									GPIO_TypeDef* miso , uint8_t miso_pin, uint8_t miso_afr,
									GPIO_TypeDef* sck , uint8_t sck_pin, uint8_t sck_afr,
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 80017f4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8001998 <_GLOBAL__sub_I_spi3+0x1a8>
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
									sck(sck), sck_pin(sck_pin), sck_afr(sck_afr),
									cs(cs), cs_pin(cs_pin),
									tx_current(nullptr), rx_current(nullptr),
 80017f8:	2300      	movs	r3, #0
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 80017fa:	f8df b1a0 	ldr.w	fp, [pc, #416]	; 800199c <_GLOBAL__sub_I_spi3+0x1ac>
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 80017fe:	f04f 0923 	mov.w	r9, #35	; 0x23
									cs(cs), cs_pin(cs_pin),
 8001802:	4a57      	ldr	r2, [pc, #348]	; (8001960 <_GLOBAL__sub_I_spi3+0x170>)
#include "GPIO.hpp"

namespace TIMER {
	class TIM{
	public:
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001804:	f04f 0a47 	mov.w	sl, #71	; 0x47
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
 8001808:	f8df e194 	ldr.w	lr, [pc, #404]	; 80019a0 <_GLOBAL__sub_I_spi3+0x1b0>
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 800180c:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80019a4 <_GLOBAL__sub_I_spi3+0x1b4>
 8001810:	f8cc b018 	str.w	fp, [ip, #24]
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 8001814:	4953      	ldr	r1, [pc, #332]	; (8001964 <_GLOBAL__sub_I_spi3+0x174>)
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 8001816:	f8df b190 	ldr.w	fp, [pc, #400]	; 80019a8 <_GLOBAL__sub_I_spi3+0x1b8>
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 800181a:	4f53      	ldr	r7, [pc, #332]	; (8001968 <_GLOBAL__sub_I_spi3+0x178>)
 800181c:	f8cc 1000 	str.w	r1, [ip]
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 8001820:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
 8001824:	f88c 9004 	strb.w	r9, [ip, #4]
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 8001828:	f8cc b01c 	str.w	fp, [ip, #28]
 800182c:	f8df b17c 	ldr.w	fp, [pc, #380]	; 80019ac <_GLOBAL__sub_I_spi3+0x1bc>
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 8001830:	f887 9004 	strb.w	r9, [r7, #4]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001834:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 8001838:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 800183c:	4e4b      	ldr	r6, [pc, #300]	; (800196c <_GLOBAL__sub_I_spi3+0x17c>)
 800183e:	4c4c      	ldr	r4, [pc, #304]	; (8001970 <_GLOBAL__sub_I_spi3+0x180>)
 8001840:	4d4c      	ldr	r5, [pc, #304]	; (8001974 <_GLOBAL__sub_I_spi3+0x184>)
 8001842:	484d      	ldr	r0, [pc, #308]	; (8001978 <_GLOBAL__sub_I_spi3+0x188>)
 8001844:	494d      	ldr	r1, [pc, #308]	; (800197c <_GLOBAL__sub_I_spi3+0x18c>)
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
 8001846:	e9cc 8e02 	strd	r8, lr, [ip, #8]
									cs(cs), cs_pin(cs_pin),
 800184a:	e9cc e204 	strd	lr, r2, [ip, #16]
									tx_current(nullptr), rx_current(nullptr),
 800184e:	e9cc 3308 	strd	r3, r3, [ip, #32]
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 8001852:	e9cc 330a 	strd	r3, r3, [ip, #40]	; 0x28
									GPIO_TypeDef* cs , uint8_t cs_pin) : spi(spi),
 8001856:	f8df c158 	ldr.w	ip, [pc, #344]	; 80019b0 <_GLOBAL__sub_I_spi3+0x1c0>
 800185a:	f8c7 c000 	str.w	ip, [r7]
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 800185e:	f8df c154 	ldr.w	ip, [pc, #340]	; 80019b4 <_GLOBAL__sub_I_spi3+0x1c4>
									miso(miso), miso_pin(miso_pin), miso_afr(miso_afr),
 8001862:	e9c7 ee02 	strd	lr, lr, [r7, #8]
									cs(cs), cs_pin(cs_pin),
 8001866:	e9c7 8804 	strd	r8, r8, [r7, #16]
									tx_current(nullptr), rx_current(nullptr),
 800186a:	e9c7 3308 	strd	r3, r3, [r7, #32]

class UART {
public:
	UART(USART_TypeDef* uart, GPIO_TypeDef* tx, uint8_t tx_pin, uint8_t tx_afr ,
							  GPIO_TypeDef* rx, uint8_t rx_pin,	uint8_t rx_afr) :
							  uart(uart), tx(tx), tx_pin(tx_pin), tx_afr(tx_afr),
 800186e:	f8df 8148 	ldr.w	r8, [pc, #328]	; 80019b8 <_GLOBAL__sub_I_spi3+0x1c8>
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001872:	f04f 0e1d 	mov.w	lr, #29
									tx_end(nullptr), rx_end(nullptr), done(false), IRQn(SPI1_IRQn), mode(SPI_Mode::RX){}
 8001876:	e9c7 330a 	strd	r3, r3, [r7, #40]	; 0x28
									mosi(mosi), mosi_pin(mosi_pin), mosi_afr(mosi_afr),
 800187a:	e9c7 bc06 	strd	fp, ip, [r7, #24]
 800187e:	4f40      	ldr	r7, [pc, #256]	; (8001980 <_GLOBAL__sub_I_spi3+0x190>)
 8001880:	f8c8 7000 	str.w	r7, [r8]
 8001884:	4f3f      	ldr	r7, [pc, #252]	; (8001984 <_GLOBAL__sub_I_spi3+0x194>)
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 8001886:	e9c6 3300 	strd	r3, r3, [r6]
							  rx(rx), rx_pin(rx_pin), rx_afr(rx_afr){};
 800188a:	e9c8 2202 	strd	r2, r2, [r8, #8]
							  uart(uart), tx(tx), tx_pin(tx_pin), tx_afr(tx_afr),
 800188e:	f8c8 7010 	str.w	r7, [r8, #16]
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001892:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001896:	f8a6 9040 	strh.w	r9, [r6, #64]	; 0x40
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 800189a:	6137      	str	r7, [r6, #16]
 800189c:	270c      	movs	r7, #12
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 800189e:	63eb      	str	r3, [r5, #60]	; 0x3c
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80018a0:	62f7      	str	r7, [r6, #44]	; 0x2c
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80018a2:	f8a5 9040 	strh.w	r9, [r5, #64]	; 0x40
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80018a6:	6023      	str	r3, [r4, #0]
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 80018a8:	e9c6 e205 	strd	lr, r2, [r6, #20]
 80018ac:	e9c6 2207 	strd	r2, r2, [r6, #28]
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 80018b0:	e9c6 2309 	strd	r2, r3, [r6, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80018b4:	e9c6 3302 	strd	r3, r3, [r6, #8]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80018b8:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
 80018bc:	e9c6 330e 	strd	r3, r3, [r6, #56]	; 0x38
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80018c0:	4e31      	ldr	r6, [pc, #196]	; (8001988 <_GLOBAL__sub_I_spi3+0x198>)
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 80018c2:	e9c5 e205 	strd	lr, r2, [r5, #20]
 80018c6:	e9c5 2207 	strd	r2, r2, [r5, #28]
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 80018ca:	e9c5 2309 	strd	r2, r3, [r5, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80018ce:	e9c5 3300 	strd	r3, r3, [r5]
 80018d2:	e9c5 3302 	strd	r3, r3, [r5, #8]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80018d6:	e9c5 a30b 	strd	sl, r3, [r5, #44]	; 0x2c
 80018da:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80018de:	612e      	str	r6, [r5, #16]
 80018e0:	4d2a      	ldr	r5, [pc, #168]	; (800198c <_GLOBAL__sub_I_spi3+0x19c>)
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80018e2:	6063      	str	r3, [r4, #4]
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80018e4:	f8c4 a02c 	str.w	sl, [r4, #44]	; 0x2c
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80018e8:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 80018ec:	6125      	str	r5, [r4, #16]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 80018ee:	63c3      	str	r3, [r0, #60]	; 0x3c
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 80018f0:	e9c4 e205 	strd	lr, r2, [r4, #20]
 80018f4:	e9c4 2207 	strd	r2, r2, [r4, #28]
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 80018f8:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 80018fc:	e9c4 3302 	strd	r3, r3, [r4, #8]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001900:	e9c4 330c 	strd	r3, r3, [r4, #48]	; 0x30
 8001904:	e9c4 330e 	strd	r3, r3, [r4, #56]	; 0x38
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001908:	4c21      	ldr	r4, [pc, #132]	; (8001990 <_GLOBAL__sub_I_spi3+0x1a0>)
 800190a:	6104      	str	r4, [r0, #16]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 800190c:	f243 44bb 	movw	r4, #13499	; 0x34bb
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 8001910:	e9c0 e205 	strd	lr, r2, [r0, #20]
 8001914:	e9c0 2207 	strd	r2, r2, [r0, #28]
		gpio_CH1_pin(0), gpio_CH2_pin(0), gpio_CH3_pin(0), gpio_CH4_pin(0),
 8001918:	e9c0 2309 	strd	r2, r3, [r0, #36]	; 0x24
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 800191c:	e9c0 3300 	strd	r3, r3, [r0]
 8001920:	e9c0 3302 	strd	r3, r3, [r0, #8]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001924:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8001928:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
 800192c:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001930:	4818      	ldr	r0, [pc, #96]	; (8001994 <_GLOBAL__sub_I_spi3+0x1a4>)
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 8001932:	624a      	str	r2, [r1, #36]	; 0x24
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 8001934:	6108      	str	r0, [r1, #16]
 8001936:	2001      	movs	r0, #1
		gpio_CH1(GPIOA), gpio_CH2(GPIOA), gpio_CH3(GPIOA), gpio_CH4(GPIOA), IRQn(TIM3_IRQn){};
 8001938:	e9c1 e205 	strd	lr, r2, [r1, #20]
 800193c:	e9c1 2207 	strd	r2, r2, [r1, #28]
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001940:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
		CH_1_VAL(0), CH_2_VAL(0), CH_3_VAL(0), CH_4_VAL(0),
 8001944:	e9c1 3300 	strd	r3, r3, [r1]
 8001948:	e9c1 3302 	strd	r3, r3, [r1, #8]
		constexpr TIM(TIM_TypeDef* tim, uint32_t tim_prescale, uint16_t tim_resolution): tim(tim), tim_prescale(tim_prescale),
 800194c:	e9c1 300a 	strd	r3, r0, [r1, #40]	; 0x28
		tim_resolution(tim_resolution), CH_1_START(0), CH_2_START(0), CH_3_START(0), CH_4_START(0),
 8001950:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
 8001954:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
 8001958:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
 800195c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001960:	40020000 	.word	0x40020000
 8001964:	40003c00 	.word	0x40003c00
 8001968:	200002c0 	.word	0x200002c0
 800196c:	20000328 	.word	0x20000328
 8001970:	200003b0 	.word	0x200003b0
 8001974:	2000036c 	.word	0x2000036c
 8001978:	20000438 	.word	0x20000438
 800197c:	200003f4 	.word	0x200003f4
 8001980:	40011000 	.word	0x40011000
 8001984:	07070a09 	.word	0x07070a09
 8001988:	40000400 	.word	0x40000400
 800198c:	40000800 	.word	0x40000800
 8001990:	40001400 	.word	0x40001400
 8001994:	40000c00 	.word	0x40000c00
 8001998:	200002f4 	.word	0x200002f4
 800199c:	040b0a02 	.word	0x040b0a02
 80019a0:	40020800 	.word	0x40020800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	01060607 	.word	0x01060607
 80019ac:	0c0d0201 	.word	0x0c0d0201
 80019b0:	40003800 	.word	0x40003800
 80019b4:	01050505 	.word	0x01050505
 80019b8:	2000047c 	.word	0x2000047c

080019bc <_ZN3PID4calcEff>:

#include "PID.h"


float PID::calc(float setpoint, float meas){
	float error = setpoint - meas;
 80019bc:	ee70 0a60 	vsub.f32	s1, s0, s1

	integral += error * dt;

	_I = Ki * integral;

	de = (error - prev_error) / dt;
 80019c0:	edd0 5a0b 	vldr	s11, [r0, #44]	; 0x2c
	integral += error * dt;
 80019c4:	edd0 4a00 	vldr	s9, [r0]
 80019c8:	ed90 6a0a 	vldr	s12, [r0, #40]	; 0x28
	de = (error - prev_error) / dt;
 80019cc:	ee70 5ae5 	vsub.f32	s11, s1, s11
	_I = Ki * integral;
 80019d0:	edd0 7a04 	vldr	s15, [r0, #16]
	integral += error * dt;
 80019d4:	eea4 6aa0 	vfma.f32	s12, s9, s1
	_D = Kd * de;
 80019d8:	edd0 6a05 	vldr	s13, [r0, #20]
	_P = Kp * error;
 80019dc:	ed90 7a03 	vldr	s14, [r0, #12]
	de = (error - prev_error) / dt;
 80019e0:	ee85 5aa4 	vdiv.f32	s10, s11, s9

	output = _P + _I + _D;

	if(output > max){
 80019e4:	ed90 0a01 	vldr	s0, [r0, #4]
	integral += error * dt;
 80019e8:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
	_I = Ki * integral;
 80019ec:	ee66 7a27 	vmul.f32	s15, s12, s15
	_P = Kp * error;
 80019f0:	ee20 7a87 	vmul.f32	s14, s1, s14
	_I = Ki * integral;
 80019f4:	edc0 7a07 	vstr	s15, [r0, #28]
	_P = Kp * error;
 80019f8:	ed80 7a06 	vstr	s14, [r0, #24]
	_D = Kd * de;
 80019fc:	ee65 6a26 	vmul.f32	s13, s10, s13
	de = (error - prev_error) / dt;
 8001a00:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
	output = _P + _I + _D;
 8001a04:	ee77 7aa6 	vadd.f32	s15, s15, s13
	_D = Kd * de;
 8001a08:	edc0 6a08 	vstr	s13, [r0, #32]
	output = _P + _I + _D;
 8001a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
	if(output > max){
 8001a10:	eef4 7ac0 	vcmpe.f32	s15, s0
	output = _P + _I + _D;
 8001a14:	edc0 7a0d 	vstr	s15, [r0, #52]	; 0x34
	if(output > max){
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	dc06      	bgt.n	8001a2c <_ZN3PID4calcEff+0x70>
		output = max;
	} else if(output < min){
 8001a1e:	ed90 0a02 	vldr	s0, [r0, #8]
 8001a22:	eef4 7ac0 	vcmpe.f32	s15, s0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	d504      	bpl.n	8001a36 <_ZN3PID4calcEff+0x7a>
		output = min;
 8001a2c:	ed80 0a0d 	vstr	s0, [r0, #52]	; 0x34
	}

	prev_error = error;
 8001a30:	edc0 0a0b 	vstr	s1, [r0, #44]	; 0x2c

	return output;
}
 8001a34:	4770      	bx	lr
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
	prev_error = error;
 8001a3a:	edc0 0a0b 	vstr	s1, [r0, #44]	; 0x2c
}
 8001a3e:	4770      	bx	lr

08001a40 <_ZN3COM3SPI4InitEv>:
 */

#include "SPI.hpp"

namespace COM {
	void SPI::Init(){
 8001a40:	b538      	push	{r3, r4, r5, lr}
		if(spi == SPI1){
 8001a42:	4a53      	ldr	r2, [pc, #332]	; (8001b90 <_ZN3COM3SPI4InitEv+0x150>)
	void SPI::Init(){
 8001a44:	4604      	mov	r4, r0
		if(spi == SPI1){
 8001a46:	6803      	ldr	r3, [r0, #0]
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	f000 8089 	beq.w	8001b60 <_ZN3COM3SPI4InitEv+0x120>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI1EN;
			IRQn = SPI1_IRQn;
		}else if(spi == SPI2){
 8001a4e:	4a51      	ldr	r2, [pc, #324]	; (8001b94 <_ZN3COM3SPI4InitEv+0x154>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d012      	beq.n	8001a7a <_ZN3COM3SPI4InitEv+0x3a>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI2EN;
			IRQn = SPI2_IRQn;
		}else if(spi == SPI3){
 8001a54:	4a50      	ldr	r2, [pc, #320]	; (8001b98 <_ZN3COM3SPI4InitEv+0x158>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	f000 808a 	beq.w	8001b70 <_ZN3COM3SPI4InitEv+0x130>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI3EN;
			IRQn = SPI3_IRQn;
		}else if(spi == SPI4){
 8001a5c:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <_ZN3COM3SPI4InitEv+0x15c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	f000 808e 	beq.w	8001b80 <_ZN3COM3SPI4InitEv+0x140>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI4EN;
			IRQn = SPI4_IRQn;
		}else if(spi == SPI5){
 8001a64:	4a4e      	ldr	r2, [pc, #312]	; (8001ba0 <_ZN3COM3SPI4InitEv+0x160>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10e      	bne.n	8001a88 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI5EN;
 8001a6a:	494e      	ldr	r1, [pc, #312]	; (8001ba4 <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI5_IRQn;
 8001a6c:	2055      	movs	r0, #85	; 0x55
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI5EN;
 8001a6e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001a70:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001a74:	644a      	str	r2, [r1, #68]	; 0x44
			IRQn = SPI5_IRQn;
 8001a76:	7120      	strb	r0, [r4, #4]
 8001a78:	e006      	b.n	8001a88 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI2EN;
 8001a7a:	494a      	ldr	r1, [pc, #296]	; (8001ba4 <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI2_IRQn;
 8001a7c:	2024      	movs	r0, #36	; 0x24
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI2EN;
 8001a7e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001a80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a84:	640a      	str	r2, [r1, #64]	; 0x40
			IRQn = SPI2_IRQn;
 8001a86:	7120      	strb	r0, [r4, #4]
		}

		spi->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 8001a88:	f44f 7145 	mov.w	r1, #788	; 0x314
		spi->CR2 = SPI_CR2_DS_1 | SPI_CR2_FRXTH | SPI_CR2_RXNEIE;
 8001a8c:	f44f 5292 	mov.w	r2, #4672	; 0x1240

		GPIO::EN(mosi);
 8001a90:	68a0      	ldr	r0, [r4, #8]
		spi->CR1 = SPI_CR1_MSTR | SPI_CR1_BR_1 | SPI_CR1_SSI | SPI_CR1_SSM;
 8001a92:	6019      	str	r1, [r3, #0]
		spi->CR2 = SPI_CR2_DS_1 | SPI_CR2_FRXTH | SPI_CR2_RXNEIE;
 8001a94:	605a      	str	r2, [r3, #4]
		GPIO::EN(mosi);
 8001a96:	f7ff fa0f 	bl	8000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::EN(miso);
 8001a9a:	68e0      	ldr	r0, [r4, #12]
 8001a9c:	f7ff fa0c 	bl	8000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::EN(sck);
 8001aa0:	6920      	ldr	r0, [r4, #16]
 8001aa2:	f7ff fa09 	bl	8000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::EN(cs);
 8001aa6:	6960      	ldr	r0, [r4, #20]
 8001aa8:	f7ff fa06 	bl	8000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>

		GPIO::MODE(mosi, mosi_pin, MODE_ALT);
 8001aac:	2202      	movs	r2, #2
 8001aae:	7e21      	ldrb	r1, [r4, #24]
 8001ab0:	68a0      	ldr	r0, [r4, #8]
 8001ab2:	f7ff fa67 	bl	8000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::MODE(miso, miso_pin, MODE_ALT);
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	7e61      	ldrb	r1, [r4, #25]
 8001aba:	68e0      	ldr	r0, [r4, #12]
 8001abc:	f7ff fa62 	bl	8000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::MODE(sck, sck_pin, MODE_ALT);
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	7ea1      	ldrb	r1, [r4, #26]
 8001ac4:	6920      	ldr	r0, [r4, #16]
 8001ac6:	f7ff fa5d 	bl	8000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::MODE(cs, cs_pin, MODE_OUTPUT);
 8001aca:	2201      	movs	r2, #1
 8001acc:	7ee1      	ldrb	r1, [r4, #27]
 8001ace:	6960      	ldr	r0, [r4, #20]
 8001ad0:	f7ff fa58 	bl	8000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>

		GPIO::PUPD(cs, cs_pin, PULLUP);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	7ee1      	ldrb	r1, [r4, #27]
 8001ad8:	6960      	ldr	r0, [r4, #20]
 8001ada:	f7ff fa5f 	bl	8000f9c <_ZN4GPIO4PUPDEP12GPIO_TypeDefhh>

		GPIO::SPEED(mosi, mosi_pin, SPEED_VHIGH);
 8001ade:	2203      	movs	r2, #3
 8001ae0:	7e21      	ldrb	r1, [r4, #24]
 8001ae2:	68a0      	ldr	r0, [r4, #8]
 8001ae4:	f7ff fa54 	bl	8000f90 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::SPEED(miso, miso_pin, SPEED_VHIGH);
 8001ae8:	2203      	movs	r2, #3
 8001aea:	7e61      	ldrb	r1, [r4, #25]
 8001aec:	68e0      	ldr	r0, [r4, #12]
 8001aee:	f7ff fa4f 	bl	8000f90 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::SPEED(sck, sck_pin, SPEED_VHIGH);
 8001af2:	2203      	movs	r2, #3
 8001af4:	7ea1      	ldrb	r1, [r4, #26]
 8001af6:	6920      	ldr	r0, [r4, #16]
 8001af8:	f7ff fa4a 	bl	8000f90 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::SPEED(cs, cs_pin, SPEED_VHIGH);
 8001afc:	2203      	movs	r2, #3
 8001afe:	7ee1      	ldrb	r1, [r4, #27]
 8001b00:	6960      	ldr	r0, [r4, #20]
 8001b02:	f7ff fa45 	bl	8000f90 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>

		GPIO::AFR(mosi, mosi_pin, mosi_afr);
 8001b06:	7f22      	ldrb	r2, [r4, #28]
 8001b08:	7e21      	ldrb	r1, [r4, #24]
 8001b0a:	68a0      	ldr	r0, [r4, #8]
 8001b0c:	f7ff fa4c 	bl	8000fa8 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>
		GPIO::AFR(miso, miso_pin, miso_afr);
 8001b10:	7f62      	ldrb	r2, [r4, #29]
 8001b12:	7e61      	ldrb	r1, [r4, #25]
 8001b14:	68e0      	ldr	r0, [r4, #12]
 8001b16:	f7ff fa47 	bl	8000fa8 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>
		GPIO::AFR(sck, sck_pin, sck_afr);
 8001b1a:	7fa2      	ldrb	r2, [r4, #30]
 8001b1c:	7ea1      	ldrb	r1, [r4, #26]
 8001b1e:	6920      	ldr	r0, [r4, #16]
 8001b20:	f7ff fa42 	bl	8000fa8 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>

		cs->BSRR = cs->BSRR | 1 << cs_pin;
 8001b24:	6960      	ldr	r0, [r4, #20]
 8001b26:	7ee3      	ldrb	r3, [r4, #27]
 8001b28:	2101      	movs	r1, #1
 8001b2a:	6982      	ldr	r2, [r0, #24]
 8001b2c:	fa01 f303 	lsl.w	r3, r1, r3
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
		NVIC_EnableIRQ(IRQn);
	}

	void SPI::Enable(){
		spi->CR1 = spi->CR1 | SPI_CR1_SPE;
 8001b30:	6825      	ldr	r5, [r4, #0]
		cs->BSRR = cs->BSRR | 1 << cs_pin;
 8001b32:	4313      	orrs	r3, r2
		NVIC_EnableIRQ(IRQn);
 8001b34:	f994 2004 	ldrsb.w	r2, [r4, #4]
		cs->BSRR = cs->BSRR | 1 << cs_pin;
 8001b38:	6183      	str	r3, [r0, #24]
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	2a00      	cmp	r2, #0
		spi->CR1 = spi->CR1 | SPI_CR1_SPE;
 8001b3c:	682b      	ldr	r3, [r5, #0]
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001b3e:	4819      	ldr	r0, [pc, #100]	; (8001ba4 <_ZN3COM3SPI4InitEv+0x164>)
		spi->CR1 = spi->CR1 | SPI_CR1_SPE;
 8001b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b44:	602b      	str	r3, [r5, #0]
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001b46:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4c:	6443      	str	r3, [r0, #68]	; 0x44
 8001b4e:	db06      	blt.n	8001b5e <_ZN3COM3SPI4InitEv+0x11e>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b50:	f002 001f 	and.w	r0, r2, #31
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <_ZN3COM3SPI4InitEv+0x168>)
 8001b56:	0952      	lsrs	r2, r2, #5
 8001b58:	4081      	lsls	r1, r0
 8001b5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
 8001b5e:	bd38      	pop	{r3, r4, r5, pc}
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI1EN;
 8001b60:	4910      	ldr	r1, [pc, #64]	; (8001ba4 <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI1_IRQn;
 8001b62:	2023      	movs	r0, #35	; 0x23
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI1EN;
 8001b64:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001b66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b6a:	644a      	str	r2, [r1, #68]	; 0x44
			IRQn = SPI1_IRQn;
 8001b6c:	7120      	strb	r0, [r4, #4]
 8001b6e:	e78b      	b.n	8001a88 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI3EN;
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI3_IRQn;
 8001b72:	2033      	movs	r0, #51	; 0x33
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_SPI3EN;
 8001b74:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8001b76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b7a:	640a      	str	r2, [r1, #64]	; 0x40
			IRQn = SPI3_IRQn;
 8001b7c:	7120      	strb	r0, [r4, #4]
 8001b7e:	e783      	b.n	8001a88 <_ZN3COM3SPI4InitEv+0x48>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI4EN;
 8001b80:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <_ZN3COM3SPI4InitEv+0x164>)
			IRQn = SPI4_IRQn;
 8001b82:	2054      	movs	r0, #84	; 0x54
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SPI4EN;
 8001b84:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001b86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b8a:	644a      	str	r2, [r1, #68]	; 0x44
			IRQn = SPI4_IRQn;
 8001b8c:	7120      	strb	r0, [r4, #4]
 8001b8e:	e77b      	b.n	8001a88 <_ZN3COM3SPI4InitEv+0x48>
 8001b90:	40013000 	.word	0x40013000
 8001b94:	40003800 	.word	0x40003800
 8001b98:	40003c00 	.word	0x40003c00
 8001b9c:	40013400 	.word	0x40013400
 8001ba0:	40015000 	.word	0x40015000
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	e000e100 	.word	0xe000e100

08001bac <_ZN3COM3SPI8TransmitEPKhj>:
	void SPI::Disable(){
		spi->CR1 = spi->CR1 & ~SPI_CR1_SPE;
	}

	void SPI::Transmit(const uint8_t *data, std::size_t size){
		done = false;
 8001bac:	2300      	movs	r3, #0
	void SPI::Transmit(const uint8_t *data, std::size_t size){
 8001bae:	b410      	push	{r4}
		mode = SPI_Mode::TX;
		tx_current = data;
		rx_current = 0;

		tx_end = data + size;
 8001bb0:	188c      	adds	r4, r1, r2
		done = false;
 8001bb2:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		mode = SPI_Mode::TX;
 8001bb6:	77c3      	strb	r3, [r0, #31]
		rx_current = 0;
 8001bb8:	e9c0 1308 	strd	r1, r3, [r0, #32]
		rx_end = reinterpret_cast<uint8_t*>(size);
 8001bbc:	e9c0 420a 	strd	r4, r2, [r0, #40]	; 0x28
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bc0:	f3bf 8f5f 	dmb	sy

		__DMB();
		spi->CR2 = spi->CR2 | (SPI_CR2_TXEIE | SPI_CR2_RXNEIE);
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	6853      	ldr	r3, [r2, #4]
 8001bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bcc:	6053      	str	r3, [r2, #4]

		while(!done);
 8001bce:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0fb      	beq.n	8001bce <_ZN3COM3SPI8TransmitEPKhj+0x22>
	}
 8001bd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <_ZN3COM3SPI7ReceiveEPhj>:
	void SPI::Receive(uint8_t *data, std::size_t size){
 8001bdc:	b410      	push	{r4}
		done = false;
		mode = SPI_Mode::RX;
 8001bde:	2401      	movs	r4, #1
		done = false;
 8001be0:	2300      	movs	r3, #0
		mode = SPI_Mode::RX;
 8001be2:	77c4      	strb	r4, [r0, #31]
		rx_current = data;
		tx_current = 0;

		rx_end = data + size;
 8001be4:	188c      	adds	r4, r1, r2
		done = false;
 8001be6:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
		tx_current = 0;
 8001bea:	e9c0 3108 	strd	r3, r1, [r0, #32]
		rx_end = data + size;
 8001bee:	e9c0 240a 	strd	r2, r4, [r0, #40]	; 0x28
 8001bf2:	f3bf 8f5f 	dmb	sy
		tx_end = reinterpret_cast<const uint8_t*>(size);

		__DMB();
		spi->CR2 = spi->CR2 | (SPI_CR2_TXEIE | SPI_CR2_RXNEIE);
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	6853      	ldr	r3, [r2, #4]
 8001bfa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bfe:	6053      	str	r3, [r2, #4]

		while(!done);
 8001c00:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0fb      	beq.n	8001c00 <_ZN3COM3SPI7ReceiveEPhj+0x24>
	}
 8001c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop

08001c10 <_ZN3COM3SPI17Interrupt_HandlerEv>:

	void SPI::Interrupt_Handler(){
		auto* tmp_tx_current = tx_current;
		auto* tmp_tx_end = tx_end;

		auto* tmp_rx_current = rx_current;
 8001c10:	f100 0120 	add.w	r1, r0, #32
		auto* tmp_rx_end = rx_end;
		switch(mode){
 8001c14:	7fc3      	ldrb	r3, [r0, #31]
	void SPI::Interrupt_Handler(){
 8001c16:	b470      	push	{r4, r5, r6}
		auto* tmp_rx_current = rx_current;
 8001c18:	c926      	ldmia	r1, {r1, r2, r5}
		auto* tmp_rx_end = rx_end;
 8001c1a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		switch(mode){
 8001c1c:	b373      	cbz	r3, 8001c7c <_ZN3COM3SPI17Interrupt_HandlerEv+0x6c>
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d05e      	beq.n	8001ce0 <_ZN3COM3SPI17Interrupt_HandlerEv+0xd0>
				*tmp_rx_current++ = *reinterpret_cast<volatile uint8_t*>(&spi->DR);
			}
			break;

		default: //Mode_TRX
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001c22:	6803      	ldr	r3, [r0, #0]
 8001c24:	689e      	ldr	r6, [r3, #8]
 8001c26:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001c2a:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001c2e:	d00e      	beq.n	8001c4e <_ZN3COM3SPI17Interrupt_HandlerEv+0x3e>
 8001c30:	42a9      	cmp	r1, r5
 8001c32:	d302      	bcc.n	8001c3a <_ZN3COM3SPI17Interrupt_HandlerEv+0x2a>
 8001c34:	e00b      	b.n	8001c4e <_ZN3COM3SPI17Interrupt_HandlerEv+0x3e>
 8001c36:	428d      	cmp	r5, r1
 8001c38:	d909      	bls.n	8001c4e <_ZN3COM3SPI17Interrupt_HandlerEv+0x3e>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = *tmp_tx_current++;
 8001c3a:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001c3e:	731e      	strb	r6, [r3, #12]
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	689e      	ldr	r6, [r3, #8]
 8001c44:	f406 5cc0 	and.w	ip, r6, #6144	; 0x1800
 8001c48:	f5bc 5fc0 	cmp.w	ip, #6144	; 0x1800
 8001c4c:	d1f3      	bne.n	8001c36 <_ZN3COM3SPI17Interrupt_HandlerEv+0x26>
			}
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001c4e:	42a2      	cmp	r2, r4
 8001c50:	689e      	ldr	r6, [r3, #8]
 8001c52:	d307      	bcc.n	8001c64 <_ZN3COM3SPI17Interrupt_HandlerEv+0x54>
 8001c54:	e008      	b.n	8001c68 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
				*tmp_rx_current++ = *reinterpret_cast<volatile uint8_t*>(&spi->DR);
 8001c56:	7b1b      	ldrb	r3, [r3, #12]
 8001c58:	f802 3b01 	strb.w	r3, [r2], #1
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001c5c:	4294      	cmp	r4, r2
 8001c5e:	6803      	ldr	r3, [r0, #0]
 8001c60:	689e      	ldr	r6, [r3, #8]
 8001c62:	d901      	bls.n	8001c68 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
 8001c64:	07f6      	lsls	r6, r6, #31
 8001c66:	d4f6      	bmi.n	8001c56 <_ZN3COM3SPI17Interrupt_HandlerEv+0x46>
			}
			break;
		}

		if(tmp_tx_current == tmp_tx_end){
 8001c68:	42a9      	cmp	r1, r5
 8001c6a:	d02a      	beq.n	8001cc2 <_ZN3COM3SPI17Interrupt_HandlerEv+0xb2>
			spi->CR2 = spi->CR2 & ~SPI_CR2_TXEIE;
		}

		if(tmp_rx_current == tmp_rx_end){
 8001c6c:	42a2      	cmp	r2, r4
 8001c6e:	d02e      	beq.n	8001cce <_ZN3COM3SPI17Interrupt_HandlerEv+0xbe>
		}

		tx_current = tmp_tx_current;
		tx_end = tmp_tx_end;
		rx_current = tmp_rx_current;
		rx_end = tmp_rx_end;
 8001c70:	62c4      	str	r4, [r0, #44]	; 0x2c
		tx_current = tmp_tx_current;
 8001c72:	6201      	str	r1, [r0, #32]
		rx_current = tmp_rx_current;
 8001c74:	e9c0 2509 	strd	r2, r5, [r0, #36]	; 0x24
	}
 8001c78:	bc70      	pop	{r4, r5, r6}
 8001c7a:	4770      	bx	lr
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001c7c:	6803      	ldr	r3, [r0, #0]
 8001c7e:	689e      	ldr	r6, [r3, #8]
 8001c80:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001c84:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001c88:	d00e      	beq.n	8001ca8 <_ZN3COM3SPI17Interrupt_HandlerEv+0x98>
 8001c8a:	42a9      	cmp	r1, r5
 8001c8c:	d302      	bcc.n	8001c94 <_ZN3COM3SPI17Interrupt_HandlerEv+0x84>
 8001c8e:	e00b      	b.n	8001ca8 <_ZN3COM3SPI17Interrupt_HandlerEv+0x98>
 8001c90:	428d      	cmp	r5, r1
 8001c92:	d909      	bls.n	8001ca8 <_ZN3COM3SPI17Interrupt_HandlerEv+0x98>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = *tmp_tx_current++;
 8001c94:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001c98:	731e      	strb	r6, [r3, #12]
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001c9a:	6803      	ldr	r3, [r0, #0]
 8001c9c:	689e      	ldr	r6, [r3, #8]
 8001c9e:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001ca2:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001ca6:	d1f3      	bne.n	8001c90 <_ZN3COM3SPI17Interrupt_HandlerEv+0x80>
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001ca8:	42a2      	cmp	r2, r4
 8001caa:	689e      	ldr	r6, [r3, #8]
 8001cac:	d305      	bcc.n	8001cba <_ZN3COM3SPI17Interrupt_HandlerEv+0xaa>
 8001cae:	e7db      	b.n	8001c68 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
				tmp_rx_current++;
 8001cb0:	3201      	adds	r2, #1
				*reinterpret_cast<volatile uint8_t*>(&spi->DR);
 8001cb2:	7b1e      	ldrb	r6, [r3, #12]
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001cb4:	689e      	ldr	r6, [r3, #8]
 8001cb6:	4294      	cmp	r4, r2
 8001cb8:	d9d6      	bls.n	8001c68 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
 8001cba:	07f6      	lsls	r6, r6, #31
 8001cbc:	d4f8      	bmi.n	8001cb0 <_ZN3COM3SPI17Interrupt_HandlerEv+0xa0>
		if(tmp_tx_current == tmp_tx_end){
 8001cbe:	42a9      	cmp	r1, r5
 8001cc0:	d1d4      	bne.n	8001c6c <_ZN3COM3SPI17Interrupt_HandlerEv+0x5c>
			spi->CR2 = spi->CR2 & ~SPI_CR2_TXEIE;
 8001cc2:	685e      	ldr	r6, [r3, #4]
		if(tmp_rx_current == tmp_rx_end){
 8001cc4:	42a2      	cmp	r2, r4
			spi->CR2 = spi->CR2 & ~SPI_CR2_TXEIE;
 8001cc6:	f026 0680 	bic.w	r6, r6, #128	; 0x80
 8001cca:	605e      	str	r6, [r3, #4]
		if(tmp_rx_current == tmp_rx_end){
 8001ccc:	d1d0      	bne.n	8001c70 <_ZN3COM3SPI17Interrupt_HandlerEv+0x60>
			spi->CR2 = spi->CR2 & ~SPI_CR2_RXNEIE;
 8001cce:	685a      	ldr	r2, [r3, #4]
			done = true;
 8001cd0:	2101      	movs	r1, #1
			spi->CR2 = spi->CR2 & ~SPI_CR2_RXNEIE;
 8001cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
	}
 8001cd6:	bc70      	pop	{r4, r5, r6}
			spi->CR2 = spi->CR2 & ~SPI_CR2_RXNEIE;
 8001cd8:	605a      	str	r2, [r3, #4]
			done = true;
 8001cda:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	}
 8001cde:	4770      	bx	lr
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001ce0:	6803      	ldr	r3, [r0, #0]
 8001ce2:	689e      	ldr	r6, [r3, #8]
 8001ce4:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001ce8:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001cec:	d010      	beq.n	8001d10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x100>
 8001cee:	42a9      	cmp	r1, r5
 8001cf0:	d20e      	bcs.n	8001d10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x100>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = 0;
 8001cf2:	f04f 0c00 	mov.w	ip, #0
 8001cf6:	e001      	b.n	8001cfc <_ZN3COM3SPI17Interrupt_HandlerEv+0xec>
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001cf8:	428d      	cmp	r5, r1
 8001cfa:	d909      	bls.n	8001d10 <_ZN3COM3SPI17Interrupt_HandlerEv+0x100>
				*reinterpret_cast<volatile uint8_t*>(&spi->DR) = 0;
 8001cfc:	f883 c00c 	strb.w	ip, [r3, #12]
				tmp_tx_current++;
 8001d00:	3101      	adds	r1, #1
			while (((spi->SR&SPI_SR_FTLVL_Msk) != SPI_SR_FTLVL_Msk) && tmp_tx_current < tmp_tx_end){
 8001d02:	6803      	ldr	r3, [r0, #0]
 8001d04:	689e      	ldr	r6, [r3, #8]
 8001d06:	f406 56c0 	and.w	r6, r6, #6144	; 0x1800
 8001d0a:	f5b6 5fc0 	cmp.w	r6, #6144	; 0x1800
 8001d0e:	d1f3      	bne.n	8001cf8 <_ZN3COM3SPI17Interrupt_HandlerEv+0xe8>
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001d10:	42a2      	cmp	r2, r4
 8001d12:	689e      	ldr	r6, [r3, #8]
 8001d14:	d307      	bcc.n	8001d26 <_ZN3COM3SPI17Interrupt_HandlerEv+0x116>
 8001d16:	e7a7      	b.n	8001c68 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
				*tmp_rx_current++ = *reinterpret_cast<volatile uint8_t*>(&spi->DR);
 8001d18:	7b1b      	ldrb	r3, [r3, #12]
 8001d1a:	f802 3b01 	strb.w	r3, [r2], #1
			while(((spi->SR)&(SPI_SR_RXNE_Msk)) && tmp_rx_current < tmp_rx_end){
 8001d1e:	4294      	cmp	r4, r2
 8001d20:	6803      	ldr	r3, [r0, #0]
 8001d22:	689e      	ldr	r6, [r3, #8]
 8001d24:	d9a0      	bls.n	8001c68 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>
 8001d26:	07f6      	lsls	r6, r6, #31
 8001d28:	d4f6      	bmi.n	8001d18 <_ZN3COM3SPI17Interrupt_HandlerEv+0x108>
 8001d2a:	e79d      	b.n	8001c68 <_ZN3COM3SPI17Interrupt_HandlerEv+0x58>

08001d2c <_ZN3COM3SPI5CS_ENEv>:

	void SPI::CS_EN(){
		cs->BSRR = cs->BSRR | (1 << (cs_pin + 16));
 8001d2c:	7ec2      	ldrb	r2, [r0, #27]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	6941      	ldr	r1, [r0, #20]
 8001d32:	3210      	adds	r2, #16
 8001d34:	6988      	ldr	r0, [r1, #24]
 8001d36:	4093      	lsls	r3, r2
 8001d38:	4303      	orrs	r3, r0
 8001d3a:	618b      	str	r3, [r1, #24]
	}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop

08001d40 <_ZN3COM3SPI6CS_DISEv>:

	void SPI::CS_DIS(){
		cs->BSRR = cs->BSRR | 1 << cs_pin;
 8001d40:	6942      	ldr	r2, [r0, #20]
 8001d42:	2301      	movs	r3, #1
 8001d44:	7ec0      	ldrb	r0, [r0, #27]
 8001d46:	6991      	ldr	r1, [r2, #24]
 8001d48:	4083      	lsls	r3, r0
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	6193      	str	r3, [r2, #24]
	}
 8001d4e:	4770      	bx	lr

08001d50 <_GLOBAL__sub_I_imu>:
SENSORS::IMU imu = SENSORS::IMU();
receiver recv = receiver();
PID YAW_PID	 	= PID(0.001, 600, -600, 100, 0.001, 10);
PID PITCH_PID	= PID(0.001, 600, -600, 100, 0.001, 10);
PID ROLL_PID	= PID(0.001, 600, -600, 100, 0.001, 10);
motor mot		= motor();
 8001d50:	b508      	push	{r3, lr}
receiver recv = receiver();
 8001d52:	4815      	ldr	r0, [pc, #84]	; (8001da8 <_GLOBAL__sub_I_imu+0x58>)
 8001d54:	f000 fc9c 	bl	8002690 <_ZN8receiverC1Ev>
	float dt, max, min, Kp, Ki, Kd;
	float _P, _I, _D, error, integral, prev_error, de, output;

public:
	PID(float dt, float max, float min, float Kp, float Ki, float Kd):
		dt(dt), max(max), min(min) ,Kp(Kp), Ki(Ki), Kd(Kd) {};
 8001d58:	4b14      	ldr	r3, [pc, #80]	; (8001dac <_GLOBAL__sub_I_imu+0x5c>)
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <_GLOBAL__sub_I_imu+0x60>)
 8001d5c:	f8df e068 	ldr.w	lr, [pc, #104]	; 8001dc8 <_GLOBAL__sub_I_imu+0x78>
 8001d60:	4814      	ldr	r0, [pc, #80]	; (8001db4 <_GLOBAL__sub_I_imu+0x64>)
 8001d62:	f8df c068 	ldr.w	ip, [pc, #104]	; 8001dcc <_GLOBAL__sub_I_imu+0x7c>
 8001d66:	4914      	ldr	r1, [pc, #80]	; (8001db8 <_GLOBAL__sub_I_imu+0x68>)
 8001d68:	f8c3 e004 	str.w	lr, [r3, #4]
 8001d6c:	6098      	str	r0, [r3, #8]
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	f8c3 c00c 	str.w	ip, [r3, #12]
 8001d74:	611a      	str	r2, [r3, #16]
 8001d76:	6159      	str	r1, [r3, #20]
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <_GLOBAL__sub_I_imu+0x6c>)
 8001d7a:	f8c3 e004 	str.w	lr, [r3, #4]
 8001d7e:	6098      	str	r0, [r3, #8]
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	f8c3 c00c 	str.w	ip, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
 8001d88:	6159      	str	r1, [r3, #20]
 8001d8a:	4b0d      	ldr	r3, [pc, #52]	; (8001dc0 <_GLOBAL__sub_I_imu+0x70>)
 8001d8c:	6098      	str	r0, [r3, #8]
 8001d8e:	f8c3 e004 	str.w	lr, [r3, #4]
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f8c3 c00c 	str.w	ip, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	6159      	str	r1, [r3, #20]
motor mot		= motor();
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <_GLOBAL__sub_I_imu+0x74>)
 8001d9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8001da2:	f000 bbeb 	b.w	800257c <_ZN5motorC1Ev>
 8001da6:	bf00      	nop
 8001da8:	20000cc8 	.word	0x20000cc8
 8001dac:	20000518 	.word	0x20000518
 8001db0:	3a83126f 	.word	0x3a83126f
 8001db4:	c4160000 	.word	0xc4160000
 8001db8:	41200000 	.word	0x41200000
 8001dbc:	200004a8 	.word	0x200004a8
 8001dc0:	200004e0 	.word	0x200004e0
 8001dc4:	20000cb8 	.word	0x20000cb8
 8001dc8:	44160000 	.word	0x44160000
 8001dcc:	42c80000 	.word	0x42c80000

08001dd0 <_ZN5TIMER3TIM4InitEv>:
 */
#include "TIM.hpp"

namespace TIMER{
	void TIM::Init(){
		if(tim == TIM1){
 8001dd0:	4b35      	ldr	r3, [pc, #212]	; (8001ea8 <_ZN5TIMER3TIM4InitEv+0xd8>)
 8001dd2:	6902      	ldr	r2, [r0, #16]
 8001dd4:	429a      	cmp	r2, r3
	void TIM::Init(){
 8001dd6:	b410      	push	{r4}
		if(tim == TIM1){
 8001dd8:	d02f      	beq.n	8001e3a <_ZN5TIMER3TIM4InitEv+0x6a>
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_TIM1EN;
			//IRQn = TIM1_CC_IRQn;
		}else if(tim == TIM2){
 8001dda:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001dde:	d011      	beq.n	8001e04 <_ZN5TIMER3TIM4InitEv+0x34>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM2EN;
			IRQn = TIM2_IRQn;
		}else if(tim == TIM3){
 8001de0:	4b32      	ldr	r3, [pc, #200]	; (8001eac <_ZN5TIMER3TIM4InitEv+0xdc>)
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d045      	beq.n	8001e72 <_ZN5TIMER3TIM4InitEv+0xa2>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM3EN;
			IRQn = TIM3_IRQn;
		}else if(tim == TIM4){
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <_ZN5TIMER3TIM4InitEv+0xe0>)
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d048      	beq.n	8001e7e <_ZN5TIMER3TIM4InitEv+0xae>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM4EN;
			IRQn = TIM4_IRQn;
		}else if(tim == TIM5){
 8001dec:	4b31      	ldr	r3, [pc, #196]	; (8001eb4 <_ZN5TIMER3TIM4InitEv+0xe4>)
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d039      	beq.n	8001e66 <_ZN5TIMER3TIM4InitEv+0x96>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
			IRQn = TIM5_IRQn;
		}else if(tim == TIM6){
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <_ZN5TIMER3TIM4InitEv+0xe8>)
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d048      	beq.n	8001e8a <_ZN5TIMER3TIM4InitEv+0xba>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM6EN;
			//IRQn = TIM6_IRQn;
		}else if(tim == TIM7){
 8001df8:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <_ZN5TIMER3TIM4InitEv+0xec>)
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d04d      	beq.n	8001e9a <_ZN5TIMER3TIM4InitEv+0xca>
		tim->PSC = tim_prescale;
		tim->ARR = tim_resolution;


		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
		NVIC_EnableIRQ(IRQn);
 8001dfe:	f990 3014 	ldrsb.w	r3, [r0, #20]
 8001e02:	e021      	b.n	8001e48 <_ZN5TIMER3TIM4InitEv+0x78>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM2EN;
 8001e04:	492e      	ldr	r1, [pc, #184]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM2_IRQn;
 8001e06:	231c      	movs	r3, #28
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM2EN;
 8001e08:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001e0a:	f044 0401 	orr.w	r4, r4, #1
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
 8001e0e:	640c      	str	r4, [r1, #64]	; 0x40
			IRQn = TIM5_IRQn;
 8001e10:	7503      	strb	r3, [r0, #20]
		tim->PSC = tim_prescale;
 8001e12:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		tim->ARR = tim_resolution;
 8001e14:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		tim->PSC = tim_prescale;
 8001e18:	6294      	str	r4, [r2, #40]	; 0x28
		tim->ARR = tim_resolution;
 8001e1a:	62d0      	str	r0, [r2, #44]	; 0x2c
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001e1c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e22:	644a      	str	r2, [r1, #68]	; 0x44
 8001e24:	f003 001f 	and.w	r0, r3, #31
 8001e28:	2201      	movs	r2, #1
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	4925      	ldr	r1, [pc, #148]	; (8001ec4 <_ZN5TIMER3TIM4InitEv+0xf4>)
 8001e2e:	4082      	lsls	r2, r0
	}
 8001e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001e38:	4770      	bx	lr
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_TIM1EN;
 8001e3a:	4c21      	ldr	r4, [pc, #132]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
		NVIC_EnableIRQ(IRQn);
 8001e3c:	f990 3014 	ldrsb.w	r3, [r0, #20]
			RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_TIM1EN;
 8001e40:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e42:	f041 0101 	orr.w	r1, r1, #1
 8001e46:	6461      	str	r1, [r4, #68]	; 0x44
		tim->PSC = tim_prescale;
 8001e48:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	2b00      	cmp	r3, #0
		tim->ARR = tim_resolution;
 8001e4c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001e50:	491b      	ldr	r1, [pc, #108]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
		tim->PSC = tim_prescale;
 8001e52:	6294      	str	r4, [r2, #40]	; 0x28
		tim->ARR = tim_resolution;
 8001e54:	62d0      	str	r0, [r2, #44]	; 0x2c
		RCC->APB2ENR = RCC->APB2ENR | RCC_APB2ENR_SYSCFGEN;
 8001e56:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8001e58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e5c:	644a      	str	r2, [r1, #68]	; 0x44
 8001e5e:	dae1      	bge.n	8001e24 <_ZN5TIMER3TIM4InitEv+0x54>
	}
 8001e60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e64:	4770      	bx	lr
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
 8001e66:	4916      	ldr	r1, [pc, #88]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM5_IRQn;
 8001e68:	2332      	movs	r3, #50	; 0x32
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM5EN;
 8001e6a:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001e6c:	f044 0408 	orr.w	r4, r4, #8
 8001e70:	e7cd      	b.n	8001e0e <_ZN5TIMER3TIM4InitEv+0x3e>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM3EN;
 8001e72:	4913      	ldr	r1, [pc, #76]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM3_IRQn;
 8001e74:	231d      	movs	r3, #29
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM3EN;
 8001e76:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001e78:	f044 0402 	orr.w	r4, r4, #2
 8001e7c:	e7c7      	b.n	8001e0e <_ZN5TIMER3TIM4InitEv+0x3e>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM4EN;
 8001e7e:	4910      	ldr	r1, [pc, #64]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM4_IRQn;
 8001e80:	231e      	movs	r3, #30
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM4EN;
 8001e82:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001e84:	f044 0404 	orr.w	r4, r4, #4
 8001e88:	e7c1      	b.n	8001e0e <_ZN5TIMER3TIM4InitEv+0x3e>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM6EN;
 8001e8a:	4c0d      	ldr	r4, [pc, #52]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
		NVIC_EnableIRQ(IRQn);
 8001e8c:	f990 3014 	ldrsb.w	r3, [r0, #20]
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM6EN;
 8001e90:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001e92:	f041 0110 	orr.w	r1, r1, #16
 8001e96:	6421      	str	r1, [r4, #64]	; 0x40
 8001e98:	e7d6      	b.n	8001e48 <_ZN5TIMER3TIM4InitEv+0x78>
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM7EN;
 8001e9a:	4909      	ldr	r1, [pc, #36]	; (8001ec0 <_ZN5TIMER3TIM4InitEv+0xf0>)
			IRQn = TIM7_IRQn;
 8001e9c:	2337      	movs	r3, #55	; 0x37
			RCC->APB1ENR = RCC->APB1ENR | RCC_APB1ENR_TIM7EN;
 8001e9e:	6c0c      	ldr	r4, [r1, #64]	; 0x40
 8001ea0:	f044 0420 	orr.w	r4, r4, #32
 8001ea4:	e7b3      	b.n	8001e0e <_ZN5TIMER3TIM4InitEv+0x3e>
 8001ea6:	bf00      	nop
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40000400 	.word	0x40000400
 8001eb0:	40000800 	.word	0x40000800
 8001eb4:	40000c00 	.word	0x40000c00
 8001eb8:	40001000 	.word	0x40001000
 8001ebc:	40001400 	.word	0x40001400
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <_ZN5TIMER3TIM21EnableUpdateInterruptEv>:
	void TIM::EnableUpdateInterrupt(){
		tim->DIER = tim->DIER | TIM_DIER_UIE;
 8001ec8:	6902      	ldr	r2, [r0, #16]
 8001eca:	68d3      	ldr	r3, [r2, #12]
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	60d3      	str	r3, [r2, #12]
	}
 8001ed2:	4770      	bx	lr

08001ed4 <_ZN5TIMER3TIM23UpdateInterrupt_HandlerEv>:

	void TIM::UpdateInterrupt_Handler(){
		tim->SR &= ~TIM_SR_UIF;
 8001ed4:	6902      	ldr	r2, [r0, #16]
 8001ed6:	6913      	ldr	r3, [r2, #16]
 8001ed8:	f023 0301 	bic.w	r3, r3, #1
 8001edc:	6113      	str	r3, [r2, #16]
	}
 8001ede:	4770      	bx	lr

08001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>:

	void TIM::EnableChannel(GPIO_TypeDef *tim_gpio, uint8_t tim_pin, uint8_t tim_afr, uint8_t tim_channel){
 8001ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	4615      	mov	r5, r2
 8001ee8:	4606      	mov	r6, r0
		GPIO::EN(tim_gpio);
 8001eea:	4608      	mov	r0, r1
	void TIM::EnableChannel(GPIO_TypeDef *tim_gpio, uint8_t tim_pin, uint8_t tim_afr, uint8_t tim_channel){
 8001eec:	461f      	mov	r7, r3
 8001eee:	f89d 8018 	ldrb.w	r8, [sp, #24]
		GPIO::EN(tim_gpio);
 8001ef2:	f7fe ffe1 	bl	8000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>
		GPIO::MODE(tim_gpio, tim_pin, MODE_ALT);
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	4629      	mov	r1, r5
 8001efa:	4620      	mov	r0, r4
 8001efc:	f7ff f842 	bl	8000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
		GPIO::SPEED(tim_gpio, tim_pin, SPEED_VHIGH);
 8001f00:	2203      	movs	r2, #3
 8001f02:	4629      	mov	r1, r5
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff f843 	bl	8000f90 <_ZN4GPIO5SPEEDEP12GPIO_TypeDefhh>
		GPIO::AFR(tim_gpio, tim_pin, tim_afr);
 8001f0a:	463a      	mov	r2, r7
 8001f0c:	4629      	mov	r1, r5
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff f84a 	bl	8000fa8 <_ZN4GPIO3AFREP12GPIO_TypeDefhh>

		if(tim_channel == 1){
 8001f14:	f1b8 0f01 	cmp.w	r8, #1
 8001f18:	d011      	beq.n	8001f3e <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x5e>
			gpio_CH1 = tim_gpio;
			gpio_CH1_pin = tim_pin;
		}else if(tim_channel == 2){
 8001f1a:	f1b8 0f02 	cmp.w	r8, #2
 8001f1e:	d009      	beq.n	8001f34 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x54>
			gpio_CH2 = tim_gpio;
			gpio_CH2_pin = tim_pin;
		}else if(tim_channel == 3){
 8001f20:	f1b8 0f03 	cmp.w	r8, #3
 8001f24:	d010      	beq.n	8001f48 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x68>
			gpio_CH3 = tim_gpio;
			gpio_CH3_pin = tim_pin;
		}else if(tim_channel == 4){
 8001f26:	f1b8 0f04 	cmp.w	r8, #4
 8001f2a:	d106      	bne.n	8001f3a <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x5a>
			gpio_CH4 = tim_gpio;
 8001f2c:	6274      	str	r4, [r6, #36]	; 0x24
			gpio_CH4_pin = tim_pin;
 8001f2e:	f886 502b 	strb.w	r5, [r6, #43]	; 0x2b
		}


	}
 8001f32:	e002      	b.n	8001f3a <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh+0x5a>
			gpio_CH2 = tim_gpio;
 8001f34:	61f4      	str	r4, [r6, #28]
			gpio_CH2_pin = tim_pin;
 8001f36:	f886 5029 	strb.w	r5, [r6, #41]	; 0x29
	}
 8001f3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_CH1 = tim_gpio;
 8001f3e:	61b4      	str	r4, [r6, #24]
			gpio_CH1_pin = tim_pin;
 8001f40:	f886 5028 	strb.w	r5, [r6, #40]	; 0x28
	}
 8001f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			gpio_CH3 = tim_gpio;
 8001f48:	6234      	str	r4, [r6, #32]
			gpio_CH3_pin = tim_pin;
 8001f4a:	f886 502a 	strb.w	r5, [r6, #42]	; 0x2a
	}
 8001f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f52:	bf00      	nop

08001f54 <_ZN5TIMER3TIM9EnablePWMEh>:

	void TIM::EnablePWM(uint8_t tim_channel){
		if(tim_channel == 1){
 8001f54:	3901      	subs	r1, #1
 8001f56:	2903      	cmp	r1, #3
 8001f58:	d84b      	bhi.n	8001ff2 <_ZN5TIMER3TIM9EnablePWMEh+0x9e>
 8001f5a:	e8df f001 	tbb	[pc, r1]
 8001f5e:	2638      	.short	0x2638
 8001f60:	0214      	.short	0x0214
		}else if(tim_channel == 3){
			tim->CCMR2 = tim->CCMR2 & ~(TIM_CCMR2_OC3M_0 | TIM_CCMR2_OC3M_3 | TIM_CCMR2_OC3PE);
			tim->CCMR2 = tim->CCMR2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
			tim->CCER = tim->CCER | TIM_CCER_CC3E;
		}else if(tim_channel == 4){
			tim->CCMR2 = tim->CCMR2 & ~(TIM_CCMR2_OC4M_0 | TIM_CCMR2_OC4M_3 | TIM_CCMR2_OC4PE);
 8001f62:	6903      	ldr	r3, [r0, #16]
 8001f64:	4a24      	ldr	r2, [pc, #144]	; (8001ff8 <_ZN5TIMER3TIM9EnablePWMEh+0xa4>)
 8001f66:	69d9      	ldr	r1, [r3, #28]
 8001f68:	400a      	ands	r2, r1
 8001f6a:	61da      	str	r2, [r3, #28]
			tim->CCMR2 = tim->CCMR2 | TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 8001f6c:	69da      	ldr	r2, [r3, #28]
 8001f6e:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001f72:	61da      	str	r2, [r3, #28]
			tim->CCER = tim->CCER | TIM_CCER_CC4E;
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f7a:	621a      	str	r2, [r3, #32]

		}
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001f7c:	695a      	ldr	r2, [r3, #20]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	615a      	str	r2, [r3, #20]
	}
 8001f84:	4770      	bx	lr
			tim->CCMR2 = tim->CCMR2 & ~(TIM_CCMR2_OC3M_0 | TIM_CCMR2_OC3M_3 | TIM_CCMR2_OC3PE);
 8001f86:	6903      	ldr	r3, [r0, #16]
 8001f88:	4a1c      	ldr	r2, [pc, #112]	; (8001ffc <_ZN5TIMER3TIM9EnablePWMEh+0xa8>)
 8001f8a:	69d9      	ldr	r1, [r3, #28]
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	61da      	str	r2, [r3, #28]
			tim->CCMR2 = tim->CCMR2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3M_2;
 8001f90:	69da      	ldr	r2, [r3, #28]
 8001f92:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001f96:	61da      	str	r2, [r3, #28]
			tim->CCER = tim->CCER | TIM_CCER_CC3E;
 8001f98:	6a1a      	ldr	r2, [r3, #32]
 8001f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9e:	621a      	str	r2, [r3, #32]
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	615a      	str	r2, [r3, #20]
	}
 8001fa8:	4770      	bx	lr
			tim->CCMR1 = tim->CCMR1 & ~(TIM_CCMR1_OC2M_0 | TIM_CCMR1_OC2M_3 | TIM_CCMR1_OC2PE);
 8001faa:	6903      	ldr	r3, [r0, #16]
 8001fac:	4a12      	ldr	r2, [pc, #72]	; (8001ff8 <_ZN5TIMER3TIM9EnablePWMEh+0xa4>)
 8001fae:	6999      	ldr	r1, [r3, #24]
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	619a      	str	r2, [r3, #24]
			tim->CCMR1 = tim->CCMR1 | TIM_CCMR1_OC2M_1 | TIM_CCMR1_OC2M_2;
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	f442 42c0 	orr.w	r2, r2, #24576	; 0x6000
 8001fba:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC2E;
 8001fbc:	6a1a      	ldr	r2, [r3, #32]
 8001fbe:	f042 0210 	orr.w	r2, r2, #16
 8001fc2:	621a      	str	r2, [r3, #32]
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	615a      	str	r2, [r3, #20]
	}
 8001fcc:	4770      	bx	lr
			tim->CCMR1 = tim->CCMR1 & ~(TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1PE);
 8001fce:	6903      	ldr	r3, [r0, #16]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <_ZN5TIMER3TIM9EnablePWMEh+0xa8>)
 8001fd2:	6999      	ldr	r1, [r3, #24]
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	619a      	str	r2, [r3, #24]
			tim->CCMR1 = tim->CCMR1 | TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 8001fd8:	699a      	ldr	r2, [r3, #24]
 8001fda:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8001fde:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC1E;
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	621a      	str	r2, [r3, #32]
		tim->EGR = tim->EGR | TIM_EGR_UG;
 8001fe8:	695a      	ldr	r2, [r3, #20]
 8001fea:	f042 0201 	orr.w	r2, r2, #1
 8001fee:	615a      	str	r2, [r3, #20]
	}
 8001ff0:	4770      	bx	lr
			tim->CCMR1 = tim->CCMR1 & ~(TIM_CCMR1_OC1M_0 | TIM_CCMR1_OC1M_3 | TIM_CCMR1_OC1PE);
 8001ff2:	6903      	ldr	r3, [r0, #16]
 8001ff4:	e7c2      	b.n	8001f7c <_ZN5TIMER3TIM9EnablePWMEh+0x28>
 8001ff6:	bf00      	nop
 8001ff8:	feffe7ff 	.word	0xfeffe7ff
 8001ffc:	fffeffe7 	.word	0xfffeffe7

08002000 <_ZN5TIMER3TIM9TIM_StartEv>:

	void TIM::TIM_Start(){
		tim->CR1 = tim->CR1 | TIM_CR1_CEN;
 8002000:	6902      	ldr	r2, [r0, #16]
 8002002:	6813      	ldr	r3, [r2, #0]
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6013      	str	r3, [r2, #0]
	}
 800200a:	4770      	bx	lr

0800200c <_ZN5TIMER3TIM17Interrupt_HandlerEv>:

	void TIM::Interrupt_Handler(){
		if((tim->SR & TIM_SR_CC1IF_Msk) == TIM_SR_CC1IF_Msk){
 800200c:	6903      	ldr	r3, [r0, #16]
 800200e:	691a      	ldr	r2, [r3, #16]
	void TIM::Interrupt_Handler(){
 8002010:	b510      	push	{r4, lr}
 8002012:	4604      	mov	r4, r0
		if((tim->SR & TIM_SR_CC1IF_Msk) == TIM_SR_CC1IF_Msk){
 8002014:	0790      	lsls	r0, r2, #30
 8002016:	d435      	bmi.n	8002084 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x78>
				if(CH_1_VAL < 0) CH_1_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC1P;
			}
		}

		if((tim->SR & TIM_SR_CC2IF_Msk) == TIM_SR_CC2IF_Msk){
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	0751      	lsls	r1, r2, #29
 800201c:	d424      	bmi.n	8002068 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x5c>
				if(CH_2_VAL < 0) CH_2_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC2P;
			}
		}

		if((tim->SR & TIM_SR_CC3IF_Msk) == TIM_SR_CC3IF_Msk){
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	0712      	lsls	r2, r2, #28
 8002022:	d412      	bmi.n	800204a <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x3e>
				if(CH_3_VAL < 0) CH_3_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC3P;
			}
		}

		if((tim->SR & TIM_SR_CC4IF_Msk) == TIM_SR_CC4IF_Msk){
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	06db      	lsls	r3, r3, #27
 8002028:	d400      	bmi.n	800202c <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x20>
				CH_4_VAL = tim->CCR4 - CH_4_START;
				if(CH_4_VAL < 0) CH_4_VAL += 4096;
				tim->CCER = tim->CCER & ~TIM_CCER_CC4P;
			}
		}
	}
 800202a:	bd10      	pop	{r4, pc}
			if(0b1 & GPIO::READ(gpio_CH4, gpio_CH4_pin)){
 800202c:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
 8002030:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002032:	f7fe ffd3 	bl	8000fdc <_ZN4GPIO4READEP12GPIO_TypeDefh>
 8002036:	2800      	cmp	r0, #0
 8002038:	d056      	beq.n	80020e8 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xdc>
				CH_4_START = tim->CCR4;
 800203a:	6923      	ldr	r3, [r4, #16]
 800203c:	6c19      	ldr	r1, [r3, #64]	; 0x40
				tim->CCER = tim->CCER | TIM_CCER_CC4P;
 800203e:	6a1a      	ldr	r2, [r3, #32]
				CH_4_START = tim->CCR4;
 8002040:	63e1      	str	r1, [r4, #60]	; 0x3c
				tim->CCER = tim->CCER | TIM_CCER_CC4P;
 8002042:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002046:	621a      	str	r2, [r3, #32]
	}
 8002048:	bd10      	pop	{r4, pc}
			if(0b1 & GPIO::READ(gpio_CH3, gpio_CH3_pin)){
 800204a:	f894 102a 	ldrb.w	r1, [r4, #42]	; 0x2a
 800204e:	6a20      	ldr	r0, [r4, #32]
 8002050:	f7fe ffc4 	bl	8000fdc <_ZN4GPIO4READEP12GPIO_TypeDefh>
				CH_3_START = tim->CCR3;
 8002054:	6923      	ldr	r3, [r4, #16]
			if(0b1 & GPIO::READ(gpio_CH3, gpio_CH3_pin)){
 8002056:	2800      	cmp	r0, #0
 8002058:	d03a      	beq.n	80020d0 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xc4>
				CH_3_START = tim->CCR3;
 800205a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
				tim->CCER = tim->CCER | TIM_CCER_CC3P;
 800205c:	6a1a      	ldr	r2, [r3, #32]
				CH_3_START = tim->CCR3;
 800205e:	63a1      	str	r1, [r4, #56]	; 0x38
				tim->CCER = tim->CCER | TIM_CCER_CC3P;
 8002060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002064:	621a      	str	r2, [r3, #32]
 8002066:	e7dd      	b.n	8002024 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x18>
			if(0b1 & GPIO::READ(gpio_CH2, gpio_CH2_pin)){
 8002068:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
 800206c:	69e0      	ldr	r0, [r4, #28]
 800206e:	f7fe ffb5 	bl	8000fdc <_ZN4GPIO4READEP12GPIO_TypeDefh>
				CH_2_START = tim->CCR2;
 8002072:	6923      	ldr	r3, [r4, #16]
			if(0b1 & GPIO::READ(gpio_CH2, gpio_CH2_pin)){
 8002074:	b300      	cbz	r0, 80020b8 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xac>
				CH_2_START = tim->CCR2;
 8002076:	6b99      	ldr	r1, [r3, #56]	; 0x38
				tim->CCER = tim->CCER | TIM_CCER_CC2P;
 8002078:	6a1a      	ldr	r2, [r3, #32]
				CH_2_START = tim->CCR2;
 800207a:	6361      	str	r1, [r4, #52]	; 0x34
				tim->CCER = tim->CCER | TIM_CCER_CC2P;
 800207c:	f042 0220 	orr.w	r2, r2, #32
 8002080:	621a      	str	r2, [r3, #32]
 8002082:	e7cc      	b.n	800201e <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x12>
			if(0b1 & GPIO::READ(gpio_CH1, gpio_CH1_pin)){
 8002084:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8002088:	69a0      	ldr	r0, [r4, #24]
 800208a:	f7fe ffa7 	bl	8000fdc <_ZN4GPIO4READEP12GPIO_TypeDefh>
				CH_1_START = tim->CCR1;
 800208e:	6923      	ldr	r3, [r4, #16]
			if(0b1 & GPIO::READ(gpio_CH1, gpio_CH1_pin)){
 8002090:	b130      	cbz	r0, 80020a0 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x94>
				CH_1_START = tim->CCR1;
 8002092:	6b59      	ldr	r1, [r3, #52]	; 0x34
				tim->CCER = tim->CCER | TIM_CCER_CC1P;
 8002094:	6a1a      	ldr	r2, [r3, #32]
				CH_1_START = tim->CCR1;
 8002096:	6321      	str	r1, [r4, #48]	; 0x30
				tim->CCER = tim->CCER | TIM_CCER_CC1P;
 8002098:	f042 0202 	orr.w	r2, r2, #2
 800209c:	621a      	str	r2, [r3, #32]
 800209e:	e7bb      	b.n	8002018 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xc>
				CH_1_VAL = tim->CCR1 - CH_1_START;
 80020a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
				if(CH_1_VAL < 0) CH_1_VAL += 4096;
 80020a4:	1a52      	subs	r2, r2, r1
 80020a6:	bf48      	it	mi
 80020a8:	f502 5280 	addmi.w	r2, r2, #4096	; 0x1000
 80020ac:	6022      	str	r2, [r4, #0]
				tim->CCER = tim->CCER & ~TIM_CCER_CC1P;
 80020ae:	6a1a      	ldr	r2, [r3, #32]
 80020b0:	f022 0202 	bic.w	r2, r2, #2
 80020b4:	621a      	str	r2, [r3, #32]
 80020b6:	e7af      	b.n	8002018 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0xc>
				CH_2_VAL = tim->CCR2 - CH_2_START;
 80020b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
				if(CH_2_VAL < 0) CH_2_VAL += 4096;
 80020bc:	1a52      	subs	r2, r2, r1
 80020be:	bf48      	it	mi
 80020c0:	f502 5280 	addmi.w	r2, r2, #4096	; 0x1000
 80020c4:	6062      	str	r2, [r4, #4]
				tim->CCER = tim->CCER & ~TIM_CCER_CC2P;
 80020c6:	6a1a      	ldr	r2, [r3, #32]
 80020c8:	f022 0220 	bic.w	r2, r2, #32
 80020cc:	621a      	str	r2, [r3, #32]
 80020ce:	e7a6      	b.n	800201e <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x12>
				CH_3_VAL = tim->CCR3 - CH_3_START;
 80020d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
				if(CH_3_VAL < 0) CH_3_VAL += 4096;
 80020d4:	1a52      	subs	r2, r2, r1
 80020d6:	bf48      	it	mi
 80020d8:	f502 5280 	addmi.w	r2, r2, #4096	; 0x1000
 80020dc:	60a2      	str	r2, [r4, #8]
				tim->CCER = tim->CCER & ~TIM_CCER_CC3P;
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020e4:	621a      	str	r2, [r3, #32]
 80020e6:	e79d      	b.n	8002024 <_ZN5TIMER3TIM17Interrupt_HandlerEv+0x18>
				CH_4_VAL = tim->CCR4 - CH_4_START;
 80020e8:	6922      	ldr	r2, [r4, #16]
 80020ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80020ec:	6c13      	ldr	r3, [r2, #64]	; 0x40
				if(CH_4_VAL < 0) CH_4_VAL += 4096;
 80020ee:	1a5b      	subs	r3, r3, r1
 80020f0:	bf48      	it	mi
 80020f2:	f503 5380 	addmi.w	r3, r3, #4096	; 0x1000
 80020f6:	60e3      	str	r3, [r4, #12]
				tim->CCER = tim->CCER & ~TIM_CCER_CC4P;
 80020f8:	6a13      	ldr	r3, [r2, #32]
 80020fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80020fe:	6213      	str	r3, [r2, #32]
	}
 8002100:	bd10      	pop	{r4, pc}
 8002102:	bf00      	nop

08002104 <_ZN5TIMER3TIM16PWM_setDutyCycleEht>:

	void TIM::PWM_setDutyCycle(uint8_t tim_channel ,uint16_t dutyCycle){
		if(tim_channel == 1){
 8002104:	3901      	subs	r1, #1
 8002106:	2903      	cmp	r1, #3
 8002108:	d805      	bhi.n	8002116 <_ZN5TIMER3TIM16PWM_setDutyCycleEht+0x12>
 800210a:	e8df f001 	tbb	[pc, r1]
 800210e:	080b      	.short	0x080b
 8002110:	0205      	.short	0x0205
		}else if(tim_channel == 2){
			tim->CCR2 = dutyCycle;
		}else if(tim_channel == 3){
			tim->CCR3 = dutyCycle;
		}else if(tim_channel == 4){
			tim->CCR4 = dutyCycle;
 8002112:	6903      	ldr	r3, [r0, #16]
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
 8002116:	4770      	bx	lr
			tim->CCR3 = dutyCycle;
 8002118:	6903      	ldr	r3, [r0, #16]
 800211a:	63da      	str	r2, [r3, #60]	; 0x3c
 800211c:	4770      	bx	lr
			tim->CCR2 = dutyCycle;
 800211e:	6903      	ldr	r3, [r0, #16]
 8002120:	639a      	str	r2, [r3, #56]	; 0x38
 8002122:	4770      	bx	lr
			tim->CCR1 = dutyCycle;
 8002124:	6903      	ldr	r3, [r0, #16]
 8002126:	635a      	str	r2, [r3, #52]	; 0x34
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <_ZN5TIMER3TIM18EnableInputCaptureEh>:

	void TIM::EnableInputCapture(uint8_t tim_channel){
		//static_assert((tim == TIM2) | (tim == TIM3) | (tim == TIM4) | (tim == TIM5) );

		if(tim_channel == 1){
 800212c:	3901      	subs	r1, #1
 800212e:	2903      	cmp	r1, #3
 8002130:	d81c      	bhi.n	800216c <_ZN5TIMER3TIM18EnableInputCaptureEh+0x40>
 8002132:	e8df f001 	tbb	[pc, r1]
 8002136:	3650      	.short	0x3650
 8002138:	021c      	.short	0x021c

			tim->DIER = tim->DIER | TIM_DIER_CC3IE;

			tim->CCER = tim->CCER | TIM_CCER_CC3E;
		} else if(tim_channel == 4){
			tim->CCMR2 =  tim->CCMR2 | TIM_CCMR2_CC4S_0;
 800213a:	6903      	ldr	r3, [r0, #16]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002142:	61da      	str	r2, [r3, #28]
			tim->CCMR2 =  tim->CCMR2 & ~TIM_CCMR2_CC4S_1;
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800214a:	61da      	str	r2, [r3, #28]

			tim->CCER = tim->CCER | TIM_CCER_CC4P;
 800214c:	6a1a      	ldr	r2, [r3, #32]
 800214e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002152:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC4NP;
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800215a:	621a      	str	r2, [r3, #32]

			tim->DIER = tim->DIER | TIM_DIER_CC4IE;
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	f042 0210 	orr.w	r2, r2, #16
 8002162:	60da      	str	r2, [r3, #12]

			tim->CCER = tim->CCER | TIM_CCER_CC4E;
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800216a:	621a      	str	r2, [r3, #32]
		}
	}
 800216c:	4770      	bx	lr
			tim->CCMR2 =  tim->CCMR2 | TIM_CCMR2_CC3S_0;
 800216e:	6903      	ldr	r3, [r0, #16]
 8002170:	69da      	ldr	r2, [r3, #28]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	61da      	str	r2, [r3, #28]
			tim->CCMR2 =  tim->CCMR2 & ~TIM_CCMR2_CC3S_1;
 8002178:	69da      	ldr	r2, [r3, #28]
 800217a:	f022 0202 	bic.w	r2, r2, #2
 800217e:	61da      	str	r2, [r3, #28]
			tim->CCER = tim->CCER | TIM_CCER_CC3P;
 8002180:	6a1a      	ldr	r2, [r3, #32]
 8002182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002186:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC3NP;
 8002188:	6a1a      	ldr	r2, [r3, #32]
 800218a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800218e:	621a      	str	r2, [r3, #32]
			tim->DIER = tim->DIER | TIM_DIER_CC3IE;
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	f042 0208 	orr.w	r2, r2, #8
 8002196:	60da      	str	r2, [r3, #12]
			tim->CCER = tim->CCER | TIM_CCER_CC3E;
 8002198:	6a1a      	ldr	r2, [r3, #32]
 800219a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800219e:	621a      	str	r2, [r3, #32]
 80021a0:	4770      	bx	lr
			tim->CCMR1 =  tim->CCMR1 | TIM_CCMR1_CC2S_0;
 80021a2:	6903      	ldr	r3, [r0, #16]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021aa:	619a      	str	r2, [r3, #24]
			tim->CCMR1 =  tim->CCMR1 & ~TIM_CCMR1_CC2S_1;
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021b2:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC2P;
 80021b4:	6a1a      	ldr	r2, [r3, #32]
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC2NP;
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c2:	621a      	str	r2, [r3, #32]
			tim->DIER = tim->DIER | TIM_DIER_CC2IE;
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	f042 0204 	orr.w	r2, r2, #4
 80021ca:	60da      	str	r2, [r3, #12]
			tim->CCER = tim->CCER | TIM_CCER_CC2E;
 80021cc:	6a1a      	ldr	r2, [r3, #32]
 80021ce:	f042 0210 	orr.w	r2, r2, #16
 80021d2:	621a      	str	r2, [r3, #32]
 80021d4:	4770      	bx	lr
			tim->CCMR1 =  tim->CCMR1 | TIM_CCMR1_CC1S_0;
 80021d6:	6903      	ldr	r3, [r0, #16]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	619a      	str	r2, [r3, #24]
			tim->CCMR1 =  tim->CCMR1 & ~TIM_CCMR1_CC1S_1;
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	f022 0202 	bic.w	r2, r2, #2
 80021e6:	619a      	str	r2, [r3, #24]
			tim->CCER = tim->CCER | TIM_CCER_CC1P;
 80021e8:	6a1a      	ldr	r2, [r3, #32]
 80021ea:	f042 0202 	orr.w	r2, r2, #2
 80021ee:	621a      	str	r2, [r3, #32]
			tim->CCER = tim->CCER & ~TIM_CCER_CC1NP;
 80021f0:	6a1a      	ldr	r2, [r3, #32]
 80021f2:	f022 0208 	bic.w	r2, r2, #8
 80021f6:	621a      	str	r2, [r3, #32]
			tim->DIER = tim->DIER | TIM_DIER_CC1IE;
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	f042 0202 	orr.w	r2, r2, #2
 80021fe:	60da      	str	r2, [r3, #12]
			tim->CCER = tim->CCER | TIM_CCER_CC1E;
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	f042 0201 	orr.w	r2, r2, #1
 8002206:	621a      	str	r2, [r3, #32]
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop

0800220c <_ZN3COM4UART17Interrupt_HandlerEv>:
		auto* tmp_tx_end = tx_end;

		auto* tmp_rx_current = rx_current;
		auto* tmp_rx_end = rx_end;

		switch(mode){
 800220c:	7d02      	ldrb	r2, [r0, #20]
		auto* tmp_tx_current = tx_current;
 800220e:	6983      	ldr	r3, [r0, #24]
	void UART::Interrupt_Handler(){
 8002210:	b470      	push	{r4, r5, r6}
		auto* tmp_rx_current = rx_current;
 8002212:	e9d0 6407 	ldrd	r6, r4, [r0, #28]
		auto* tmp_rx_end = rx_end;
 8002216:	6a45      	ldr	r5, [r0, #36]	; 0x24
		switch(mode){
 8002218:	b982      	cbnz	r2, 800223c <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
		case UART_Mode::TX:
			while(((uart->ISR&USART_ISR_TXE_Msk) != USART_ISR_TXE_Msk) && tmp_tx_current < tmp_tx_end){
 800221a:	6802      	ldr	r2, [r0, #0]
 800221c:	69d1      	ldr	r1, [r2, #28]
 800221e:	0609      	lsls	r1, r1, #24
 8002220:	d40c      	bmi.n	800223c <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
 8002222:	42a3      	cmp	r3, r4
 8002224:	d302      	bcc.n	800222c <_ZN3COM4UART17Interrupt_HandlerEv+0x20>
 8002226:	e009      	b.n	800223c <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
 8002228:	429c      	cmp	r4, r3
 800222a:	d907      	bls.n	800223c <_ZN3COM4UART17Interrupt_HandlerEv+0x30>
				*reinterpret_cast<volatile uint8_t*>(&uart->TDR) = *tmp_tx_current++;
 800222c:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002230:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
			while(((uart->ISR&USART_ISR_TXE_Msk) != USART_ISR_TXE_Msk) && tmp_tx_current < tmp_tx_end){
 8002234:	6802      	ldr	r2, [r0, #0]
 8002236:	69d1      	ldr	r1, [r2, #28]
 8002238:	0609      	lsls	r1, r1, #24
 800223a:	d5f5      	bpl.n	8002228 <_ZN3COM4UART17Interrupt_HandlerEv+0x1c>

		default:
			break;
		}

		if(tmp_tx_current == tmp_tx_end){
 800223c:	42a3      	cmp	r3, r4
 800223e:	d005      	beq.n	800224c <_ZN3COM4UART17Interrupt_HandlerEv+0x40>
		}

		tx_current = tmp_tx_current;
		tx_end = tmp_tx_end;
		rx_current = tmp_rx_current;
		rx_end = tmp_rx_end;
 8002240:	6245      	str	r5, [r0, #36]	; 0x24
		tx_current = tmp_tx_current;
 8002242:	6183      	str	r3, [r0, #24]
		rx_current = tmp_rx_current;
 8002244:	e9c0 6407 	strd	r6, r4, [r0, #28]
	}
 8002248:	bc70      	pop	{r4, r5, r6}
 800224a:	4770      	bx	lr
			done = true;
 800224c:	2301      	movs	r3, #1
	}
 800224e:	bc70      	pop	{r4, r5, r6}
			done = true;
 8002250:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
	}
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop

08002258 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002258:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <_Z18SystemClock_Configv+0x90>)
{
 800225c:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800225e:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002260:	4b22      	ldr	r3, [pc, #136]	; (80022ec <_Z18SystemClock_Configv+0x94>)
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002262:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002264:	a808      	add	r0, sp, #32
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002266:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002268:	9403      	str	r4, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800226a:	940d      	str	r4, [sp, #52]	; 0x34
 800226c:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002270:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002274:	e9cd 4406 	strd	r4, r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800227a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800227e:	6411      	str	r1, [r2, #64]	; 0x40
 8002280:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002282:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002290:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002292:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800229a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800229c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022a0:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022a2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 216;
 80022aa:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022ac:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 216;
 80022b0:	23d8      	movs	r3, #216	; 0xd8
 80022b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022b6:	2202      	movs	r2, #2
 80022b8:	2302      	movs	r3, #2
 80022ba:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022be:	f000 fb81 	bl	80029c4 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022c2:	f000 fb45 	bl	8002950 <HAL_PWREx_EnableOverDrive>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022c6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022c8:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022cc:	2107      	movs	r1, #7
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ce:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022d4:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022d6:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022d8:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022da:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022de:	f000 fd5f 	bl	8002da0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80022e2:	b015      	add	sp, #84	; 0x54
 80022e4:	bd30      	pop	{r4, r5, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	40007000 	.word	0x40007000

080022f0 <main>:
{
 80022f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f4:	b085      	sub	sp, #20
  __ASM volatile ("dsb 0xF":::"memory");
 80022f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022fa:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80022fe:	4c90      	ldr	r4, [pc, #576]	; (8002540 <main+0x250>)
 8002300:	2200      	movs	r2, #0
 8002302:	f8c4 2250 	str.w	r2, [r4, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002306:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800230a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800230e:	6963      	ldr	r3, [r4, #20]
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002316:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800231a:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800231e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002322:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002326:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800232a:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800232e:	f3c5 304e 	ubfx	r0, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002332:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8002336:	0140      	lsls	r0, r0, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002338:	ea00 0106 	and.w	r1, r0, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800233c:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800233e:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002342:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002344:	f8c4 2260 	str.w	r2, [r4, #608]	; 0x260
      } while (ways-- != 0U);
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	d1f8      	bne.n	800233e <main+0x4e>
    } while(sets-- != 0U);
 800234c:	3820      	subs	r0, #32
 800234e:	f110 0f20 	cmn.w	r0, #32
 8002352:	d1f1      	bne.n	8002338 <main+0x48>
 8002354:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002358:	6963      	ldr	r3, [r4, #20]
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	6163      	str	r3, [r4, #20]
 8002360:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002364:	f3bf 8f6f 	isb	sy
	HAL_Init();
 8002368:	f000 fa6e 	bl	8002848 <HAL_Init>
	DWT->CYCCNT = 0;								//https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ 12.10.19 01:30
 800236c:	2700      	movs	r7, #0
	SystemClock_Config();
 800236e:	f7ff ff73 	bl	8002258 <_Z18SystemClock_Configv>
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002372:	4a74      	ldr	r2, [pc, #464]	; (8002544 <main+0x254>)
	DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 8002374:	4b74      	ldr	r3, [pc, #464]	; (8002548 <main+0x258>)
	tim2_motor.EnableChannel(GPIOA, 1, GPIO_AF1_TIM2, 2);
 8002376:	2502      	movs	r5, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002378:	6b11      	ldr	r1, [r2, #48]	; 0x30
	tim2_motor.EnableChannel(GPIOB, 10, GPIO_AF1_TIM2, 3);
 800237a:	2603      	movs	r6, #3
	DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 800237c:	4873      	ldr	r0, [pc, #460]	; (800254c <main+0x25c>)
	tim2_motor.EnableChannel(GPIOB, 11, GPIO_AF1_TIM2, 4);
 800237e:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002382:	f041 0180 	orr.w	r1, r1, #128	; 0x80
	imu.IMU_init_ok = false;
 8002386:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8002574 <main+0x284>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800238a:	6311      	str	r1, [r2, #48]	; 0x30
 800238c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800238e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002392:	9203      	str	r2, [sp, #12]
 8002394:	9a03      	ldr	r2, [sp, #12]
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;	//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter
 8002396:	f8d4 20fc 	ldr.w	r2, [r4, #252]	; 0xfc
 800239a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800239e:	f8c4 20fc 	str.w	r2, [r4, #252]	; 0xfc
	DWT->LAR = 0xC5ACCE55; 							//https://stackoverflow.com/questions/36378280/stm32-how-to-enable-dwt-cycle-counter 12.10.19 02:03
 80023a2:	f8c3 0fb0 	str.w	r0, [r3, #4016]	; 0xfb0
	DWT->CYCCNT = 0;								//https://www.carminenoviello.com/2015/09/04/precisely-measure-microseconds-stm32/ 12.10.19 01:30
 80023a6:	605f      	str	r7, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80023a8:	681a      	ldr	r2, [r3, #0]
	GPIO::EN(GPIOC);
 80023aa:	4869      	ldr	r0, [pc, #420]	; (8002550 <main+0x260>)
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80023ac:	f042 0201 	orr.w	r2, r2, #1
 80023b0:	601a      	str	r2, [r3, #0]
	GPIO::EN(GPIOC);
 80023b2:	f7fe fd81 	bl	8000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>
	GPIO::EN(GPIOB);
 80023b6:	4867      	ldr	r0, [pc, #412]	; (8002554 <main+0x264>)
 80023b8:	f7fe fd7e 	bl	8000eb8 <_ZN4GPIO2ENEP12GPIO_TypeDef>
	GPIO::MODE(GPIOC, 4, MODE_OUTPUT);
 80023bc:	2201      	movs	r2, #1
 80023be:	2104      	movs	r1, #4
 80023c0:	4863      	ldr	r0, [pc, #396]	; (8002550 <main+0x260>)
 80023c2:	f7fe fddf 	bl	8000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
	GPIO::MODE(GPIOB, 1, MODE_OUTPUT);
 80023c6:	2201      	movs	r2, #1
 80023c8:	4862      	ldr	r0, [pc, #392]	; (8002554 <main+0x264>)
 80023ca:	4611      	mov	r1, r2
	tim2_motor.EnableChannel(GPIOA, 0, GPIO_AF1_TIM2, 1);
 80023cc:	4614      	mov	r4, r2
	GPIO::MODE(GPIOB, 1, MODE_OUTPUT);
 80023ce:	f7fe fdd9 	bl	8000f84 <_ZN4GPIO4MODEEP12GPIO_TypeDefhh>
	spi3.Init();
 80023d2:	4861      	ldr	r0, [pc, #388]	; (8002558 <main+0x268>)
	imu.IMU_init_ok = false;
 80023d4:	f889 7000 	strb.w	r7, [r9]
	spi3.Init();
 80023d8:	f7ff fb32 	bl	8001a40 <_ZN3COM3SPI4InitEv>
	tim2_motor.Init();
 80023dc:	485f      	ldr	r0, [pc, #380]	; (800255c <main+0x26c>)
 80023de:	f7ff fcf7 	bl	8001dd0 <_ZN5TIMER3TIM4InitEv>
	tim3_controller.Init();
 80023e2:	485f      	ldr	r0, [pc, #380]	; (8002560 <main+0x270>)
 80023e4:	f7ff fcf4 	bl	8001dd0 <_ZN5TIMER3TIM4InitEv>
	tim4_controller.Init();
 80023e8:	485e      	ldr	r0, [pc, #376]	; (8002564 <main+0x274>)
 80023ea:	f7ff fcf1 	bl	8001dd0 <_ZN5TIMER3TIM4InitEv>
	tim5_trig.Init();
 80023ee:	485e      	ldr	r0, [pc, #376]	; (8002568 <main+0x278>)
 80023f0:	f7ff fcee 	bl	8001dd0 <_ZN5TIMER3TIM4InitEv>
	tim7_trig.Init();
 80023f4:	485d      	ldr	r0, [pc, #372]	; (800256c <main+0x27c>)
 80023f6:	f7ff fceb 	bl	8001dd0 <_ZN5TIMER3TIM4InitEv>
	tim5_trig.EnableUpdateInterrupt();
 80023fa:	485b      	ldr	r0, [pc, #364]	; (8002568 <main+0x278>)
 80023fc:	f7ff fd64 	bl	8001ec8 <_ZN5TIMER3TIM21EnableUpdateInterruptEv>
	tim7_trig.EnableUpdateInterrupt();
 8002400:	485a      	ldr	r0, [pc, #360]	; (800256c <main+0x27c>)
 8002402:	f7ff fd61 	bl	8001ec8 <_ZN5TIMER3TIM21EnableUpdateInterruptEv>
	tim2_motor.EnableChannel(GPIOA, 0, GPIO_AF1_TIM2, 1);
 8002406:	4623      	mov	r3, r4
 8002408:	463a      	mov	r2, r7
 800240a:	4959      	ldr	r1, [pc, #356]	; (8002570 <main+0x280>)
 800240c:	4853      	ldr	r0, [pc, #332]	; (800255c <main+0x26c>)
 800240e:	9400      	str	r4, [sp, #0]
 8002410:	f7ff fd66 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnableChannel(GPIOA, 1, GPIO_AF1_TIM2, 2);
 8002414:	4623      	mov	r3, r4
 8002416:	4622      	mov	r2, r4
 8002418:	4955      	ldr	r1, [pc, #340]	; (8002570 <main+0x280>)
 800241a:	4850      	ldr	r0, [pc, #320]	; (800255c <main+0x26c>)
 800241c:	9500      	str	r5, [sp, #0]
 800241e:	f7ff fd5f 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnableChannel(GPIOB, 10, GPIO_AF1_TIM2, 3);
 8002422:	4623      	mov	r3, r4
 8002424:	220a      	movs	r2, #10
 8002426:	494b      	ldr	r1, [pc, #300]	; (8002554 <main+0x264>)
 8002428:	484c      	ldr	r0, [pc, #304]	; (800255c <main+0x26c>)
 800242a:	9600      	str	r6, [sp, #0]
 800242c:	f7ff fd58 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnableChannel(GPIOB, 11, GPIO_AF1_TIM2, 4);
 8002430:	4623      	mov	r3, r4
 8002432:	220b      	movs	r2, #11
 8002434:	4849      	ldr	r0, [pc, #292]	; (800255c <main+0x26c>)
 8002436:	4947      	ldr	r1, [pc, #284]	; (8002554 <main+0x264>)
 8002438:	f8cd 8000 	str.w	r8, [sp]
 800243c:	f7ff fd50 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim2_motor.EnablePWM(1);
 8002440:	4621      	mov	r1, r4
 8002442:	4846      	ldr	r0, [pc, #280]	; (800255c <main+0x26c>)
 8002444:	f7ff fd86 	bl	8001f54 <_ZN5TIMER3TIM9EnablePWMEh>
	tim2_motor.EnablePWM(2);
 8002448:	4629      	mov	r1, r5
 800244a:	4844      	ldr	r0, [pc, #272]	; (800255c <main+0x26c>)
 800244c:	f7ff fd82 	bl	8001f54 <_ZN5TIMER3TIM9EnablePWMEh>
	tim2_motor.EnablePWM(3);
 8002450:	4631      	mov	r1, r6
 8002452:	4842      	ldr	r0, [pc, #264]	; (800255c <main+0x26c>)
 8002454:	f7ff fd7e 	bl	8001f54 <_ZN5TIMER3TIM9EnablePWMEh>
	tim2_motor.EnablePWM(4);
 8002458:	4641      	mov	r1, r8
 800245a:	4840      	ldr	r0, [pc, #256]	; (800255c <main+0x26c>)
 800245c:	f7ff fd7a 	bl	8001f54 <_ZN5TIMER3TIM9EnablePWMEh>
	tim3_controller.EnableChannel(GPIOB, 4, GPIO_AF2_TIM3, 1); //CH 1 ROLL
 8002460:	462b      	mov	r3, r5
 8002462:	4642      	mov	r2, r8
 8002464:	493b      	ldr	r1, [pc, #236]	; (8002554 <main+0x264>)
 8002466:	483e      	ldr	r0, [pc, #248]	; (8002560 <main+0x270>)
 8002468:	9400      	str	r4, [sp, #0]
 800246a:	f7ff fd39 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim3_controller.EnableChannel(GPIOB, 5, GPIO_AF2_TIM3, 2); //CH 2 PITCH
 800246e:	462b      	mov	r3, r5
 8002470:	2205      	movs	r2, #5
 8002472:	4938      	ldr	r1, [pc, #224]	; (8002554 <main+0x264>)
 8002474:	483a      	ldr	r0, [pc, #232]	; (8002560 <main+0x270>)
 8002476:	9500      	str	r5, [sp, #0]
 8002478:	f7ff fd32 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim3_controller.EnableChannel(GPIOB, 0, GPIO_AF2_TIM3, 3); //CH 3 THROTTLE
 800247c:	463a      	mov	r2, r7
 800247e:	462b      	mov	r3, r5
 8002480:	4934      	ldr	r1, [pc, #208]	; (8002554 <main+0x264>)
 8002482:	4837      	ldr	r0, [pc, #220]	; (8002560 <main+0x270>)
 8002484:	9600      	str	r6, [sp, #0]
 8002486:	f7ff fd2b 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim4_controller.EnableChannel(GPIOB, 8, GPIO_AF2_TIM4, 3); //CH 4 THROTTLE
 800248a:	462b      	mov	r3, r5
 800248c:	2208      	movs	r2, #8
 800248e:	4835      	ldr	r0, [pc, #212]	; (8002564 <main+0x274>)
 8002490:	4930      	ldr	r1, [pc, #192]	; (8002554 <main+0x264>)
 8002492:	9600      	str	r6, [sp, #0]
 8002494:	f7ff fd24 	bl	8001ee0 <_ZN5TIMER3TIM13EnableChannelEP12GPIO_TypeDefhhh>
	tim3_controller.EnableInputCapture(1);
 8002498:	4621      	mov	r1, r4
 800249a:	4831      	ldr	r0, [pc, #196]	; (8002560 <main+0x270>)
 800249c:	f7ff fe46 	bl	800212c <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim3_controller.EnableInputCapture(2);
 80024a0:	4629      	mov	r1, r5
 80024a2:	482f      	ldr	r0, [pc, #188]	; (8002560 <main+0x270>)
 80024a4:	f7ff fe42 	bl	800212c <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim3_controller.EnableInputCapture(3);
 80024a8:	4631      	mov	r1, r6
 80024aa:	482d      	ldr	r0, [pc, #180]	; (8002560 <main+0x270>)
 80024ac:	f7ff fe3e 	bl	800212c <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim4_controller.EnableInputCapture(3);
 80024b0:	4631      	mov	r1, r6
 80024b2:	482c      	ldr	r0, [pc, #176]	; (8002564 <main+0x274>)
 80024b4:	f7ff fe3a 	bl	800212c <_ZN5TIMER3TIM18EnableInputCaptureEh>
	tim2_motor.TIM_Start();
 80024b8:	4828      	ldr	r0, [pc, #160]	; (800255c <main+0x26c>)
 80024ba:	f7ff fda1 	bl	8002000 <_ZN5TIMER3TIM9TIM_StartEv>
	tim3_controller.TIM_Start();
 80024be:	4828      	ldr	r0, [pc, #160]	; (8002560 <main+0x270>)
 80024c0:	f7ff fd9e 	bl	8002000 <_ZN5TIMER3TIM9TIM_StartEv>
	tim4_controller.TIM_Start();
 80024c4:	4827      	ldr	r0, [pc, #156]	; (8002564 <main+0x274>)
 80024c6:	f7ff fd9b 	bl	8002000 <_ZN5TIMER3TIM9TIM_StartEv>
	tim5_trig.TIM_Start();
 80024ca:	4827      	ldr	r0, [pc, #156]	; (8002568 <main+0x278>)
 80024cc:	f7ff fd98 	bl	8002000 <_ZN5TIMER3TIM9TIM_StartEv>
	tim7_trig.TIM_Start();
 80024d0:	4826      	ldr	r0, [pc, #152]	; (800256c <main+0x27c>)
 80024d2:	f7ff fd95 	bl	8002000 <_ZN5TIMER3TIM9TIM_StartEv>
	imu.IMU_init_ok = imu.IMU_Init();
 80024d6:	4648      	mov	r0, r9
 80024d8:	f7fe fd8a 	bl	8000ff0 <_ZN7SENSORS3IMU8IMU_InitEv>
 80024dc:	f889 0000 	strb.w	r0, [r9]
	if(imu.IMU_init_ok){
 80024e0:	bb18      	cbnz	r0, 800252a <main+0x23a>
 80024e2:	f8df a094 	ldr.w	sl, [pc, #148]	; 8002578 <main+0x288>
		double start = DWT->CYCCNT;
 80024e6:	4e18      	ldr	r6, [pc, #96]	; (8002548 <main+0x258>)
		imu.IMU_readAngle();
 80024e8:	4f22      	ldr	r7, [pc, #136]	; (8002574 <main+0x284>)
		looptime = (stop - start)/216000000.0;
 80024ea:	f20f 094c 	addw	r9, pc, #76	; 0x4c
 80024ee:	e9d9 8900 	ldrd	r8, r9, [r9]
		imu.IMU_readAngle();
 80024f2:	4638      	mov	r0, r7
		double start = DWT->CYCCNT;
 80024f4:	f8d6 b004 	ldr.w	fp, [r6, #4]
		imu.IMU_readAngle();
 80024f8:	f7fe fe86 	bl	8001208 <_ZN7SENSORS3IMU13IMU_readAngleEv>
		double stop = DWT->CYCCNT;
 80024fc:	6870      	ldr	r0, [r6, #4]
 80024fe:	f7fd ffd1 	bl	80004a4 <__aeabi_ui2d>
 8002502:	4604      	mov	r4, r0
 8002504:	460d      	mov	r5, r1
		double start = DWT->CYCCNT;
 8002506:	4658      	mov	r0, fp
 8002508:	f7fd ffcc 	bl	80004a4 <__aeabi_ui2d>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
		looptime = (stop - start)/216000000.0;
 8002510:	4620      	mov	r0, r4
 8002512:	4629      	mov	r1, r5
 8002514:	f7fd fe88 	bl	8000228 <__aeabi_dsub>
 8002518:	4642      	mov	r2, r8
 800251a:	464b      	mov	r3, r9
 800251c:	f7fe f83c 	bl	8000598 <__aeabi_dmul>
 8002520:	f7fe fafc 	bl	8000b1c <__aeabi_d2f>
 8002524:	f8ca 0000 	str.w	r0, [sl]
	while (1){
 8002528:	e7e3      	b.n	80024f2 <main+0x202>
		GPIO::WRITE(GPIOC, 4, HIGH);
 800252a:	4622      	mov	r2, r4
 800252c:	4641      	mov	r1, r8
 800252e:	4808      	ldr	r0, [pc, #32]	; (8002550 <main+0x260>)
 8002530:	f7fe fd4a 	bl	8000fc8 <_ZN4GPIO5WRITEEP12GPIO_TypeDefhb>
 8002534:	e7d5      	b.n	80024e2 <main+0x1f2>
 8002536:	bf00      	nop
 8002538:	e465d72c 	.word	0xe465d72c
 800253c:	3e33e254 	.word	0x3e33e254
 8002540:	e000ed00 	.word	0xe000ed00
 8002544:	40023800 	.word	0x40023800
 8002548:	e0001000 	.word	0xe0001000
 800254c:	c5acce55 	.word	0xc5acce55
 8002550:	40020800 	.word	0x40020800
 8002554:	40020400 	.word	0x40020400
 8002558:	200002f4 	.word	0x200002f4
 800255c:	20000328 	.word	0x20000328
 8002560:	2000036c 	.word	0x2000036c
 8002564:	200003b0 	.word	0x200003b0
 8002568:	200003f4 	.word	0x200003f4
 800256c:	20000438 	.word	0x20000438
 8002570:	40020000 	.word	0x40020000
 8002574:	20000550 	.word	0x20000550
 8002578:	20000244 	.word	0x20000244

0800257c <_ZN5motorC1Ev>:

#include "motor.h"

motor::motor(){

}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <_ZN5motor8setMotorEv>:

void motor::setMotor(){
	if (THROTTLE < 100){
 8002580:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8002584:	2b63      	cmp	r3, #99	; 0x63
void motor::setMotor(){
 8002586:	b510      	push	{r4, lr}
 8002588:	4604      	mov	r4, r0
	if (THROTTLE < 100){
 800258a:	dc1a      	bgt.n	80025c2 <_ZN5motor8setMotorEv+0x42>
		for (int i = 0; i < 4 ;i++){
			motor_speed[i] = 1024;
 800258c:	f04f 2304 	mov.w	r3, #67109888	; 0x4000400
 8002590:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002594:	6083      	str	r3, [r0, #8]
 8002596:	60c3      	str	r3, [r0, #12]
				motor_speed[i] = 1024;
			}
		}
	}

	tim2_motor.PWM_setDutyCycle(1, motor_speed[0]);
 8002598:	2101      	movs	r1, #1
 800259a:	483c      	ldr	r0, [pc, #240]	; (800268c <_ZN5motor8setMotorEv+0x10c>)
 800259c:	f7ff fdb2 	bl	8002104 <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
	tim2_motor.PWM_setDutyCycle(2, motor_speed[1]);
 80025a0:	8962      	ldrh	r2, [r4, #10]
 80025a2:	2102      	movs	r1, #2
 80025a4:	4839      	ldr	r0, [pc, #228]	; (800268c <_ZN5motor8setMotorEv+0x10c>)
 80025a6:	f7ff fdad 	bl	8002104 <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
	tim2_motor.PWM_setDutyCycle(3, motor_speed[2]);
 80025aa:	89a2      	ldrh	r2, [r4, #12]
 80025ac:	2103      	movs	r1, #3
 80025ae:	4837      	ldr	r0, [pc, #220]	; (800268c <_ZN5motor8setMotorEv+0x10c>)
 80025b0:	f7ff fda8 	bl	8002104 <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
	tim2_motor.PWM_setDutyCycle(4, motor_speed[3]);
 80025b4:	89e2      	ldrh	r2, [r4, #14]
 80025b6:	2104      	movs	r1, #4
 80025b8:	4834      	ldr	r0, [pc, #208]	; (800268c <_ZN5motor8setMotorEv+0x10c>)

}
 80025ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tim2_motor.PWM_setDutyCycle(4, motor_speed[3]);
 80025be:	f7ff bda1 	b.w	8002104 <_ZN5TIMER3TIM16PWM_setDutyCycleEht>
		motor_speed[0] = (1024 + THROTTLE) + R_CORR + P_CORR + Y_CORR;
 80025c2:	8881      	ldrh	r1, [r0, #4]
 80025c4:	b29a      	uxth	r2, r3
 80025c6:	f8b0 c002 	ldrh.w	ip, [r0, #2]
 80025ca:	1853      	adds	r3, r2, r1
 80025cc:	8800      	ldrh	r0, [r0, #0]
		motor_speed[2] = (1024 + THROTTLE) - R_CORR - P_CORR + Y_CORR;
 80025ce:	1a52      	subs	r2, r2, r1
		motor_speed[0] = (1024 + THROTTLE) + R_CORR + P_CORR + Y_CORR;
 80025d0:	eb0c 0e00 	add.w	lr, ip, r0
		motor_speed[2] = (1024 + THROTTLE) - R_CORR - P_CORR + Y_CORR;
 80025d4:	f500 6180 	add.w	r1, r0, #1024	; 0x400
 80025d8:	b292      	uxth	r2, r2
		motor_speed[0] = (1024 + THROTTLE) + R_CORR + P_CORR + Y_CORR;
 80025da:	b29b      	uxth	r3, r3
 80025dc:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
		motor_speed[2] = (1024 + THROTTLE) - R_CORR - P_CORR + Y_CORR;
 80025e0:	4411      	add	r1, r2
		motor_speed[0] = (1024 + THROTTLE) + R_CORR + P_CORR + Y_CORR;
 80025e2:	449e      	add	lr, r3
		motor_speed[1] = (1024 + THROTTLE) + R_CORR - P_CORR - Y_CORR;
 80025e4:	eba3 030c 	sub.w	r3, r3, ip
		motor_speed[2] = (1024 + THROTTLE) - R_CORR - P_CORR + Y_CORR;
 80025e8:	eba1 010c 	sub.w	r1, r1, ip
		motor_speed[3] = (1024 + THROTTLE) - R_CORR + P_CORR - Y_CORR;
 80025ec:	f50c 6c80 	add.w	ip, ip, #1024	; 0x400
		motor_speed[1] = (1024 + THROTTLE) + R_CORR - P_CORR - Y_CORR;
 80025f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
		motor_speed[0] = (1024 + THROTTLE) + R_CORR + P_CORR + Y_CORR;
 80025f4:	fa0f fe8e 	sxth.w	lr, lr
		motor_speed[3] = (1024 + THROTTLE) - R_CORR + P_CORR - Y_CORR;
 80025f8:	4462      	add	r2, ip
		motor_speed[2] = (1024 + THROTTLE) - R_CORR - P_CORR + Y_CORR;
 80025fa:	b209      	sxth	r1, r1
		motor_speed[1] = (1024 + THROTTLE) + R_CORR - P_CORR - Y_CORR;
 80025fc:	1a1b      	subs	r3, r3, r0
			if (motor_speed[i] > 2048){
 80025fe:	f5be 6f00 	cmp.w	lr, #2048	; 0x800
		motor_speed[3] = (1024 + THROTTLE) - R_CORR + P_CORR - Y_CORR;
 8002602:	eba2 0200 	sub.w	r2, r2, r0
		motor_speed[0] = (1024 + THROTTLE) + R_CORR + P_CORR + Y_CORR;
 8002606:	f8a4 e008 	strh.w	lr, [r4, #8]
		motor_speed[1] = (1024 + THROTTLE) + R_CORR - P_CORR - Y_CORR;
 800260a:	b21b      	sxth	r3, r3
		motor_speed[2] = (1024 + THROTTLE) - R_CORR - P_CORR + Y_CORR;
 800260c:	81a1      	strh	r1, [r4, #12]
		motor_speed[3] = (1024 + THROTTLE) - R_CORR + P_CORR - Y_CORR;
 800260e:	b212      	sxth	r2, r2
		motor_speed[1] = (1024 + THROTTLE) + R_CORR - P_CORR - Y_CORR;
 8002610:	8163      	strh	r3, [r4, #10]
		motor_speed[3] = (1024 + THROTTLE) - R_CORR + P_CORR - Y_CORR;
 8002612:	81e2      	strh	r2, [r4, #14]
			if (motor_speed[i] > 2048){
 8002614:	dd16      	ble.n	8002644 <_ZN5motor8setMotorEv+0xc4>
				motor_speed[i] = 2048;
 8002616:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800261a:	8120      	strh	r0, [r4, #8]
			if (motor_speed[i] > 2048){
 800261c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002620:	dc19      	bgt.n	8002656 <_ZN5motor8setMotorEv+0xd6>
			else if(motor_speed[i] < 1024){
 8002622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002626:	db2d      	blt.n	8002684 <_ZN5motor8setMotorEv+0x104>
			if (motor_speed[i] > 2048){
 8002628:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800262c:	dc19      	bgt.n	8002662 <_ZN5motor8setMotorEv+0xe2>
			else if(motor_speed[i] < 1024){
 800262e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002632:	db23      	blt.n	800267c <_ZN5motor8setMotorEv+0xfc>
			if (motor_speed[i] > 2048){
 8002634:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002638:	dd19      	ble.n	800266e <_ZN5motor8setMotorEv+0xee>
				motor_speed[i] = 2048;
 800263a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800263e:	81e3      	strh	r3, [r4, #14]
	tim2_motor.PWM_setDutyCycle(1, motor_speed[0]);
 8002640:	8922      	ldrh	r2, [r4, #8]
 8002642:	e7a9      	b.n	8002598 <_ZN5motor8setMotorEv+0x18>
			else if(motor_speed[i] < 1024){
 8002644:	f5be 6f80 	cmp.w	lr, #1024	; 0x400
 8002648:	dae8      	bge.n	800261c <_ZN5motor8setMotorEv+0x9c>
				motor_speed[i] = 1024;
 800264a:	f44f 6080 	mov.w	r0, #1024	; 0x400
			if (motor_speed[i] > 2048){
 800264e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
				motor_speed[i] = 1024;
 8002652:	8120      	strh	r0, [r4, #8]
			if (motor_speed[i] > 2048){
 8002654:	dde5      	ble.n	8002622 <_ZN5motor8setMotorEv+0xa2>
				motor_speed[i] = 2048;
 8002656:	f44f 6300 	mov.w	r3, #2048	; 0x800
			if (motor_speed[i] > 2048){
 800265a:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
				motor_speed[i] = 2048;
 800265e:	8163      	strh	r3, [r4, #10]
			if (motor_speed[i] > 2048){
 8002660:	dde5      	ble.n	800262e <_ZN5motor8setMotorEv+0xae>
				motor_speed[i] = 2048;
 8002662:	f44f 6300 	mov.w	r3, #2048	; 0x800
			if (motor_speed[i] > 2048){
 8002666:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
				motor_speed[i] = 2048;
 800266a:	81a3      	strh	r3, [r4, #12]
			if (motor_speed[i] > 2048){
 800266c:	dce5      	bgt.n	800263a <_ZN5motor8setMotorEv+0xba>
			else if(motor_speed[i] < 1024){
 800266e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002672:	dae5      	bge.n	8002640 <_ZN5motor8setMotorEv+0xc0>
				motor_speed[i] = 1024;
 8002674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002678:	81e3      	strh	r3, [r4, #14]
 800267a:	e7e1      	b.n	8002640 <_ZN5motor8setMotorEv+0xc0>
 800267c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002680:	81a3      	strh	r3, [r4, #12]
 8002682:	e7d7      	b.n	8002634 <_ZN5motor8setMotorEv+0xb4>
 8002684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002688:	8163      	strh	r3, [r4, #10]
 800268a:	e7cd      	b.n	8002628 <_ZN5motor8setMotorEv+0xa8>
 800268c:	20000328 	.word	0x20000328

08002690 <_ZN8receiverC1Ev>:

#include "receiver.h"

receiver::receiver(){

}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <_ZN8receiver6getValEv>:

void receiver::getVal(){
	r_throttle = (uint16_t)(tim3_controller.CH_3_VAL) - 1499;
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <_ZN8receiver6getValEv+0x9c>)
	r_yaw = (uint16_t)(tim4_controller.CH_3_VAL) - 1499;
 8002696:	4a27      	ldr	r2, [pc, #156]	; (8002734 <_ZN8receiver6getValEv+0xa0>)
	r_throttle = (uint16_t)(tim3_controller.CH_3_VAL) - 1499;
 8002698:	f8b3 c008 	ldrh.w	ip, [r3, #8]
	r_yaw = (uint16_t)(tim4_controller.CH_3_VAL) - 1499;
 800269c:	8911      	ldrh	r1, [r2, #8]
	r_throttle = (uint16_t)(tim3_controller.CH_3_VAL) - 1499;
 800269e:	f2ac 5cdb 	subw	ip, ip, #1499	; 0x5db
	r_pitch = (uint16_t)(tim3_controller.CH_2_VAL) - 1499;
 80026a2:	889a      	ldrh	r2, [r3, #4]
	r_yaw = (uint16_t)(tim4_controller.CH_3_VAL) - 1499;
 80026a4:	f2a1 51db 	subw	r1, r1, #1499	; 0x5db
	r_roll = (uint16_t)(tim3_controller.CH_1_VAL) - 1499;
 80026a8:	881b      	ldrh	r3, [r3, #0]
	r_throttle = (uint16_t)(tim3_controller.CH_3_VAL) - 1499;
 80026aa:	ee07 ca90 	vmov	s15, ip
	r_pitch = (uint16_t)(tim3_controller.CH_2_VAL) - 1499;
 80026ae:	f2a2 52db 	subw	r2, r2, #1499	; 0x5db
	r_roll = (uint16_t)(tim3_controller.CH_1_VAL) - 1499;
 80026b2:	f2a3 53db 	subw	r3, r3, #1499	; 0x5db

	throttle = (uint16_t)((r_throttle/1500) * 1024);

	yaw = ((r_yaw/1500) * 90) - 45;
 80026b6:	ed9f 5a20 	vldr	s10, [pc, #128]	; 8002738 <_ZN8receiver6getValEv+0xa4>
	r_throttle = (uint16_t)(tim3_controller.CH_3_VAL) - 1499;
 80026ba:	eef8 5ae7 	vcvt.f32.s32	s11, s15
	r_yaw = (uint16_t)(tim4_controller.CH_3_VAL) - 1499;
 80026be:	ee07 1a90 	vmov	s15, r1
	throttle = (uint16_t)((r_throttle/1500) * 1024);
 80026c2:	ed9f 4a1e 	vldr	s8, [pc, #120]	; 800273c <_ZN8receiver6getValEv+0xa8>
	r_yaw = (uint16_t)(tim4_controller.CH_3_VAL) - 1499;
 80026c6:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	r_pitch = (uint16_t)(tim3_controller.CH_2_VAL) - 1499;
 80026ca:	ee07 2a90 	vmov	s15, r2
	r_throttle = (uint16_t)(tim3_controller.CH_3_VAL) - 1499;
 80026ce:	edc0 5a04 	vstr	s11, [r0, #16]
	r_pitch = (uint16_t)(tim3_controller.CH_2_VAL) - 1499;
 80026d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	r_roll = (uint16_t)(tim3_controller.CH_1_VAL) - 1499;
 80026d6:	ee07 3a90 	vmov	s15, r3
	r_yaw = (uint16_t)(tim4_controller.CH_3_VAL) - 1499;
 80026da:	ed80 6a05 	vstr	s12, [r0, #20]
	r_roll = (uint16_t)(tim3_controller.CH_1_VAL) - 1499;
 80026de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	yaw = ((r_yaw/1500) * 90) - 45;
 80026e2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8002740 <_ZN8receiver6getValEv+0xac>
	r_pitch = (uint16_t)(tim3_controller.CH_2_VAL) - 1499;
 80026e6:	edc0 6a06 	vstr	s13, [r0, #24]
	yaw = ((r_yaw/1500) * 90) - 45;
 80026ea:	eeb0 6a67 	vmov.f32	s12, s15
	r_roll = (uint16_t)(tim3_controller.CH_1_VAL) - 1499;
 80026ee:	ed80 7a07 	vstr	s14, [r0, #28]
	throttle = (uint16_t)((r_throttle/1500) * 1024);
 80026f2:	ed90 7a04 	vldr	s14, [r0, #16]
	yaw = ((r_yaw/1500) * 90) - 45;
 80026f6:	edd0 6a05 	vldr	s13, [r0, #20]
	throttle = (uint16_t)((r_throttle/1500) * 1024);
 80026fa:	ee27 7a04 	vmul.f32	s14, s14, s8
	pitch = ((r_pitch/1500) * 90) - 45;
 80026fe:	edd0 4a06 	vldr	s9, [r0, #24]
	yaw = ((r_yaw/1500) * 90) - 45;
 8002702:	eea6 6a85 	vfma.f32	s12, s13, s10
	roll = ((r_roll/1500) * 90) - 45;
 8002706:	edd0 5a07 	vldr	s11, [r0, #28]
	pitch = ((r_pitch/1500) * 90) - 45;
 800270a:	eef0 6a67 	vmov.f32	s13, s15
	roll = ((r_roll/1500) * 90) - 45;
 800270e:	eee5 7a85 	vfma.f32	s15, s11, s10
	throttle = (uint16_t)((r_throttle/1500) * 1024);
 8002712:	eebc 7ac7 	vcvt.u32.f32	s14, s14
	pitch = ((r_pitch/1500) * 90) - 45;
 8002716:	eee4 6a85 	vfma.f32	s13, s9, s10
	throttle = (uint16_t)((r_throttle/1500) * 1024);
 800271a:	ee17 3a10 	vmov	r3, s14
	yaw = ((r_yaw/1500) * 90) - 45;
 800271e:	ed80 6a00 	vstr	s12, [r0]
	throttle = (uint16_t)((r_throttle/1500) * 1024);
 8002722:	8183      	strh	r3, [r0, #12]
	roll = ((r_roll/1500) * 90) - 45;
 8002724:	edc0 7a02 	vstr	s15, [r0, #8]
	pitch = ((r_pitch/1500) * 90) - 45;
 8002728:	edc0 6a01 	vstr	s13, [r0, #4]
}
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	2000036c 	.word	0x2000036c
 8002734:	200003b0 	.word	0x200003b0
 8002738:	3d75c28f 	.word	0x3d75c28f
 800273c:	3f2ec33e 	.word	0x3f2ec33e
 8002740:	c2340000 	.word	0xc2340000

08002744 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <HAL_MspInit+0x2c>)
{
 8002746:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8002748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800274a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800274e:	641a      	str	r2, [r3, #64]	; 0x40
 8002750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002752:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800275c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002760:	645a      	str	r2, [r3, #68]	; 0x44
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002768:	9301      	str	r3, [sp, #4]
 800276a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800276c:	b002      	add	sp, #8
 800276e:	4770      	bx	lr
 8002770:	40023800 	.word	0x40023800

08002774 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002774:	e7fe      	b.n	8002774 <NMI_Handler>
 8002776:	bf00      	nop

08002778 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002778:	e7fe      	b.n	8002778 <HardFault_Handler>
 800277a:	bf00      	nop

0800277c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800277c:	e7fe      	b.n	800277c <MemManage_Handler>
 800277e:	bf00      	nop

08002780 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <BusFault_Handler>
 8002782:	bf00      	nop

08002784 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002784:	e7fe      	b.n	8002784 <UsageFault_Handler>
 8002786:	bf00      	nop

08002788 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop

0800278c <DebugMon_Handler>:
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop

08002790 <PendSV_Handler>:
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop

08002794 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002794:	f000 b864 	b.w	8002860 <HAL_IncTick>

08002798 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002798:	4a03      	ldr	r2, [pc, #12]	; (80027a8 <SystemInit+0x10>)
 800279a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800279e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80027ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027b0:	480d      	ldr	r0, [pc, #52]	; (80027e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027b2:	490e      	ldr	r1, [pc, #56]	; (80027ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027b4:	4a0e      	ldr	r2, [pc, #56]	; (80027f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027b8:	e002      	b.n	80027c0 <LoopCopyDataInit>

080027ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027be:	3304      	adds	r3, #4

080027c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027c4:	d3f9      	bcc.n	80027ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027c6:	4a0b      	ldr	r2, [pc, #44]	; (80027f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027c8:	4c0b      	ldr	r4, [pc, #44]	; (80027f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027cc:	e001      	b.n	80027d2 <LoopFillZerobss>

080027ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d0:	3204      	adds	r2, #4

080027d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027d4:	d3fb      	bcc.n	80027ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027d6:	f7ff ffdf 	bl	8002798 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027da:	f001 fd2b 	bl	8004234 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027de:	f7ff fd87 	bl	80022f0 <main>
  bx  lr    
 80027e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e4:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 80027e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027ec:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 80027f0:	080044a0 	.word	0x080044a0
  ldr r2, =_sbss
 80027f4:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 80027f8:	20000e24 	.word	0x20000e24

080027fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027fc:	e7fe      	b.n	80027fc <ADC_IRQHandler>
	...

08002800 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002800:	490e      	ldr	r1, [pc, #56]	; (800283c <HAL_InitTick+0x3c>)
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <HAL_InitTick+0x40>)
{
 8002808:	b510      	push	{r4, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800280a:	7809      	ldrb	r1, [r1, #0]
{
 800280c:	4604      	mov	r4, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	fbb3 f3f1 	udiv	r3, r3, r1
 8002814:	fbb2 f0f3 	udiv	r0, r2, r3
 8002818:	f000 f884 	bl	8002924 <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281c:	b908      	cbnz	r0, 8002822 <HAL_InitTick+0x22>
 800281e:	2c0f      	cmp	r4, #15
 8002820:	d901      	bls.n	8002826 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002822:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8002824:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002826:	2200      	movs	r2, #0
 8002828:	4621      	mov	r1, r4
 800282a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800282e:	f000 f83b 	bl	80028a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002832:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_InitTick+0x44>)
 8002834:	2000      	movs	r0, #0
 8002836:	601c      	str	r4, [r3, #0]
}
 8002838:	bd10      	pop	{r4, pc}
 800283a:	bf00      	nop
 800283c:	2000024c 	.word	0x2000024c
 8002840:	20000248 	.word	0x20000248
 8002844:	20000250 	.word	0x20000250

08002848 <HAL_Init>:
{
 8002848:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800284a:	2003      	movs	r0, #3
 800284c:	f000 f81a 	bl	8002884 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002850:	200f      	movs	r0, #15
 8002852:	f7ff ffd5 	bl	8002800 <HAL_InitTick>
  HAL_MspInit();
 8002856:	f7ff ff75 	bl	8002744 <HAL_MspInit>
}
 800285a:	2000      	movs	r0, #0
 800285c:	bd08      	pop	{r3, pc}
 800285e:	bf00      	nop

08002860 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002860:	4a03      	ldr	r2, [pc, #12]	; (8002870 <HAL_IncTick+0x10>)
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <HAL_IncTick+0x14>)
 8002864:	6811      	ldr	r1, [r2, #0]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	440b      	add	r3, r1
 800286a:	6013      	str	r3, [r2, #0]
}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20000ce8 	.word	0x20000ce8
 8002874:	2000024c 	.word	0x2000024c

08002878 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002878:	4b01      	ldr	r3, [pc, #4]	; (8002880 <HAL_GetTick+0x8>)
 800287a:	6818      	ldr	r0, [r3, #0]
}
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000ce8 	.word	0x20000ce8

08002884 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002884:	4906      	ldr	r1, [pc, #24]	; (80028a0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002886:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800288a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800288c:	4b05      	ldr	r3, [pc, #20]	; (80028a4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800288e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002890:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002894:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002898:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800289a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800289c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800289e:	4770      	bx	lr
 80028a0:	e000ed00 	.word	0xe000ed00
 80028a4:	05fa0000 	.word	0x05fa0000

080028a8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a8:	4b1b      	ldr	r3, [pc, #108]	; (8002918 <HAL_NVIC_SetPriority+0x70>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028b0:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028b2:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028ba:	f1be 0f04 	cmp.w	lr, #4
 80028be:	bf28      	it	cs
 80028c0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028c4:	f1bc 0f06 	cmp.w	ip, #6
 80028c8:	d91a      	bls.n	8002900 <HAL_NVIC_SetPriority+0x58>
 80028ca:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80028d0:	fa0c fc03 	lsl.w	ip, ip, r3
 80028d4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 80028dc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028de:	fa0c fc0e 	lsl.w	ip, ip, lr
 80028e2:	ea21 010c 	bic.w	r1, r1, ip
 80028e6:	fa01 f103 	lsl.w	r1, r1, r3
 80028ea:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80028ee:	db0a      	blt.n	8002906 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f0:	0109      	lsls	r1, r1, #4
 80028f2:	4b0a      	ldr	r3, [pc, #40]	; (800291c <HAL_NVIC_SetPriority+0x74>)
 80028f4:	b2c9      	uxtb	r1, r1
 80028f6:	4403      	add	r3, r0
 80028f8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8002900:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002902:	4613      	mov	r3, r2
 8002904:	e7e8      	b.n	80028d8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002906:	f000 000f 	and.w	r0, r0, #15
 800290a:	0109      	lsls	r1, r1, #4
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <HAL_NVIC_SetPriority+0x78>)
 800290e:	b2c9      	uxtb	r1, r1
 8002910:	4403      	add	r3, r0
 8002912:	7619      	strb	r1, [r3, #24]
 8002914:	f85d fb04 	ldr.w	pc, [sp], #4
 8002918:	e000ed00 	.word	0xe000ed00
 800291c:	e000e100 	.word	0xe000e100
 8002920:	e000ecfc 	.word	0xe000ecfc

08002924 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002924:	1e43      	subs	r3, r0, #1
 8002926:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800292a:	d20c      	bcs.n	8002946 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002930:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002932:	4906      	ldr	r1, [pc, #24]	; (800294c <HAL_SYSTICK_Config+0x28>)
 8002934:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002938:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800293a:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800293c:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002940:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002944:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002946:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_PWREx_EnableOverDrive+0x6c>)
 8002952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002954:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 8002958:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	641a      	str	r2, [r3, #64]	; 0x40
{
 800295c:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002960:	4c17      	ldr	r4, [pc, #92]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	9301      	str	r3, [sp, #4]
 8002968:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002972:	f7ff ff81 	bl	8002878 <HAL_GetTick>
 8002976:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002978:	e005      	b.n	8002986 <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800297a:	f7ff ff7d 	bl	8002878 <HAL_GetTick>
 800297e:	1b40      	subs	r0, r0, r5
 8002980:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002984:	d817      	bhi.n	80029b6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002986:	6863      	ldr	r3, [r4, #4]
 8002988:	03da      	lsls	r2, r3, #15
 800298a:	d5f6      	bpl.n	800297a <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800298c:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800298e:	4d0c      	ldr	r5, [pc, #48]	; (80029c0 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002996:	f7ff ff6f 	bl	8002878 <HAL_GetTick>
 800299a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800299c:	e005      	b.n	80029aa <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800299e:	f7ff ff6b 	bl	8002878 <HAL_GetTick>
 80029a2:	1b00      	subs	r0, r0, r4
 80029a4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80029a8:	d805      	bhi.n	80029b6 <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029aa:	686b      	ldr	r3, [r5, #4]
 80029ac:	039b      	lsls	r3, r3, #14
 80029ae:	d5f6      	bpl.n	800299e <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	b003      	add	sp, #12
 80029b4:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 80029b6:	2003      	movs	r0, #3
}
 80029b8:	b003      	add	sp, #12
 80029ba:	bd30      	pop	{r4, r5, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40007000 	.word	0x40007000

080029c4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c4:	2800      	cmp	r0, #0
 80029c6:	f000 81b6 	beq.w	8002d36 <HAL_RCC_OscConfig+0x372>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ca:	6803      	ldr	r3, [r0, #0]
{
 80029cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d0:	07dd      	lsls	r5, r3, #31
{
 80029d2:	b082      	sub	sp, #8
 80029d4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d6:	d535      	bpl.n	8002a44 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d8:	499a      	ldr	r1, [pc, #616]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 80029da:	688a      	ldr	r2, [r1, #8]
 80029dc:	f002 020c 	and.w	r2, r2, #12
 80029e0:	2a04      	cmp	r2, #4
 80029e2:	f000 80e0 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x1e2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	688a      	ldr	r2, [r1, #8]
 80029e8:	f002 020c 	and.w	r2, r2, #12
 80029ec:	2a08      	cmp	r2, #8
 80029ee:	f000 80d6 	beq.w	8002b9e <HAL_RCC_OscConfig+0x1da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029f2:	6863      	ldr	r3, [r4, #4]
 80029f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029f8:	d010      	beq.n	8002a1c <HAL_RCC_OscConfig+0x58>
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 80fd 	beq.w	8002bfa <HAL_RCC_OscConfig+0x236>
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	4b8f      	ldr	r3, [pc, #572]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	f000 8185 	beq.w	8002d16 <HAL_RCC_OscConfig+0x352>
 8002a0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002a10:	601a      	str	r2, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	e004      	b.n	8002a26 <HAL_RCC_OscConfig+0x62>
 8002a1c:	4a89      	ldr	r2, [pc, #548]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a26:	f7ff ff27 	bl	8002878 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4e86      	ldr	r6, [pc, #536]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 8002a2c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	e005      	b.n	8002a3c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7ff ff22 	bl	8002878 <HAL_GetTick>
 8002a34:	1b40      	subs	r0, r0, r5
 8002a36:	2864      	cmp	r0, #100	; 0x64
 8002a38:	f200 80db 	bhi.w	8002bf2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3c:	6833      	ldr	r3, [r6, #0]
 8002a3e:	039a      	lsls	r2, r3, #14
 8002a40:	d5f6      	bpl.n	8002a30 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	079f      	lsls	r7, r3, #30
 8002a46:	d527      	bpl.n	8002a98 <HAL_RCC_OscConfig+0xd4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a48:	4a7e      	ldr	r2, [pc, #504]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002a4a:	6891      	ldr	r1, [r2, #8]
 8002a4c:	f011 0f0c 	tst.w	r1, #12
 8002a50:	d07e      	beq.n	8002b50 <HAL_RCC_OscConfig+0x18c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	6891      	ldr	r1, [r2, #8]
 8002a54:	f001 010c 	and.w	r1, r1, #12
 8002a58:	2908      	cmp	r1, #8
 8002a5a:	d076      	beq.n	8002b4a <HAL_RCC_OscConfig+0x186>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a5c:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a5e:	4d79      	ldr	r5, [pc, #484]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 8104 	beq.w	8002c6e <HAL_RCC_OscConfig+0x2aa>
        __HAL_RCC_HSI_ENABLE();
 8002a66:	682b      	ldr	r3, [r5, #0]
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7ff ff03 	bl	8002878 <HAL_GetTick>
 8002a72:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a74:	e005      	b.n	8002a82 <HAL_RCC_OscConfig+0xbe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a76:	f7ff feff 	bl	8002878 <HAL_GetTick>
 8002a7a:	1b80      	subs	r0, r0, r6
 8002a7c:	2802      	cmp	r0, #2
 8002a7e:	f200 80b8 	bhi.w	8002bf2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a82:	682b      	ldr	r3, [r5, #0]
 8002a84:	0798      	lsls	r0, r3, #30
 8002a86:	d5f6      	bpl.n	8002a76 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	6922      	ldr	r2, [r4, #16]
 8002a8c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002a94:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	071a      	lsls	r2, r3, #28
 8002a9a:	d41f      	bmi.n	8002adc <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a9c:	075d      	lsls	r5, r3, #29
 8002a9e:	d534      	bpl.n	8002b0a <HAL_RCC_OscConfig+0x146>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aa0:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002aa2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aa4:	00d0      	lsls	r0, r2, #3
 8002aa6:	d56f      	bpl.n	8002b88 <HAL_RCC_OscConfig+0x1c4>
  FlagStatus pwrclkchanged = RESET;
 8002aa8:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aaa:	4e67      	ldr	r6, [pc, #412]	; (8002c48 <HAL_RCC_OscConfig+0x284>)
 8002aac:	6833      	ldr	r3, [r6, #0]
 8002aae:	05d9      	lsls	r1, r3, #23
 8002ab0:	f140 808f 	bpl.w	8002bd2 <HAL_RCC_OscConfig+0x20e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab4:	68a3      	ldr	r3, [r4, #8]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	f000 80eb 	beq.w	8002c92 <HAL_RCC_OscConfig+0x2ce>
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 80b2 	beq.w	8002c26 <HAL_RCC_OscConfig+0x262>
 8002ac2:	2b05      	cmp	r3, #5
 8002ac4:	4b5f      	ldr	r3, [pc, #380]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002ac6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ac8:	f000 812d 	beq.w	8002d26 <HAL_RCC_OscConfig+0x362>
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	671a      	str	r2, [r3, #112]	; 0x70
 8002ad2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ad4:	f022 0204 	bic.w	r2, r2, #4
 8002ad8:	671a      	str	r2, [r3, #112]	; 0x70
 8002ada:	e0df      	b.n	8002c9c <HAL_RCC_OscConfig+0x2d8>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002adc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4d59      	ldr	r5, [pc, #356]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d040      	beq.n	8002b66 <HAL_RCC_OscConfig+0x1a2>
      __HAL_RCC_LSI_ENABLE();
 8002ae4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002aec:	f7ff fec4 	bl	8002878 <HAL_GetTick>
 8002af0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e004      	b.n	8002afe <HAL_RCC_OscConfig+0x13a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af4:	f7ff fec0 	bl	8002878 <HAL_GetTick>
 8002af8:	1b80      	subs	r0, r0, r6
 8002afa:	2802      	cmp	r0, #2
 8002afc:	d879      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002afe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b00:	079b      	lsls	r3, r3, #30
 8002b02:	d5f7      	bpl.n	8002af4 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b04:	6823      	ldr	r3, [r4, #0]
 8002b06:	075d      	lsls	r5, r3, #29
 8002b08:	d4ca      	bmi.n	8002aa0 <HAL_RCC_OscConfig+0xdc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b0a:	69a0      	ldr	r0, [r4, #24]
 8002b0c:	b1c8      	cbz	r0, 8002b42 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0e:	4d4d      	ldr	r5, [pc, #308]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b10:	68ab      	ldr	r3, [r5, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	f000 80d3 	beq.w	8002cc2 <HAL_RCC_OscConfig+0x2fe>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1c:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b24:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b26:	f000 8108 	beq.w	8002d3a <HAL_RCC_OscConfig+0x376>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff fea5 	bl	8002878 <HAL_GetTick>
 8002b2e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b30:	e004      	b.n	8002b3c <HAL_RCC_OscConfig+0x178>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b32:	f7ff fea1 	bl	8002878 <HAL_GetTick>
 8002b36:	1b00      	subs	r0, r0, r4
 8002b38:	2802      	cmp	r0, #2
 8002b3a:	d85a      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	019b      	lsls	r3, r3, #6
 8002b40:	d4f7      	bmi.n	8002b32 <HAL_RCC_OscConfig+0x16e>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002b42:	2000      	movs	r0, #0
}
 8002b44:	b002      	add	sp, #8
 8002b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b4a:	6852      	ldr	r2, [r2, #4]
 8002b4c:	0256      	lsls	r6, r2, #9
 8002b4e:	d485      	bmi.n	8002a5c <HAL_RCC_OscConfig+0x98>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b50:	4a3c      	ldr	r2, [pc, #240]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	0795      	lsls	r5, r2, #30
 8002b56:	d530      	bpl.n	8002bba <HAL_RCC_OscConfig+0x1f6>
 8002b58:	68e2      	ldr	r2, [r4, #12]
 8002b5a:	2a01      	cmp	r2, #1
 8002b5c:	d02d      	beq.n	8002bba <HAL_RCC_OscConfig+0x1f6>
        return HAL_ERROR;
 8002b5e:	2001      	movs	r0, #1
}
 8002b60:	b002      	add	sp, #8
 8002b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002b66:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b68:	f023 0301 	bic.w	r3, r3, #1
 8002b6c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002b6e:	f7ff fe83 	bl	8002878 <HAL_GetTick>
 8002b72:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b74:	e004      	b.n	8002b80 <HAL_RCC_OscConfig+0x1bc>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b76:	f7ff fe7f 	bl	8002878 <HAL_GetTick>
 8002b7a:	1b80      	subs	r0, r0, r6
 8002b7c:	2802      	cmp	r0, #2
 8002b7e:	d838      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b80:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002b82:	079f      	lsls	r7, r3, #30
 8002b84:	d4f7      	bmi.n	8002b76 <HAL_RCC_OscConfig+0x1b2>
 8002b86:	e7bd      	b.n	8002b04 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8002b8a:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b98:	9301      	str	r3, [sp, #4]
 8002b9a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002b9c:	e785      	b.n	8002aaa <HAL_RCC_OscConfig+0xe6>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b9e:	684a      	ldr	r2, [r1, #4]
 8002ba0:	0250      	lsls	r0, r2, #9
 8002ba2:	f57f af26 	bpl.w	80029f2 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba6:	4a27      	ldr	r2, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	0391      	lsls	r1, r2, #14
 8002bac:	f57f af4a 	bpl.w	8002a44 <HAL_RCC_OscConfig+0x80>
 8002bb0:	6862      	ldr	r2, [r4, #4]
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	f47f af46 	bne.w	8002a44 <HAL_RCC_OscConfig+0x80>
 8002bb8:	e7d1      	b.n	8002b5e <HAL_RCC_OscConfig+0x19a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bba:	4922      	ldr	r1, [pc, #136]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002bbc:	6920      	ldr	r0, [r4, #16]
 8002bbe:	680a      	ldr	r2, [r1, #0]
 8002bc0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002bc4:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8002bc8:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bca:	071a      	lsls	r2, r3, #28
 8002bcc:	f57f af66 	bpl.w	8002a9c <HAL_RCC_OscConfig+0xd8>
 8002bd0:	e784      	b.n	8002adc <HAL_RCC_OscConfig+0x118>
      PWR->CR1 |= PWR_CR1_DBP;
 8002bd2:	6833      	ldr	r3, [r6, #0]
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002bda:	f7ff fe4d 	bl	8002878 <HAL_GetTick>
 8002bde:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002be0:	6833      	ldr	r3, [r6, #0]
 8002be2:	05da      	lsls	r2, r3, #23
 8002be4:	f53f af66 	bmi.w	8002ab4 <HAL_RCC_OscConfig+0xf0>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7ff fe46 	bl	8002878 <HAL_GetTick>
 8002bec:	1bc0      	subs	r0, r0, r7
 8002bee:	2864      	cmp	r0, #100	; 0x64
 8002bf0:	d9f6      	bls.n	8002be0 <HAL_RCC_OscConfig+0x21c>
            return HAL_TIMEOUT;
 8002bf2:	2003      	movs	r0, #3
}
 8002bf4:	b002      	add	sp, #8
 8002bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bfa:	4d12      	ldr	r5, [pc, #72]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	682b      	ldr	r3, [r5, #0]
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	602b      	str	r3, [r5, #0]
 8002c04:	682b      	ldr	r3, [r5, #0]
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fe34 	bl	8002878 <HAL_GetTick>
 8002c10:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	e004      	b.n	8002c1e <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff fe30 	bl	8002878 <HAL_GetTick>
 8002c18:	1b80      	subs	r0, r0, r6
 8002c1a:	2864      	cmp	r0, #100	; 0x64
 8002c1c:	d8e9      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c1e:	682b      	ldr	r3, [r5, #0]
 8002c20:	039b      	lsls	r3, r3, #14
 8002c22:	d4f7      	bmi.n	8002c14 <HAL_RCC_OscConfig+0x250>
 8002c24:	e70d      	b.n	8002a42 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c26:	4e07      	ldr	r6, [pc, #28]	; (8002c44 <HAL_RCC_OscConfig+0x280>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c28:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6733      	str	r3, [r6, #112]	; 0x70
 8002c34:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002c36:	f023 0304 	bic.w	r3, r3, #4
 8002c3a:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c3c:	f7ff fe1c 	bl	8002878 <HAL_GetTick>
 8002c40:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x292>
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c4c:	f7ff fe14 	bl	8002878 <HAL_GetTick>
 8002c50:	1bc0      	subs	r0, r0, r7
 8002c52:	4540      	cmp	r0, r8
 8002c54:	d8cd      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c56:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002c58:	0798      	lsls	r0, r3, #30
 8002c5a:	d4f7      	bmi.n	8002c4c <HAL_RCC_OscConfig+0x288>
    if (pwrclkchanged == SET)
 8002c5c:	2d00      	cmp	r5, #0
 8002c5e:	f43f af54 	beq.w	8002b0a <HAL_RCC_OscConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4a4e      	ldr	r2, [pc, #312]	; (8002d9c <HAL_RCC_OscConfig+0x3d8>)
 8002c64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6c:	e74d      	b.n	8002b0a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_DISABLE();
 8002c6e:	682b      	ldr	r3, [r5, #0]
 8002c70:	f023 0301 	bic.w	r3, r3, #1
 8002c74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002c76:	f7ff fdff 	bl	8002878 <HAL_GetTick>
 8002c7a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_OscConfig+0x2c4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c7e:	f7ff fdfb 	bl	8002878 <HAL_GetTick>
 8002c82:	1b80      	subs	r0, r0, r6
 8002c84:	2802      	cmp	r0, #2
 8002c86:	d8b4      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c88:	682b      	ldr	r3, [r5, #0]
 8002c8a:	0799      	lsls	r1, r3, #30
 8002c8c:	d4f7      	bmi.n	8002c7e <HAL_RCC_OscConfig+0x2ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c8e:	6823      	ldr	r3, [r4, #0]
 8002c90:	e702      	b.n	8002a98 <HAL_RCC_OscConfig+0xd4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c92:	4a42      	ldr	r2, [pc, #264]	; (8002d9c <HAL_RCC_OscConfig+0x3d8>)
 8002c94:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002c96:	f043 0301 	orr.w	r3, r3, #1
 8002c9a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002c9c:	f7ff fdec 	bl	8002878 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca0:	4f3e      	ldr	r7, [pc, #248]	; (8002d9c <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ca6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca8:	e004      	b.n	8002cb4 <HAL_RCC_OscConfig+0x2f0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002caa:	f7ff fde5 	bl	8002878 <HAL_GetTick>
 8002cae:	1b80      	subs	r0, r0, r6
 8002cb0:	4540      	cmp	r0, r8
 8002cb2:	d89e      	bhi.n	8002bf2 <HAL_RCC_OscConfig+0x22e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cb6:	079b      	lsls	r3, r3, #30
 8002cb8:	d5f7      	bpl.n	8002caa <HAL_RCC_OscConfig+0x2e6>
    if (pwrclkchanged == SET)
 8002cba:	2d00      	cmp	r5, #0
 8002cbc:	f43f af25 	beq.w	8002b0a <HAL_RCC_OscConfig+0x146>
 8002cc0:	e7cf      	b.n	8002c62 <HAL_RCC_OscConfig+0x29e>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc2:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8002cc4:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc6:	f43f af3d 	beq.w	8002b44 <HAL_RCC_OscConfig+0x180>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cce:	69e1      	ldr	r1, [r4, #28]
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	f47f af44 	bne.w	8002b5e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cd6:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cda:	6a21      	ldr	r1, [r4, #32]
 8002cdc:	428b      	cmp	r3, r1
 8002cde:	f47f af3e 	bne.w	8002b5e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ce2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002ce8:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cea:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 8002cee:	f47f af36 	bne.w	8002b5e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002cf4:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 8002cf8:	085b      	lsrs	r3, r3, #1
 8002cfa:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002cfc:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 8002d00:	f47f af2d 	bne.w	8002b5e <HAL_RCC_OscConfig+0x19a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d06:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002d0a:	ebb2 6f03 	cmp.w	r2, r3, lsl #24
    return HAL_ERROR;
 8002d0e:	bf14      	ite	ne
 8002d10:	2001      	movne	r0, #1
 8002d12:	2000      	moveq	r0, #0
 8002d14:	e716      	b.n	8002b44 <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	e67f      	b.n	8002a26 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d26:	f042 0204 	orr.w	r2, r2, #4
 8002d2a:	671a      	str	r2, [r3, #112]	; 0x70
 8002d2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d2e:	f042 0201 	orr.w	r2, r2, #1
 8002d32:	671a      	str	r2, [r3, #112]	; 0x70
 8002d34:	e7b2      	b.n	8002c9c <HAL_RCC_OscConfig+0x2d8>
    return HAL_ERROR;
 8002d36:	2001      	movs	r0, #1
}
 8002d38:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002d3a:	f7ff fd9d 	bl	8002878 <HAL_GetTick>
 8002d3e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d40:	e005      	b.n	8002d4e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7ff fd99 	bl	8002878 <HAL_GetTick>
 8002d46:	1b80      	subs	r0, r0, r6
 8002d48:	2802      	cmp	r0, #2
 8002d4a:	f63f af52 	bhi.w	8002bf2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	682b      	ldr	r3, [r5, #0]
 8002d50:	0199      	lsls	r1, r3, #6
 8002d52:	d4f6      	bmi.n	8002d42 <HAL_RCC_OscConfig+0x37e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002d56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d58:	0852      	lsrs	r2, r2, #1
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	4e10      	ldr	r6, [pc, #64]	; (8002d9c <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d5c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002d60:	3a01      	subs	r2, #1
 8002d62:	430b      	orrs	r3, r1
 8002d64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002d66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d6a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002d6e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002d72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002d78:	682b      	ldr	r3, [r5, #0]
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002d80:	f7ff fd7a 	bl	8002878 <HAL_GetTick>
 8002d84:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	e005      	b.n	8002d94 <HAL_RCC_OscConfig+0x3d0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7ff fd76 	bl	8002878 <HAL_GetTick>
 8002d8c:	1b00      	subs	r0, r0, r4
 8002d8e:	2802      	cmp	r0, #2
 8002d90:	f63f af2f 	bhi.w	8002bf2 <HAL_RCC_OscConfig+0x22e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d94:	6833      	ldr	r3, [r6, #0]
 8002d96:	019a      	lsls	r2, r3, #6
 8002d98:	d5f6      	bpl.n	8002d88 <HAL_RCC_OscConfig+0x3c4>
 8002d9a:	e6d2      	b.n	8002b42 <HAL_RCC_OscConfig+0x17e>
 8002d9c:	40023800 	.word	0x40023800

08002da0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002da0:	2800      	cmp	r0, #0
 8002da2:	f000 80b3 	beq.w	8002f0c <HAL_RCC_ClockConfig+0x16c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002da6:	4a61      	ldr	r2, [pc, #388]	; (8002f2c <HAL_RCC_ClockConfig+0x18c>)
 8002da8:	6813      	ldr	r3, [r2, #0]
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	428b      	cmp	r3, r1
{
 8002db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db4:	4604      	mov	r4, r0
 8002db6:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002db8:	d20c      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x34>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dba:	6813      	ldr	r3, [r2, #0]
 8002dbc:	f023 030f 	bic.w	r3, r3, #15
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc4:	6813      	ldr	r3, [r2, #0]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	428b      	cmp	r3, r1
 8002dcc:	d002      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002dce:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);

  return HAL_OK;
}
 8002dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	0798      	lsls	r0, r3, #30
 8002dd8:	d514      	bpl.n	8002e04 <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dda:	0759      	lsls	r1, r3, #29
 8002ddc:	d504      	bpl.n	8002de8 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dde:	4954      	ldr	r1, [pc, #336]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002de0:	688a      	ldr	r2, [r1, #8]
 8002de2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002de6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	071a      	lsls	r2, r3, #28
 8002dea:	d504      	bpl.n	8002df6 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dec:	4950      	ldr	r1, [pc, #320]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002dee:	688a      	ldr	r2, [r1, #8]
 8002df0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002df4:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002df6:	494e      	ldr	r1, [pc, #312]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002df8:	68a0      	ldr	r0, [r4, #8]
 8002dfa:	688a      	ldr	r2, [r1, #8]
 8002dfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e00:	4302      	orrs	r2, r0
 8002e02:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e04:	07df      	lsls	r7, r3, #31
 8002e06:	d520      	bpl.n	8002e4a <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e08:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b49      	ldr	r3, [pc, #292]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0c:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0e:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e10:	d07e      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x170>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e12:	2a02      	cmp	r2, #2
 8002e14:	d077      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x166>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e16:	0799      	lsls	r1, r3, #30
 8002e18:	d5d9      	bpl.n	8002dce <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e1a:	4e45      	ldr	r6, [pc, #276]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e1c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e20:	68b3      	ldr	r3, [r6, #8]
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002e2a:	f7ff fd25 	bl	8002878 <HAL_GetTick>
 8002e2e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e30:	e004      	b.n	8002e3c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e32:	f7ff fd21 	bl	8002878 <HAL_GetTick>
 8002e36:	1bc0      	subs	r0, r0, r7
 8002e38:	4540      	cmp	r0, r8
 8002e3a:	d86c      	bhi.n	8002f16 <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	68b3      	ldr	r3, [r6, #8]
 8002e3e:	6862      	ldr	r2, [r4, #4]
 8002e40:	f003 030c 	and.w	r3, r3, #12
 8002e44:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e48:	d1f3      	bne.n	8002e32 <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e4a:	4a38      	ldr	r2, [pc, #224]	; (8002f2c <HAL_RCC_ClockConfig+0x18c>)
 8002e4c:	6813      	ldr	r3, [r2, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	42ab      	cmp	r3, r5
 8002e54:	d909      	bls.n	8002e6a <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	6813      	ldr	r3, [r2, #0]
 8002e58:	f023 030f 	bic.w	r3, r3, #15
 8002e5c:	432b      	orrs	r3, r5
 8002e5e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e60:	6813      	ldr	r3, [r2, #0]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	42ab      	cmp	r3, r5
 8002e68:	d1b1      	bne.n	8002dce <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	075a      	lsls	r2, r3, #29
 8002e6e:	d506      	bpl.n	8002e7e <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e70:	492f      	ldr	r1, [pc, #188]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002e72:	68e0      	ldr	r0, [r4, #12]
 8002e74:	688a      	ldr	r2, [r1, #8]
 8002e76:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002e7a:	4302      	orrs	r2, r0
 8002e7c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7e:	071b      	lsls	r3, r3, #28
 8002e80:	d431      	bmi.n	8002ee6 <HAL_RCC_ClockConfig+0x146>
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e82:	492b      	ldr	r1, [pc, #172]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002e84:	688b      	ldr	r3, [r1, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d039      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x162>
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d118      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e92:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e94:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e96:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002e9c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 8002ea0:	d03b      	beq.n	8002f1a <HAL_RCC_ClockConfig+0x17a>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea2:	4824      	ldr	r0, [pc, #144]	; (8002f34 <HAL_RCC_ClockConfig+0x194>)
 8002ea4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	fba1 0100 	umull	r0, r1, r1, r0
 8002eae:	f7fd fe85 	bl	8000bbc <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002eb2:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002eba:	3301      	adds	r3, #1
 8002ebc:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002ebe:	fbb0 f3f3 	udiv	r3, r0, r3
    {
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
 8002ec2:	e000      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x126>
      sysclockfreq = HSI_VALUE;
 8002ec4:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ec6:	4a1a      	ldr	r2, [pc, #104]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002ec8:	4c1c      	ldr	r4, [pc, #112]	; (8002f3c <HAL_RCC_ClockConfig+0x19c>)
 8002eca:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 8002ecc:	481c      	ldr	r0, [pc, #112]	; (8002f40 <HAL_RCC_ClockConfig+0x1a0>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ece:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002ed2:	491c      	ldr	r1, [pc, #112]	; (8002f44 <HAL_RCC_ClockConfig+0x1a4>)
  HAL_InitTick(uwTickPrio);
 8002ed4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ed6:	5ca2      	ldrb	r2, [r4, r2]
 8002ed8:	40d3      	lsrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8002edc:	f7ff fc90 	bl	8002800 <HAL_InitTick>
  return HAL_OK;
 8002ee0:	2000      	movs	r0, #0
}
 8002ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ee6:	4a12      	ldr	r2, [pc, #72]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
 8002ee8:	6921      	ldr	r1, [r4, #16]
 8002eea:	6893      	ldr	r3, [r2, #8]
 8002eec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002ef0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef4:	490e      	ldr	r1, [pc, #56]	; (8002f30 <HAL_RCC_ClockConfig+0x190>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ef6:	6093      	str	r3, [r2, #8]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef8:	688b      	ldr	r3, [r1, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d1c5      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xee>
 8002f02:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <HAL_RCC_ClockConfig+0x194>)
 8002f04:	e7df      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x126>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f06:	0198      	lsls	r0, r3, #6
 8002f08:	d487      	bmi.n	8002e1a <HAL_RCC_ClockConfig+0x7a>
 8002f0a:	e760      	b.n	8002dce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002f0c:	2001      	movs	r0, #1
}
 8002f0e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f10:	039e      	lsls	r6, r3, #14
 8002f12:	d482      	bmi.n	8002e1a <HAL_RCC_ClockConfig+0x7a>
 8002f14:	e75b      	b.n	8002dce <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002f16:	2003      	movs	r0, #3
 8002f18:	e75a      	b.n	8002dd0 <HAL_RCC_ClockConfig+0x30>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <HAL_RCC_ClockConfig+0x198>)
 8002f1c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f20:	fba1 0100 	umull	r0, r1, r1, r0
 8002f24:	f7fd fe4a 	bl	8000bbc <__aeabi_uldivmod>
 8002f28:	e7c3      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x112>
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00
 8002f30:	40023800 	.word	0x40023800
 8002f34:	007a1200 	.word	0x007a1200
 8002f38:	00f42400 	.word	0x00f42400
 8002f3c:	08004298 	.word	0x08004298
 8002f40:	20000250 	.word	0x20000250
 8002f44:	20000248 	.word	0x20000248

08002f48 <sin>:
 8002f48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f4a:	ec53 2b10 	vmov	r2, r3, d0
 8002f4e:	4828      	ldr	r0, [pc, #160]	; (8002ff0 <sin+0xa8>)
 8002f50:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8002f54:	4281      	cmp	r1, r0
 8002f56:	dc07      	bgt.n	8002f68 <sin+0x20>
 8002f58:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002fe8 <sin+0xa0>
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	b005      	add	sp, #20
 8002f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f64:	f000 b94c 	b.w	8003200 <__kernel_sin>
 8002f68:	4822      	ldr	r0, [pc, #136]	; (8002ff4 <sin+0xac>)
 8002f6a:	4281      	cmp	r1, r0
 8002f6c:	dd09      	ble.n	8002f82 <sin+0x3a>
 8002f6e:	ee10 0a10 	vmov	r0, s0
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd f958 	bl	8000228 <__aeabi_dsub>
 8002f78:	ec41 0b10 	vmov	d0, r0, r1
 8002f7c:	b005      	add	sp, #20
 8002f7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002f82:	4668      	mov	r0, sp
 8002f84:	f000 f9fc 	bl	8003380 <__ieee754_rem_pio2>
 8002f88:	f000 0003 	and.w	r0, r0, #3
 8002f8c:	2801      	cmp	r0, #1
 8002f8e:	d00c      	beq.n	8002faa <sin+0x62>
 8002f90:	2802      	cmp	r0, #2
 8002f92:	d011      	beq.n	8002fb8 <sin+0x70>
 8002f94:	b9f0      	cbnz	r0, 8002fd4 <sin+0x8c>
 8002f96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002f9a:	ed9d 0b00 	vldr	d0, [sp]
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f000 f92e 	bl	8003200 <__kernel_sin>
 8002fa4:	ec51 0b10 	vmov	r0, r1, d0
 8002fa8:	e7e6      	b.n	8002f78 <sin+0x30>
 8002faa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002fae:	ed9d 0b00 	vldr	d0, [sp]
 8002fb2:	f000 f85d 	bl	8003070 <__kernel_cos>
 8002fb6:	e7f5      	b.n	8002fa4 <sin+0x5c>
 8002fb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002fbc:	ed9d 0b00 	vldr	d0, [sp]
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f000 f91d 	bl	8003200 <__kernel_sin>
 8002fc6:	ec53 2b10 	vmov	r2, r3, d0
 8002fca:	ee10 0a10 	vmov	r0, s0
 8002fce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8002fd2:	e7d1      	b.n	8002f78 <sin+0x30>
 8002fd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002fd8:	ed9d 0b00 	vldr	d0, [sp]
 8002fdc:	f000 f848 	bl	8003070 <__kernel_cos>
 8002fe0:	e7f1      	b.n	8002fc6 <sin+0x7e>
 8002fe2:	bf00      	nop
 8002fe4:	f3af 8000 	nop.w
	...
 8002ff0:	3fe921fb 	.word	0x3fe921fb
 8002ff4:	7fefffff 	.word	0x7fefffff

08002ff8 <asinf>:
 8002ff8:	b508      	push	{r3, lr}
 8002ffa:	ed2d 8b02 	vpush	{d8}
 8002ffe:	eeb0 8a40 	vmov.f32	s16, s0
 8003002:	f000 fbcd 	bl	80037a0 <__ieee754_asinf>
 8003006:	eeb4 8a48 	vcmp.f32	s16, s16
 800300a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800300e:	eef0 8a40 	vmov.f32	s17, s0
 8003012:	d615      	bvs.n	8003040 <asinf+0x48>
 8003014:	eeb0 0a48 	vmov.f32	s0, s16
 8003018:	f000 f81a 	bl	8003050 <fabsf>
 800301c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003020:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003028:	dd0a      	ble.n	8003040 <asinf+0x48>
 800302a:	f001 f8fd 	bl	8004228 <__errno>
 800302e:	ecbd 8b02 	vpop	{d8}
 8003032:	2321      	movs	r3, #33	; 0x21
 8003034:	6003      	str	r3, [r0, #0]
 8003036:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800303a:	4804      	ldr	r0, [pc, #16]	; (800304c <asinf+0x54>)
 800303c:	f000 b810 	b.w	8003060 <nanf>
 8003040:	eeb0 0a68 	vmov.f32	s0, s17
 8003044:	ecbd 8b02 	vpop	{d8}
 8003048:	bd08      	pop	{r3, pc}
 800304a:	bf00      	nop
 800304c:	080042a8 	.word	0x080042a8

08003050 <fabsf>:
 8003050:	ee10 3a10 	vmov	r3, s0
 8003054:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003058:	ee00 3a10 	vmov	s0, r3
 800305c:	4770      	bx	lr
	...

08003060 <nanf>:
 8003060:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003068 <nanf+0x8>
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	7fc00000 	.word	0x7fc00000
 800306c:	00000000 	.word	0x00000000

08003070 <__kernel_cos>:
 8003070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	ec57 6b10 	vmov	r6, r7, d0
 8003078:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800307c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003080:	ed8d 1b00 	vstr	d1, [sp]
 8003084:	da07      	bge.n	8003096 <__kernel_cos+0x26>
 8003086:	ee10 0a10 	vmov	r0, s0
 800308a:	4639      	mov	r1, r7
 800308c:	f7fd fd1e 	bl	8000acc <__aeabi_d2iz>
 8003090:	2800      	cmp	r0, #0
 8003092:	f000 8088 	beq.w	80031a6 <__kernel_cos+0x136>
 8003096:	4632      	mov	r2, r6
 8003098:	463b      	mov	r3, r7
 800309a:	4630      	mov	r0, r6
 800309c:	4639      	mov	r1, r7
 800309e:	f7fd fa7b 	bl	8000598 <__aeabi_dmul>
 80030a2:	4b51      	ldr	r3, [pc, #324]	; (80031e8 <__kernel_cos+0x178>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	4604      	mov	r4, r0
 80030a8:	460d      	mov	r5, r1
 80030aa:	f7fd fa75 	bl	8000598 <__aeabi_dmul>
 80030ae:	a340      	add	r3, pc, #256	; (adr r3, 80031b0 <__kernel_cos+0x140>)
 80030b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b4:	4682      	mov	sl, r0
 80030b6:	468b      	mov	fp, r1
 80030b8:	4620      	mov	r0, r4
 80030ba:	4629      	mov	r1, r5
 80030bc:	f7fd fa6c 	bl	8000598 <__aeabi_dmul>
 80030c0:	a33d      	add	r3, pc, #244	; (adr r3, 80031b8 <__kernel_cos+0x148>)
 80030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c6:	f7fd f8b1 	bl	800022c <__adddf3>
 80030ca:	4622      	mov	r2, r4
 80030cc:	462b      	mov	r3, r5
 80030ce:	f7fd fa63 	bl	8000598 <__aeabi_dmul>
 80030d2:	a33b      	add	r3, pc, #236	; (adr r3, 80031c0 <__kernel_cos+0x150>)
 80030d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d8:	f7fd f8a6 	bl	8000228 <__aeabi_dsub>
 80030dc:	4622      	mov	r2, r4
 80030de:	462b      	mov	r3, r5
 80030e0:	f7fd fa5a 	bl	8000598 <__aeabi_dmul>
 80030e4:	a338      	add	r3, pc, #224	; (adr r3, 80031c8 <__kernel_cos+0x158>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f7fd f89f 	bl	800022c <__adddf3>
 80030ee:	4622      	mov	r2, r4
 80030f0:	462b      	mov	r3, r5
 80030f2:	f7fd fa51 	bl	8000598 <__aeabi_dmul>
 80030f6:	a336      	add	r3, pc, #216	; (adr r3, 80031d0 <__kernel_cos+0x160>)
 80030f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fc:	f7fd f894 	bl	8000228 <__aeabi_dsub>
 8003100:	4622      	mov	r2, r4
 8003102:	462b      	mov	r3, r5
 8003104:	f7fd fa48 	bl	8000598 <__aeabi_dmul>
 8003108:	a333      	add	r3, pc, #204	; (adr r3, 80031d8 <__kernel_cos+0x168>)
 800310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310e:	f7fd f88d 	bl	800022c <__adddf3>
 8003112:	4622      	mov	r2, r4
 8003114:	462b      	mov	r3, r5
 8003116:	f7fd fa3f 	bl	8000598 <__aeabi_dmul>
 800311a:	4622      	mov	r2, r4
 800311c:	462b      	mov	r3, r5
 800311e:	f7fd fa3b 	bl	8000598 <__aeabi_dmul>
 8003122:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003126:	4604      	mov	r4, r0
 8003128:	460d      	mov	r5, r1
 800312a:	4630      	mov	r0, r6
 800312c:	4639      	mov	r1, r7
 800312e:	f7fd fa33 	bl	8000598 <__aeabi_dmul>
 8003132:	460b      	mov	r3, r1
 8003134:	4602      	mov	r2, r0
 8003136:	4629      	mov	r1, r5
 8003138:	4620      	mov	r0, r4
 800313a:	f7fd f875 	bl	8000228 <__aeabi_dsub>
 800313e:	4b2b      	ldr	r3, [pc, #172]	; (80031ec <__kernel_cos+0x17c>)
 8003140:	4598      	cmp	r8, r3
 8003142:	4606      	mov	r6, r0
 8003144:	460f      	mov	r7, r1
 8003146:	dc10      	bgt.n	800316a <__kernel_cos+0xfa>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4650      	mov	r0, sl
 800314e:	4659      	mov	r1, fp
 8003150:	f7fd f86a 	bl	8000228 <__aeabi_dsub>
 8003154:	460b      	mov	r3, r1
 8003156:	4926      	ldr	r1, [pc, #152]	; (80031f0 <__kernel_cos+0x180>)
 8003158:	4602      	mov	r2, r0
 800315a:	2000      	movs	r0, #0
 800315c:	f7fd f864 	bl	8000228 <__aeabi_dsub>
 8003160:	ec41 0b10 	vmov	d0, r0, r1
 8003164:	b003      	add	sp, #12
 8003166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800316a:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <__kernel_cos+0x184>)
 800316c:	4920      	ldr	r1, [pc, #128]	; (80031f0 <__kernel_cos+0x180>)
 800316e:	4598      	cmp	r8, r3
 8003170:	bfcc      	ite	gt
 8003172:	4d21      	ldrgt	r5, [pc, #132]	; (80031f8 <__kernel_cos+0x188>)
 8003174:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003178:	2400      	movs	r4, #0
 800317a:	4622      	mov	r2, r4
 800317c:	462b      	mov	r3, r5
 800317e:	2000      	movs	r0, #0
 8003180:	f7fd f852 	bl	8000228 <__aeabi_dsub>
 8003184:	4622      	mov	r2, r4
 8003186:	4680      	mov	r8, r0
 8003188:	4689      	mov	r9, r1
 800318a:	462b      	mov	r3, r5
 800318c:	4650      	mov	r0, sl
 800318e:	4659      	mov	r1, fp
 8003190:	f7fd f84a 	bl	8000228 <__aeabi_dsub>
 8003194:	4632      	mov	r2, r6
 8003196:	463b      	mov	r3, r7
 8003198:	f7fd f846 	bl	8000228 <__aeabi_dsub>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4640      	mov	r0, r8
 80031a2:	4649      	mov	r1, r9
 80031a4:	e7da      	b.n	800315c <__kernel_cos+0xec>
 80031a6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80031e0 <__kernel_cos+0x170>
 80031aa:	e7db      	b.n	8003164 <__kernel_cos+0xf4>
 80031ac:	f3af 8000 	nop.w
 80031b0:	be8838d4 	.word	0xbe8838d4
 80031b4:	bda8fae9 	.word	0xbda8fae9
 80031b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80031bc:	3e21ee9e 	.word	0x3e21ee9e
 80031c0:	809c52ad 	.word	0x809c52ad
 80031c4:	3e927e4f 	.word	0x3e927e4f
 80031c8:	19cb1590 	.word	0x19cb1590
 80031cc:	3efa01a0 	.word	0x3efa01a0
 80031d0:	16c15177 	.word	0x16c15177
 80031d4:	3f56c16c 	.word	0x3f56c16c
 80031d8:	5555554c 	.word	0x5555554c
 80031dc:	3fa55555 	.word	0x3fa55555
 80031e0:	00000000 	.word	0x00000000
 80031e4:	3ff00000 	.word	0x3ff00000
 80031e8:	3fe00000 	.word	0x3fe00000
 80031ec:	3fd33332 	.word	0x3fd33332
 80031f0:	3ff00000 	.word	0x3ff00000
 80031f4:	3fe90000 	.word	0x3fe90000
 80031f8:	3fd20000 	.word	0x3fd20000
 80031fc:	00000000 	.word	0x00000000

08003200 <__kernel_sin>:
 8003200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003204:	ed2d 8b04 	vpush	{d8-d9}
 8003208:	eeb0 8a41 	vmov.f32	s16, s2
 800320c:	eef0 8a61 	vmov.f32	s17, s3
 8003210:	ec55 4b10 	vmov	r4, r5, d0
 8003214:	b083      	sub	sp, #12
 8003216:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800321a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800321e:	9001      	str	r0, [sp, #4]
 8003220:	da06      	bge.n	8003230 <__kernel_sin+0x30>
 8003222:	ee10 0a10 	vmov	r0, s0
 8003226:	4629      	mov	r1, r5
 8003228:	f7fd fc50 	bl	8000acc <__aeabi_d2iz>
 800322c:	2800      	cmp	r0, #0
 800322e:	d051      	beq.n	80032d4 <__kernel_sin+0xd4>
 8003230:	4622      	mov	r2, r4
 8003232:	462b      	mov	r3, r5
 8003234:	4620      	mov	r0, r4
 8003236:	4629      	mov	r1, r5
 8003238:	f7fd f9ae 	bl	8000598 <__aeabi_dmul>
 800323c:	4682      	mov	sl, r0
 800323e:	468b      	mov	fp, r1
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4620      	mov	r0, r4
 8003246:	4629      	mov	r1, r5
 8003248:	f7fd f9a6 	bl	8000598 <__aeabi_dmul>
 800324c:	a341      	add	r3, pc, #260	; (adr r3, 8003354 <__kernel_sin+0x154>)
 800324e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003252:	4680      	mov	r8, r0
 8003254:	4689      	mov	r9, r1
 8003256:	4650      	mov	r0, sl
 8003258:	4659      	mov	r1, fp
 800325a:	f7fd f99d 	bl	8000598 <__aeabi_dmul>
 800325e:	a33f      	add	r3, pc, #252	; (adr r3, 800335c <__kernel_sin+0x15c>)
 8003260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003264:	f7fc ffe0 	bl	8000228 <__aeabi_dsub>
 8003268:	4652      	mov	r2, sl
 800326a:	465b      	mov	r3, fp
 800326c:	f7fd f994 	bl	8000598 <__aeabi_dmul>
 8003270:	a33c      	add	r3, pc, #240	; (adr r3, 8003364 <__kernel_sin+0x164>)
 8003272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003276:	f7fc ffd9 	bl	800022c <__adddf3>
 800327a:	4652      	mov	r2, sl
 800327c:	465b      	mov	r3, fp
 800327e:	f7fd f98b 	bl	8000598 <__aeabi_dmul>
 8003282:	a33a      	add	r3, pc, #232	; (adr r3, 800336c <__kernel_sin+0x16c>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f7fc ffce 	bl	8000228 <__aeabi_dsub>
 800328c:	4652      	mov	r2, sl
 800328e:	465b      	mov	r3, fp
 8003290:	f7fd f982 	bl	8000598 <__aeabi_dmul>
 8003294:	a337      	add	r3, pc, #220	; (adr r3, 8003374 <__kernel_sin+0x174>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	f7fc ffc7 	bl	800022c <__adddf3>
 800329e:	9b01      	ldr	r3, [sp, #4]
 80032a0:	4606      	mov	r6, r0
 80032a2:	460f      	mov	r7, r1
 80032a4:	b9eb      	cbnz	r3, 80032e2 <__kernel_sin+0xe2>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4650      	mov	r0, sl
 80032ac:	4659      	mov	r1, fp
 80032ae:	f7fd f973 	bl	8000598 <__aeabi_dmul>
 80032b2:	a325      	add	r3, pc, #148	; (adr r3, 8003348 <__kernel_sin+0x148>)
 80032b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b8:	f7fc ffb6 	bl	8000228 <__aeabi_dsub>
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	f7fd f96a 	bl	8000598 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f7fc ffae 	bl	800022c <__adddf3>
 80032d0:	4604      	mov	r4, r0
 80032d2:	460d      	mov	r5, r1
 80032d4:	ec45 4b10 	vmov	d0, r4, r5
 80032d8:	b003      	add	sp, #12
 80032da:	ecbd 8b04 	vpop	{d8-d9}
 80032de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e2:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <__kernel_sin+0x150>)
 80032e4:	ec51 0b18 	vmov	r0, r1, d8
 80032e8:	2200      	movs	r2, #0
 80032ea:	f7fd f955 	bl	8000598 <__aeabi_dmul>
 80032ee:	4632      	mov	r2, r6
 80032f0:	ec41 0b19 	vmov	d9, r0, r1
 80032f4:	463b      	mov	r3, r7
 80032f6:	4640      	mov	r0, r8
 80032f8:	4649      	mov	r1, r9
 80032fa:	f7fd f94d 	bl	8000598 <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	ec51 0b19 	vmov	r0, r1, d9
 8003306:	f7fc ff8f 	bl	8000228 <__aeabi_dsub>
 800330a:	4652      	mov	r2, sl
 800330c:	465b      	mov	r3, fp
 800330e:	f7fd f943 	bl	8000598 <__aeabi_dmul>
 8003312:	ec53 2b18 	vmov	r2, r3, d8
 8003316:	f7fc ff87 	bl	8000228 <__aeabi_dsub>
 800331a:	a30b      	add	r3, pc, #44	; (adr r3, 8003348 <__kernel_sin+0x148>)
 800331c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003320:	4606      	mov	r6, r0
 8003322:	460f      	mov	r7, r1
 8003324:	4640      	mov	r0, r8
 8003326:	4649      	mov	r1, r9
 8003328:	f7fd f936 	bl	8000598 <__aeabi_dmul>
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4630      	mov	r0, r6
 8003332:	4639      	mov	r1, r7
 8003334:	f7fc ff7a 	bl	800022c <__adddf3>
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4620      	mov	r0, r4
 800333e:	4629      	mov	r1, r5
 8003340:	f7fc ff72 	bl	8000228 <__aeabi_dsub>
 8003344:	e7c4      	b.n	80032d0 <__kernel_sin+0xd0>
 8003346:	bf00      	nop
 8003348:	55555549 	.word	0x55555549
 800334c:	3fc55555 	.word	0x3fc55555
 8003350:	3fe00000 	.word	0x3fe00000
 8003354:	5acfd57c 	.word	0x5acfd57c
 8003358:	3de5d93a 	.word	0x3de5d93a
 800335c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003360:	3e5ae5e6 	.word	0x3e5ae5e6
 8003364:	57b1fe7d 	.word	0x57b1fe7d
 8003368:	3ec71de3 	.word	0x3ec71de3
 800336c:	19c161d5 	.word	0x19c161d5
 8003370:	3f2a01a0 	.word	0x3f2a01a0
 8003374:	1110f8a6 	.word	0x1110f8a6
 8003378:	3f811111 	.word	0x3f811111
 800337c:	00000000 	.word	0x00000000

08003380 <__ieee754_rem_pio2>:
 8003380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003384:	ed2d 8b02 	vpush	{d8}
 8003388:	ec55 4b10 	vmov	r4, r5, d0
 800338c:	4bca      	ldr	r3, [pc, #808]	; (80036b8 <__ieee754_rem_pio2+0x338>)
 800338e:	b08b      	sub	sp, #44	; 0x2c
 8003390:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8003394:	4598      	cmp	r8, r3
 8003396:	4682      	mov	sl, r0
 8003398:	9502      	str	r5, [sp, #8]
 800339a:	dc08      	bgt.n	80033ae <__ieee754_rem_pio2+0x2e>
 800339c:	2200      	movs	r2, #0
 800339e:	2300      	movs	r3, #0
 80033a0:	ed80 0b00 	vstr	d0, [r0]
 80033a4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80033a8:	f04f 0b00 	mov.w	fp, #0
 80033ac:	e028      	b.n	8003400 <__ieee754_rem_pio2+0x80>
 80033ae:	4bc3      	ldr	r3, [pc, #780]	; (80036bc <__ieee754_rem_pio2+0x33c>)
 80033b0:	4598      	cmp	r8, r3
 80033b2:	dc78      	bgt.n	80034a6 <__ieee754_rem_pio2+0x126>
 80033b4:	9b02      	ldr	r3, [sp, #8]
 80033b6:	4ec2      	ldr	r6, [pc, #776]	; (80036c0 <__ieee754_rem_pio2+0x340>)
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	ee10 0a10 	vmov	r0, s0
 80033be:	a3b0      	add	r3, pc, #704	; (adr r3, 8003680 <__ieee754_rem_pio2+0x300>)
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	4629      	mov	r1, r5
 80033c6:	dd39      	ble.n	800343c <__ieee754_rem_pio2+0xbc>
 80033c8:	f7fc ff2e 	bl	8000228 <__aeabi_dsub>
 80033cc:	45b0      	cmp	r8, r6
 80033ce:	4604      	mov	r4, r0
 80033d0:	460d      	mov	r5, r1
 80033d2:	d01b      	beq.n	800340c <__ieee754_rem_pio2+0x8c>
 80033d4:	a3ac      	add	r3, pc, #688	; (adr r3, 8003688 <__ieee754_rem_pio2+0x308>)
 80033d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033da:	f7fc ff25 	bl	8000228 <__aeabi_dsub>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	e9ca 2300 	strd	r2, r3, [sl]
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fc ff1d 	bl	8000228 <__aeabi_dsub>
 80033ee:	a3a6      	add	r3, pc, #664	; (adr r3, 8003688 <__ieee754_rem_pio2+0x308>)
 80033f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f4:	f7fc ff18 	bl	8000228 <__aeabi_dsub>
 80033f8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80033fc:	f04f 0b01 	mov.w	fp, #1
 8003400:	4658      	mov	r0, fp
 8003402:	b00b      	add	sp, #44	; 0x2c
 8003404:	ecbd 8b02 	vpop	{d8}
 8003408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800340c:	a3a0      	add	r3, pc, #640	; (adr r3, 8003690 <__ieee754_rem_pio2+0x310>)
 800340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003412:	f7fc ff09 	bl	8000228 <__aeabi_dsub>
 8003416:	a3a0      	add	r3, pc, #640	; (adr r3, 8003698 <__ieee754_rem_pio2+0x318>)
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	4604      	mov	r4, r0
 800341e:	460d      	mov	r5, r1
 8003420:	f7fc ff02 	bl	8000228 <__aeabi_dsub>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	e9ca 2300 	strd	r2, r3, [sl]
 800342c:	4620      	mov	r0, r4
 800342e:	4629      	mov	r1, r5
 8003430:	f7fc fefa 	bl	8000228 <__aeabi_dsub>
 8003434:	a398      	add	r3, pc, #608	; (adr r3, 8003698 <__ieee754_rem_pio2+0x318>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	e7db      	b.n	80033f4 <__ieee754_rem_pio2+0x74>
 800343c:	f7fc fef6 	bl	800022c <__adddf3>
 8003440:	45b0      	cmp	r8, r6
 8003442:	4604      	mov	r4, r0
 8003444:	460d      	mov	r5, r1
 8003446:	d016      	beq.n	8003476 <__ieee754_rem_pio2+0xf6>
 8003448:	a38f      	add	r3, pc, #572	; (adr r3, 8003688 <__ieee754_rem_pio2+0x308>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fc feed 	bl	800022c <__adddf3>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	e9ca 2300 	strd	r2, r3, [sl]
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fc fee3 	bl	8000228 <__aeabi_dsub>
 8003462:	a389      	add	r3, pc, #548	; (adr r3, 8003688 <__ieee754_rem_pio2+0x308>)
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f7fc fee0 	bl	800022c <__adddf3>
 800346c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8003470:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003474:	e7c4      	b.n	8003400 <__ieee754_rem_pio2+0x80>
 8003476:	a386      	add	r3, pc, #536	; (adr r3, 8003690 <__ieee754_rem_pio2+0x310>)
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f7fc fed6 	bl	800022c <__adddf3>
 8003480:	a385      	add	r3, pc, #532	; (adr r3, 8003698 <__ieee754_rem_pio2+0x318>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	4604      	mov	r4, r0
 8003488:	460d      	mov	r5, r1
 800348a:	f7fc fecf 	bl	800022c <__adddf3>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	e9ca 2300 	strd	r2, r3, [sl]
 8003496:	4620      	mov	r0, r4
 8003498:	4629      	mov	r1, r5
 800349a:	f7fc fec5 	bl	8000228 <__aeabi_dsub>
 800349e:	a37e      	add	r3, pc, #504	; (adr r3, 8003698 <__ieee754_rem_pio2+0x318>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	e7e0      	b.n	8003468 <__ieee754_rem_pio2+0xe8>
 80034a6:	4b87      	ldr	r3, [pc, #540]	; (80036c4 <__ieee754_rem_pio2+0x344>)
 80034a8:	4598      	cmp	r8, r3
 80034aa:	f300 80d8 	bgt.w	800365e <__ieee754_rem_pio2+0x2de>
 80034ae:	f000 f96d 	bl	800378c <fabs>
 80034b2:	ec55 4b10 	vmov	r4, r5, d0
 80034b6:	ee10 0a10 	vmov	r0, s0
 80034ba:	a379      	add	r3, pc, #484	; (adr r3, 80036a0 <__ieee754_rem_pio2+0x320>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	4629      	mov	r1, r5
 80034c2:	f7fd f869 	bl	8000598 <__aeabi_dmul>
 80034c6:	4b80      	ldr	r3, [pc, #512]	; (80036c8 <__ieee754_rem_pio2+0x348>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	f7fc feaf 	bl	800022c <__adddf3>
 80034ce:	f7fd fafd 	bl	8000acc <__aeabi_d2iz>
 80034d2:	4683      	mov	fp, r0
 80034d4:	f7fc fff6 	bl	80004c4 <__aeabi_i2d>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	ec43 2b18 	vmov	d8, r2, r3
 80034e0:	a367      	add	r3, pc, #412	; (adr r3, 8003680 <__ieee754_rem_pio2+0x300>)
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f7fd f857 	bl	8000598 <__aeabi_dmul>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4620      	mov	r0, r4
 80034f0:	4629      	mov	r1, r5
 80034f2:	f7fc fe99 	bl	8000228 <__aeabi_dsub>
 80034f6:	a364      	add	r3, pc, #400	; (adr r3, 8003688 <__ieee754_rem_pio2+0x308>)
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	4606      	mov	r6, r0
 80034fe:	460f      	mov	r7, r1
 8003500:	ec51 0b18 	vmov	r0, r1, d8
 8003504:	f7fd f848 	bl	8000598 <__aeabi_dmul>
 8003508:	f1bb 0f1f 	cmp.w	fp, #31
 800350c:	4604      	mov	r4, r0
 800350e:	460d      	mov	r5, r1
 8003510:	dc0d      	bgt.n	800352e <__ieee754_rem_pio2+0x1ae>
 8003512:	4b6e      	ldr	r3, [pc, #440]	; (80036cc <__ieee754_rem_pio2+0x34c>)
 8003514:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 8003518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800351c:	4543      	cmp	r3, r8
 800351e:	d006      	beq.n	800352e <__ieee754_rem_pio2+0x1ae>
 8003520:	4622      	mov	r2, r4
 8003522:	462b      	mov	r3, r5
 8003524:	4630      	mov	r0, r6
 8003526:	4639      	mov	r1, r7
 8003528:	f7fc fe7e 	bl	8000228 <__aeabi_dsub>
 800352c:	e00e      	b.n	800354c <__ieee754_rem_pio2+0x1cc>
 800352e:	462b      	mov	r3, r5
 8003530:	4622      	mov	r2, r4
 8003532:	4630      	mov	r0, r6
 8003534:	4639      	mov	r1, r7
 8003536:	f7fc fe77 	bl	8000228 <__aeabi_dsub>
 800353a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800353e:	9303      	str	r3, [sp, #12]
 8003540:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003544:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003548:	2b10      	cmp	r3, #16
 800354a:	dc02      	bgt.n	8003552 <__ieee754_rem_pio2+0x1d2>
 800354c:	e9ca 0100 	strd	r0, r1, [sl]
 8003550:	e039      	b.n	80035c6 <__ieee754_rem_pio2+0x246>
 8003552:	a34f      	add	r3, pc, #316	; (adr r3, 8003690 <__ieee754_rem_pio2+0x310>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	ec51 0b18 	vmov	r0, r1, d8
 800355c:	f7fd f81c 	bl	8000598 <__aeabi_dmul>
 8003560:	4604      	mov	r4, r0
 8003562:	460d      	mov	r5, r1
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4630      	mov	r0, r6
 800356a:	4639      	mov	r1, r7
 800356c:	f7fc fe5c 	bl	8000228 <__aeabi_dsub>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4680      	mov	r8, r0
 8003576:	4689      	mov	r9, r1
 8003578:	4630      	mov	r0, r6
 800357a:	4639      	mov	r1, r7
 800357c:	f7fc fe54 	bl	8000228 <__aeabi_dsub>
 8003580:	4622      	mov	r2, r4
 8003582:	462b      	mov	r3, r5
 8003584:	f7fc fe50 	bl	8000228 <__aeabi_dsub>
 8003588:	a343      	add	r3, pc, #268	; (adr r3, 8003698 <__ieee754_rem_pio2+0x318>)
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	4604      	mov	r4, r0
 8003590:	460d      	mov	r5, r1
 8003592:	ec51 0b18 	vmov	r0, r1, d8
 8003596:	f7fc ffff 	bl	8000598 <__aeabi_dmul>
 800359a:	4622      	mov	r2, r4
 800359c:	462b      	mov	r3, r5
 800359e:	f7fc fe43 	bl	8000228 <__aeabi_dsub>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4604      	mov	r4, r0
 80035a8:	460d      	mov	r5, r1
 80035aa:	4640      	mov	r0, r8
 80035ac:	4649      	mov	r1, r9
 80035ae:	f7fc fe3b 	bl	8000228 <__aeabi_dsub>
 80035b2:	9a03      	ldr	r2, [sp, #12]
 80035b4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b31      	cmp	r3, #49	; 0x31
 80035bc:	dc24      	bgt.n	8003608 <__ieee754_rem_pio2+0x288>
 80035be:	e9ca 0100 	strd	r0, r1, [sl]
 80035c2:	4646      	mov	r6, r8
 80035c4:	464f      	mov	r7, r9
 80035c6:	e9da 8900 	ldrd	r8, r9, [sl]
 80035ca:	4630      	mov	r0, r6
 80035cc:	4642      	mov	r2, r8
 80035ce:	464b      	mov	r3, r9
 80035d0:	4639      	mov	r1, r7
 80035d2:	f7fc fe29 	bl	8000228 <__aeabi_dsub>
 80035d6:	462b      	mov	r3, r5
 80035d8:	4622      	mov	r2, r4
 80035da:	f7fc fe25 	bl	8000228 <__aeabi_dsub>
 80035de:	9b02      	ldr	r3, [sp, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80035e6:	f6bf af0b 	bge.w	8003400 <__ieee754_rem_pio2+0x80>
 80035ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80035ee:	f8ca 3004 	str.w	r3, [sl, #4]
 80035f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80035f6:	f8ca 8000 	str.w	r8, [sl]
 80035fa:	f8ca 0008 	str.w	r0, [sl, #8]
 80035fe:	f8ca 300c 	str.w	r3, [sl, #12]
 8003602:	f1cb 0b00 	rsb	fp, fp, #0
 8003606:	e6fb      	b.n	8003400 <__ieee754_rem_pio2+0x80>
 8003608:	a327      	add	r3, pc, #156	; (adr r3, 80036a8 <__ieee754_rem_pio2+0x328>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	ec51 0b18 	vmov	r0, r1, d8
 8003612:	f7fc ffc1 	bl	8000598 <__aeabi_dmul>
 8003616:	4604      	mov	r4, r0
 8003618:	460d      	mov	r5, r1
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4640      	mov	r0, r8
 8003620:	4649      	mov	r1, r9
 8003622:	f7fc fe01 	bl	8000228 <__aeabi_dsub>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4606      	mov	r6, r0
 800362c:	460f      	mov	r7, r1
 800362e:	4640      	mov	r0, r8
 8003630:	4649      	mov	r1, r9
 8003632:	f7fc fdf9 	bl	8000228 <__aeabi_dsub>
 8003636:	4622      	mov	r2, r4
 8003638:	462b      	mov	r3, r5
 800363a:	f7fc fdf5 	bl	8000228 <__aeabi_dsub>
 800363e:	a31c      	add	r3, pc, #112	; (adr r3, 80036b0 <__ieee754_rem_pio2+0x330>)
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	4604      	mov	r4, r0
 8003646:	460d      	mov	r5, r1
 8003648:	ec51 0b18 	vmov	r0, r1, d8
 800364c:	f7fc ffa4 	bl	8000598 <__aeabi_dmul>
 8003650:	4622      	mov	r2, r4
 8003652:	462b      	mov	r3, r5
 8003654:	f7fc fde8 	bl	8000228 <__aeabi_dsub>
 8003658:	4604      	mov	r4, r0
 800365a:	460d      	mov	r5, r1
 800365c:	e760      	b.n	8003520 <__ieee754_rem_pio2+0x1a0>
 800365e:	4b1c      	ldr	r3, [pc, #112]	; (80036d0 <__ieee754_rem_pio2+0x350>)
 8003660:	4598      	cmp	r8, r3
 8003662:	dd37      	ble.n	80036d4 <__ieee754_rem_pio2+0x354>
 8003664:	ee10 2a10 	vmov	r2, s0
 8003668:	462b      	mov	r3, r5
 800366a:	4620      	mov	r0, r4
 800366c:	4629      	mov	r1, r5
 800366e:	f7fc fddb 	bl	8000228 <__aeabi_dsub>
 8003672:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003676:	e9ca 0100 	strd	r0, r1, [sl]
 800367a:	e695      	b.n	80033a8 <__ieee754_rem_pio2+0x28>
 800367c:	f3af 8000 	nop.w
 8003680:	54400000 	.word	0x54400000
 8003684:	3ff921fb 	.word	0x3ff921fb
 8003688:	1a626331 	.word	0x1a626331
 800368c:	3dd0b461 	.word	0x3dd0b461
 8003690:	1a600000 	.word	0x1a600000
 8003694:	3dd0b461 	.word	0x3dd0b461
 8003698:	2e037073 	.word	0x2e037073
 800369c:	3ba3198a 	.word	0x3ba3198a
 80036a0:	6dc9c883 	.word	0x6dc9c883
 80036a4:	3fe45f30 	.word	0x3fe45f30
 80036a8:	2e000000 	.word	0x2e000000
 80036ac:	3ba3198a 	.word	0x3ba3198a
 80036b0:	252049c1 	.word	0x252049c1
 80036b4:	397b839a 	.word	0x397b839a
 80036b8:	3fe921fb 	.word	0x3fe921fb
 80036bc:	4002d97b 	.word	0x4002d97b
 80036c0:	3ff921fb 	.word	0x3ff921fb
 80036c4:	413921fb 	.word	0x413921fb
 80036c8:	3fe00000 	.word	0x3fe00000
 80036cc:	080042ac 	.word	0x080042ac
 80036d0:	7fefffff 	.word	0x7fefffff
 80036d4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80036d8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80036dc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80036e0:	4620      	mov	r0, r4
 80036e2:	460d      	mov	r5, r1
 80036e4:	f7fd f9f2 	bl	8000acc <__aeabi_d2iz>
 80036e8:	f7fc feec 	bl	80004c4 <__aeabi_i2d>
 80036ec:	4602      	mov	r2, r0
 80036ee:	460b      	mov	r3, r1
 80036f0:	4620      	mov	r0, r4
 80036f2:	4629      	mov	r1, r5
 80036f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036f8:	f7fc fd96 	bl	8000228 <__aeabi_dsub>
 80036fc:	4b21      	ldr	r3, [pc, #132]	; (8003784 <__ieee754_rem_pio2+0x404>)
 80036fe:	2200      	movs	r2, #0
 8003700:	f7fc ff4a 	bl	8000598 <__aeabi_dmul>
 8003704:	460d      	mov	r5, r1
 8003706:	4604      	mov	r4, r0
 8003708:	f7fd f9e0 	bl	8000acc <__aeabi_d2iz>
 800370c:	f7fc feda 	bl	80004c4 <__aeabi_i2d>
 8003710:	4602      	mov	r2, r0
 8003712:	460b      	mov	r3, r1
 8003714:	4620      	mov	r0, r4
 8003716:	4629      	mov	r1, r5
 8003718:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800371c:	f7fc fd84 	bl	8000228 <__aeabi_dsub>
 8003720:	4b18      	ldr	r3, [pc, #96]	; (8003784 <__ieee754_rem_pio2+0x404>)
 8003722:	2200      	movs	r2, #0
 8003724:	f7fc ff38 	bl	8000598 <__aeabi_dmul>
 8003728:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800372c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8003730:	2703      	movs	r7, #3
 8003732:	2400      	movs	r4, #0
 8003734:	2500      	movs	r5, #0
 8003736:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800373a:	4622      	mov	r2, r4
 800373c:	462b      	mov	r3, r5
 800373e:	46b9      	mov	r9, r7
 8003740:	3f01      	subs	r7, #1
 8003742:	f7fd f991 	bl	8000a68 <__aeabi_dcmpeq>
 8003746:	2800      	cmp	r0, #0
 8003748:	d1f5      	bne.n	8003736 <__ieee754_rem_pio2+0x3b6>
 800374a:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <__ieee754_rem_pio2+0x408>)
 800374c:	9301      	str	r3, [sp, #4]
 800374e:	2302      	movs	r3, #2
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	4632      	mov	r2, r6
 8003754:	464b      	mov	r3, r9
 8003756:	4651      	mov	r1, sl
 8003758:	a804      	add	r0, sp, #16
 800375a:	f000 f90d 	bl	8003978 <__kernel_rem_pio2>
 800375e:	9b02      	ldr	r3, [sp, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	4683      	mov	fp, r0
 8003764:	f6bf ae4c 	bge.w	8003400 <__ieee754_rem_pio2+0x80>
 8003768:	e9da 2100 	ldrd	r2, r1, [sl]
 800376c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003770:	e9ca 2300 	strd	r2, r3, [sl]
 8003774:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8003778:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800377c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8003780:	e73f      	b.n	8003602 <__ieee754_rem_pio2+0x282>
 8003782:	bf00      	nop
 8003784:	41700000 	.word	0x41700000
 8003788:	0800432c 	.word	0x0800432c

0800378c <fabs>:
 800378c:	ec51 0b10 	vmov	r0, r1, d0
 8003790:	ee10 2a10 	vmov	r2, s0
 8003794:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003798:	ec43 2b10 	vmov	d0, r2, r3
 800379c:	4770      	bx	lr
	...

080037a0 <__ieee754_asinf>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	ee10 5a10 	vmov	r5, s0
 80037a6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80037aa:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80037ae:	ed2d 8b04 	vpush	{d8-d9}
 80037b2:	d10c      	bne.n	80037ce <__ieee754_asinf+0x2e>
 80037b4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800392c <__ieee754_asinf+0x18c>
 80037b8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003930 <__ieee754_asinf+0x190>
 80037bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80037c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80037c4:	eeb0 0a67 	vmov.f32	s0, s15
 80037c8:	ecbd 8b04 	vpop	{d8-d9}
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	dd04      	ble.n	80037da <__ieee754_asinf+0x3a>
 80037d0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80037d4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80037d8:	e7f6      	b.n	80037c8 <__ieee754_asinf+0x28>
 80037da:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80037de:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80037e2:	da0b      	bge.n	80037fc <__ieee754_asinf+0x5c>
 80037e4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80037e8:	da52      	bge.n	8003890 <__ieee754_asinf+0xf0>
 80037ea:	eddf 7a52 	vldr	s15, [pc, #328]	; 8003934 <__ieee754_asinf+0x194>
 80037ee:	ee70 7a27 	vadd.f32	s15, s0, s15
 80037f2:	eef4 7ae8 	vcmpe.f32	s15, s17
 80037f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037fa:	dce5      	bgt.n	80037c8 <__ieee754_asinf+0x28>
 80037fc:	f7ff fc28 	bl	8003050 <fabsf>
 8003800:	ee38 0ac0 	vsub.f32	s0, s17, s0
 8003804:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8003808:	ee20 8a27 	vmul.f32	s16, s0, s15
 800380c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8003938 <__ieee754_asinf+0x198>
 8003810:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800393c <__ieee754_asinf+0x19c>
 8003814:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 8003940 <__ieee754_asinf+0x1a0>
 8003818:	eea8 7a27 	vfma.f32	s14, s16, s15
 800381c:	eddf 7a49 	vldr	s15, [pc, #292]	; 8003944 <__ieee754_asinf+0x1a4>
 8003820:	eee7 7a08 	vfma.f32	s15, s14, s16
 8003824:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003948 <__ieee754_asinf+0x1a8>
 8003828:	eea7 7a88 	vfma.f32	s14, s15, s16
 800382c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800394c <__ieee754_asinf+0x1ac>
 8003830:	eee7 7a08 	vfma.f32	s15, s14, s16
 8003834:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003950 <__ieee754_asinf+0x1b0>
 8003838:	eea7 9a88 	vfma.f32	s18, s15, s16
 800383c:	eddf 7a45 	vldr	s15, [pc, #276]	; 8003954 <__ieee754_asinf+0x1b4>
 8003840:	eee8 7a07 	vfma.f32	s15, s16, s14
 8003844:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003958 <__ieee754_asinf+0x1b8>
 8003848:	eea7 7a88 	vfma.f32	s14, s15, s16
 800384c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800395c <__ieee754_asinf+0x1bc>
 8003850:	eee7 7a08 	vfma.f32	s15, s14, s16
 8003854:	eeb0 0a48 	vmov.f32	s0, s16
 8003858:	eee7 8a88 	vfma.f32	s17, s15, s16
 800385c:	f000 f886 	bl	800396c <__ieee754_sqrtf>
 8003860:	4b3f      	ldr	r3, [pc, #252]	; (8003960 <__ieee754_asinf+0x1c0>)
 8003862:	ee29 9a08 	vmul.f32	s18, s18, s16
 8003866:	429c      	cmp	r4, r3
 8003868:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800386c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003870:	dd3d      	ble.n	80038ee <__ieee754_asinf+0x14e>
 8003872:	eea0 0a06 	vfma.f32	s0, s0, s12
 8003876:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8003964 <__ieee754_asinf+0x1c4>
 800387a:	eee0 7a26 	vfma.f32	s15, s0, s13
 800387e:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8003930 <__ieee754_asinf+0x190>
 8003882:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003886:	2d00      	cmp	r5, #0
 8003888:	bfd8      	it	le
 800388a:	eeb1 0a40 	vnegle.f32	s0, s0
 800388e:	e79b      	b.n	80037c8 <__ieee754_asinf+0x28>
 8003890:	ee60 7a00 	vmul.f32	s15, s0, s0
 8003894:	eddf 6a29 	vldr	s13, [pc, #164]	; 800393c <__ieee754_asinf+0x19c>
 8003898:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003938 <__ieee754_asinf+0x198>
 800389c:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8003950 <__ieee754_asinf+0x1b0>
 80038a0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80038a4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8003944 <__ieee754_asinf+0x1a4>
 80038a8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80038ac:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003948 <__ieee754_asinf+0x1a8>
 80038b0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80038b4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800394c <__ieee754_asinf+0x1ac>
 80038b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80038bc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003940 <__ieee754_asinf+0x1a0>
 80038c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80038c4:	eddf 6a23 	vldr	s13, [pc, #140]	; 8003954 <__ieee754_asinf+0x1b4>
 80038c8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80038cc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8003958 <__ieee754_asinf+0x1b8>
 80038d0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80038d4:	eddf 6a21 	vldr	s13, [pc, #132]	; 800395c <__ieee754_asinf+0x1bc>
 80038d8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80038dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038e0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80038e4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80038e8:	eea0 0a27 	vfma.f32	s0, s0, s15
 80038ec:	e76c      	b.n	80037c8 <__ieee754_asinf+0x28>
 80038ee:	ee10 3a10 	vmov	r3, s0
 80038f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80038f6:	f023 030f 	bic.w	r3, r3, #15
 80038fa:	ee07 3a10 	vmov	s14, r3
 80038fe:	eea7 8a47 	vfms.f32	s16, s14, s14
 8003902:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003906:	ee30 0a00 	vadd.f32	s0, s0, s0
 800390a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800390e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800392c <__ieee754_asinf+0x18c>
 8003912:	eee5 7ae6 	vfms.f32	s15, s11, s13
 8003916:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800391a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8003968 <__ieee754_asinf+0x1c8>
 800391e:	eeb0 6a40 	vmov.f32	s12, s0
 8003922:	eea7 6a66 	vfms.f32	s12, s14, s13
 8003926:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800392a:	e7aa      	b.n	8003882 <__ieee754_asinf+0xe2>
 800392c:	b33bbd2e 	.word	0xb33bbd2e
 8003930:	3fc90fdb 	.word	0x3fc90fdb
 8003934:	7149f2ca 	.word	0x7149f2ca
 8003938:	3a4f7f04 	.word	0x3a4f7f04
 800393c:	3811ef08 	.word	0x3811ef08
 8003940:	3e2aaaab 	.word	0x3e2aaaab
 8003944:	bd241146 	.word	0xbd241146
 8003948:	3e4e0aa8 	.word	0x3e4e0aa8
 800394c:	bea6b090 	.word	0xbea6b090
 8003950:	3d9dc62e 	.word	0x3d9dc62e
 8003954:	bf303361 	.word	0xbf303361
 8003958:	4001572d 	.word	0x4001572d
 800395c:	c019d139 	.word	0xc019d139
 8003960:	3f799999 	.word	0x3f799999
 8003964:	333bbd2e 	.word	0x333bbd2e
 8003968:	3f490fdb 	.word	0x3f490fdb

0800396c <__ieee754_sqrtf>:
 800396c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003970:	4770      	bx	lr
 8003972:	0000      	movs	r0, r0
 8003974:	0000      	movs	r0, r0
	...

08003978 <__kernel_rem_pio2>:
 8003978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800397c:	ed2d 8b02 	vpush	{d8}
 8003980:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8003984:	f112 0f14 	cmn.w	r2, #20
 8003988:	9306      	str	r3, [sp, #24]
 800398a:	9104      	str	r1, [sp, #16]
 800398c:	4bc2      	ldr	r3, [pc, #776]	; (8003c98 <__kernel_rem_pio2+0x320>)
 800398e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8003990:	9009      	str	r0, [sp, #36]	; 0x24
 8003992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	9b06      	ldr	r3, [sp, #24]
 800399a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800399e:	bfa8      	it	ge
 80039a0:	1ed4      	subge	r4, r2, #3
 80039a2:	9305      	str	r3, [sp, #20]
 80039a4:	bfb2      	itee	lt
 80039a6:	2400      	movlt	r4, #0
 80039a8:	2318      	movge	r3, #24
 80039aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80039ae:	f06f 0317 	mvn.w	r3, #23
 80039b2:	fb04 3303 	mla	r3, r4, r3, r3
 80039b6:	eb03 0a02 	add.w	sl, r3, r2
 80039ba:	9b00      	ldr	r3, [sp, #0]
 80039bc:	9a05      	ldr	r2, [sp, #20]
 80039be:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8003c88 <__kernel_rem_pio2+0x310>
 80039c2:	eb03 0802 	add.w	r8, r3, r2
 80039c6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80039c8:	1aa7      	subs	r7, r4, r2
 80039ca:	ae20      	add	r6, sp, #128	; 0x80
 80039cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80039d0:	2500      	movs	r5, #0
 80039d2:	4545      	cmp	r5, r8
 80039d4:	dd13      	ble.n	80039fe <__kernel_rem_pio2+0x86>
 80039d6:	9b06      	ldr	r3, [sp, #24]
 80039d8:	aa20      	add	r2, sp, #128	; 0x80
 80039da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80039de:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80039e2:	f04f 0800 	mov.w	r8, #0
 80039e6:	9b00      	ldr	r3, [sp, #0]
 80039e8:	4598      	cmp	r8, r3
 80039ea:	dc31      	bgt.n	8003a50 <__kernel_rem_pio2+0xd8>
 80039ec:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8003c88 <__kernel_rem_pio2+0x310>
 80039f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80039f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80039f8:	462f      	mov	r7, r5
 80039fa:	2600      	movs	r6, #0
 80039fc:	e01b      	b.n	8003a36 <__kernel_rem_pio2+0xbe>
 80039fe:	42ef      	cmn	r7, r5
 8003a00:	d407      	bmi.n	8003a12 <__kernel_rem_pio2+0x9a>
 8003a02:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8003a06:	f7fc fd5d 	bl	80004c4 <__aeabi_i2d>
 8003a0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8003a0e:	3501      	adds	r5, #1
 8003a10:	e7df      	b.n	80039d2 <__kernel_rem_pio2+0x5a>
 8003a12:	ec51 0b18 	vmov	r0, r1, d8
 8003a16:	e7f8      	b.n	8003a0a <__kernel_rem_pio2+0x92>
 8003a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a1c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8003a20:	f7fc fdba 	bl	8000598 <__aeabi_dmul>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003a2c:	f7fc fbfe 	bl	800022c <__adddf3>
 8003a30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003a34:	3601      	adds	r6, #1
 8003a36:	9b05      	ldr	r3, [sp, #20]
 8003a38:	429e      	cmp	r6, r3
 8003a3a:	f1a7 0708 	sub.w	r7, r7, #8
 8003a3e:	ddeb      	ble.n	8003a18 <__kernel_rem_pio2+0xa0>
 8003a40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8003a44:	f108 0801 	add.w	r8, r8, #1
 8003a48:	ecab 7b02 	vstmia	fp!, {d7}
 8003a4c:	3508      	adds	r5, #8
 8003a4e:	e7ca      	b.n	80039e6 <__kernel_rem_pio2+0x6e>
 8003a50:	9b00      	ldr	r3, [sp, #0]
 8003a52:	aa0c      	add	r2, sp, #48	; 0x30
 8003a54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a5a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8003a5c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a60:	9c00      	ldr	r4, [sp, #0]
 8003a62:	930a      	str	r3, [sp, #40]	; 0x28
 8003a64:	00e3      	lsls	r3, r4, #3
 8003a66:	9308      	str	r3, [sp, #32]
 8003a68:	ab98      	add	r3, sp, #608	; 0x260
 8003a6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003a6e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8003a72:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8003a76:	ab70      	add	r3, sp, #448	; 0x1c0
 8003a78:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8003a7c:	46c3      	mov	fp, r8
 8003a7e:	46a1      	mov	r9, r4
 8003a80:	f1b9 0f00 	cmp.w	r9, #0
 8003a84:	f1a5 0508 	sub.w	r5, r5, #8
 8003a88:	dc77      	bgt.n	8003b7a <__kernel_rem_pio2+0x202>
 8003a8a:	ec47 6b10 	vmov	d0, r6, r7
 8003a8e:	4650      	mov	r0, sl
 8003a90:	f000 fac2 	bl	8004018 <scalbn>
 8003a94:	ec57 6b10 	vmov	r6, r7, d0
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8003a9e:	ee10 0a10 	vmov	r0, s0
 8003aa2:	4639      	mov	r1, r7
 8003aa4:	f7fc fd78 	bl	8000598 <__aeabi_dmul>
 8003aa8:	ec41 0b10 	vmov	d0, r0, r1
 8003aac:	f000 fb34 	bl	8004118 <floor>
 8003ab0:	4b7a      	ldr	r3, [pc, #488]	; (8003c9c <__kernel_rem_pio2+0x324>)
 8003ab2:	ec51 0b10 	vmov	r0, r1, d0
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f7fc fd6e 	bl	8000598 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4630      	mov	r0, r6
 8003ac2:	4639      	mov	r1, r7
 8003ac4:	f7fc fbb0 	bl	8000228 <__aeabi_dsub>
 8003ac8:	460f      	mov	r7, r1
 8003aca:	4606      	mov	r6, r0
 8003acc:	f7fc fffe 	bl	8000acc <__aeabi_d2iz>
 8003ad0:	9002      	str	r0, [sp, #8]
 8003ad2:	f7fc fcf7 	bl	80004c4 <__aeabi_i2d>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4630      	mov	r0, r6
 8003adc:	4639      	mov	r1, r7
 8003ade:	f7fc fba3 	bl	8000228 <__aeabi_dsub>
 8003ae2:	f1ba 0f00 	cmp.w	sl, #0
 8003ae6:	4606      	mov	r6, r0
 8003ae8:	460f      	mov	r7, r1
 8003aea:	dd6d      	ble.n	8003bc8 <__kernel_rem_pio2+0x250>
 8003aec:	1e61      	subs	r1, r4, #1
 8003aee:	ab0c      	add	r3, sp, #48	; 0x30
 8003af0:	9d02      	ldr	r5, [sp, #8]
 8003af2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003af6:	f1ca 0018 	rsb	r0, sl, #24
 8003afa:	fa43 f200 	asr.w	r2, r3, r0
 8003afe:	4415      	add	r5, r2
 8003b00:	4082      	lsls	r2, r0
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	aa0c      	add	r2, sp, #48	; 0x30
 8003b06:	9502      	str	r5, [sp, #8]
 8003b08:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8003b0c:	f1ca 0217 	rsb	r2, sl, #23
 8003b10:	fa43 fb02 	asr.w	fp, r3, r2
 8003b14:	f1bb 0f00 	cmp.w	fp, #0
 8003b18:	dd65      	ble.n	8003be6 <__kernel_rem_pio2+0x26e>
 8003b1a:	9b02      	ldr	r3, [sp, #8]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	3301      	adds	r3, #1
 8003b20:	9302      	str	r3, [sp, #8]
 8003b22:	4615      	mov	r5, r2
 8003b24:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8003b28:	4294      	cmp	r4, r2
 8003b2a:	f300 809f 	bgt.w	8003c6c <__kernel_rem_pio2+0x2f4>
 8003b2e:	f1ba 0f00 	cmp.w	sl, #0
 8003b32:	dd07      	ble.n	8003b44 <__kernel_rem_pio2+0x1cc>
 8003b34:	f1ba 0f01 	cmp.w	sl, #1
 8003b38:	f000 80c1 	beq.w	8003cbe <__kernel_rem_pio2+0x346>
 8003b3c:	f1ba 0f02 	cmp.w	sl, #2
 8003b40:	f000 80c7 	beq.w	8003cd2 <__kernel_rem_pio2+0x35a>
 8003b44:	f1bb 0f02 	cmp.w	fp, #2
 8003b48:	d14d      	bne.n	8003be6 <__kernel_rem_pio2+0x26e>
 8003b4a:	4632      	mov	r2, r6
 8003b4c:	463b      	mov	r3, r7
 8003b4e:	4954      	ldr	r1, [pc, #336]	; (8003ca0 <__kernel_rem_pio2+0x328>)
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fc fb69 	bl	8000228 <__aeabi_dsub>
 8003b56:	4606      	mov	r6, r0
 8003b58:	460f      	mov	r7, r1
 8003b5a:	2d00      	cmp	r5, #0
 8003b5c:	d043      	beq.n	8003be6 <__kernel_rem_pio2+0x26e>
 8003b5e:	4650      	mov	r0, sl
 8003b60:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8003c90 <__kernel_rem_pio2+0x318>
 8003b64:	f000 fa58 	bl	8004018 <scalbn>
 8003b68:	4630      	mov	r0, r6
 8003b6a:	4639      	mov	r1, r7
 8003b6c:	ec53 2b10 	vmov	r2, r3, d0
 8003b70:	f7fc fb5a 	bl	8000228 <__aeabi_dsub>
 8003b74:	4606      	mov	r6, r0
 8003b76:	460f      	mov	r7, r1
 8003b78:	e035      	b.n	8003be6 <__kernel_rem_pio2+0x26e>
 8003b7a:	4b4a      	ldr	r3, [pc, #296]	; (8003ca4 <__kernel_rem_pio2+0x32c>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4630      	mov	r0, r6
 8003b80:	4639      	mov	r1, r7
 8003b82:	f7fc fd09 	bl	8000598 <__aeabi_dmul>
 8003b86:	f7fc ffa1 	bl	8000acc <__aeabi_d2iz>
 8003b8a:	f7fc fc9b 	bl	80004c4 <__aeabi_i2d>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	ec43 2b18 	vmov	d8, r2, r3
 8003b96:	4b44      	ldr	r3, [pc, #272]	; (8003ca8 <__kernel_rem_pio2+0x330>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f7fc fcfd 	bl	8000598 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	f7fc fb3f 	bl	8000228 <__aeabi_dsub>
 8003baa:	f7fc ff8f 	bl	8000acc <__aeabi_d2iz>
 8003bae:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003bb2:	f84b 0b04 	str.w	r0, [fp], #4
 8003bb6:	ec51 0b18 	vmov	r0, r1, d8
 8003bba:	f7fc fb37 	bl	800022c <__adddf3>
 8003bbe:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8003bc2:	4606      	mov	r6, r0
 8003bc4:	460f      	mov	r7, r1
 8003bc6:	e75b      	b.n	8003a80 <__kernel_rem_pio2+0x108>
 8003bc8:	d106      	bne.n	8003bd8 <__kernel_rem_pio2+0x260>
 8003bca:	1e63      	subs	r3, r4, #1
 8003bcc:	aa0c      	add	r2, sp, #48	; 0x30
 8003bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8003bd6:	e79d      	b.n	8003b14 <__kernel_rem_pio2+0x19c>
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <__kernel_rem_pio2+0x334>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f7fc ff62 	bl	8000aa4 <__aeabi_dcmpge>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	d140      	bne.n	8003c66 <__kernel_rem_pio2+0x2ee>
 8003be4:	4683      	mov	fp, r0
 8003be6:	2200      	movs	r2, #0
 8003be8:	2300      	movs	r3, #0
 8003bea:	4630      	mov	r0, r6
 8003bec:	4639      	mov	r1, r7
 8003bee:	f7fc ff3b 	bl	8000a68 <__aeabi_dcmpeq>
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	f000 80c1 	beq.w	8003d7a <__kernel_rem_pio2+0x402>
 8003bf8:	1e65      	subs	r5, r4, #1
 8003bfa:	462b      	mov	r3, r5
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	9900      	ldr	r1, [sp, #0]
 8003c00:	428b      	cmp	r3, r1
 8003c02:	da6d      	bge.n	8003ce0 <__kernel_rem_pio2+0x368>
 8003c04:	2a00      	cmp	r2, #0
 8003c06:	f000 808a 	beq.w	8003d1e <__kernel_rem_pio2+0x3a6>
 8003c0a:	ab0c      	add	r3, sp, #48	; 0x30
 8003c0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8003c10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80ae 	beq.w	8003d76 <__kernel_rem_pio2+0x3fe>
 8003c1a:	4650      	mov	r0, sl
 8003c1c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8003c90 <__kernel_rem_pio2+0x318>
 8003c20:	f000 f9fa 	bl	8004018 <scalbn>
 8003c24:	1c6b      	adds	r3, r5, #1
 8003c26:	00da      	lsls	r2, r3, #3
 8003c28:	9205      	str	r2, [sp, #20]
 8003c2a:	ec57 6b10 	vmov	r6, r7, d0
 8003c2e:	aa70      	add	r2, sp, #448	; 0x1c0
 8003c30:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8003ca4 <__kernel_rem_pio2+0x32c>
 8003c34:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8003c38:	462c      	mov	r4, r5
 8003c3a:	f04f 0800 	mov.w	r8, #0
 8003c3e:	2c00      	cmp	r4, #0
 8003c40:	f280 80d4 	bge.w	8003dec <__kernel_rem_pio2+0x474>
 8003c44:	462c      	mov	r4, r5
 8003c46:	2c00      	cmp	r4, #0
 8003c48:	f2c0 8102 	blt.w	8003e50 <__kernel_rem_pio2+0x4d8>
 8003c4c:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <__kernel_rem_pio2+0x338>)
 8003c4e:	461e      	mov	r6, r3
 8003c50:	ab70      	add	r3, sp, #448	; 0x1c0
 8003c52:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8003c56:	1b2b      	subs	r3, r5, r4
 8003c58:	f04f 0900 	mov.w	r9, #0
 8003c5c:	f04f 0a00 	mov.w	sl, #0
 8003c60:	2700      	movs	r7, #0
 8003c62:	9306      	str	r3, [sp, #24]
 8003c64:	e0e6      	b.n	8003e34 <__kernel_rem_pio2+0x4bc>
 8003c66:	f04f 0b02 	mov.w	fp, #2
 8003c6a:	e756      	b.n	8003b1a <__kernel_rem_pio2+0x1a2>
 8003c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8003c70:	bb05      	cbnz	r5, 8003cb4 <__kernel_rem_pio2+0x33c>
 8003c72:	b123      	cbz	r3, 8003c7e <__kernel_rem_pio2+0x306>
 8003c74:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8003c78:	f8c8 3000 	str.w	r3, [r8]
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	3201      	adds	r2, #1
 8003c80:	f108 0804 	add.w	r8, r8, #4
 8003c84:	461d      	mov	r5, r3
 8003c86:	e74f      	b.n	8003b28 <__kernel_rem_pio2+0x1b0>
	...
 8003c94:	3ff00000 	.word	0x3ff00000
 8003c98:	08004478 	.word	0x08004478
 8003c9c:	40200000 	.word	0x40200000
 8003ca0:	3ff00000 	.word	0x3ff00000
 8003ca4:	3e700000 	.word	0x3e700000
 8003ca8:	41700000 	.word	0x41700000
 8003cac:	3fe00000 	.word	0x3fe00000
 8003cb0:	08004438 	.word	0x08004438
 8003cb4:	1acb      	subs	r3, r1, r3
 8003cb6:	f8c8 3000 	str.w	r3, [r8]
 8003cba:	462b      	mov	r3, r5
 8003cbc:	e7df      	b.n	8003c7e <__kernel_rem_pio2+0x306>
 8003cbe:	1e62      	subs	r2, r4, #1
 8003cc0:	ab0c      	add	r3, sp, #48	; 0x30
 8003cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cc6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003cca:	a90c      	add	r1, sp, #48	; 0x30
 8003ccc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003cd0:	e738      	b.n	8003b44 <__kernel_rem_pio2+0x1cc>
 8003cd2:	1e62      	subs	r2, r4, #1
 8003cd4:	ab0c      	add	r3, sp, #48	; 0x30
 8003cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cda:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8003cde:	e7f4      	b.n	8003cca <__kernel_rem_pio2+0x352>
 8003ce0:	a90c      	add	r1, sp, #48	; 0x30
 8003ce2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	e788      	b.n	8003bfe <__kernel_rem_pio2+0x286>
 8003cec:	3301      	adds	r3, #1
 8003cee:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8003cf2:	2900      	cmp	r1, #0
 8003cf4:	d0fa      	beq.n	8003cec <__kernel_rem_pio2+0x374>
 8003cf6:	9a08      	ldr	r2, [sp, #32]
 8003cf8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8003cfc:	446a      	add	r2, sp
 8003cfe:	3a98      	subs	r2, #152	; 0x98
 8003d00:	9208      	str	r2, [sp, #32]
 8003d02:	9a06      	ldr	r2, [sp, #24]
 8003d04:	a920      	add	r1, sp, #128	; 0x80
 8003d06:	18a2      	adds	r2, r4, r2
 8003d08:	18e3      	adds	r3, r4, r3
 8003d0a:	f104 0801 	add.w	r8, r4, #1
 8003d0e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8003d12:	9302      	str	r3, [sp, #8]
 8003d14:	9b02      	ldr	r3, [sp, #8]
 8003d16:	4543      	cmp	r3, r8
 8003d18:	da04      	bge.n	8003d24 <__kernel_rem_pio2+0x3ac>
 8003d1a:	461c      	mov	r4, r3
 8003d1c:	e6a2      	b.n	8003a64 <__kernel_rem_pio2+0xec>
 8003d1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d20:	2301      	movs	r3, #1
 8003d22:	e7e4      	b.n	8003cee <__kernel_rem_pio2+0x376>
 8003d24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d26:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003d2a:	f7fc fbcb 	bl	80004c4 <__aeabi_i2d>
 8003d2e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8003d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d34:	46ab      	mov	fp, r5
 8003d36:	461c      	mov	r4, r3
 8003d38:	f04f 0900 	mov.w	r9, #0
 8003d3c:	2600      	movs	r6, #0
 8003d3e:	2700      	movs	r7, #0
 8003d40:	9b05      	ldr	r3, [sp, #20]
 8003d42:	4599      	cmp	r9, r3
 8003d44:	dd06      	ble.n	8003d54 <__kernel_rem_pio2+0x3dc>
 8003d46:	9b08      	ldr	r3, [sp, #32]
 8003d48:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003d4c:	f108 0801 	add.w	r8, r8, #1
 8003d50:	9308      	str	r3, [sp, #32]
 8003d52:	e7df      	b.n	8003d14 <__kernel_rem_pio2+0x39c>
 8003d54:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003d58:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003d5c:	f7fc fc1c 	bl	8000598 <__aeabi_dmul>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4630      	mov	r0, r6
 8003d66:	4639      	mov	r1, r7
 8003d68:	f7fc fa60 	bl	800022c <__adddf3>
 8003d6c:	f109 0901 	add.w	r9, r9, #1
 8003d70:	4606      	mov	r6, r0
 8003d72:	460f      	mov	r7, r1
 8003d74:	e7e4      	b.n	8003d40 <__kernel_rem_pio2+0x3c8>
 8003d76:	3d01      	subs	r5, #1
 8003d78:	e747      	b.n	8003c0a <__kernel_rem_pio2+0x292>
 8003d7a:	ec47 6b10 	vmov	d0, r6, r7
 8003d7e:	f1ca 0000 	rsb	r0, sl, #0
 8003d82:	f000 f949 	bl	8004018 <scalbn>
 8003d86:	ec57 6b10 	vmov	r6, r7, d0
 8003d8a:	4ba0      	ldr	r3, [pc, #640]	; (800400c <__kernel_rem_pio2+0x694>)
 8003d8c:	ee10 0a10 	vmov	r0, s0
 8003d90:	2200      	movs	r2, #0
 8003d92:	4639      	mov	r1, r7
 8003d94:	f7fc fe86 	bl	8000aa4 <__aeabi_dcmpge>
 8003d98:	b1f8      	cbz	r0, 8003dda <__kernel_rem_pio2+0x462>
 8003d9a:	4b9d      	ldr	r3, [pc, #628]	; (8004010 <__kernel_rem_pio2+0x698>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4630      	mov	r0, r6
 8003da0:	4639      	mov	r1, r7
 8003da2:	f7fc fbf9 	bl	8000598 <__aeabi_dmul>
 8003da6:	f7fc fe91 	bl	8000acc <__aeabi_d2iz>
 8003daa:	4680      	mov	r8, r0
 8003dac:	f7fc fb8a 	bl	80004c4 <__aeabi_i2d>
 8003db0:	4b96      	ldr	r3, [pc, #600]	; (800400c <__kernel_rem_pio2+0x694>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	f7fc fbf0 	bl	8000598 <__aeabi_dmul>
 8003db8:	460b      	mov	r3, r1
 8003dba:	4602      	mov	r2, r0
 8003dbc:	4639      	mov	r1, r7
 8003dbe:	4630      	mov	r0, r6
 8003dc0:	f7fc fa32 	bl	8000228 <__aeabi_dsub>
 8003dc4:	f7fc fe82 	bl	8000acc <__aeabi_d2iz>
 8003dc8:	1c65      	adds	r5, r4, #1
 8003dca:	ab0c      	add	r3, sp, #48	; 0x30
 8003dcc:	f10a 0a18 	add.w	sl, sl, #24
 8003dd0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003dd4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8003dd8:	e71f      	b.n	8003c1a <__kernel_rem_pio2+0x2a2>
 8003dda:	4630      	mov	r0, r6
 8003ddc:	4639      	mov	r1, r7
 8003dde:	f7fc fe75 	bl	8000acc <__aeabi_d2iz>
 8003de2:	ab0c      	add	r3, sp, #48	; 0x30
 8003de4:	4625      	mov	r5, r4
 8003de6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003dea:	e716      	b.n	8003c1a <__kernel_rem_pio2+0x2a2>
 8003dec:	ab0c      	add	r3, sp, #48	; 0x30
 8003dee:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003df2:	f7fc fb67 	bl	80004c4 <__aeabi_i2d>
 8003df6:	4632      	mov	r2, r6
 8003df8:	463b      	mov	r3, r7
 8003dfa:	f7fc fbcd 	bl	8000598 <__aeabi_dmul>
 8003dfe:	4642      	mov	r2, r8
 8003e00:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8003e04:	464b      	mov	r3, r9
 8003e06:	4630      	mov	r0, r6
 8003e08:	4639      	mov	r1, r7
 8003e0a:	f7fc fbc5 	bl	8000598 <__aeabi_dmul>
 8003e0e:	3c01      	subs	r4, #1
 8003e10:	4606      	mov	r6, r0
 8003e12:	460f      	mov	r7, r1
 8003e14:	e713      	b.n	8003c3e <__kernel_rem_pio2+0x2c6>
 8003e16:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8003e1a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003e1e:	f7fc fbbb 	bl	8000598 <__aeabi_dmul>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4648      	mov	r0, r9
 8003e28:	4651      	mov	r1, sl
 8003e2a:	f7fc f9ff 	bl	800022c <__adddf3>
 8003e2e:	3701      	adds	r7, #1
 8003e30:	4681      	mov	r9, r0
 8003e32:	468a      	mov	sl, r1
 8003e34:	9b00      	ldr	r3, [sp, #0]
 8003e36:	429f      	cmp	r7, r3
 8003e38:	dc02      	bgt.n	8003e40 <__kernel_rem_pio2+0x4c8>
 8003e3a:	9b06      	ldr	r3, [sp, #24]
 8003e3c:	429f      	cmp	r7, r3
 8003e3e:	ddea      	ble.n	8003e16 <__kernel_rem_pio2+0x49e>
 8003e40:	9a06      	ldr	r2, [sp, #24]
 8003e42:	ab48      	add	r3, sp, #288	; 0x120
 8003e44:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8003e48:	e9c6 9a00 	strd	r9, sl, [r6]
 8003e4c:	3c01      	subs	r4, #1
 8003e4e:	e6fa      	b.n	8003c46 <__kernel_rem_pio2+0x2ce>
 8003e50:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	dc0b      	bgt.n	8003e6e <__kernel_rem_pio2+0x4f6>
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	dc39      	bgt.n	8003ece <__kernel_rem_pio2+0x556>
 8003e5a:	d05d      	beq.n	8003f18 <__kernel_rem_pio2+0x5a0>
 8003e5c:	9b02      	ldr	r3, [sp, #8]
 8003e5e:	f003 0007 	and.w	r0, r3, #7
 8003e62:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8003e66:	ecbd 8b02 	vpop	{d8}
 8003e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e6e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d1f3      	bne.n	8003e5c <__kernel_rem_pio2+0x4e4>
 8003e74:	9b05      	ldr	r3, [sp, #20]
 8003e76:	9500      	str	r5, [sp, #0]
 8003e78:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003e7c:	eb0d 0403 	add.w	r4, sp, r3
 8003e80:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8003e84:	46a2      	mov	sl, r4
 8003e86:	9b00      	ldr	r3, [sp, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f1aa 0a08 	sub.w	sl, sl, #8
 8003e8e:	dc69      	bgt.n	8003f64 <__kernel_rem_pio2+0x5ec>
 8003e90:	46aa      	mov	sl, r5
 8003e92:	f1ba 0f01 	cmp.w	sl, #1
 8003e96:	f1a4 0408 	sub.w	r4, r4, #8
 8003e9a:	f300 8083 	bgt.w	8003fa4 <__kernel_rem_pio2+0x62c>
 8003e9e:	9c05      	ldr	r4, [sp, #20]
 8003ea0:	ab48      	add	r3, sp, #288	; 0x120
 8003ea2:	441c      	add	r4, r3
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	2d01      	cmp	r5, #1
 8003eaa:	f300 809a 	bgt.w	8003fe2 <__kernel_rem_pio2+0x66a>
 8003eae:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8003eb2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8003eb6:	f1bb 0f00 	cmp.w	fp, #0
 8003eba:	f040 8098 	bne.w	8003fee <__kernel_rem_pio2+0x676>
 8003ebe:	9b04      	ldr	r3, [sp, #16]
 8003ec0:	e9c3 7800 	strd	r7, r8, [r3]
 8003ec4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8003ec8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8003ecc:	e7c6      	b.n	8003e5c <__kernel_rem_pio2+0x4e4>
 8003ece:	9e05      	ldr	r6, [sp, #20]
 8003ed0:	ab48      	add	r3, sp, #288	; 0x120
 8003ed2:	441e      	add	r6, r3
 8003ed4:	462c      	mov	r4, r5
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	2100      	movs	r1, #0
 8003eda:	2c00      	cmp	r4, #0
 8003edc:	da33      	bge.n	8003f46 <__kernel_rem_pio2+0x5ce>
 8003ede:	f1bb 0f00 	cmp.w	fp, #0
 8003ee2:	d036      	beq.n	8003f52 <__kernel_rem_pio2+0x5da>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003eea:	9c04      	ldr	r4, [sp, #16]
 8003eec:	e9c4 2300 	strd	r2, r3, [r4]
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003ef8:	f7fc f996 	bl	8000228 <__aeabi_dsub>
 8003efc:	ae4a      	add	r6, sp, #296	; 0x128
 8003efe:	2401      	movs	r4, #1
 8003f00:	42a5      	cmp	r5, r4
 8003f02:	da29      	bge.n	8003f58 <__kernel_rem_pio2+0x5e0>
 8003f04:	f1bb 0f00 	cmp.w	fp, #0
 8003f08:	d002      	beq.n	8003f10 <__kernel_rem_pio2+0x598>
 8003f0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f0e:	4619      	mov	r1, r3
 8003f10:	9b04      	ldr	r3, [sp, #16]
 8003f12:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8003f16:	e7a1      	b.n	8003e5c <__kernel_rem_pio2+0x4e4>
 8003f18:	9c05      	ldr	r4, [sp, #20]
 8003f1a:	ab48      	add	r3, sp, #288	; 0x120
 8003f1c:	441c      	add	r4, r3
 8003f1e:	2000      	movs	r0, #0
 8003f20:	2100      	movs	r1, #0
 8003f22:	2d00      	cmp	r5, #0
 8003f24:	da09      	bge.n	8003f3a <__kernel_rem_pio2+0x5c2>
 8003f26:	f1bb 0f00 	cmp.w	fp, #0
 8003f2a:	d002      	beq.n	8003f32 <__kernel_rem_pio2+0x5ba>
 8003f2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f30:	4619      	mov	r1, r3
 8003f32:	9b04      	ldr	r3, [sp, #16]
 8003f34:	e9c3 0100 	strd	r0, r1, [r3]
 8003f38:	e790      	b.n	8003e5c <__kernel_rem_pio2+0x4e4>
 8003f3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003f3e:	f7fc f975 	bl	800022c <__adddf3>
 8003f42:	3d01      	subs	r5, #1
 8003f44:	e7ed      	b.n	8003f22 <__kernel_rem_pio2+0x5aa>
 8003f46:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003f4a:	f7fc f96f 	bl	800022c <__adddf3>
 8003f4e:	3c01      	subs	r4, #1
 8003f50:	e7c3      	b.n	8003eda <__kernel_rem_pio2+0x562>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	e7c8      	b.n	8003eea <__kernel_rem_pio2+0x572>
 8003f58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003f5c:	f7fc f966 	bl	800022c <__adddf3>
 8003f60:	3401      	adds	r4, #1
 8003f62:	e7cd      	b.n	8003f00 <__kernel_rem_pio2+0x588>
 8003f64:	e9da 8900 	ldrd	r8, r9, [sl]
 8003f68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003f6c:	9b00      	ldr	r3, [sp, #0]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	4632      	mov	r2, r6
 8003f74:	463b      	mov	r3, r7
 8003f76:	4640      	mov	r0, r8
 8003f78:	4649      	mov	r1, r9
 8003f7a:	f7fc f957 	bl	800022c <__adddf3>
 8003f7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f7fc f94d 	bl	8000228 <__aeabi_dsub>
 8003f8e:	4632      	mov	r2, r6
 8003f90:	463b      	mov	r3, r7
 8003f92:	f7fc f94b 	bl	800022c <__adddf3>
 8003f96:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003f9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8003f9e:	ed8a 7b00 	vstr	d7, [sl]
 8003fa2:	e770      	b.n	8003e86 <__kernel_rem_pio2+0x50e>
 8003fa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003fa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8003fac:	4640      	mov	r0, r8
 8003fae:	4632      	mov	r2, r6
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	f7fc f93a 	bl	800022c <__adddf3>
 8003fb8:	e9cd 0100 	strd	r0, r1, [sp]
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4640      	mov	r0, r8
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	f7fc f930 	bl	8000228 <__aeabi_dsub>
 8003fc8:	4632      	mov	r2, r6
 8003fca:	463b      	mov	r3, r7
 8003fcc:	f7fc f92e 	bl	800022c <__adddf3>
 8003fd0:	ed9d 7b00 	vldr	d7, [sp]
 8003fd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003fd8:	ed84 7b00 	vstr	d7, [r4]
 8003fdc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8003fe0:	e757      	b.n	8003e92 <__kernel_rem_pio2+0x51a>
 8003fe2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003fe6:	f7fc f921 	bl	800022c <__adddf3>
 8003fea:	3d01      	subs	r5, #1
 8003fec:	e75c      	b.n	8003ea8 <__kernel_rem_pio2+0x530>
 8003fee:	9b04      	ldr	r3, [sp, #16]
 8003ff0:	9a04      	ldr	r2, [sp, #16]
 8003ff2:	601f      	str	r7, [r3, #0]
 8003ff4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8003ff8:	605c      	str	r4, [r3, #4]
 8003ffa:	609d      	str	r5, [r3, #8]
 8003ffc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004000:	60d3      	str	r3, [r2, #12]
 8004002:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004006:	6110      	str	r0, [r2, #16]
 8004008:	6153      	str	r3, [r2, #20]
 800400a:	e727      	b.n	8003e5c <__kernel_rem_pio2+0x4e4>
 800400c:	41700000 	.word	0x41700000
 8004010:	3e700000 	.word	0x3e700000
 8004014:	00000000 	.word	0x00000000

08004018 <scalbn>:
 8004018:	b570      	push	{r4, r5, r6, lr}
 800401a:	ec55 4b10 	vmov	r4, r5, d0
 800401e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004022:	4606      	mov	r6, r0
 8004024:	462b      	mov	r3, r5
 8004026:	b999      	cbnz	r1, 8004050 <scalbn+0x38>
 8004028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800402c:	4323      	orrs	r3, r4
 800402e:	d03f      	beq.n	80040b0 <scalbn+0x98>
 8004030:	4b35      	ldr	r3, [pc, #212]	; (8004108 <scalbn+0xf0>)
 8004032:	4629      	mov	r1, r5
 8004034:	ee10 0a10 	vmov	r0, s0
 8004038:	2200      	movs	r2, #0
 800403a:	f7fc faad 	bl	8000598 <__aeabi_dmul>
 800403e:	4b33      	ldr	r3, [pc, #204]	; (800410c <scalbn+0xf4>)
 8004040:	429e      	cmp	r6, r3
 8004042:	4604      	mov	r4, r0
 8004044:	460d      	mov	r5, r1
 8004046:	da10      	bge.n	800406a <scalbn+0x52>
 8004048:	a327      	add	r3, pc, #156	; (adr r3, 80040e8 <scalbn+0xd0>)
 800404a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404e:	e01f      	b.n	8004090 <scalbn+0x78>
 8004050:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004054:	4291      	cmp	r1, r2
 8004056:	d10c      	bne.n	8004072 <scalbn+0x5a>
 8004058:	ee10 2a10 	vmov	r2, s0
 800405c:	4620      	mov	r0, r4
 800405e:	4629      	mov	r1, r5
 8004060:	f7fc f8e4 	bl	800022c <__adddf3>
 8004064:	4604      	mov	r4, r0
 8004066:	460d      	mov	r5, r1
 8004068:	e022      	b.n	80040b0 <scalbn+0x98>
 800406a:	460b      	mov	r3, r1
 800406c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004070:	3936      	subs	r1, #54	; 0x36
 8004072:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004076:	4296      	cmp	r6, r2
 8004078:	dd0d      	ble.n	8004096 <scalbn+0x7e>
 800407a:	2d00      	cmp	r5, #0
 800407c:	a11c      	add	r1, pc, #112	; (adr r1, 80040f0 <scalbn+0xd8>)
 800407e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004082:	da02      	bge.n	800408a <scalbn+0x72>
 8004084:	a11c      	add	r1, pc, #112	; (adr r1, 80040f8 <scalbn+0xe0>)
 8004086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800408a:	a319      	add	r3, pc, #100	; (adr r3, 80040f0 <scalbn+0xd8>)
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f7fc fa82 	bl	8000598 <__aeabi_dmul>
 8004094:	e7e6      	b.n	8004064 <scalbn+0x4c>
 8004096:	1872      	adds	r2, r6, r1
 8004098:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800409c:	428a      	cmp	r2, r1
 800409e:	dcec      	bgt.n	800407a <scalbn+0x62>
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	dd08      	ble.n	80040b6 <scalbn+0x9e>
 80040a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80040a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80040b0:	ec45 4b10 	vmov	d0, r4, r5
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
 80040b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80040ba:	da08      	bge.n	80040ce <scalbn+0xb6>
 80040bc:	2d00      	cmp	r5, #0
 80040be:	a10a      	add	r1, pc, #40	; (adr r1, 80040e8 <scalbn+0xd0>)
 80040c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040c4:	dac0      	bge.n	8004048 <scalbn+0x30>
 80040c6:	a10e      	add	r1, pc, #56	; (adr r1, 8004100 <scalbn+0xe8>)
 80040c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040cc:	e7bc      	b.n	8004048 <scalbn+0x30>
 80040ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80040d2:	3236      	adds	r2, #54	; 0x36
 80040d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80040d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80040dc:	4620      	mov	r0, r4
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <scalbn+0xf8>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	e7d5      	b.n	8004090 <scalbn+0x78>
 80040e4:	f3af 8000 	nop.w
 80040e8:	c2f8f359 	.word	0xc2f8f359
 80040ec:	01a56e1f 	.word	0x01a56e1f
 80040f0:	8800759c 	.word	0x8800759c
 80040f4:	7e37e43c 	.word	0x7e37e43c
 80040f8:	8800759c 	.word	0x8800759c
 80040fc:	fe37e43c 	.word	0xfe37e43c
 8004100:	c2f8f359 	.word	0xc2f8f359
 8004104:	81a56e1f 	.word	0x81a56e1f
 8004108:	43500000 	.word	0x43500000
 800410c:	ffff3cb0 	.word	0xffff3cb0
 8004110:	3c900000 	.word	0x3c900000
 8004114:	00000000 	.word	0x00000000

08004118 <floor>:
 8004118:	ec51 0b10 	vmov	r0, r1, d0
 800411c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8004128:	2e13      	cmp	r6, #19
 800412a:	ee10 5a10 	vmov	r5, s0
 800412e:	ee10 8a10 	vmov	r8, s0
 8004132:	460c      	mov	r4, r1
 8004134:	dc31      	bgt.n	800419a <floor+0x82>
 8004136:	2e00      	cmp	r6, #0
 8004138:	da14      	bge.n	8004164 <floor+0x4c>
 800413a:	a333      	add	r3, pc, #204	; (adr r3, 8004208 <floor+0xf0>)
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	f7fc f874 	bl	800022c <__adddf3>
 8004144:	2200      	movs	r2, #0
 8004146:	2300      	movs	r3, #0
 8004148:	f7fc fcb6 	bl	8000ab8 <__aeabi_dcmpgt>
 800414c:	b138      	cbz	r0, 800415e <floor+0x46>
 800414e:	2c00      	cmp	r4, #0
 8004150:	da53      	bge.n	80041fa <floor+0xe2>
 8004152:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8004156:	4325      	orrs	r5, r4
 8004158:	d052      	beq.n	8004200 <floor+0xe8>
 800415a:	4c2d      	ldr	r4, [pc, #180]	; (8004210 <floor+0xf8>)
 800415c:	2500      	movs	r5, #0
 800415e:	4621      	mov	r1, r4
 8004160:	4628      	mov	r0, r5
 8004162:	e024      	b.n	80041ae <floor+0x96>
 8004164:	4f2b      	ldr	r7, [pc, #172]	; (8004214 <floor+0xfc>)
 8004166:	4137      	asrs	r7, r6
 8004168:	ea01 0307 	and.w	r3, r1, r7
 800416c:	4303      	orrs	r3, r0
 800416e:	d01e      	beq.n	80041ae <floor+0x96>
 8004170:	a325      	add	r3, pc, #148	; (adr r3, 8004208 <floor+0xf0>)
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f7fc f859 	bl	800022c <__adddf3>
 800417a:	2200      	movs	r2, #0
 800417c:	2300      	movs	r3, #0
 800417e:	f7fc fc9b 	bl	8000ab8 <__aeabi_dcmpgt>
 8004182:	2800      	cmp	r0, #0
 8004184:	d0eb      	beq.n	800415e <floor+0x46>
 8004186:	2c00      	cmp	r4, #0
 8004188:	bfbe      	ittt	lt
 800418a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800418e:	4133      	asrlt	r3, r6
 8004190:	18e4      	addlt	r4, r4, r3
 8004192:	ea24 0407 	bic.w	r4, r4, r7
 8004196:	2500      	movs	r5, #0
 8004198:	e7e1      	b.n	800415e <floor+0x46>
 800419a:	2e33      	cmp	r6, #51	; 0x33
 800419c:	dd0b      	ble.n	80041b6 <floor+0x9e>
 800419e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80041a2:	d104      	bne.n	80041ae <floor+0x96>
 80041a4:	ee10 2a10 	vmov	r2, s0
 80041a8:	460b      	mov	r3, r1
 80041aa:	f7fc f83f 	bl	800022c <__adddf3>
 80041ae:	ec41 0b10 	vmov	d0, r0, r1
 80041b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041b6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80041ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041be:	40df      	lsrs	r7, r3
 80041c0:	4238      	tst	r0, r7
 80041c2:	d0f4      	beq.n	80041ae <floor+0x96>
 80041c4:	a310      	add	r3, pc, #64	; (adr r3, 8004208 <floor+0xf0>)
 80041c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ca:	f7fc f82f 	bl	800022c <__adddf3>
 80041ce:	2200      	movs	r2, #0
 80041d0:	2300      	movs	r3, #0
 80041d2:	f7fc fc71 	bl	8000ab8 <__aeabi_dcmpgt>
 80041d6:	2800      	cmp	r0, #0
 80041d8:	d0c1      	beq.n	800415e <floor+0x46>
 80041da:	2c00      	cmp	r4, #0
 80041dc:	da0a      	bge.n	80041f4 <floor+0xdc>
 80041de:	2e14      	cmp	r6, #20
 80041e0:	d101      	bne.n	80041e6 <floor+0xce>
 80041e2:	3401      	adds	r4, #1
 80041e4:	e006      	b.n	80041f4 <floor+0xdc>
 80041e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80041ea:	2301      	movs	r3, #1
 80041ec:	40b3      	lsls	r3, r6
 80041ee:	441d      	add	r5, r3
 80041f0:	45a8      	cmp	r8, r5
 80041f2:	d8f6      	bhi.n	80041e2 <floor+0xca>
 80041f4:	ea25 0507 	bic.w	r5, r5, r7
 80041f8:	e7b1      	b.n	800415e <floor+0x46>
 80041fa:	2500      	movs	r5, #0
 80041fc:	462c      	mov	r4, r5
 80041fe:	e7ae      	b.n	800415e <floor+0x46>
 8004200:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004204:	e7ab      	b.n	800415e <floor+0x46>
 8004206:	bf00      	nop
 8004208:	8800759c 	.word	0x8800759c
 800420c:	7e37e43c 	.word	0x7e37e43c
 8004210:	bff00000 	.word	0xbff00000
 8004214:	000fffff 	.word	0x000fffff

08004218 <memset>:
 8004218:	4402      	add	r2, r0
 800421a:	4603      	mov	r3, r0
 800421c:	4293      	cmp	r3, r2
 800421e:	d100      	bne.n	8004222 <memset+0xa>
 8004220:	4770      	bx	lr
 8004222:	f803 1b01 	strb.w	r1, [r3], #1
 8004226:	e7f9      	b.n	800421c <memset+0x4>

08004228 <__errno>:
 8004228:	4b01      	ldr	r3, [pc, #4]	; (8004230 <__errno+0x8>)
 800422a:	6818      	ldr	r0, [r3, #0]
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	200002a0 	.word	0x200002a0

08004234 <__libc_init_array>:
 8004234:	b570      	push	{r4, r5, r6, lr}
 8004236:	4d0d      	ldr	r5, [pc, #52]	; (800426c <__libc_init_array+0x38>)
 8004238:	4c0d      	ldr	r4, [pc, #52]	; (8004270 <__libc_init_array+0x3c>)
 800423a:	1b64      	subs	r4, r4, r5
 800423c:	10a4      	asrs	r4, r4, #2
 800423e:	2600      	movs	r6, #0
 8004240:	42a6      	cmp	r6, r4
 8004242:	d109      	bne.n	8004258 <__libc_init_array+0x24>
 8004244:	4d0b      	ldr	r5, [pc, #44]	; (8004274 <__libc_init_array+0x40>)
 8004246:	4c0c      	ldr	r4, [pc, #48]	; (8004278 <__libc_init_array+0x44>)
 8004248:	f000 f818 	bl	800427c <_init>
 800424c:	1b64      	subs	r4, r4, r5
 800424e:	10a4      	asrs	r4, r4, #2
 8004250:	2600      	movs	r6, #0
 8004252:	42a6      	cmp	r6, r4
 8004254:	d105      	bne.n	8004262 <__libc_init_array+0x2e>
 8004256:	bd70      	pop	{r4, r5, r6, pc}
 8004258:	f855 3b04 	ldr.w	r3, [r5], #4
 800425c:	4798      	blx	r3
 800425e:	3601      	adds	r6, #1
 8004260:	e7ee      	b.n	8004240 <__libc_init_array+0xc>
 8004262:	f855 3b04 	ldr.w	r3, [r5], #4
 8004266:	4798      	blx	r3
 8004268:	3601      	adds	r6, #1
 800426a:	e7f2      	b.n	8004252 <__libc_init_array+0x1e>
 800426c:	08004490 	.word	0x08004490
 8004270:	08004490 	.word	0x08004490
 8004274:	08004490 	.word	0x08004490
 8004278:	0800449c 	.word	0x0800449c

0800427c <_init>:
 800427c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427e:	bf00      	nop
 8004280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004282:	bc08      	pop	{r3}
 8004284:	469e      	mov	lr, r3
 8004286:	4770      	bx	lr

08004288 <_fini>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr
